format PE64 console 5.0
entry __MOLD_Main
include 'win64a.inc'
; ------------------------------------------------------------------------------
;                                 Code section
; ------------------------------------------------------------------------------
section '.text' code readable executable
stack 1024*1024*4, 1024*1024*4
include 'Variant.asm'
; -----------------------------------------------
; function __AST_constructor$0
; -----------------------------------------------
__AST_constructor$0:
  ; init frame
  ; ----------
  tmp1209 EQU rbp - 24 ; 16 bytes
  tmp1208 EQU rbp - 28 ; 4 bytes
  tmp1205 EQU rbp - 32 ; 4 bytes
  tmp1204 EQU rbp - 36 ; 4 bytes
  tmp1203 EQU rbp - 52 ; 16 bytes
  node EQU rbp - 68 ; 16 bytes
  child EQU rbp - 84 ; 16 bytes
  value EQU rbp - 100 ; 16 bytes
  opcode EQU rbp - 116 ; 16 bytes
  this EQU rbp - 132 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ child ], xmm0
  mov [node + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1203 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1209 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1203 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ NodeId ]
  mov [ tmp1203 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1203 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1203 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1203 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1203 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1203 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1203 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1203 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ tmp1203 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1205 ], 1
  mov eax, dword [ NodeId ]
  add eax, dword [ tmp1205 ]
  mov dword [ NodeId ], eax
  lea  rcx, [ node ]
  call __MOLD_VariantDestroy
  lea rcx, [ node ]
  lea rdx, [ child ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: while
;
l1206:
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1203 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1204 ], 0
  mov [ tmp1209 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1204 ]
  mov [ tmp1209 + Variant_t.value], rax
  lea rcx, [ tmp1203 ]
  lea rdx, [ tmp1209 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1207
  lea  rcx , [ node ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ this ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1209 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1209 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp1209 ]
  lea  rdx , [ node ]
  mov eax,  50
  call  __MOLD_SysCall
  lea  rcx , [ node ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantLoadFromKey
  jmp l1206
l1207:
;
; END: while
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ node ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1203 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1209 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore opcode
  restore value
  restore child
  restore node
  restore tmp1203
  restore tmp1204
  restore tmp1205
  restore tmp1208
  restore tmp1209
; -----------------------------------------------
; function __AST__printTreeInternal$0
; -----------------------------------------------
__AST__printTreeInternal$0:
  ; init frame
  ; ----------
  oneChild EQU rbp - 24 ; 16 bytes
  tmp1224 EQU rbp - 40 ; 16 bytes
  tmp1221 EQU rbp - 56 ; 16 bytes
  tmp1218 EQU rbp - 72 ; 16 bytes
  tmp1217 EQU rbp - 88 ; 16 bytes
  tmp1216 EQU rbp - 92 ; 4 bytes
  i EQU rbp - 96 ; 4 bytes
  tmp1215 EQU rbp - 112 ; 16 bytes
  tmp1212 EQU rbp - 116 ; 4 bytes
  tmp1211 EQU rbp - 120 ; 4 bytes
  tmp1210 EQU rbp - 124 ; 4 bytes
  prefix EQU rbp - 140 ; 16 bytes
  deepIdx EQU rbp - 156 ; 16 bytes
  node EQU rbp - 172 ; 16 bytes
  this EQU rbp - 188 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ deepIdx ], xmm0
  mov [prefix + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1215 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1217 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1218 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1221 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1224 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ prefix ]
  call __MOLD_VariantDestroy
  lea rcx, [ prefix ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
  mov dword [ tmp1210 ], 1
  cmp [ deepIdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ deepIdx + Variant_t.value]
  mov dword [ tmp1211 ], eax
  mov dword [ i ], 0
;
; -----------------------------
; BEGIN: for i in tmp1212 .. tmp1211
;
l1213:
  mov eax, dword [ i ]
  cmp eax, dword [ tmp1211 ]
  jge l1214
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal7 ]
  lea  r8 , [ prefix ]
  call  __MOLD_VariantStringJoin
  mov eax, dword [ i ]
  add eax, dword [ tmp1210 ]
  mov dword [ i ], eax
  jmp l1213
l1214:
;
; END: for i in tmp1212 .. tmp1211 step tmp1210
; -----------------------------
;
  lea  rcx, [ tmp1218 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1218 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1218 ]
  lea  rdi , [ tmp1217 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1212 ], 0
  mov [ tmp1218 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1212 ]
  mov [ tmp1218 + Variant_t.value], rax
  lea rcx, [ tmp1217 ]
  lea rdx, [ tmp1218 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1219
  lea  rcx, [ tmp1217 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1217 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1217 ]
  lea  rdi , [ tmp1218 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1221 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal8 ]
  lea  rdx , [ tmp1218 ]
  lea  r8 , [ tmp1221 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1215 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ tmp1221 ]
  lea  r8 , [ tmp1215 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1218 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1218 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1217 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1217 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ tmp1215 ]
  lea  r8 , [ tmp1218 ]
  lea  r9 , [ tmp1217 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l1220
l1219:
  lea  rcx, [ tmp1218 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1218 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1218 ]
  lea  rdi , [ tmp1217 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1221 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal8 ]
  lea  rdx , [ tmp1217 ]
  lea  r8 , [ tmp1221 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1215 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ tmp1221 ]
  lea  r8 , [ tmp1215 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1217 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1217 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp1215 ]
  lea  r8 , [ tmp1217 ]
  call  __MOLD_PrintArrayOfVariantsLn
l1220:
  lea  rcx, [ tmp1217 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1217 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l1223
l1222:
  mov dword [ tmp1212 ], 1
  mov [ tmp1224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1212 ]
  mov [ tmp1224 + Variant_t.value], rax
  lea  rcx , [ deepIdx ]
  lea  rdx , [ tmp1224 ]
  lea  r8 , [ tmp1218 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  r8 , [ tmp1218 ]
  call  __AST__printTreeInternal$0
  ret
l1223:
  lea  rcx , [ tmp1217 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l1222 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1217 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1218 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1224 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore node
  restore deepIdx
  restore prefix
  restore tmp1210
  restore tmp1211
  restore tmp1212
  restore tmp1215
  restore i
  restore tmp1216
  restore tmp1217
  restore tmp1218
  restore tmp1221
  restore tmp1224
  restore oneChild
; -----------------------------------------------
; function __AST_printTree$0
; -----------------------------------------------
__AST_printTree$0:
  ; init frame
  ; ----------
  tmp1226 EQU rbp - 24 ; 16 bytes
  tmp1225 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1226 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ __literal9 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal10 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal9 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp1225 ], 0
  mov [ tmp1226 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1225 ]
  mov [ tmp1226 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ this ]
  lea  r8 , [ tmp1226 ]
  call  __AST__printTreeInternal$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1226 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp1225
  restore tmp1226
; -----------------------------------------------
; function __Parser_constructor$0
; -----------------------------------------------
__Parser_constructor$0:
  ; init frame
  ; ----------
  tmp1227 EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1227 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1227 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1227 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal11 ]
  lea  r8 , [ tmp1227 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1227 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp1227
; -----------------------------------------------
; function __Parser__handleError$0
; -----------------------------------------------
__Parser__handleError$0:
  ; init frame
  ; ----------
  tmp1236 EQU rbp - 24 ; 16 bytes
  tmp1235 EQU rbp - 40 ; 16 bytes
  tmp1234 EQU rbp - 56 ; 16 bytes
  tmp1233 EQU rbp - 72 ; 16 bytes
  tmp1232 EQU rbp - 88 ; 16 bytes
  tmp1231 EQU rbp - 104 ; 16 bytes
  tmp1230 EQU rbp - 120 ; 16 bytes
  tmp1229 EQU rbp - 136 ; 16 bytes
  tmp1228 EQU rbp - 152 ; 16 bytes
  msg EQU rbp - 168 ; 16 bytes
  column EQU rbp - 184 ; 16 bytes
  line EQU rbp - 200 ; 16 bytes
  this EQU rbp - 216 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ line ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ column ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ msg ], xmm0
  mov [tmp1228 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1229 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1230 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1231 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1232 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1233 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1234 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1235 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1236 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1229 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1229 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ line ]
  lea  rdi , [ tmp1232 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ column ]
  lea  rdi , [ tmp1235 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1236 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal14 ]
  lea  rdx , [ msg ]
  lea  r8 , [ tmp1236 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1234 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1235 ]
  lea  rdx , [ tmp1236 ]
  lea  r8 , [ tmp1234 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1233 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal13 ]
  lea  rdx , [ tmp1234 ]
  lea  r8 , [ tmp1233 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1231 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1232 ]
  lea  rdx , [ tmp1233 ]
  lea  r8 , [ tmp1231 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal13 ]
  lea  rdx , [ tmp1231 ]
  lea  r8 , [ tmp1230 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1228 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1229 ]
  lea  rdx , [ tmp1230 ]
  lea  r8 , [ tmp1228 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp1228 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1229 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1232 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1235 ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore line
  restore column
  restore msg
  restore tmp1228
  restore tmp1229
  restore tmp1230
  restore tmp1231
  restore tmp1232
  restore tmp1233
  restore tmp1234
  restore tmp1235
  restore tmp1236
; -----------------------------------------------
; function __Parser__parseInternal$0
; -----------------------------------------------
__Parser__parseInternal$0:
  ; init frame
  ; ----------
  go EQU rbp - 24 ; 16 bytes
  goIdx EQU rbp - 28 ; 4 bytes
  node EQU rbp - 44 ; 16 bytes
  currentNode EQU rbp - 60 ; 16 bytes
  k EQU rbp - 64 ; 4 bytes
  prevNode EQU rbp - 80 ; 16 bytes
  lnode EQU rbp - 96 ; 16 bytes
  maxNodeIdx EQU rbp - 100 ; 4 bytes
  firstNode EQU rbp - 116 ; 16 bytes
  firstNodeIdx EQU rbp - 120 ; 4 bytes
  __cse1 EQU rbp - 136 ; 16 bytes
  __cse2 EQU rbp - 152 ; 16 bytes
  __cse0 EQU rbp - 168 ; 16 bytes
  currentEmit EQU rbp - 172 ; 4 bytes
  currentProductionLength EQU rbp - 176 ; 4 bytes
  reduceGoOn EQU rbp - 180 ; 4 bytes
  actionIdx EQU rbp - 184 ; 4 bytes
  cnt EQU rbp - 188 ; 4 bytes
  act EQU rbp - 204 ; 16 bytes
  state EQU rbp - 208 ; 4 bytes
  idx EQU rbp - 212 ; 4 bytes
  tmpBuf EQU rbp - 228 ; 16 bytes
  numberOfBytesToRead EQU rbp - 232 ; 4 bytes
  isMatched EQU rbp - 236 ; 4 bytes
  lexerState EQU rbp - 240 ; 4 bytes
  next EQU rbp - 244 ; 4 bytes
  chr EQU rbp - 248 ; 4 bytes
  length EQU rbp - 252 ; 4 bytes
  acceptRow EQU rbp - 268 ; 16 bytes
  indexRow EQU rbp - 284 ; 16 bytes
  indexBase EQU rbp - 300 ; 16 bytes
  mach EQU rbp - 304 ; 4 bytes
  tmp1369 EQU rbp - 308 ; 4 bytes
  tmp1364 EQU rbp - 312 ; 4 bytes
  tmp1361 EQU rbp - 316 ; 4 bytes
  tmp1356 EQU rbp - 320 ; 4 bytes
  tmp1353 EQU rbp - 324 ; 4 bytes
  tmp1344 EQU rbp - 340 ; 16 bytes
  tmp1318 EQU rbp - 356 ; 16 bytes
  tmp1287 EQU rbp - 360 ; 4 bytes
  tmp1284 EQU rbp - 364 ; 4 bytes
  tmp1274 EQU rbp - 368 ; 4 bytes
  tmp1272 EQU rbp - 372 ; 4 bytes
  tmp1265 EQU rbp - 376 ; 4 bytes
  tmp1263 EQU rbp - 380 ; 4 bytes
  tmp1262 EQU rbp - 384 ; 4 bytes
  tmp1258 EQU rbp - 388 ; 4 bytes
  tmp1249 EQU rbp - 392 ; 4 bytes
  tmp1248 EQU rbp - 396 ; 4 bytes
  tmp1245 EQU rbp - 412 ; 16 bytes
  tmp1244 EQU rbp - 428 ; 16 bytes
  tmp1243 EQU rbp - 444 ; 16 bytes
  tmp1242 EQU rbp - 460 ; 16 bytes
  tmp1239 EQU rbp - 464 ; 4 bytes
  tmp1238 EQU rbp - 468 ; 4 bytes
  tmp1237 EQU rbp - 484 ; 16 bytes
  currentLen EQU rbp - 488 ; 4 bytes
  currentSym EQU rbp - 492 ; 4 bytes
  buf EQU rbp - 508 ; 16 bytes
  stackColumns EQU rbp - 524 ; 16 bytes
  stackLines EQU rbp - 540 ; 16 bytes
  stackStates EQU rbp - 556 ; 16 bytes
  stackNodes EQU rbp - 572 ; 16 bytes
  stackValues EQU rbp - 588 ; 16 bytes
  stackIdx EQU rbp - 592 ; 4 bytes
  currentRet EQU rbp - 608 ; 16 bytes
  currentLhs EQU rbp - 612 ; 4 bytes
  currentIdx EQU rbp - 616 ; 4 bytes
  currentAct EQU rbp - 620 ; 4 bytes
  constantsMap EQU rbp - 636 ; 16 bytes
  lookupByte EQU rbp - 640 ; 4 bytes
  column EQU rbp - 644 ; 4 bytes
  line EQU rbp - 648 ; 4 bytes
  inputLen EQU rbp - 652 ; 4 bytes
  inputIdx EQU rbp - 656 ; 4 bytes
  input EQU rbp - 672 ; 16 bytes
  masterIter EQU rbp - 676 ; 4 bytes
  goOn EQU rbp - 680 ; 4 bytes
  ast EQU rdi
  text EQU rbp - 696 ; 16 bytes
  this EQU rbp - 712 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 752

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ text ], xmm0
  mov [input + Variant_t.type], VARIANT_UNDEFINED
  mov [constantsMap + Variant_t.type], VARIANT_UNDEFINED
  mov [currentRet + Variant_t.type], VARIANT_UNDEFINED
  mov [stackValues + Variant_t.type], VARIANT_UNDEFINED
  mov [stackNodes + Variant_t.type], VARIANT_UNDEFINED
  mov [stackStates + Variant_t.type], VARIANT_UNDEFINED
  mov [stackLines + Variant_t.type], VARIANT_UNDEFINED
  mov [stackColumns + Variant_t.type], VARIANT_UNDEFINED
  mov [buf + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1237 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1242 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1243 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1244 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1245 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1318 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1344 + Variant_t.type], VARIANT_UNDEFINED
  mov [indexBase + Variant_t.type], VARIANT_UNDEFINED
  mov [indexRow + Variant_t.type], VARIANT_UNDEFINED
  mov [acceptRow + Variant_t.type], VARIANT_UNDEFINED
  mov [tmpBuf + Variant_t.type], VARIANT_UNDEFINED
  mov [act + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse0 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse2 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse1 + Variant_t.type], VARIANT_UNDEFINED
  mov [firstNode + Variant_t.type], VARIANT_UNDEFINED
  mov [lnode + Variant_t.type], VARIANT_UNDEFINED
  mov [prevNode + Variant_t.type], VARIANT_UNDEFINED
  mov [currentNode + Variant_t.type], VARIANT_UNDEFINED
  mov [node + Variant_t.type], VARIANT_UNDEFINED
  mov [go + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy
  mov dword [ goOn ], 1
  mov dword [ masterIter ], 1
  lea  rcx, [ input ]
  call __MOLD_VariantDestroy
  lea rcx, [ input ]
  lea rdx, [ text ]
  call __MOLD_VariantMove
  mov dword [ inputIdx ], 0
  push rdi
  lea  rcx , [ text ]
  lea  rdi , [ tmp1237 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ inputLen ], eax
  mov dword [ line ], 1
  mov dword [ column ], 1
  mov dword [ lookupByte ], 0
  mov dword [ tmp1239 ], 0
  mov eax, dword [ inputLen ]
  cmp eax, dword [ tmp1239 ]
  jle l1240
  mov dword [ tmp1239 ], 0
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ input ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1242 ]
  lea  rdi , [ tmp1237 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ lookupByte ], eax
l1240:
l1241:
  mov dword [ inputIdx ], 1
  lea  rcx, [ constantsMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal11 ]
  lea  r8 , [ constantsMap ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ currentAct ], 0
  mov dword [ currentIdx ], 0
  mov dword [ currentLhs ], 0
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  mov dword [ stackIdx ], 0
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1242 + Variant_t.value], 0
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ stackValues ]
  call __MOLD_VariantDestroy
  lea rcx, [ stackValues ]
  lea rdx, [ tmp1237 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1243 + Variant_t.value], 0
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1243 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ stackNodes ]
  call __MOLD_VariantDestroy
  lea rcx, [ stackNodes ]
  lea rdx, [ tmp1237 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1242 + Variant_t.value], 0
  mov dword [ tmp1239 ], 0
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ stackStates ]
  call __MOLD_VariantDestroy
  lea rcx, [ stackStates ]
  lea rdx, [ tmp1237 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1243 + Variant_t.value], 0
  mov dword [ tmp1239 ], 0
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1242 + Variant_t.value], rax
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1243 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ stackLines ]
  call __MOLD_VariantDestroy
  lea rcx, [ stackLines ]
  lea rdx, [ tmp1237 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1242 + Variant_t.value], 0
  mov dword [ tmp1239 ], 0
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ stackColumns ]
  call __MOLD_VariantDestroy
  lea rcx, [ stackColumns ]
  lea rdx, [ tmp1237 ]
  call __MOLD_VariantMove
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ lookupByte ]
  mov [ tmp1243 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp1243 ]
  lea  rdi , [ tmp1237 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  32
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ buf ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal6 ]
  lea  rdx , [ tmp1237 ]
  lea  r8 , [ buf ]
  call  __MOLD_VariantStringJoin
  mov dword [ currentSym ], 0
  mov dword [ currentLen ], 0
;
; -----------------------------
; BEGIN: while
;
l1246:
  mov dword [ tmp1248 ], 1
  xor  eax, eax
  or   dword [ goOn ], eax
  setz cl
  or   dword [ tmp1248 ], eax
  setz al
  xor  al, cl
  jnz l1247
  mov dword [ tmp1249 ], 1
  xor  eax, eax
  or   dword [ SCANERLESS_MODE_ENABLED ], eax
  setz cl
  or   dword [ tmp1249 ], eax
  setz al
  xor  al, cl
  jnz l1250
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ LexerSelectLUT ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ mach ], eax
  mov dword [ currentSym ], 0
  mov dword [ currentLen ], 0
  jmp l1251
l1250:
  mov dword [ mach ], 0
l1251:
  lea  rcx, [ indexBase ]
  call __MOLD_VariantDestroy
  lea  rcx , [ LexerIndexBaseLUT ]
  lea  rdx , [ mach ]
  lea  r8 , [ indexBase ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ indexRow ]
  call __MOLD_VariantDestroy
  lea  rcx , [ LexerIndexLUT ]
  lea  rdx , [ mach ]
  lea  r8 , [ indexRow ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ acceptRow ]
  call __MOLD_VariantDestroy
  lea  rcx , [ LexerAcceptLUT ]
  lea  rdx , [ mach ]
  lea  r8 , [ acceptRow ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1248 ], 0
  mov dword [ tmp1239 ], -1
  mov eax, dword [ mach ]
  cmp eax, dword [ tmp1239 ]
  jle l1252
  mov dword [ tmp1239 ], 0
  mov dword [ tmp1248 ], 0
  mov ecx, dword [ currentSym ]
  cmp ecx, dword [ tmp1239 ]
  setz byte [ tmp1248 ]
l1252:
  cmp dword [ tmp1248 ], 0
  jz l1253
  mov dword [ length ], 0
  mov dword [ chr ], 0
  mov dword [ tmp1239 ], 0
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1243 ]
  lea  rdi , [ tmp1237 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ next ], eax
  mov dword [ lexerState ], 0
;
; -----------------------------
; BEGIN: while
;
l1255:
  mov dword [ tmp1249 ], 0
  mov dword [ tmp1239 ], 0
  mov eax, dword [ lexerState ]
  cmp eax, dword [ tmp1239 ]
  jl l1257
  mov dword [ tmp1239 ], 0
  mov dword [ tmp1249 ], 0
  mov ecx, dword [ next ]
  cmp ecx, dword [ tmp1239 ]
  setnz byte [ tmp1249 ]
l1257:
  cmp dword [ tmp1249 ], 0
  jz l1256
  mov dword [ isMatched ], 0
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ indexRow ]
  lea  rdx , [ lexerState ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ indexBase ]
  lea  rdx , [ tmp1243 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantAdd
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ chr ], eax
  mov dword [ lexerState ], -1
;
; -----------------------------
; BEGIN: while
;
l1259:
  mov dword [ tmp1258 ], 0
  mov dword [ tmp1263 ], 0
  xor  eax, eax
  or   dword [ isMatched ], eax
  setz cl
  or   dword [ tmp1263 ], eax
  setz al
  xor  al, cl
  jnz l1261
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ LexerCharsLUT ]
  lea  rdx , [ chr ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1239 ], -1
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1237 ]
  lea  r8 , [ tmp1258 ]
  call  __MOLD_VariantCompareLT
l1261:
  cmp dword [ tmp1258 ], 0
  jz l1260
  mov dword [ tmp1262 ], 0
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ next ]
  mov [ tmp1243 + Variant_t.value], rax
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ LexerCharsLUT ]
  lea  rdx , [ chr ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp1243 ]
  lea rdx, [ tmp1237 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l1264
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ next ]
  mov [ tmp1237 + Variant_t.value], rax
  mov dword [ tmp1265 ], 1
  mov eax, dword [ chr ]
  add eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ LexerCharsLUT ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1243 ]
  lea  r8 , [ tmp1262 ]
  call  __MOLD_VariantCompareLE
l1264:
  cmp dword [ tmp1262 ], 0
  jz l1266
  mov dword [ isMatched ], 1
  jmp l1267
l1266:
  mov dword [ tmp1265 ], 2
  mov eax, dword [ chr ]
  add eax, dword [ tmp1265 ]
  mov dword [ chr ], eax
l1267:
  jmp l1259
l1260:
;
; END: while
; -----------------------------
;
  mov dword [ tmp1263 ], 1
  xor  eax, eax
  or   dword [ isMatched ], eax
  setz cl
  or   dword [ tmp1263 ], eax
  setz al
  xor  al, cl
  jnz l1268
  mov dword [ tmp1265 ], 2
  mov  eax, dword [ chr ]
  mov  ecx, dword [ tmp1265 ]
  cdq
  idiv ecx
  mov  dword [ tmp1239 ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ LexerTransLUT ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1243 + Variant_t.value]
  mov dword [ lexerState ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ acceptRow ]
  lea  rdx , [ lexerState ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1239 ], 0
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1237 + Variant_t.value], rax
  lea rcx, [ tmp1243 ]
  lea rdx, [ tmp1237 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l1270
  mov dword [ tmp1265 ], 1
  mov eax, dword [ length ]
  add eax, dword [ tmp1265 ]
  mov dword [ currentLen ], eax
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ acceptRow ]
  lea  rdx , [ lexerState ]
  lea  r8 , [ tmp1243 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1239 ], 1
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1242 + Variant_t.value], rax
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantSub
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ currentSym ], eax
  mov dword [ tmp1272 ], 1
  mov dword [ tmp1239 ], 0
  mov eax, dword [ currentSym ]
  cmp eax, dword [ tmp1239 ]
  jz l1273
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ SymbolsGreedyLUT ]
  lea  rdx , [ currentSym ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1239 ], 0
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1242 + Variant_t.value], rax
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1272 ]
  call  __MOLD_VariantCompareEQ
l1273:
  cmp dword [ tmp1272 ], 0
  jz l1275
  mov dword [ lexerState ], -1
l1275:
l1276:
l1270:
l1271:
  mov dword [ tmp1265 ], 1
  mov eax, dword [ length ]
  add eax, dword [ tmp1265 ]
  mov dword [ length ], eax
  mov [ tmp1243 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ length ]
  mov [ tmp1243 + Variant_t.value], rax
  push rdi
  lea  rcx , [ buf ]
  lea  rdi , [ tmp1244 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantSub
  mov dword [ tmp1239 ], 2
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1244 + Variant_t.value], rax
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantAdd
  cmp [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1242 + Variant_t.value]
  mov dword [ numberOfBytesToRead ], eax
  mov dword [ tmp1239 ], 0
  mov eax, dword [ numberOfBytesToRead ]
  cmp eax, dword [ tmp1239 ]
  jle l1277
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ input ]
  lea  rdx , [ inputIdx ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1244 ]
  lea  rdi , [ tmp1242 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1242 + Variant_t.value]
  mov dword [ lookupByte ], eax
  mov dword [ tmp1265 ], 1
  mov eax, dword [ inputIdx ]
  add eax, dword [ tmp1265 ]
  mov dword [ inputIdx ], eax
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ lookupByte ]
  mov [ tmp1244 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp1244 ]
  lea  rdi , [ tmp1242 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  32
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ buf ]
  call  __MOLD_VariantStringJoin
l1277:
l1278:
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ length ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1244 ]
  lea  rdi , [ tmp1242 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1242 + Variant_t.value]
  mov dword [ next ], eax
l1268:
l1269:
  jmp l1255
l1256:
;
; END: while
; -----------------------------
;
l1253:
l1254:
  mov dword [ tmp1248 ], 0
  mov dword [ tmp1263 ], 0
  xor  eax, eax
  or   dword [ SCANERLESS_MODE_ENABLED ], eax
  setz cl
  or   dword [ tmp1263 ], eax
  setz al
  xor  al, cl
  jnz l1279
  mov dword [ tmp1239 ], 54
  mov dword [ tmp1248 ], 0
  mov ecx, dword [ currentSym ]
  cmp ecx, dword [ tmp1239 ]
  setz byte [ tmp1248 ]
l1279:
  cmp dword [ tmp1248 ], 0
  jz l1280
  mov dword [ tmp1239 ], 1
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp1265 .. currentLen
;
l1282:
  mov eax, dword [ idx ]
  cmp eax, dword [ currentLen ]
  jge l1283
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1244 ]
  lea  rdi , [ tmp1242 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1284 ], 10
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1284 ]
  mov [ tmp1244 + Variant_t.value], rax
  lea rcx, [ tmp1242 ]
  lea rdx, [ tmp1244 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1285
  mov dword [ tmp1287 ], 1
  mov eax, dword [ line ]
  add eax, dword [ tmp1287 ]
  mov dword [ line ], eax
  mov dword [ column ], 1
  jmp l1286
l1285:
  mov dword [ tmp1287 ], 1
  mov eax, dword [ column ]
  add eax, dword [ tmp1287 ]
  mov dword [ column ], eax
l1286:
  mov eax, dword [ idx ]
  add eax, dword [ tmp1239 ]
  mov dword [ idx ], eax
  jmp l1282
l1283:
;
; END: for idx in tmp1265 .. currentLen step tmp1239
; -----------------------------
;
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentLen ]
  mov [ tmp1242 + Variant_t.value], rax
  mov dword [ tmp1265 ], -1
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1265 ]
  mov [ tmp1237 + Variant_t.value], rax
  push rdi
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1237 ]
  lea  rdi , [ tmpBuf ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  55
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ buf ]
  call __MOLD_VariantDestroy
  lea rcx, [ buf ]
  lea rdx, [ tmpBuf ]
  call __MOLD_VariantMove
  mov dword [ currentSym ], 0
  mov dword [ currentLen ], 0
  jmp l1281
l1280:
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1244 + Variant_t.value]
  mov dword [ state ], eax
  lea  rcx, [ act ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ParserActionsLUT ]
  lea  rdx , [ state ]
  lea  r8 , [ act ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ act ]
  lea  rdi , [ tmp1244 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1244 + Variant_t.value]
  mov dword [ cnt ], eax
  mov dword [ currentAct ], -1
  mov dword [ actionIdx ], 0
;
; -----------------------------
; BEGIN: while
;
l1288:
  mov dword [ tmp1262 ], 0
  mov eax, dword [ actionIdx ]
  cmp eax, dword [ cnt ]
  jge l1290
  mov dword [ tmp1265 ], -1
  mov dword [ tmp1262 ], 0
  mov ecx, dword [ currentAct ]
  cmp ecx, dword [ tmp1265 ]
  setz byte [ tmp1262 ]
l1290:
  cmp dword [ tmp1262 ], 0
  jz l1289
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ act ]
  lea  rdx , [ actionIdx ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentSym ]
  mov [ tmp1237 + Variant_t.value], rax
  lea rcx, [ tmp1244 ]
  lea rdx, [ tmp1237 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1291
  mov dword [ tmp1239 ], 1
  mov eax, dword [ actionIdx ]
  add eax, dword [ tmp1239 ]
  mov dword [ tmp1265 ], eax
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ act ]
  lea  rdx , [ tmp1265 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ currentIdx ], eax
  mov dword [ tmp1239 ], 2
  mov eax, dword [ actionIdx ]
  add eax, dword [ tmp1239 ]
  mov dword [ tmp1265 ], eax
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ act ]
  lea  rdx , [ tmp1265 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ currentAct ], eax
l1291:
l1292:
  mov dword [ tmp1239 ], 3
  mov eax, dword [ actionIdx ]
  add eax, dword [ tmp1239 ]
  mov dword [ actionIdx ], eax
  jmp l1288
l1289:
;
; END: while
; -----------------------------
;
  mov dword [ tmp1265 ], -1
  mov eax, dword [ currentAct ]
  cmp eax, dword [ tmp1265 ]
  jnz l1293
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ParserActionsDefaultLUT ]
  lea  rdx , [ state ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ currentIdx ], eax
  mov dword [ tmp1265 ], -1
  mov eax, dword [ currentIdx ]
  cmp eax, dword [ tmp1265 ]
  jle l1295
  mov dword [ currentAct ], 1
  jmp l1296
l1295:
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1237 + Variant_t.value], rax
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1244 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp1237 ]
  lea  r8 , [ tmp1244 ]
  lea  r9 , [ __literal15 ]
  call  __Parser__handleError$0
l1296:
l1293:
l1294:
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentAct ]
  mov [ tmp1237 + Variant_t.value], rax
  mov dword [ tmp1265 ], 2
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1265 ]
  mov [ tmp1242 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1242 ]
  lea  rdi , [ tmp1244 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  35
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1265 ], 0
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1265 ]
  mov [ tmp1242 + Variant_t.value], rax
  lea rcx, [ tmp1244 ]
  lea rdx, [ tmp1242 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1297
  mov dword [ tmp1239 ], 1
  mov eax, dword [ stackIdx ]
  add eax, dword [ tmp1239 ]
  mov dword [ stackIdx ], eax
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentIdx ]
  mov [ tmp1242 + Variant_t.value], rax
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1242 + Variant_t.value], rax
  lea  rcx , [ stackLines ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1242 + Variant_t.value], rax
  lea  rcx , [ stackColumns ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp1239 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1239 ]
  mov dword [ tmp1265 ], eax
  mov dword [ tmp1239 ], 0
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1244 + Variant_t.value], rax
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentLen ]
  mov [ tmp1237 + Variant_t.value], rax
  push rdi
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ tmp1237 ]
  lea  rdi , [ tmp1242 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  55
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1265 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp1265 ], 1
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp1239 .. currentLen
;
l1299:
  mov eax, dword [ idx ]
  cmp eax, dword [ currentLen ]
  jge l1300
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buf ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1237 ]
  lea  rdi , [ tmp1242 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1284 ], 10
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1284 ]
  mov [ tmp1237 + Variant_t.value], rax
  lea rcx, [ tmp1242 ]
  lea rdx, [ tmp1237 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1301
  mov dword [ tmp1287 ], 1
  mov eax, dword [ line ]
  add eax, dword [ tmp1287 ]
  mov dword [ line ], eax
  mov dword [ column ], 1
  jmp l1302
l1301:
  mov dword [ tmp1287 ], 1
  mov eax, dword [ column ]
  add eax, dword [ tmp1287 ]
  mov dword [ column ], eax
l1302:
  mov eax, dword [ idx ]
  add eax, dword [ tmp1265 ]
  mov dword [ idx ], eax
  jmp l1299
l1300:
;
; END: for idx in tmp1239 .. currentLen step tmp1265
; -----------------------------
;
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentLen ]
  mov [ tmp1242 + Variant_t.value], rax
  mov dword [ tmp1239 ], -1
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1244 + Variant_t.value], rax
  push rdi
  lea  rcx , [ buf ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1244 ]
  lea  rdi , [ tmpBuf ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  55
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ buf ]
  call __MOLD_VariantDestroy
  lea rcx, [ buf ]
  lea rdx, [ tmpBuf ]
  call __MOLD_VariantMove
  mov dword [ currentSym ], 0
  mov dword [ currentLen ], 0
l1297:
l1298:
  mov dword [ reduceGoOn ], 1
;
; -----------------------------
; BEGIN: while
;
l1303:
  mov dword [ tmp1263 ], 0
  mov dword [ tmp1274 ], 1
  xor  eax, eax
  or   dword [ reduceGoOn ], eax
  setz cl
  or   dword [ tmp1274 ], eax
  setz al
  xor  al, cl
  jnz l1305
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentAct ]
  mov [ tmp1244 + Variant_t.value], rax
  mov dword [ tmp1239 ], 1
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1242 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp1244 ]
  lea  rdx , [ tmp1242 ]
  lea  rdi , [ tmp1237 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  35
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1239 ], 0
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1242 + Variant_t.value], rax
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1263 ]
  call  __MOLD_VariantCompareNE
l1305:
  cmp dword [ tmp1263 ], 0
  jz l1304
  mov dword [ tmp1265 ], 3
  mov ecx, dword [ tmp1265 ]
  imul ecx, dword [ currentIdx ]
  mov dword [ tmp1239 ], ecx
  mov [ __cse0 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ __cse0 + Variant_t.value], rax
  mov dword [ tmp1239 ], 2
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1244 + Variant_t.value], rax
  lea  rcx , [ __cse0 ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantAdd
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ GrammarProductionsLUT ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1242 + Variant_t.value]
  mov dword [ currentLhs ], eax
  mov dword [ tmp1239 ], 1
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1244 + Variant_t.value], rax
  lea  rcx , [ __cse0 ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantAdd
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ GrammarProductionsLUT ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1242 + Variant_t.value]
  mov dword [ currentProductionLength ], eax
  mov dword [ tmp1239 ], 0
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1244 + Variant_t.value], rax
  lea  rcx , [ __cse0 ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantAdd
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ GrammarProductionsLUT ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1242 + Variant_t.value]
  mov dword [ currentEmit ], eax
  mov eax, dword [ stackIdx ]
  sub eax, dword [ currentProductionLength ]
  mov dword [ tmp1239 ], eax
  mov [ __cse2 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ __cse2 + Variant_t.value], rax
  mov dword [ tmp1239 ], 1
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1244 + Variant_t.value], rax
  lea  rcx , [ __cse2 ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantAdd
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp dword [ currentIdx ], 5
  jl l1307
  cmp dword [ currentIdx ], 185
  jg l1307
  mov eax, dword [ currentIdx ]
  jmp qword [ __jmptable1308 + rax * 8]
l1309:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  jmp l1306
l1310:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal16 ]
  call __MOLD_VariantMove
  jmp l1306
l1311:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal17 ]
  call __MOLD_VariantMove
  jmp l1306
l1312:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal18 ]
  call __MOLD_VariantMove
  jmp l1306
l1313:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal19 ]
  call __MOLD_VariantMove
  jmp l1306
l1314:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal20 ]
  call __MOLD_VariantMove
  jmp l1306
l1315:
  mov dword [ tmp1265 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ constantsMap ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1237 ]
  lea  rdi , [ tmp1242 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1239 ], 0
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1237 + Variant_t.value], rax
  lea rcx, [ tmp1242 ]
  lea rdx, [ tmp1237 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1316
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1237 + Variant_t.value], rax
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1242 + Variant_t.value], rax
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp1318 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1244 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp1318 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1245 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal21 ]
  lea  rdx , [ tmp1318 ]
  lea  r8 , [ tmp1245 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp1237 ]
  lea  r8 , [ tmp1242 ]
  lea  r9 , [ tmp1245 ]
  call  __Parser__handleError$0
l1316:
l1317:
  mov dword [ tmp1265 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ constantsMap ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1265 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1306
l1319:
  mov dword [ tmp1265 ], 3
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1306
l1320:
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ currentRet ]
  lea  rdx , [ tmp1237 ]
  mov eax,  50
  call  __MOLD_SysCall
  jmp l1306
l1321:
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1306
l1322:
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1242 + Variant_t.value], 0
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ tmp1237 ]
  call __MOLD_VariantMove
  jmp l1306
l1323:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal23 ]
  call __MOLD_VariantMove
  jmp l1306
l1324:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal24 ]
  call __MOLD_VariantMove
  jmp l1306
l1325:
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ tmp1237 ]
  call __MOLD_VariantMove
  jmp l1306
l1326:
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1265 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ tmp1237 ]
  call __MOLD_VariantMove
  jmp l1306
l1327:
  mov dword [ tmp1265 ], 1
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1306
l1328:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentRet ]
  lea rdx, [ __literal27 ]
  call __MOLD_VariantMove
  jmp l1306
l1329:
  mov dword [ tmp1239 ], 1
  mov [ currentRet + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ currentRet + Variant_t.value], rax
  jmp l1306
l1330:
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentRet ]
  call  __MOLD_VariantArrayCreate
  jmp l1306
l1331:
  mov dword [ tmp1265 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1244 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantAdd
  jmp l1306
l1332:
  mov dword [ tmp1265 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1242 ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantSub
  jmp l1306
l1333:
  mov dword [ tmp1265 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1244 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantMul
  jmp l1306
l1334:
  mov dword [ tmp1265 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1242 ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantDiv
  jmp l1306
l1335:
  mov dword [ tmp1265 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1244 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantStringJoin
  jmp l1306
l1336:
  mov dword [ tmp1265 ], 2
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantDivAsInteger
  jmp l1306
l1337:
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1242 ]
  lea  rdx , [ currentRet ]
  call  __MOLD_VariantNeg
  jmp l1306
l1338:
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx , [ constantsMap ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ currentRet ]
  lea  rdi , [ tmp1244 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1239 ], 0
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1242 + Variant_t.value], rax
  lea rcx, [ tmp1244 ]
  lea rdx, [ tmp1242 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1339
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1242 + Variant_t.value], rax
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1244 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1244 ]
  lea  r9 , [ __literal28 ]
  call  __Parser__handleError$0
l1339:
l1340:
  jmp l1306
l1341:
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1242 ]
  lea  rdi , [ currentRet ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  33
  call  __MOLD_SysCall
  pop rdi
  jmp l1306
l1342:
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1242 ]
  lea  rdi , [ currentRet ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  34
  call  __MOLD_SysCall
  pop rdi
  jmp l1306
l1343:
  mov dword [ tmp1265 ], 0
  mov eax, dword [ stackIdx ]
  sub eax, dword [ tmp1265 ]
  mov dword [ tmp1239 ], eax
  lea  rcx, [ __cse1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackValues ]
  lea  rdx , [ tmp1239 ]
  lea  r8 , [ __cse1 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp1239 ], 1
  mov [ tmp1242 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1242 + Variant_t.value], rax
  push rdi
  lea  rcx , [ __cse1 ]
  lea  rdi , [ tmp1243 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1239 ], 2
  mov [ tmp1344 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1344 + Variant_t.value], rax
  lea  rcx , [ tmp1243 ]
  lea  rdx , [ tmp1344 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantSub
  push rdi
  lea  rcx , [ __cse1 ]
  lea  rdx , [ tmp1242 ]
  lea  r8 , [ tmp1237 ]
  lea  rdi , [ currentRet ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  55
  call  __MOLD_SysCall
  pop rdi
  jmp l1306
l1345:
  mov dword [ tmp1272 ], 1
  mov eax, dword [ tmp1272 ]
  mov [ currentRet + Variant_t.type], VARIANT_BOOLEAN
  mov [ currentRet + Variant_t.value], rax
  jmp l1306
l1346:
  mov dword [ tmp1272 ], 0
  mov eax, dword [ tmp1272 ]
  mov [ currentRet + Variant_t.type], VARIANT_BOOLEAN
  mov [ currentRet + Variant_t.value], rax
  jmp l1306
l1347:
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1244 + Variant_t.value], rax
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1237 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ tmp1237 ]
  lea  r9 , [ __literal29 ]
  call  __Parser__handleError$0
  jmp l1306
l1307:
l1306:
  cmp [ __cse2 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ __cse2 + Variant_t.value]
  mov dword [ stackIdx ], eax
  mov dword [ tmp1239 ], 1
  mov eax, dword [ currentProductionLength ]
  cmp eax, dword [ tmp1239 ]
  jle l1348
  mov dword [ tmp1265 ], 1
  mov eax, dword [ stackIdx ]
  add eax, dword [ tmp1265 ]
  mov dword [ firstNodeIdx ], eax
  lea  rcx, [ firstNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ firstNodeIdx ]
  lea  r8 , [ firstNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov eax, dword [ stackIdx ]
  add eax, dword [ currentProductionLength ]
  mov dword [ maxNodeIdx ], eax
;
; -----------------------------
; BEGIN: while
;
l1350:
  mov dword [ tmp1274 ], 0
  push rdi
  lea  rcx , [ firstNode ]
  lea  rdi , [ tmp1237 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1239 ], 0
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1244 + Variant_t.value], rax
  lea rcx, [ tmp1237 ]
  lea rdx, [ tmp1244 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1352
  mov dword [ tmp1274 ], 0
  mov ecx, dword [ firstNodeIdx ]
  cmp ecx, dword [ maxNodeIdx ]
  setl byte [ tmp1274 ]
l1352:
  cmp dword [ tmp1274 ], 0
  jz l1351
  mov dword [ tmp1265 ], 1
  mov eax, dword [ firstNodeIdx ]
  add eax, dword [ tmp1265 ]
  mov dword [ firstNodeIdx ], eax
  lea  rcx, [ firstNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ firstNodeIdx ]
  lea  r8 , [ firstNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1350
l1351:
;
; END: while
; -----------------------------
;
  push rdi
  lea  rcx , [ firstNode ]
  lea  rdi , [ tmp1244 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1239 ], 0
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1237 + Variant_t.value], rax
  lea rcx, [ tmp1244 ]
  lea rdx, [ tmp1237 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1354
  lea  rcx, [ lnode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ lnode ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ lnode ]
  lea  rdi , [ tmp1237 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1239 ], 0
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1239 ]
  mov [ tmp1244 + Variant_t.value], rax
  lea rcx, [ tmp1237 ]
  lea rdx, [ tmp1244 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1357
  lea  rcx, [ prevNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ prevNode ]
  lea rdx, [ lnode ]
  call __MOLD_VariantMove
  jmp l1358
l1357:
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ firstNode ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ prevNode ]
  call __MOLD_VariantDestroy
l1358:
  mov dword [ tmp1239 ], 1
  mov dword [ k ], 0
;
; -----------------------------
; BEGIN: for k in tmp1265 .. currentProductionLength
;
l1359:
  mov eax, dword [ k ]
  cmp eax, dword [ currentProductionLength ]
  jge l1360
  mov eax, dword [ stackIdx ]
  add eax, dword [ k ]
  mov dword [ tmp1287 ], eax
  mov dword [ tmp1361 ], 1
  mov eax, dword [ tmp1287 ]
  add eax, dword [ tmp1361 ]
  mov dword [ tmp1284 ], eax
  lea  rcx, [ currentNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ tmp1284 ]
  lea  r8 , [ currentNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ currentNode ]
  lea  rdi , [ tmp1244 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1284 ], 0
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1284 ]
  mov [ tmp1237 + Variant_t.value], rax
  lea rcx, [ tmp1244 ]
  lea rdx, [ tmp1237 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1362
  push rdi
  lea  rcx , [ prevNode ]
  lea  rdi , [ tmp1237 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1284 ], 0
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1284 ]
  mov [ tmp1244 + Variant_t.value], rax
  lea rcx, [ tmp1237 ]
  lea rdx, [ tmp1244 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1365
;
; -----------------------------
; BEGIN: while
;
l1367:
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prevNode ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1237 ]
  lea  rdi , [ tmp1244 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1284 ], 0
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1284 ]
  mov [ tmp1237 + Variant_t.value], rax
  lea rcx, [ tmp1244 ]
  lea rdx, [ tmp1237 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1368
  lea  rcx , [ prevNode ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ prevNode ]
  call  __MOLD_VariantLoadFromKey
  jmp l1367
l1368:
;
; END: while
; -----------------------------
;
  lea  rcx , [ prevNode ]
  lea  rdx , [ __literal5 ]
  lea  r8 , [ currentNode ]
  call  __MOLD_VariantStoreAtKey
l1365:
l1366:
  lea  rcx, [ prevNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ prevNode ]
  lea rdx, [ currentNode ]
  call __MOLD_VariantMove
l1362:
l1363:
  mov eax, dword [ k ]
  add eax, dword [ tmp1239 ]
  mov dword [ k ], eax
  jmp l1359
l1360:
;
; END: for k in tmp1265 .. currentProductionLength step tmp1239
; -----------------------------
;
l1354:
l1355:
l1348:
l1349:
  mov dword [ tmp1265 ], 0
  mov eax, dword [ currentEmit ]
  cmp eax, dword [ tmp1265 ]
  jz l1370
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1237 ]
  lea  rdx, [vtable_AST]
  call __MOLD_VariantObjectCreate
  mov [ tmp1244 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentEmit ]
  mov [ tmp1244 + Variant_t.value], rax
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1242 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1237 ]
  lea  rdx , [ tmp1244 ]
  lea  r8 , [ currentRet ]
  lea  r9 , [ tmp1242 ]
  lea  rdi , [ tmp1344 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AST_constructor$0
  pop rdi
  lea  rcx, [ node ]
  call __MOLD_VariantDestroy
  lea rcx, [ node ]
  lea rdx, [ tmp1237 ]
  call __MOLD_VariantMove
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1237 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1237 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal31 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantStoreAtKey
l1370:
l1371:
  mov dword [ tmp1265 ], 142
  mov eax, dword [ currentLhs ]
  cmp eax, dword [ tmp1265 ]
  jnz l1372
  mov dword [ reduceGoOn ], 0
  jmp l1373
l1372:
  mov dword [ goIdx ], 0
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ state ], eax
  lea  rcx, [ go ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ParserGotoLUT ]
  lea  rdx , [ state ]
  lea  r8 , [ go ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ go ]
  lea  rdi , [ tmp1237 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp1237 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1237 + Variant_t.value]
  mov dword [ cnt ], eax
  mov dword [ currentAct ], -1
;
; -----------------------------
; BEGIN: while
;
l1374:
  mov dword [ tmp1353 ], 0
  mov eax, dword [ goIdx ]
  cmp eax, dword [ cnt ]
  jge l1376
  mov dword [ tmp1265 ], -1
  mov dword [ tmp1353 ], 0
  mov ecx, dword [ currentAct ]
  cmp ecx, dword [ tmp1265 ]
  setz byte [ tmp1353 ]
l1376:
  cmp dword [ tmp1353 ], 0
  jz l1375
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ go ]
  lea  rdx , [ goIdx ]
  lea  r8 , [ tmp1237 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov [ tmp1344 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentLhs ]
  mov [ tmp1344 + Variant_t.value], rax
  lea rcx, [ tmp1237 ]
  lea rdx, [ tmp1344 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1377
  mov dword [ tmp1239 ], 1
  mov eax, dword [ goIdx ]
  add eax, dword [ tmp1239 ]
  mov dword [ tmp1265 ], eax
  lea  rcx, [ tmp1344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ go ]
  lea  rdx , [ tmp1265 ]
  lea  r8 , [ tmp1344 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1344 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1344 + Variant_t.value]
  mov dword [ currentIdx ], eax
  mov dword [ tmp1239 ], 2
  mov eax, dword [ goIdx ]
  add eax, dword [ tmp1239 ]
  mov dword [ tmp1265 ], eax
  lea  rcx, [ tmp1344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ go ]
  lea  rdx , [ tmp1265 ]
  lea  r8 , [ tmp1344 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp1344 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1344 + Variant_t.value]
  mov dword [ currentAct ], eax
l1377:
l1378:
  mov dword [ tmp1239 ], 3
  mov eax, dword [ goIdx ]
  add eax, dword [ tmp1239 ]
  mov dword [ goIdx ], eax
  jmp l1374
l1375:
;
; END: while
; -----------------------------
;
  mov dword [ tmp1239 ], 1
  mov eax, dword [ stackIdx ]
  add eax, dword [ tmp1239 ]
  mov dword [ stackIdx ], eax
  lea  rcx, [ tmp1344 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1344 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx , [ stackValues ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ currentRet ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov [ tmp1344 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ line ]
  mov [ tmp1344 + Variant_t.value], rax
  lea  rcx , [ stackLines ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1344 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov [ tmp1344 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ column ]
  mov [ tmp1344 + Variant_t.value], rax
  lea  rcx , [ stackColumns ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1344 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov [ tmp1344 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentIdx ]
  mov [ tmp1344 + Variant_t.value], rax
  lea  rcx , [ stackStates ]
  lea  rdx , [ stackIdx ]
  lea  r8 , [ tmp1344 ]
  call  __MOLD_VariantStoreAtIndex_int32
l1373:
  jmp l1303
l1304:
;
; END: while
; -----------------------------
;
  mov dword [ tmp1265 ], 0
  mov eax, dword [ currentIdx ]
  cmp eax, dword [ tmp1265 ]
  jnz l1379
  mov dword [ goOn ], 0
l1379:
l1380:
  mov dword [ tmp1239 ], 1
  mov eax, dword [ masterIter ]
  add eax, dword [ tmp1239 ]
  mov dword [ masterIter ], eax
  mov dword [ tmp1265 ], 1000000
  mov eax, dword [ masterIter ]
  cmp eax, dword [ tmp1265 ]
  jle l1381
  lea  rcx , [ __literal32 ]
  mov eax,  41
  call  __MOLD_SysCall
l1381:
l1382:
l1281:
  jmp l1246
l1247:
;
; END: while
; -----------------------------
;
  mov dword [ tmp1265 ], 0
  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stackNodes ]
  lea  rdx , [ tmp1265 ]
  lea  r8 , [ ast ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; clean frame
  ; -----------
  lea  rcx, [ input ]
  call __MOLD_VariantDestroy
  lea  rcx, [ constantsMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentRet ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackValues ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackNodes ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackStates ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackLines ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stackColumns ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1237 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1242 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1243 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1244 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1344 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ indexBase ]
  call __MOLD_VariantDestroy
  lea  rcx, [ indexRow ]
  call __MOLD_VariantDestroy
  lea  rcx, [ acceptRow ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmpBuf ]
  call __MOLD_VariantDestroy
  lea  rcx, [ act ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse0 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ firstNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lnode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ prevNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ node ]
  call __MOLD_VariantDestroy
  lea  rcx, [ go ]
  call __MOLD_VariantDestroy

  add  rsp, 752
  pop  rbp
  ret

  restore this
  restore text
  restore ast
  restore goOn
  restore masterIter
  restore input
  restore inputIdx
  restore inputLen
  restore line
  restore column
  restore lookupByte
  restore constantsMap
  restore currentAct
  restore currentIdx
  restore currentLhs
  restore currentRet
  restore stackIdx
  restore stackValues
  restore stackNodes
  restore stackStates
  restore stackLines
  restore stackColumns
  restore buf
  restore currentSym
  restore currentLen
  restore tmp1237
  restore tmp1238
  restore tmp1239
  restore tmp1242
  restore tmp1243
  restore tmp1244
  restore tmp1245
  restore tmp1248
  restore tmp1249
  restore tmp1258
  restore tmp1262
  restore tmp1263
  restore tmp1265
  restore tmp1272
  restore tmp1274
  restore tmp1284
  restore tmp1287
  restore tmp1318
  restore tmp1344
  restore tmp1353
  restore tmp1356
  restore tmp1361
  restore tmp1364
  restore tmp1369
  restore mach
  restore indexBase
  restore indexRow
  restore acceptRow
  restore length
  restore chr
  restore next
  restore lexerState
  restore isMatched
  restore numberOfBytesToRead
  restore tmpBuf
  restore idx
  restore state
  restore act
  restore cnt
  restore actionIdx
  restore reduceGoOn
  restore currentProductionLength
  restore currentEmit
  restore __cse0
  restore __cse2
  restore __cse1
  restore firstNodeIdx
  restore firstNode
  restore maxNodeIdx
  restore lnode
  restore prevNode
  restore k
  restore currentNode
  restore node
  restore goIdx
  restore go
; -----------------------------------------------
; function __Parser_parseFile$0
; -----------------------------------------------
__Parser_parseFile$0:
  ; init frame
  ; ----------
  tmp1383 EQU rbp - 24 ; 16 bytes
  ast EQU rdi
  source EQU rbp - 40 ; 16 bytes
  path EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ path ], xmm0
  mov [source + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1383 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ path ]
  lea  rdi , [ source ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  29
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ path ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ source ]
  lea  rdi , [ tmp1383 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser__parseInternal$0
  pop rdi
  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy
  lea rcx, [ ast ]
  lea rdx, [ tmp1383 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ source ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1383 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore path
  restore source
  restore ast
  restore tmp1383
; -----------------------------------------------
; function __Parser_parseText$0
; -----------------------------------------------
__Parser_parseText$0:
  ; init frame
  ; ----------
  tmp1384 EQU rbp - 24 ; 16 bytes
  ast EQU rdi
  text EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ text ], xmm0
  mov [tmp1384 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ __literal6 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ text ]
  lea  rdi , [ tmp1384 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser__parseInternal$0
  pop rdi
  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy
  lea rcx, [ ast ]
  lea rdx, [ tmp1384 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1384 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore text
  restore ast
  restore tmp1384
; -----------------------------------------------
; function AST_GetNextId
; -----------------------------------------------
AST_GetNextId:
  ; init frame
  ; ----------
  tmp1386 EQU rbp - 12 ; 4 bytes
  tmp1385 EQU rbp - 16 ; 4 bytes
  rv EQU rdi

  push rbp
  mov  rbp, rsp
  sub  rsp, 48


  ; code
  ; ----
  mov eax, dword [ NodeId ]
  mov dword [ rv ], eax
  mov dword [ tmp1386 ], 1
  mov eax, dword [ NodeId ]
  add eax, dword [ tmp1386 ]
  mov dword [ NodeId ], eax

  ; clean frame
  ; -----------

  add  rsp, 48
  pop  rbp
  ret

  restore rv
  restore tmp1385
  restore tmp1386
; -----------------------------------------------
; function AST_CreateNodeInteger
; -----------------------------------------------
AST_CreateNodeInteger:
  ; init frame
  ; ----------
  tmp1390 EQU rbp - 24 ; 16 bytes
  tmp1389 EQU rbp - 28 ; 4 bytes
  tmp1388 EQU rbp - 44 ; 16 bytes
  tmp1387 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  value EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ value ], xmm0
  mov [tmp1387 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1388 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1390 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1387 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1387 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp1389 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp1388 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1389 ]
  mov [ tmp1388 + Variant_t.value], rax
  lea  rcx , [ tmp1387 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1388 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1388 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_DATA_INTEGER ]
  mov [ tmp1388 + Variant_t.value], rax
  lea  rcx , [ tmp1387 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1388 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1388 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1388 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1387 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1388 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1388 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1388 ]
  lea rdx, [ value ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1387 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1388 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1387 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1387 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1388 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1390 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore value
  restore rv
  restore tmp1387
  restore tmp1388
  restore tmp1389
  restore tmp1390
; -----------------------------------------------
; function AST_CreateNodeString
; -----------------------------------------------
AST_CreateNodeString:
  ; init frame
  ; ----------
  tmp1394 EQU rbp - 24 ; 16 bytes
  tmp1393 EQU rbp - 28 ; 4 bytes
  tmp1392 EQU rbp - 44 ; 16 bytes
  tmp1391 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  value EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ value ], xmm0
  mov [tmp1391 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1392 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1394 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1391 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1391 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp1393 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp1392 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1393 ]
  mov [ tmp1392 + Variant_t.value], rax
  lea  rcx , [ tmp1391 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1392 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1392 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_DATA_STRING ]
  mov [ tmp1392 + Variant_t.value], rax
  lea  rcx , [ tmp1391 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1392 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1392 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1392 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1391 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1392 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1392 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1392 ]
  lea rdx, [ value ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1391 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1392 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1391 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1391 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1392 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1394 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore value
  restore rv
  restore tmp1391
  restore tmp1392
  restore tmp1393
  restore tmp1394
; -----------------------------------------------
; function AST_GetOpcodeAsText
; -----------------------------------------------
AST_GetOpcodeAsText:
  ; init frame
  ; ----------
  tmp1441 EQU rbp - 24 ; 16 bytes
  tmp1440 EQU rbp - 40 ; 16 bytes
  tmp1439 EQU rbp - 56 ; 16 bytes
  tmp1438 EQU rbp - 72 ; 16 bytes
  rv EQU rdi
  opcode EQU rbp - 76 ; 4 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  mov eax, dword [ rcx ]
  mov dword [ opcode ], eax
  mov [tmp1438 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1439 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1440 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1441 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  cmp dword [ opcode ], 1
  jl l1396
  cmp dword [ opcode ], 76
  jg l1396
  mov eax, dword [ opcode ]
  jmp qword [ __jmptable1397 + rax * 8]
l1398:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal36 ]
  call __MOLD_VariantMove
  jmp l1395
l1399:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal37 ]
  call __MOLD_VariantMove
  jmp l1395
l1400:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal38 ]
  call __MOLD_VariantMove
  jmp l1395
l1401:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal39 ]
  call __MOLD_VariantMove
  jmp l1395
l1402:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal40 ]
  call __MOLD_VariantMove
  jmp l1395
l1403:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal41 ]
  call __MOLD_VariantMove
  jmp l1395
l1404:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal42 ]
  call __MOLD_VariantMove
  jmp l1395
l1405:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal43 ]
  call __MOLD_VariantMove
  jmp l1395
l1406:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal44 ]
  call __MOLD_VariantMove
  jmp l1395
l1407:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal45 ]
  call __MOLD_VariantMove
  jmp l1395
l1408:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal46 ]
  call __MOLD_VariantMove
  jmp l1395
l1409:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal47 ]
  call __MOLD_VariantMove
  jmp l1395
l1410:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal48 ]
  call __MOLD_VariantMove
  jmp l1395
l1411:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal49 ]
  call __MOLD_VariantMove
  jmp l1395
l1412:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal50 ]
  call __MOLD_VariantMove
  jmp l1395
l1413:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal51 ]
  call __MOLD_VariantMove
  jmp l1395
l1414:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal52 ]
  call __MOLD_VariantMove
  jmp l1395
l1415:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal53 ]
  call __MOLD_VariantMove
  jmp l1395
l1416:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal54 ]
  call __MOLD_VariantMove
  jmp l1395
l1417:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal55 ]
  call __MOLD_VariantMove
  jmp l1395
l1418:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal56 ]
  call __MOLD_VariantMove
  jmp l1395
l1419:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal57 ]
  call __MOLD_VariantMove
  jmp l1395
l1420:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal58 ]
  call __MOLD_VariantMove
  jmp l1395
l1421:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal59 ]
  call __MOLD_VariantMove
  jmp l1395
l1422:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal60 ]
  call __MOLD_VariantMove
  jmp l1395
l1423:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal61 ]
  call __MOLD_VariantMove
  jmp l1395
l1424:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal62 ]
  call __MOLD_VariantMove
  jmp l1395
l1425:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal63 ]
  call __MOLD_VariantMove
  jmp l1395
l1426:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal64 ]
  call __MOLD_VariantMove
  jmp l1395
l1427:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal65 ]
  call __MOLD_VariantMove
  jmp l1395
l1428:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal66 ]
  call __MOLD_VariantMove
  jmp l1395
l1429:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal67 ]
  call __MOLD_VariantMove
  jmp l1395
l1430:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal68 ]
  call __MOLD_VariantMove
  jmp l1395
l1431:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal69 ]
  call __MOLD_VariantMove
  jmp l1395
l1432:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal70 ]
  call __MOLD_VariantMove
  jmp l1395
l1433:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal71 ]
  call __MOLD_VariantMove
  jmp l1395
l1434:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal72 ]
  call __MOLD_VariantMove
  jmp l1395
l1435:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal73 ]
  call __MOLD_VariantMove
  jmp l1395
l1436:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal74 ]
  call __MOLD_VariantMove
  jmp l1395
l1437:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal75 ]
  call __MOLD_VariantMove
  jmp l1395
l1396:
  mov [ tmp1441 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1441 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp1441 ]
  lea  rdi , [ tmp1440 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1439 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1440 ]
  lea  rdx , [ __literal77 ]
  lea  r8 , [ tmp1439 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal76 ]
  lea  rdx , [ tmp1439 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
l1395:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1440 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1441 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore opcode
  restore rv
  restore tmp1438
  restore tmp1439
  restore tmp1440
  restore tmp1441
; -----------------------------------------------
; function AST_GetOpcodeAsShortText
; -----------------------------------------------
AST_GetOpcodeAsShortText:
  ; init frame
  ; ----------
  tmp1486 EQU rbp - 24 ; 16 bytes
  tmp1485 EQU rbp - 40 ; 16 bytes
  tmp1484 EQU rbp - 56 ; 16 bytes
  rv EQU rdi
  opcode EQU rbp - 60 ; 4 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  mov eax, dword [ rcx ]
  mov dword [ opcode ], eax
  mov [tmp1484 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1485 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1486 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  cmp dword [ opcode ], 1
  jl l1443
  cmp dword [ opcode ], 76
  jg l1443
  mov eax, dword [ opcode ]
  jmp qword [ __jmptable1444 + rax * 8]
l1445:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal78 ]
  call __MOLD_VariantMove
  jmp l1442
l1446:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal79 ]
  call __MOLD_VariantMove
  jmp l1442
l1447:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal80 ]
  call __MOLD_VariantMove
  jmp l1442
l1448:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal81 ]
  call __MOLD_VariantMove
  jmp l1442
l1449:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal82 ]
  call __MOLD_VariantMove
  jmp l1442
l1450:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal83 ]
  call __MOLD_VariantMove
  jmp l1442
l1451:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal84 ]
  call __MOLD_VariantMove
  jmp l1442
l1452:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal85 ]
  call __MOLD_VariantMove
  jmp l1442
l1453:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal86 ]
  call __MOLD_VariantMove
  jmp l1442
l1454:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal87 ]
  call __MOLD_VariantMove
  jmp l1442
l1455:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal88 ]
  call __MOLD_VariantMove
  jmp l1442
l1456:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal89 ]
  call __MOLD_VariantMove
  jmp l1442
l1457:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal90 ]
  call __MOLD_VariantMove
  jmp l1442
l1458:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal91 ]
  call __MOLD_VariantMove
  jmp l1442
l1459:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal92 ]
  call __MOLD_VariantMove
  jmp l1442
l1460:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal93 ]
  call __MOLD_VariantMove
  jmp l1442
l1461:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal94 ]
  call __MOLD_VariantMove
  jmp l1442
l1462:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal95 ]
  call __MOLD_VariantMove
  jmp l1442
l1463:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal96 ]
  call __MOLD_VariantMove
  jmp l1442
l1464:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal97 ]
  call __MOLD_VariantMove
  jmp l1442
l1465:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal98 ]
  call __MOLD_VariantMove
  jmp l1442
l1466:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal99 ]
  call __MOLD_VariantMove
  jmp l1442
l1467:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal100 ]
  call __MOLD_VariantMove
  jmp l1442
l1468:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal101 ]
  call __MOLD_VariantMove
  jmp l1442
l1469:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal102 ]
  call __MOLD_VariantMove
  jmp l1442
l1470:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal103 ]
  call __MOLD_VariantMove
  jmp l1442
l1471:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal104 ]
  call __MOLD_VariantMove
  jmp l1442
l1472:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal105 ]
  call __MOLD_VariantMove
  jmp l1442
l1473:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal106 ]
  call __MOLD_VariantMove
  jmp l1442
l1474:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal107 ]
  call __MOLD_VariantMove
  jmp l1442
l1475:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal108 ]
  call __MOLD_VariantMove
  jmp l1442
l1476:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal109 ]
  call __MOLD_VariantMove
  jmp l1442
l1477:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal110 ]
  call __MOLD_VariantMove
  jmp l1442
l1478:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal111 ]
  call __MOLD_VariantMove
  jmp l1442
l1479:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal112 ]
  call __MOLD_VariantMove
  jmp l1442
l1480:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal113 ]
  call __MOLD_VariantMove
  jmp l1442
l1481:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal114 ]
  call __MOLD_VariantMove
  jmp l1442
l1482:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal115 ]
  call __MOLD_VariantMove
  jmp l1442
l1483:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal116 ]
  call __MOLD_VariantMove
  jmp l1442
l1443:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal117 ]
  call __MOLD_VariantMove
  mov [ tmp1486 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1486 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp1486 ]
  lea  rdi , [ tmp1485 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1484 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal118 ]
  lea  rdx , [ tmp1485 ]
  lea  r8 , [ tmp1484 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp1484 ]
  mov eax,  41
  call  __MOLD_SysCall
l1442:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1485 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1486 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore opcode
  restore rv
  restore tmp1484
  restore tmp1485
  restore tmp1486
; -----------------------------------------------
; function AST_InvertBoolean
; -----------------------------------------------
AST_InvertBoolean:
  ; init frame
  ; ----------
  tmp1522 EQU rbp - 24 ; 16 bytes
  tmp1519 EQU rbp - 28 ; 4 bytes
  __cse4 EQU rbp - 44 ; 16 bytes
  tmp1516 EQU rbp - 48 ; 4 bytes
  __cse3 EQU rbp - 64 ; 16 bytes
  tmp1513 EQU rbp - 68 ; 4 bytes
  tmp1510 EQU rbp - 72 ; 4 bytes
  tmp1507 EQU rbp - 76 ; 4 bytes
  tmp1504 EQU rbp - 80 ; 4 bytes
  tmp1501 EQU rbp - 84 ; 4 bytes
  tmp1494 EQU rbp - 100 ; 16 bytes
  tmp1493 EQU rbp - 104 ; 4 bytes
  tmp1492 EQU rbp - 108 ; 4 bytes
  tmp1489 EQU rbp - 112 ; 4 bytes
  tmp1488 EQU rbp - 116 ; 4 bytes
  tmp1487 EQU rbp - 132 ; 16 bytes
  opcode EQU rbp - 136 ; 4 bytes
  node EQU rbp - 152 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1487 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1494 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse3 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse4 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1522 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1487 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1487 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp1487 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1487 + Variant_t.value]
  mov dword [ opcode ], eax
  mov dword [ tmp1488 ], 5
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1488 ]
  jnz l1490
  lea  rcx, [ tmp1487 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1487 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1493 ], 1
  mov eax, dword [ tmp1493 ]
  mov [ tmp1494 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1494 + Variant_t.value], rax
  lea rcx, [ tmp1487 ]
  lea rdx, [ tmp1494 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1495
  mov dword [ tmp1493 ], 0
  mov eax, dword [ tmp1493 ]
  mov [ tmp1494 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1494 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1496
l1495:
  mov dword [ tmp1493 ], 1
  mov eax, dword [ tmp1493 ]
  mov [ tmp1494 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1494 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantStoreAtKey
l1496:
  jmp l1491
l1490:
  mov dword [ tmp1488 ], 66
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1488 ]
  jnz l1497
  mov dword [ tmp1488 ], 67
  mov [ tmp1494 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1488 ]
  mov [ tmp1494 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1498
l1497:
  mov dword [ tmp1488 ], 67
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1488 ]
  jnz l1499
  mov dword [ tmp1488 ], 66
  mov [ tmp1494 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1488 ]
  mov [ tmp1494 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1500
l1499:
  mov dword [ tmp1488 ], 71
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1488 ]
  jnz l1502
  mov dword [ tmp1488 ], 68
  mov [ tmp1494 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1488 ]
  mov [ tmp1494 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1503
l1502:
  mov dword [ tmp1488 ], 70
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1488 ]
  jnz l1505
  mov dword [ tmp1488 ], 69
  mov [ tmp1494 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1488 ]
  mov [ tmp1494 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1506
l1505:
  mov dword [ tmp1488 ], 68
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1488 ]
  jnz l1508
  mov dword [ tmp1488 ], 71
  mov [ tmp1494 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1488 ]
  mov [ tmp1494 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1509
l1508:
  mov dword [ tmp1488 ], 69
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1488 ]
  jnz l1511
  mov dword [ tmp1488 ], 70
  mov [ tmp1494 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1488 ]
  mov [ tmp1494 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1512
l1511:
  mov dword [ tmp1488 ], 72
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1488 ]
  jnz l1514
  lea  rcx, [ __cse3 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ __cse3 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1488 ], 0
  lea  rcx, [ tmp1494 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse3 ]
  lea  rdx , [ tmp1488 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1494 ]
  call  AST_InvertBoolean
  mov dword [ tmp1488 ], 1
  lea  rcx, [ tmp1494 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse3 ]
  lea  rdx , [ tmp1488 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1494 ]
  call  AST_InvertBoolean
  mov dword [ tmp1488 ], 73
  mov [ tmp1494 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1488 ]
  mov [ tmp1494 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1515
l1514:
  mov dword [ tmp1488 ], 73
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1488 ]
  jnz l1517
  lea  rcx, [ __cse4 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ __cse4 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1488 ], 0
  lea  rcx, [ tmp1494 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse4 ]
  lea  rdx , [ tmp1488 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1494 ]
  call  AST_InvertBoolean
  mov dword [ tmp1488 ], 1
  lea  rcx, [ tmp1494 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse4 ]
  lea  rdx , [ tmp1488 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1494 ]
  call  AST_InvertBoolean
  mov dword [ tmp1488 ], 72
  mov [ tmp1494 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1488 ]
  mov [ tmp1494 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1518
l1517:
  mov dword [ tmp1488 ], 75
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1488 ]
  jnz l1520
  lea  rcx, [ tmp1487 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1487 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1488 ], 0
  lea  rcx, [ tmp1494 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1487 ]
  lea  rdx , [ tmp1488 ]
  lea  r8 , [ tmp1494 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp1494 ]
  call  AST_InvertBoolean
  jmp l1521
l1520:
  mov [ tmp1487 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp1487 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp1487 ]
  lea  rdi , [ tmp1494 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1522 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal119 ]
  lea  rdx , [ tmp1494 ]
  lea  r8 , [ tmp1522 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp1522 ]
  mov eax,  41
  call  __MOLD_SysCall
l1521:
l1518:
l1515:
l1512:
l1509:
l1506:
l1503:
l1500:
l1498:
l1491:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1487 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1494 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse3 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse4 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore node
  restore opcode
  restore tmp1487
  restore tmp1488
  restore tmp1489
  restore tmp1492
  restore tmp1493
  restore tmp1494
  restore tmp1501
  restore tmp1504
  restore tmp1507
  restore tmp1510
  restore tmp1513
  restore __cse3
  restore tmp1516
  restore __cse4
  restore tmp1519
  restore tmp1522
; -----------------------------------------------
; function AST_IsVar
; -----------------------------------------------
AST_IsVar:
  ; init frame
  ; ----------
  tmp1526 EQU rbp - 24 ; 16 bytes
  tmp1525 EQU rbp - 28 ; 4 bytes
  tmp1524 EQU rbp - 44 ; 16 bytes
  tmp1523 EQU rbp - 48 ; 4 bytes
  rv EQU rdi
  x EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  mov [tmp1524 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1526 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1524 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1524 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1525 ], 52
  mov [ tmp1526 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1525 ]
  mov [ tmp1526 + Variant_t.value], rax
  lea  rcx , [ tmp1524 ]
  lea  rdx , [ tmp1526 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantCompareEQ

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1524 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1526 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore x
  restore rv
  restore tmp1523
  restore tmp1524
  restore tmp1525
  restore tmp1526
; -----------------------------------------------
; function AST_IsImm
; -----------------------------------------------
AST_IsImm:
  ; init frame
  ; ----------
  tmp1539 EQU rbp - 12 ; 4 bytes
  tmp1536 EQU rbp - 16 ; 4 bytes
  tmp1533 EQU rbp - 20 ; 4 bytes
  tmp1530 EQU rbp - 36 ; 16 bytes
  tmp1529 EQU rbp - 40 ; 4 bytes
  tmp1528 EQU rbp - 56 ; 16 bytes
  tmp1527 EQU rbp - 60 ; 4 bytes
  rv EQU rdi
  x EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  mov [tmp1528 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1530 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1528 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1528 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1529 ], 9
  mov [ tmp1530 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1529 ]
  mov [ tmp1530 + Variant_t.value], rax
  lea rcx, [ tmp1528 ]
  lea rdx, [ tmp1530 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1531
  lea  rcx, [ tmp1528 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1528 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1528 ]
  lea  rdi , [ tmp1530 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1530 ]
  lea  rdx , [ __literal120 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantCompareEQ
  jmp l1532
l1531:
  lea  rcx, [ tmp1530 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1530 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1529 ], 10
  mov [ tmp1528 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1529 ]
  mov [ tmp1528 + Variant_t.value], rax
  lea rcx, [ tmp1530 ]
  lea rdx, [ tmp1528 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1534
  lea  rcx, [ tmp1530 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1530 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1530 ]
  lea  rdi , [ tmp1528 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1528 ]
  lea  rdx , [ __literal121 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantCompareEQ
  jmp l1535
l1534:
  lea  rcx, [ tmp1528 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1528 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1529 ], 30
  mov [ tmp1530 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1529 ]
  mov [ tmp1530 + Variant_t.value], rax
  lea rcx, [ tmp1530 ]
  lea rdx, [ tmp1528 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l1537
  mov dword [ rv ], 1
  jmp l1538
l1537:
  mov dword [ rv ], 0
l1538:
l1535:
l1532:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1528 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1530 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore x
  restore rv
  restore tmp1527
  restore tmp1528
  restore tmp1529
  restore tmp1530
  restore tmp1533
  restore tmp1536
  restore tmp1539
; -----------------------------------------------
; function AST_IsPrimitiveImm
; -----------------------------------------------
AST_IsPrimitiveImm:
  ; init frame
  ; ----------
  tmp1546 EQU rbp - 12 ; 4 bytes
  tmp1543 EQU rbp - 28 ; 16 bytes
  tmp1542 EQU rbp - 32 ; 4 bytes
  tmp1541 EQU rbp - 48 ; 16 bytes
  tmp1540 EQU rbp - 52 ; 4 bytes
  rv EQU rdi
  x EQU rbp - 68 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  mov [tmp1541 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1543 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1541 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1541 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1542 ], 8
  mov [ tmp1543 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1542 ]
  mov [ tmp1543 + Variant_t.value], rax
  lea rcx, [ tmp1543 ]
  lea rdx, [ tmp1541 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l1544
  mov dword [ rv ], 1
  jmp l1545
l1544:
  mov dword [ rv ], 0
l1545:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1541 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1543 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore x
  restore rv
  restore tmp1540
  restore tmp1541
  restore tmp1542
  restore tmp1543
  restore tmp1546
; -----------------------------------------------
; function AST_IsImmWithValue
; -----------------------------------------------
AST_IsImmWithValue:
  ; init frame
  ; ----------
  tmp1552 EQU rbp - 24 ; 16 bytes
  tmp1551 EQU rbp - 28 ; 4 bytes
  tmp1550 EQU rbp - 32 ; 4 bytes
  tmp1549 EQU rbp - 36 ; 4 bytes
  tmp1547 EQU rbp - 40 ; 4 bytes
  rv EQU rdi
  value EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  mov [tmp1552 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1547 ], 0
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp1550 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp1551 ], 1
  xor  eax, eax
  or   dword [ tmp1550 ], eax
  setz cl
  or   dword [ tmp1551 ], eax
  setz al
  xor  al, cl
  jnz l1548
  lea  rcx, [ tmp1552 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1552 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp1552 ]
  lea  rdx , [ value ]
  lea  r8 , [ tmp1547 ]
  call  __MOLD_VariantCompareEQ
l1548:
  cmp dword [ tmp1547 ], 0
  jz l1553
  mov dword [ rv ], 1
  jmp l1554
l1553:
  mov dword [ rv ], 0
l1554:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1552 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore x
  restore value
  restore rv
  restore tmp1547
  restore tmp1549
  restore tmp1550
  restore tmp1551
  restore tmp1552
; -----------------------------------------------
; function AST_IsEmpty
; -----------------------------------------------
AST_IsEmpty:
  ; init frame
  ; ----------
  tmp1558 EQU rbp - 12 ; 4 bytes
  tmp1557 EQU rbp - 28 ; 16 bytes
  tmp1556 EQU rbp - 44 ; 16 bytes
  tmp1555 EQU rbp - 48 ; 4 bytes
  rv EQU rdi
  x EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0
  mov [tmp1556 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1557 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1557 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1557 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1557 ]
  lea  rdi , [ tmp1556 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1558 ], 0
  mov [ tmp1557 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1558 ]
  mov [ tmp1557 + Variant_t.value], rax
  lea  rcx , [ tmp1556 ]
  lea  rdx , [ tmp1557 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantCompareEQ

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1556 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1557 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore x
  restore rv
  restore tmp1555
  restore tmp1556
  restore tmp1557
  restore tmp1558
; -----------------------------------------------
; function AST_IsImmOrVar
; -----------------------------------------------
AST_IsImmOrVar:
  ; init frame
  ; ----------
  tmp1563 EQU rbp - 12 ; 4 bytes
  tmp1562 EQU rbp - 16 ; 4 bytes
  tmp1561 EQU rbp - 20 ; 4 bytes
  tmp1559 EQU rbp - 24 ; 4 bytes
  rv EQU rdi
  x EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ x ], xmm0

  ; code
  ; ----
  mov dword [ tmp1559 ], 1
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp1562 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp1563 ], 1
  xor   eax, eax
  or    dword [ tmp1562 ], eax
  setnz cl
  or    dword [ tmp1563 ], eax
  setz  al
  xor   al, cl
  jnz l1560
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp1563 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsVar
  pop rdi
  mov dword [ tmp1562 ], 1
  xor   eax, eax
  or    dword [ tmp1563 ], eax
  setnz cl
  or    dword [ tmp1562 ], eax
  setz  al
  xor   al, cl
  mov   dword [ tmp1559 ], eax
l1560:
  cmp dword [ tmp1559 ], 0
  jz l1564
  mov dword [ rv ], 1
  jmp l1565
l1564:
  mov dword [ rv ], 0
l1565:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore x
  restore rv
  restore tmp1559
  restore tmp1561
  restore tmp1562
  restore tmp1563
; -----------------------------------------------
; function AST_HasSideEffects
; -----------------------------------------------
AST_HasSideEffects:
  ; init frame
  ; ----------
  childrenCnt EQU rbp - 12 ; 4 bytes
  children EQU rbp - 28 ; 16 bytes
  childIdx EQU rbp - 32 ; 4 bytes
  tmp1590 EQU rbp - 36 ; 4 bytes
  tmp1580 EQU rbp - 40 ; 4 bytes
  tmp1578 EQU rbp - 44 ; 4 bytes
  tmp1574 EQU rbp - 60 ; 16 bytes
  tmp1573 EQU rbp - 64 ; 4 bytes
  tmp1571 EQU rbp - 68 ; 4 bytes
  tmp1568 EQU rbp - 72 ; 4 bytes
  tmp1567 EQU rbp - 76 ; 4 bytes
  tmp1566 EQU rbp - 92 ; 16 bytes
  rv EQU rdi
  opcode EQU rbp - 96 ; 4 bytes
  node EQU rbp - 112 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1566 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1574 + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1566 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1566 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp1566 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1566 + Variant_t.value]
  mov dword [ opcode ], eax
  mov dword [ tmp1567 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1567 ]
  jnz l1569
  mov dword [ rv ], 1
  mov dword [ tmp1571 ], 0
  lea  rcx, [ tmp1566 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1566 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp1566 ]
  lea rdx, [ __literal122 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1572
  lea  rcx, [ tmp1574 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp1574 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1574 ]
  lea  rdi , [ tmp1566 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp1566 ]
  lea  rdx , [ __literal33 ]
  lea  r8 , [ tmp1571 ]
  call  __MOLD_VariantCompareEQ
l1572:
  cmp dword [ tmp1571 ], 0
  jz l1575
  mov dword [ tmp1573 ], 1
  mov dword [ tmp1578 ], 0
  lea  rcx, [ tmp1566 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp1566 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1567 ], 31
  mov [ tmp1574 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1567 ]
  mov [ tmp1574 + Variant_t.value], rax
  lea rcx, [ tmp1566 ]
  lea rdx, [ tmp1574 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l1579
  lea  rcx, [ tmp1574 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp1574 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1567 ], 44
  mov [ tmp1566 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1567 ]
  mov [ tmp1566 + Variant_t.value], rax
  lea  rcx , [ tmp1574 ]
  lea  rdx , [ tmp1566 ]
  lea  r8 , [ tmp1578 ]
  call  __MOLD_VariantCompareLE
l1579:
  cmp dword [ tmp1578 ], 0
  jnz l1577
  mov dword [ tmp1578 ], 1
  lea  rcx, [ tmp1566 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp1566 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1567 ], 56
  mov [ tmp1574 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1567 ]
  mov [ tmp1574 + Variant_t.value], rax
  lea rcx, [ tmp1566 ]
  lea rdx, [ tmp1574 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1581
  lea  rcx, [ tmp1574 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp1574 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1567 ], 57
  mov [ tmp1566 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1567 ]
  mov [ tmp1566 + Variant_t.value], rax
  lea  rcx , [ tmp1574 ]
  lea  rdx , [ tmp1566 ]
  lea  r8 , [ tmp1578 ]
  call  __MOLD_VariantCompareEQ
l1581:
  mov eax, dword [ tmp1578 ]
  mov dword [ tmp1573 ], eax
l1577:
  cmp dword [ tmp1573 ], 0
  jz l1582
  mov dword [ rv ], 0
l1582:
l1583:
l1575:
l1576:
  jmp l1570
l1569:
  mov dword [ tmp1571 ], 1
  mov dword [ tmp1567 ], 37
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1567 ]
  jz l1584
  mov dword [ tmp1567 ], 36
  mov dword [ tmp1571 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1567 ]
  setz byte [ tmp1571 ]
l1584:
  cmp dword [ tmp1571 ], 0
  jz l1585
  mov dword [ rv ], 1
  jmp l1586
l1585:
  mov dword [ rv ], 0
  mov dword [ childIdx ], 0
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp1566 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp1566 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1566 + Variant_t.value]
  mov dword [ childrenCnt ], eax
;
; -----------------------------
; BEGIN: while
;
l1587:
  mov dword [ tmp1573 ], 0
  mov eax, dword [ childIdx ]
  cmp eax, dword [ childrenCnt ]
  jge l1589
  mov dword [ tmp1580 ], 0
  xor   eax, eax
  or    dword [ rv ], eax
  setnz cl
  or    dword [ tmp1580 ], eax
  setz  al
  xor   al, cl
  mov   dword [ tmp1573 ], eax
l1589:
  cmp dword [ tmp1573 ], 0
  jz l1588
  lea  rcx, [ tmp1566 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ tmp1566 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1566 ]
  lea  rdi , [ tmp1578 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HasSideEffects
  pop rdi
  mov eax, dword [ tmp1578 ]
  mov dword [ rv ], eax
  mov dword [ tmp1590 ], 1
  mov eax, dword [ childIdx ]
  add eax, dword [ tmp1590 ]
  mov dword [ childIdx ], eax
  jmp l1587
l1588:
;
; END: while
; -----------------------------
;
l1586:
l1570:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1566 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1574 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore node
  restore opcode
  restore rv
  restore tmp1566
  restore tmp1567
  restore tmp1568
  restore tmp1571
  restore tmp1573
  restore tmp1574
  restore tmp1578
  restore tmp1580
  restore tmp1590
  restore childIdx
  restore children
  restore childrenCnt
; -----------------------------------------------
; function AST_GetHashInternal
; -----------------------------------------------
AST_GetHashInternal:
  ; init frame
  ; ----------
  childNode EQU rbp - 24 ; 16 bytes
  name EQU rbp - 40 ; 16 bytes
  item EQU rbp - 56 ; 16 bytes
  tmp1629 EQU rbp - 72 ; 16 bytes
  tmp1628 EQU rbp - 88 ; 16 bytes
  tmp1627 EQU rbp - 104 ; 16 bytes
  tmp1624 EQU rbp - 108 ; 4 bytes
  tmp1623 EQU rbp - 112 ; 4 bytes
  tmp1619 EQU rbp - 116 ; 4 bytes
  tmp1614 EQU rbp - 132 ; 16 bytes
  tmp1613 EQU rbp - 148 ; 16 bytes
  tmp1608 EQU rbp - 152 ; 4 bytes
  tmp1601 EQU rbp - 156 ; 4 bytes
  tmp1600 EQU rbp - 160 ; 4 bytes
  tmp1599 EQU rbp - 176 ; 16 bytes
  tmp1598 EQU rbp - 192 ; 16 bytes
  tmp1595 EQU rbp - 196 ; 4 bytes
  tmp1593 EQU rbp - 200 ; 4 bytes
  tmp1592 EQU rbp - 204 ; 4 bytes
  tmp1591 EQU rbp - 220 ; 16 bytes
  rv EQU rdi
  childrenCnt EQU rbp - 236 ; 16 bytes
  children EQU rbp - 252 ; 16 bytes
  opcode EQU rbp - 256 ; 4 bytes
  isCodeMode EQU rbp - 260 ; 4 bytes
  node EQU rbp - 276 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov eax, dword [ rdx ]
  mov dword [ isCodeMode ], eax
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1591 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1598 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1599 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1613 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1614 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1627 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1628 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1629 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp1591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1591 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp1591 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1591 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1593 ], 1
  mov dword [ tmp1592 ], 10
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1592 ]
  jz l1594
  mov dword [ tmp1592 ], 9
  mov dword [ tmp1593 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1592 ]
  setz byte [ tmp1593 ]
l1594:
  cmp dword [ tmp1593 ], 0
  jz l1596
  lea  rcx, [ tmp1599 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1599 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1599 ]
  lea  rdi , [ tmp1591 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal125 ]
  lea  rdx , [ tmp1591 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l1597
l1596:
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1600 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsVar
  pop rdi
  mov dword [ tmp1601 ], 1
  xor  eax, eax
  or   dword [ tmp1600 ], eax
  setz cl
  or   dword [ tmp1601 ], eax
  setz al
  xor  al, cl
  jnz l1602
  mov dword [ tmp1600 ], 1
  xor  eax, eax
  or   dword [ isCodeMode ], eax
  setz cl
  or   dword [ tmp1600 ], eax
  setz al
  xor  al, cl
  jnz l1604
  lea  rcx, [ tmp1591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1591 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal125 ]
  lea  rdx , [ tmp1591 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l1605
l1604:
  lea  rcx, [ tmp1599 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp1599 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1599 ]
  lea  rdi , [ tmp1591 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1592 ], 0
  mov [ tmp1599 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1592 ]
  mov [ tmp1599 + Variant_t.value], rax
  lea rcx, [ tmp1591 ]
  lea rdx, [ tmp1599 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1606
  lea  rcx, [ tmp1599 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1599 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal125 ]
  lea  rdx , [ tmp1599 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l1607
l1606:
  lea  rcx, [ tmp1591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp1591 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1591 ]
  lea  rdi , [ tmp1599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp1599 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1609
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1599 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp1599 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l1612
l1611:
  lea  rcx, [ tmp1614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1614 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1614 ]
  lea  rdi , [ tmp1591 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1613 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal125 ]
  lea  rdx , [ tmp1591 ]
  lea  r8 , [ tmp1613 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ rv ]
  lea  rdx , [ tmp1613 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  ret
l1612:
  lea  rcx , [ tmp1599 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l1611 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  jmp l1610
l1609:
  lea  rcx, [ tmp1614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp1614 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1614 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1591 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1591 ]
  lea  rdi , [ tmp1599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal125 ]
  lea  rdx , [ tmp1599 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
l1610:
l1607:
l1605:
  jmp l1603
l1602:
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1600 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsPrimitiveImm
  pop rdi
  mov dword [ tmp1608 ], 1
  xor  eax, eax
  or   dword [ tmp1600 ], eax
  setz cl
  or   dword [ tmp1608 ], eax
  setz al
  xor  al, cl
  jnz l1615
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp1613 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetOpcodeAsShortText
  pop rdi
  lea  rcx, [ tmp1591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1591 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1591 ]
  lea  rdi , [ tmp1599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1613 ]
  lea  rdx , [ tmp1599 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l1616
l1615:
  mov dword [ tmp1608 ], 1
  mov dword [ tmp1592 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1592 ]
  jz l1617
  mov dword [ tmp1600 ], 1
  mov dword [ tmp1592 ], 37
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1592 ]
  jz l1618
  mov dword [ tmp1592 ], 36
  mov dword [ tmp1600 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1592 ]
  setz byte [ tmp1600 ]
l1618:
  mov eax, dword [ tmp1600 ]
  mov dword [ tmp1608 ], eax
l1617:
  cmp dword [ tmp1608 ], 0
  jz l1620
  mov dword [ tmp1600 ], 0
  mov dword [ tmp1623 ], 0
  xor  eax, eax
  or   dword [ isCodeMode ], eax
  setz cl
  or   dword [ tmp1623 ], eax
  setz al
  xor  al, cl
  jnz l1622
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1623 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HasSideEffects
  pop rdi
  mov dword [ tmp1624 ], 1
  xor   eax, eax
  or    dword [ tmp1623 ], eax
  setnz cl
  or    dword [ tmp1624 ], eax
  setz  al
  xor   al, cl
  mov   dword [ tmp1600 ], eax
l1622:
  cmp dword [ tmp1600 ], 0
  jz l1625
  lea  rcx, [ tmp1591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1591 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1591 ]
  lea  rdi , [ tmp1599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal125 ]
  lea  rdx , [ tmp1599 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStringJoin
  jmp l1626
l1625:
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
l1626:
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp1613 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetOpcodeAsShortText
  pop rdi
  push rdi
  lea  rcx , [ childrenCnt ]
  lea  rdi , [ tmp1599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1629 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal127 ]
  lea  rdx , [ tmp1599 ]
  lea  r8 , [ tmp1629 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1628 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp1629 ]
  lea  r8 , [ tmp1628 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1627 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal13 ]
  lea  rdx , [ tmp1628 ]
  lea  r8 , [ tmp1627 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1613 ]
  lea  rdx , [ tmp1627 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1599 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1599 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp1599 ]
  lea rdx, [ __literal122 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1630
  lea  rcx, [ tmp1591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp1591 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1591 ]
  lea  rdi , [ tmp1599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1627 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal127 ]
  lea  rdx , [ tmp1599 ]
  lea  r8 , [ tmp1627 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ rv ]
  lea  rdx , [ tmp1627 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
l1630:
l1631:
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l1633
l1632:
  push rdi
  lea  rcx , [ childNode ]
  lea  rdx , [ isCodeMode ]
  lea  rdi , [ tmp1599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetHashInternal
  pop rdi
  lea  rcx, [ tmp1627 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal127 ]
  lea  rdx , [ tmp1599 ]
  lea  r8 , [ tmp1627 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ rv ]
  lea  rdx , [ tmp1627 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  ret
l1633:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l1632 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
  jmp l1621
l1620:
  mov dword [ tmp1592 ], 75
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1592 ]
  jnz l1634
  lea  rcx, [ tmp1591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal129 ]
  lea  r8 , [ tmp1591 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1591 ]
  lea  rdi , [ tmp1599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1592 ], 0
  lea  rcx, [ tmp1614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp1592 ]
  lea  r8 , [ tmp1614 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1614 ]
  lea  rdx , [ isCodeMode ]
  lea  rdi , [ tmp1591 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetHashInternal
  pop rdi
  lea  rcx, [ tmp1613 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal127 ]
  lea  rdx , [ tmp1591 ]
  lea  r8 , [ tmp1613 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1627 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1599 ]
  lea  rdx , [ tmp1613 ]
  lea  r8 , [ tmp1627 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal128 ]
  lea  rdx , [ tmp1627 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l1635
l1634:
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp1627 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetOpcodeAsShortText
  pop rdi
  push rdi
  lea  rcx , [ childrenCnt ]
  lea  rdi , [ tmp1599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1613 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal127 ]
  lea  rdx , [ tmp1599 ]
  lea  r8 , [ tmp1613 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1627 ]
  lea  rdx , [ tmp1613 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l1637
l1636:
  push rdi
  lea  rcx , [ childNode ]
  lea  rdx , [ isCodeMode ]
  lea  rdi , [ tmp1599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetHashInternal
  pop rdi
  lea  rcx, [ tmp1613 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal127 ]
  lea  rdx , [ tmp1599 ]
  lea  r8 , [ tmp1613 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ rv ]
  lea  rdx , [ tmp1613 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  ret
l1637:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l1636 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
l1635:
l1621:
l1616:
l1603:
l1597:
  mov dword [ tmp1595 ], 0
  xor  eax, eax
  or   dword [ isCodeMode ], eax
  setz cl
  or   dword [ tmp1595 ], eax
  setz al
  xor  al, cl
  jnz l1638
  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStoreAtKey
l1638:
l1639:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1591 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1599 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1614 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  ; Skipped loop iterator childNode

  add  rsp, 304
  pop  rbp
  ret

  restore node
  restore isCodeMode
  restore opcode
  restore children
  restore childrenCnt
  restore rv
  restore tmp1591
  restore tmp1592
  restore tmp1593
  restore tmp1595
  restore tmp1598
  restore tmp1599
  restore tmp1600
  restore tmp1601
  restore tmp1608
  restore tmp1613
  restore tmp1614
  restore tmp1619
  restore tmp1623
  restore tmp1624
  restore tmp1627
  restore tmp1628
  restore tmp1629
  restore item
  restore name
  restore childNode
; -----------------------------------------------
; function AST_PrefetchHash
; -----------------------------------------------
AST_PrefetchHash:
  ; init frame
  ; ----------
  tmp1641 EQU rbp - 12 ; 4 bytes
  tmp1640 EQU rbp - 28 ; 16 bytes
  unused EQU rbp - 44 ; 16 bytes
  node EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [unused + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1640 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1641 ], 0
  push rdi
  lea  rcx , [ node ]
  lea  rdx , [ tmp1641 ]
  lea  rdi , [ tmp1640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetHashInternal
  pop rdi
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea rcx, [ unused ]
  lea rdx, [ tmp1640 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1640 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore node
  restore unused
  restore tmp1640
  restore tmp1641
; -----------------------------------------------
; function AST_GetHash
; -----------------------------------------------
AST_GetHash:
  ; init frame
  ; ----------
  tmp1643 EQU rbp - 12 ; 4 bytes
  tmp1642 EQU rbp - 28 ; 16 bytes
  rv EQU rdi
  node EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1642 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1643 ], 0
  push rdi
  lea  rcx , [ node ]
  lea  rdx , [ tmp1643 ]
  lea  rdi , [ tmp1642 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetHashInternal
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1642 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1642 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1642
  restore tmp1643
; -----------------------------------------------
; function AST_GetHashForCodeComparison
; -----------------------------------------------
AST_GetHashForCodeComparison:
  ; init frame
  ; ----------
  tmp1645 EQU rbp - 12 ; 4 bytes
  tmp1644 EQU rbp - 28 ; 16 bytes
  rv EQU rdi
  node EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1644 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1645 ], 1
  push rdi
  lea  rcx , [ node ]
  lea  rdx , [ tmp1645 ]
  lea  rdi , [ tmp1644 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetHashInternal
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1644 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1644 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1644
  restore tmp1645
; -----------------------------------------------
; function AST_IsDataNode
; -----------------------------------------------
AST_IsDataNode:
  ; init frame
  ; ----------
  tmp1652 EQU rbp - 12 ; 4 bytes
  tmp1649 EQU rbp - 28 ; 16 bytes
  tmp1648 EQU rbp - 32 ; 4 bytes
  tmp1647 EQU rbp - 48 ; 16 bytes
  tmp1646 EQU rbp - 52 ; 4 bytes
  rv EQU rdi
  node EQU rbp - 68 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1647 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1649 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1647 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1647 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1648 ], 30
  mov [ tmp1649 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1648 ]
  mov [ tmp1649 + Variant_t.value], rax
  lea rcx, [ tmp1649 ]
  lea rdx, [ tmp1647 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l1650
  mov dword [ rv ], 1
  jmp l1651
l1650:
  mov dword [ rv ], 0
l1651:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1647 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1649 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1646
  restore tmp1647
  restore tmp1648
  restore tmp1649
  restore tmp1652
; -----------------------------------------------
; function AST_ConvertDataTypeToText
; -----------------------------------------------
AST_ConvertDataTypeToText:
  ; init frame
  ; ----------
  tmp1658 EQU rbp - 24 ; 16 bytes
  tmp1657 EQU rbp - 28 ; 4 bytes
  tmp1656 EQU rbp - 44 ; 16 bytes
  tmp1655 EQU rbp - 48 ; 4 bytes
  tmp1653 EQU rbp - 52 ; 4 bytes
  rv EQU rdi
  dataType EQU rbp - 68 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ dataType ], xmm0
  mov [tmp1656 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1658 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1653 ], 0
  push rdi
  lea  rcx , [ dataType ]
  lea  rdi , [ tmp1656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1657 ], 0
  mov [ tmp1658 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1657 ]
  mov [ tmp1658 + Variant_t.value], rax
  lea rcx, [ tmp1656 ]
  lea rdx, [ tmp1658 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1654
  mov dword [ tmp1657 ], 0
  mov [ tmp1658 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1657 ]
  mov [ tmp1658 + Variant_t.value], rax
  lea  rcx , [ tmp1658 ]
  lea  rdx , [ dataType ]
  lea  r8 , [ tmp1653 ]
  call  __MOLD_VariantCompareLT
l1654:
  cmp dword [ tmp1653 ], 0
  jz l1659
  cmp [ dataType + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataType + Variant_t.value]
  mov dword [ tmp1657 ], eax
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ AST_DataTypeNames ]
  lea  rdx , [ tmp1657 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1660
l1659:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove
l1660:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1656 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1658 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore dataType
  restore rv
  restore tmp1653
  restore tmp1655
  restore tmp1656
  restore tmp1657
  restore tmp1658
; -----------------------------------------------
; function AST_ConvertDataTypeToMIR
; -----------------------------------------------
AST_ConvertDataTypeToMIR:
  ; init frame
  ; ----------
  tmp1666 EQU rbp - 24 ; 16 bytes
  tmp1665 EQU rbp - 28 ; 4 bytes
  tmp1664 EQU rbp - 44 ; 16 bytes
  tmp1663 EQU rbp - 48 ; 4 bytes
  tmp1661 EQU rbp - 52 ; 4 bytes
  rv EQU rdi
  dataType EQU rbp - 68 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ dataType ], xmm0
  mov [tmp1664 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1666 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1661 ], 0
  push rdi
  lea  rcx , [ dataType ]
  lea  rdi , [ tmp1664 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1665 ], 0
  mov [ tmp1666 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1665 ]
  mov [ tmp1666 + Variant_t.value], rax
  lea rcx, [ tmp1664 ]
  lea rdx, [ tmp1666 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1662
  mov dword [ tmp1665 ], 0
  mov [ tmp1666 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1665 ]
  mov [ tmp1666 + Variant_t.value], rax
  lea  rcx , [ tmp1666 ]
  lea  rdx , [ dataType ]
  lea  r8 , [ tmp1661 ]
  call  __MOLD_VariantCompareLT
l1662:
  cmp dword [ tmp1661 ], 0
  jz l1667
  cmp [ dataType + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ dataType + Variant_t.value]
  mov dword [ tmp1665 ], eax
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ AST_DataTypeForMIR ]
  lea  rdx , [ tmp1665 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l1668
l1667:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove
l1668:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1664 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1666 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore dataType
  restore rv
  restore tmp1661
  restore tmp1663
  restore tmp1664
  restore tmp1665
  restore tmp1666
; -----------------------------------------------
; function AST_GetDataType
; -----------------------------------------------
AST_GetDataType:
  ; init frame
  ; ----------
  xType EQU rbp - 24 ; 16 bytes
  y EQU rbp - 28 ; 4 bytes
  x EQU rbp - 32 ; 4 bytes
  childrenCnt EQU rbp - 36 ; 4 bytes
  children EQU rbp - 52 ; 16 bytes
  __cse6 EQU rbp - 68 ; 16 bytes
  __cse5 EQU rbp - 84 ; 16 bytes
  box EQU rbp - 100 ; 16 bytes
  symbolInfo EQU rbp - 116 ; 16 bytes
  opcode EQU rbp - 120 ; 4 bytes
  tmp1745 EQU rbp - 136 ; 16 bytes
  tmp1733 EQU rbp - 140 ; 4 bytes
  tmp1727 EQU rbp - 144 ; 4 bytes
  tmp1719 EQU rbp - 148 ; 4 bytes
  tmp1712 EQU rbp - 152 ; 4 bytes
  tmp1710 EQU rbp - 156 ; 4 bytes
  tmp1708 EQU rbp - 160 ; 4 bytes
  tmp1699 EQU rbp - 176 ; 16 bytes
  tmp1681 EQU rbp - 180 ; 4 bytes
  tmp1679 EQU rbp - 184 ; 4 bytes
  tmp1677 EQU rbp - 188 ; 4 bytes
  tmp1675 EQU rbp - 192 ; 4 bytes
  tmp1672 EQU rbp - 208 ; 16 bytes
  tmp1671 EQU rbp - 224 ; 16 bytes
  tmp1670 EQU rbp - 228 ; 4 bytes
  tmp1669 EQU rbp - 232 ; 4 bytes
  rv EQU rdi
  node EQU rbp - 248 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1671 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1672 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1699 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1745 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse5 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse6 + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [xType + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ rv ], -1
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal131 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1672 ]
  lea  rdi , [ tmp1671 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1669 ], 0
  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1669 ]
  mov [ tmp1672 + Variant_t.value], rax
  lea rcx, [ tmp1671 ]
  lea rdx, [ tmp1672 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1673
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal131 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1672 + Variant_t.value]
  mov dword [ rv ], eax
  jmp l1674
l1673:
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1672 + Variant_t.value]
  mov dword [ opcode ], eax
  mov dword [ rv ], -1
  mov dword [ tmp1675 ], 1
  mov dword [ tmp1669 ], 1
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1669 ]
  jnz l1676
  mov dword [ tmp1677 ], 1
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1671 ]
  lea  rdi , [ tmp1672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp1672 ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1678
  mov dword [ tmp1679 ], 0
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1669 ], -2147483648
  mov [ tmp1671 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1669 ]
  mov [ tmp1671 + Variant_t.value], rax
  lea rcx, [ tmp1672 ]
  lea rdx, [ tmp1671 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l1680
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1669 ], 2147483647
  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1669 ]
  mov [ tmp1672 + Variant_t.value], rax
  lea  rcx , [ tmp1671 ]
  lea  rdx , [ tmp1672 ]
  lea  r8 , [ tmp1679 ]
  call  __MOLD_VariantCompareLE
l1680:
  mov eax, dword [ tmp1679 ]
  mov dword [ tmp1677 ], eax
l1678:
  mov eax, dword [ tmp1677 ]
  mov dword [ tmp1675 ], eax
l1676:
  cmp dword [ tmp1675 ], 0
  jz l1682
  cmp dword [ opcode ], 8
  jl l1685
  cmp dword [ opcode ], 75
  jg l1685
  mov eax, dword [ opcode ]
  jmp qword [ __jmptable1686 + rax * 8]
l1687:
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1677 ], 0
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp1672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1669 ], 0
  mov [ tmp1671 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1669 ]
  mov [ tmp1671 + Variant_t.value], rax
  lea rcx, [ tmp1672 ]
  lea rdx, [ tmp1671 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1688
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1672 ]
  lea  rdi , [ tmp1671 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1669 ], 0
  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1669 ]
  mov [ tmp1672 + Variant_t.value], rax
  lea  rcx , [ tmp1671 ]
  lea  rdx , [ tmp1672 ]
  lea  r8 , [ tmp1677 ]
  call  __MOLD_VariantCompareNE
l1688:
  cmp dword [ tmp1677 ], 0
  jz l1689
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1672 + Variant_t.value]
  mov dword [ rv ], eax
l1689:
l1690:
  jmp l1684
l1691:
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal129 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1672 + Variant_t.value]
  mov dword [ rv ], eax
  jmp l1684
l1692:
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1669 ], 0
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1671 ]
  lea  rdx , [ tmp1669 ]
  lea  r8 , [ box ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ __cse5 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ box ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ __cse5 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1677 ], 0
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ box ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1669 ], 52
  mov [ tmp1671 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1669 ]
  mov [ tmp1671 + Variant_t.value], rax
  lea rcx, [ tmp1672 ]
  lea rdx, [ tmp1671 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1693
  mov dword [ tmp1679 ], 0
  push rdi
  lea  rcx , [ __cse5 ]
  lea  rdi , [ tmp1671 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1669 ], 0
  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1669 ]
  mov [ tmp1672 + Variant_t.value], rax
  lea rcx, [ tmp1671 ]
  lea rdx, [ tmp1672 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1694
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse5 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1671 ]
  lea  rdi , [ tmp1672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1669 ], 0
  mov [ tmp1671 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1669 ]
  mov [ tmp1671 + Variant_t.value], rax
  lea  rcx , [ tmp1672 ]
  lea  rdx , [ tmp1671 ]
  lea  r8 , [ tmp1679 ]
  call  __MOLD_VariantCompareNE
l1694:
  mov eax, dword [ tmp1679 ]
  mov dword [ tmp1677 ], eax
l1693:
  cmp dword [ tmp1677 ], 0
  jz l1695
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ box ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1672 ]
  lea  rdx , [ __literal134 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp1671 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1671 + Variant_t.value]
  mov dword [ rv ], eax
l1695:
l1696:
  jmp l1684
l1697:
  lea  rcx, [ __cse6 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ __cse6 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1677 ], 0
  push rdi
  lea  rcx , [ __cse6 ]
  lea  rdi , [ tmp1671 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1669 ], 0
  mov [ tmp1672 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1669 ]
  mov [ tmp1672 + Variant_t.value], rax
  lea rcx, [ tmp1671 ]
  lea rdx, [ tmp1672 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1698
  lea  rcx, [ tmp1699 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse6 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1699 ]
  lea  rdx , [ __literal136 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1671 ]
  lea  rdi , [ tmp1672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1669 ], 0
  mov [ tmp1671 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1669 ]
  mov [ tmp1671 + Variant_t.value], rax
  lea  rcx , [ tmp1672 ]
  lea  rdx , [ tmp1671 ]
  lea  r8 , [ tmp1677 ]
  call  __MOLD_VariantCompareNE
l1698:
  cmp dword [ tmp1677 ], 0
  jz l1700
  lea  rcx, [ tmp1699 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp1699 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1699 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1672 ]
  lea  rdx , [ __literal136 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp1671 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1671 + Variant_t.value]
  mov dword [ rv ], eax
l1700:
l1701:
  jmp l1684
l1702:
  mov dword [ rv ], 6
  jmp l1684
l1703:
  mov dword [ rv ], -1
  jmp l1684
l1685:
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp1671 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp1671 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp1671 + Variant_t.value]
  mov dword [ childrenCnt ], eax
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1679 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsDataNode
  pop rdi
  mov dword [ tmp1681 ], 1
  xor  eax, eax
  or   dword [ tmp1679 ], eax
  setz cl
  or   dword [ tmp1681 ], eax
  setz al
  xor  al, cl
  jnz l1704
  mov eax, dword [ opcode ]
  mov dword [ rv ], eax
  jmp l1705
l1704:
  mov dword [ tmp1669 ], 2
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp1669 ]
  jnz l1706
  mov dword [ tmp1708 ], 0
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp1708 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1671 ]
  lea  rdi , [ tmp1669 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp1669 ]
  mov dword [ x ], eax
  mov dword [ tmp1708 ], 1
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp1708 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1671 ]
  lea  rdi , [ tmp1669 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp1669 ]
  mov dword [ y ], eax
  mov dword [ tmp1679 ], 1
  mov dword [ tmp1669 ], 58
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1669 ]
  jz l1709
  mov dword [ tmp1710 ], 1
  mov dword [ tmp1669 ], 60
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1669 ]
  jz l1711
  mov dword [ tmp1669 ], 59
  mov dword [ tmp1710 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1669 ]
  setz byte [ tmp1710 ]
l1711:
  mov eax, dword [ tmp1710 ]
  mov dword [ tmp1679 ], eax
l1709:
  cmp dword [ tmp1679 ], 0
  jz l1713
  mov dword [ tmp1710 ], 1
  mov dword [ tmp1669 ], 3
  mov eax, dword [ x ]
  cmp eax, dword [ tmp1669 ]
  jz l1715
  mov dword [ tmp1669 ], 3
  mov dword [ tmp1710 ], 0
  mov ecx, dword [ y ]
  cmp ecx, dword [ tmp1669 ]
  setz byte [ tmp1710 ]
l1715:
  cmp dword [ tmp1710 ], 0
  jz l1716
  mov dword [ rv ], 3
  jmp l1717
l1716:
  mov dword [ tmp1712 ], 1
  mov dword [ tmp1669 ], -1
  mov eax, dword [ x ]
  cmp eax, dword [ tmp1669 ]
  jz l1718
  mov dword [ tmp1669 ], -1
  mov dword [ tmp1712 ], 0
  mov ecx, dword [ y ]
  cmp ecx, dword [ tmp1669 ]
  setz byte [ tmp1712 ]
l1718:
  cmp dword [ tmp1712 ], 0
  jz l1720
  mov dword [ rv ], -1
  jmp l1721
l1720:
  mov eax, dword [ x ]
  mov dword [ rv ], eax
l1721:
l1717:
  jmp l1714
l1713:
  mov dword [ tmp1669 ], 65
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1669 ]
  jnz l1722
  mov dword [ rv ], 4
  jmp l1723
l1722:
  mov dword [ tmp1669 ], 61
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1669 ]
  jnz l1724
  mov dword [ tmp1719 ], 1
  mov dword [ tmp1669 ], -1
  mov eax, dword [ x ]
  cmp eax, dword [ tmp1669 ]
  jz l1726
  mov dword [ tmp1669 ], -1
  mov dword [ tmp1719 ], 0
  mov ecx, dword [ y ]
  cmp ecx, dword [ tmp1669 ]
  setz byte [ tmp1719 ]
l1726:
  cmp dword [ tmp1719 ], 0
  jz l1728
  mov dword [ rv ], -1
  jmp l1729
l1728:
  mov dword [ rv ], 3
l1729:
  jmp l1725
l1724:
  mov dword [ tmp1669 ], 64
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1669 ]
  jnz l1730
  mov dword [ tmp1727 ], 1
  mov dword [ tmp1669 ], -1
  mov eax, dword [ x ]
  cmp eax, dword [ tmp1669 ]
  jz l1732
  mov dword [ tmp1669 ], -1
  mov dword [ tmp1727 ], 0
  mov ecx, dword [ y ]
  cmp ecx, dword [ tmp1669 ]
  setz byte [ tmp1727 ]
l1732:
  cmp dword [ tmp1727 ], 0
  jz l1734
  mov dword [ rv ], -1
  jmp l1735
l1734:
  mov dword [ rv ], 1
l1735:
  jmp l1731
l1730:
  mov dword [ tmp1727 ], 0
  mov dword [ tmp1669 ], 66
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1669 ]
  jl l1736
  mov dword [ tmp1669 ], 73
  mov dword [ tmp1727 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp1669 ]
  setle byte [ tmp1727 ]
l1736:
  cmp dword [ tmp1727 ], 0
  jz l1737
  mov dword [ rv ], 5
l1737:
l1738:
l1731:
l1725:
l1723:
l1714:
  jmp l1707
l1706:
  mov dword [ tmp1669 ], 1
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp1669 ]
  jnz l1739
  mov dword [ tmp1708 ], 0
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp1708 ]
  lea  r8 , [ tmp1671 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp1671 ]
  lea  rdi , [ tmp1669 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov [ xType + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1669 ]
  mov [ xType + Variant_t.value], rax
  mov dword [ tmp1669 ], 57
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1669 ]
  jnz l1741
  cmp [ xType + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ xType + Variant_t.value]
  mov dword [ rv ], eax
  jmp l1742
l1741:
  mov dword [ tmp1669 ], 74
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp1669 ]
  jnz l1743
  mov dword [ rv ], 5
l1743:
l1744:
l1742:
l1739:
l1740:
l1707:
l1705:
l1684:
l1682:
l1683:
  lea  rcx, [ tmp1745 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1745 ]
  lea rdx, [ __const1746 ]
  call __MOLD_VariantMove
  lea rcx, [ tmp1745 ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1747
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1672 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1672 ]
  lea  rdi , [ tmp1671 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1745 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal137 ]
  lea  rdx , [ tmp1671 ]
  lea  r8 , [ tmp1745 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp1745 ]
  mov eax,  41
  call  __MOLD_SysCall
l1747:
l1748:
l1674:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1671 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1672 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1699 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse5 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse6 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ xType ]
  call __MOLD_VariantDestroy

  add  rsp, 288
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1669
  restore tmp1670
  restore tmp1671
  restore tmp1672
  restore tmp1675
  restore tmp1677
  restore tmp1679
  restore tmp1681
  restore tmp1699
  restore tmp1708
  restore tmp1710
  restore tmp1712
  restore tmp1719
  restore tmp1727
  restore tmp1733
  restore tmp1745
  restore opcode
  restore symbolInfo
  restore box
  restore __cse5
  restore __cse6
  restore children
  restore childrenCnt
  restore x
  restore y
  restore xType
; -----------------------------------------------
; function AST_TypeCast
; -----------------------------------------------
AST_TypeCast:
  ; init frame
  ; ----------
  srcDataType EQU rbp - 12 ; 4 bytes
  tmp1773 EQU rbp - 28 ; 16 bytes
  tmp1772 EQU rbp - 44 ; 16 bytes
  tmp1771 EQU rbp - 60 ; 16 bytes
  tmp1768 EQU rbp - 64 ; 4 bytes
  tmp1764 EQU rbp - 68 ; 4 bytes
  tmp1760 EQU rbp - 72 ; 4 bytes
  tmp1758 EQU rbp - 76 ; 4 bytes
  tmp1755 EQU rbp - 80 ; 4 bytes
  tmp1752 EQU rbp - 96 ; 16 bytes
  tmp1751 EQU rbp - 100 ; 4 bytes
  tmp1750 EQU rbp - 116 ; 16 bytes
  tmp1749 EQU rbp - 120 ; 4 bytes
  rv EQU rdi
  dstDataType EQU rbp - 124 ; 4 bytes
  node EQU rbp - 140 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov eax, dword [ rdx ]
  mov dword [ dstDataType ], eax
  mov [tmp1750 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1752 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1771 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1772 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1773 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1750 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1750 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1751 ], 75
  mov [ tmp1752 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1751 ]
  mov [ tmp1752 + Variant_t.value], rax
  lea rcx, [ tmp1750 ]
  lea rdx, [ tmp1752 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1753
  mov [ tmp1752 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dstDataType ]
  mov [ tmp1752 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal129 ]
  lea  r8 , [ tmp1752 ]
  call  __MOLD_VariantStoreAtKey
  jmp l1754
l1753:
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1751 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp1751 ]
  mov dword [ srcDataType ], eax
  mov eax, dword [ srcDataType ]
  cmp eax, dword [ dstDataType ]
  jz l1756
  mov dword [ tmp1758 ], 1
  mov dword [ tmp1751 ], 4
  mov eax, dword [ srcDataType ]
  cmp eax, dword [ tmp1751 ]
  jnz l1759
  mov dword [ tmp1751 ], -1
  mov dword [ tmp1758 ], 0
  mov ecx, dword [ dstDataType ]
  cmp ecx, dword [ tmp1751 ]
  setnz byte [ tmp1758 ]
l1759:
  cmp dword [ tmp1758 ], 0
  jz l1761
  mov dword [ tmp1760 ], 1
  mov dword [ tmp1751 ], 4
  mov eax, dword [ dstDataType ]
  cmp eax, dword [ tmp1751 ]
  jnz l1763
  mov dword [ tmp1751 ], -1
  mov dword [ tmp1760 ], 0
  mov ecx, dword [ srcDataType ]
  cmp ecx, dword [ tmp1751 ]
  setnz byte [ tmp1760 ]
l1763:
  cmp dword [ tmp1760 ], 0
  jz l1765
  mov dword [ tmp1764 ], 1
  mov dword [ tmp1751 ], 6
  mov eax, dword [ srcDataType ]
  cmp eax, dword [ tmp1751 ]
  jnz l1767
  mov dword [ tmp1751 ], -1
  mov dword [ tmp1764 ], 0
  mov ecx, dword [ dstDataType ]
  cmp ecx, dword [ tmp1751 ]
  setnz byte [ tmp1764 ]
l1767:
  cmp dword [ tmp1764 ], 0
  jz l1769
  lea  rcx, [ tmp1752 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1752 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp1751 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp1750 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1751 ]
  mov [ tmp1750 + Variant_t.value], rax
  lea  rcx , [ tmp1752 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1750 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1750 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_TYPE_CAST ]
  mov [ tmp1750 + Variant_t.value], rax
  lea  rcx , [ tmp1752 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1750 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1750 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dstDataType ]
  mov [ tmp1750 + Variant_t.value], rax
  lea  rcx , [ tmp1752 ]
  lea  rdx , [ __literal129 ]
  lea  r8 , [ tmp1750 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1771 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1771 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp1772 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp1772 + Variant_t.value], 0
  lea  rcx, [ tmp1773 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1773 ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1771 ]
  lea  rdx , [ tmp1772 ]
  lea  r8 , [ tmp1773 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp1750 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1750 ]
  lea rdx, [ tmp1771 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1752 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1750 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1752 ]
  call __MOLD_VariantMove
l1769:
l1770:
l1765:
l1766:
l1761:
l1762:
l1756:
l1757:
l1754:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1750 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1752 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1771 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1772 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1773 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore node
  restore dstDataType
  restore rv
  restore tmp1749
  restore tmp1750
  restore tmp1751
  restore tmp1752
  restore tmp1755
  restore tmp1758
  restore tmp1760
  restore tmp1764
  restore tmp1768
  restore tmp1771
  restore tmp1772
  restore tmp1773
  restore srcDataType
; -----------------------------------------------
; function AST_GetTopNodeInBlock
; -----------------------------------------------
AST_GetTopNodeInBlock:
  ; init frame
  ; ----------
  tmp1779 EQU rbp - 12 ; 4 bytes
  tmp1778 EQU rbp - 28 ; 16 bytes
  tmp1777 EQU rbp - 44 ; 16 bytes
  tmp1776 EQU rbp - 48 ; 4 bytes
  rv EQU rdi
  node EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1777 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1778 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: while
;
l1774:
  lea  rcx, [ tmp1778 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1778 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1777 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1778 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1777 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1779 ], 31
  mov [ tmp1778 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1779 ]
  mov [ tmp1778 + Variant_t.value], rax
  lea rcx, [ tmp1777 ]
  lea rdx, [ tmp1778 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1775
  lea  rcx , [ rv ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  jmp l1774
l1775:
;
; END: while
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1777 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1778 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1776
  restore tmp1777
  restore tmp1778
  restore tmp1779
; -----------------------------------------------
; function AST_GetParentBlock
; -----------------------------------------------
AST_GetParentBlock:
  ; init frame
  ; ----------
  tmp1781 EQU rbp - 24 ; 16 bytes
  tmp1780 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  node EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1780 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1781 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp1781 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1781 ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1780 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1781 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1780
  restore tmp1781
; -----------------------------------------------
; function AST_IsOkAsBox
; -----------------------------------------------
AST_IsOkAsBox:
  ; init frame
  ; ----------
  tmp1789 EQU rbp - 12 ; 4 bytes
  tmp1787 EQU rbp - 28 ; 16 bytes
  tmp1786 EQU rbp - 32 ; 4 bytes
  tmp1785 EQU rbp - 48 ; 16 bytes
  tmp1784 EQU rbp - 52 ; 4 bytes
  tmp1782 EQU rbp - 56 ; 4 bytes
  rv EQU rdi
  node EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [tmp1785 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1787 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ rv ], 0
  mov dword [ tmp1782 ], 1
  lea  rcx, [ tmp1785 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1785 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1786 ], 52
  mov [ tmp1787 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1786 ]
  mov [ tmp1787 + Variant_t.value], rax
  lea rcx, [ tmp1785 ]
  lea rdx, [ tmp1787 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1783
  mov dword [ tmp1784 ], 1
  lea  rcx, [ tmp1787 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1787 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1786 ], 54
  mov [ tmp1785 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1786 ]
  mov [ tmp1785 + Variant_t.value], rax
  lea rcx, [ tmp1787 ]
  lea rdx, [ tmp1785 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1788
  lea  rcx, [ tmp1785 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1785 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1786 ], 55
  mov [ tmp1787 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1786 ]
  mov [ tmp1787 + Variant_t.value], rax
  lea  rcx , [ tmp1785 ]
  lea  rdx , [ tmp1787 ]
  lea  r8 , [ tmp1784 ]
  call  __MOLD_VariantCompareEQ
l1788:
  mov eax, dword [ tmp1784 ]
  mov dword [ tmp1782 ], eax
l1783:
  cmp dword [ tmp1782 ], 0
  jz l1790
  mov dword [ rv ], 1
l1790:
l1791:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1785 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1787 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore node
  restore rv
  restore tmp1782
  restore tmp1784
  restore tmp1785
  restore tmp1786
  restore tmp1787
  restore tmp1789
; -----------------------------------------------
; function AST_CloneNode
; -----------------------------------------------
AST_CloneNode:
  ; init frame
  ; ----------
  tmp1798 EQU rbp - 12 ; 4 bytes
  oneChild EQU rbp - 28 ; 16 bytes
  idx EQU rbp - 32 ; 4 bytes
  tmp1797 EQU rbp - 48 ; 16 bytes
  propertyValue EQU rbp - 64 ; 16 bytes
  propertyId EQU rbp - 80 ; 16 bytes
  tmp1792 EQU rbp - 96 ; 16 bytes
  rv EQU rdi
  newChildren EQU rbp - 112 ; 16 bytes
  dst EQU rbp - 128 ; 16 bytes
  node EQU rbp - 144 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ node ], xmm0
  mov [dst + Variant_t.type], VARIANT_UNDEFINED
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1792 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [tmp1797 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  call  __MOLD_VariantMapCreate
;
; -----------------------------
; BEGIN: for keys propertyId values propertyValue
;
  jmp l1794
l1793:
  lea  rcx , [ dst ]
  lea  rdx , [ propertyId ]
  lea  r8 , [ propertyValue ]
  call  __MOLD_VariantStoreAtKey
  ret
l1794:
  lea  rcx , [ node ]
  lea  rdx , [ propertyId ]
  lea  r8 , [ propertyValue ]
  lea  r9 , [ l1793 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys propertyId values propertyValue
; -----------------------------
;
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ tmp1792 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp1792 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys idx values oneChild
;
  jmp l1796
l1795:
  push rdi
  lea  rcx , [ oneChild ]
  lea  rdi , [ tmp1797 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_CloneNode
  pop rdi
  lea  rcx , [ newChildren ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp1797 ]
  call  __MOLD_VariantStoreAtIndex_int32
  ret
l1796:
  lea  rcx , [ tmp1792 ]
  lea  rdx , [ idx ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l1795 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys idx values oneChild
; -----------------------------
;
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove
  lea  rcx , [ rv ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rdi , [ tmp1798 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp1792 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1798 ]
  mov [ tmp1792 + Variant_t.value], rax
  lea  rcx , [ rv ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp1792 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1792 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1792 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1792 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator propertyValue
  lea  rcx, [ tmp1797 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild

  add  rsp, 176
  pop  rbp
  ret

  restore node
  restore dst
  restore newChildren
  restore rv
  restore tmp1792
  restore propertyId
  restore propertyValue
  restore tmp1797
  restore idx
  restore oneChild
  restore tmp1798
; -----------------------------------------------
; function SymbolTable_GetNextId
; -----------------------------------------------
SymbolTable_GetNextId:
  ; init frame
  ; ----------
  tmp1800 EQU rbp - 12 ; 4 bytes
  tmp1799 EQU rbp - 16 ; 4 bytes
  rv EQU rdi

  push rbp
  mov  rbp, rsp
  sub  rsp, 48


  ; code
  ; ----
  mov eax, dword [ SymbolTable_NextId ]
  mov dword [ rv ], eax
  mov dword [ tmp1800 ], 1
  mov eax, dword [ rv ]
  add eax, dword [ tmp1800 ]
  mov dword [ SymbolTable_NextId ], eax

  ; clean frame
  ; -----------

  add  rsp, 48
  pop  rbp
  ret

  restore rv
  restore tmp1799
  restore tmp1800
; -----------------------------------------------
; function __SymbolTable_constructor$0
; -----------------------------------------------
__SymbolTable_constructor$0:
  ; init frame
  ; ----------
  tmp1806 EQU rbp - 24 ; 16 bytes
  tmp1805 EQU rbp - 40 ; 16 bytes
  tmp1804 EQU rbp - 56 ; 16 bytes
  tmp1803 EQU rbp - 72 ; 16 bytes
  tmp1802 EQU rbp - 88 ; 16 bytes
  tmp1801 EQU rbp - 92 ; 4 bytes
  app EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp1802 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1803 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1804 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1805 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1806 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  call  __SymbolTable__debug$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1801 ], 0
  mov [ tmp1802 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1801 ]
  mov [ tmp1802 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp1802 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1801 ], 128
  mov [ tmp1802 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1801 ]
  mov [ tmp1802 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp1802 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1801 ], 0
  mov [ tmp1802 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1801 ]
  mov [ tmp1802 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1802 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1801 ], 0
  mov [ tmp1802 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1801 ]
  mov [ tmp1802 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp1802 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1802 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1802 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal153 ]
  lea  r8 , [ tmp1802 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1802 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1802 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1804 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1804 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1801 ], 0
  mov [ tmp1805 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1801 ]
  mov [ tmp1805 + Variant_t.value], rax
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1805 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1805 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1803 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1803 ]
  lea rdx, [ tmp1804 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1802 ]
  lea  rdx , [ __literal155 ]
  lea  r8 , [ tmp1803 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1804 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1804 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1801 ], 0
  mov [ tmp1805 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1801 ]
  mov [ tmp1805 + Variant_t.value], rax
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1805 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1805 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1803 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1803 ]
  lea rdx, [ tmp1804 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1802 ]
  lea  rdx , [ __literal158 ]
  lea  r8 , [ tmp1803 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1804 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1804 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1801 ], 0
  mov [ tmp1805 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1801 ]
  mov [ tmp1805 + Variant_t.value], rax
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1805 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1805 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1803 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1803 ]
  lea rdx, [ tmp1804 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1802 ]
  lea  rdx , [ __literal159 ]
  lea  r8 , [ tmp1803 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1804 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1804 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1801 ], 0
  mov [ tmp1805 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1801 ]
  mov [ tmp1805 + Variant_t.value], rax
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1805 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1805 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1803 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1803 ]
  lea rdx, [ tmp1804 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1802 ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp1803 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1804 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1804 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1801 ], 0
  mov [ tmp1805 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1801 ]
  mov [ tmp1805 + Variant_t.value], rax
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1805 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1805 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1803 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1803 ]
  lea rdx, [ tmp1804 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1802 ]
  lea  rdx , [ __literal130 ]
  lea  r8 , [ tmp1803 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1804 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1804 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp1801 ], 0
  mov [ tmp1805 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1801 ]
  mov [ tmp1805 + Variant_t.value], rax
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1805 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1805 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp1804 ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp1805 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1803 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1803 ]
  lea rdx, [ tmp1804 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1802 ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp1803 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp1802 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1802 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp1802 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ this ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1802 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1802 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp1802 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1802 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1803 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1804 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1805 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1806 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore app
  restore tmp1801
  restore tmp1802
  restore tmp1803
  restore tmp1804
  restore tmp1805
  restore tmp1806
; -----------------------------------------------
; function __SymbolTable__debug$0
; -----------------------------------------------
__SymbolTable__debug$0:
  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
; -----------------------------------------------
; function __SymbolTable__error$0
; -----------------------------------------------
__SymbolTable__error$0:
  ; init frame
  ; ----------
  tmp1808 EQU rbp - 24 ; 16 bytes
  tmp1807 EQU rbp - 40 ; 16 bytes
  msg EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp1807 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1808 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1808 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp1808 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1808 ]
  lea  rdx , [ msg ]
  lea  rdi, [ tmp1807 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1807 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1808 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp1807
  restore tmp1808
; -----------------------------------------------
; function __SymbolTable__errorTypeMismatch$0
; -----------------------------------------------
__SymbolTable__errorTypeMismatch$0:
  ; init frame
  ; ----------
  tmp1813 EQU rbp - 24 ; 16 bytes
  tmp1812 EQU rbp - 40 ; 16 bytes
  tmp1811 EQU rbp - 56 ; 16 bytes
  tmp1810 EQU rbp - 72 ; 16 bytes
  tmp1809 EQU rbp - 88 ; 16 bytes
  newType EQU rbp - 104 ; 16 bytes
  oldType EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ oldType ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ newType ], xmm0
  mov [tmp1809 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1810 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1811 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1812 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1813 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ newType ]
  lea  rdi , [ tmp1811 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  push rdi
  lea  rcx , [ oldType ]
  lea  rdi , [ tmp1813 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ tmp1812 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal166 ]
  lea  rdx , [ tmp1813 ]
  lea  r8 , [ tmp1812 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1810 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1811 ]
  lea  rdx , [ tmp1812 ]
  lea  r8 , [ tmp1810 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1809 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal165 ]
  lea  rdx , [ tmp1810 ]
  lea  r8 , [ tmp1809 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp1809 ]
  call  __SymbolTable__error$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1811 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1813 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore oldType
  restore newType
  restore tmp1809
  restore tmp1810
  restore tmp1811
  restore tmp1812
  restore tmp1813
; -----------------------------------------------
; function __SymbolTable__errorIfUsedAsNumber$0
; -----------------------------------------------
__SymbolTable__errorIfUsedAsNumber$0:
  ; init frame
  ; ----------
  tmp1821 EQU rbp - 24 ; 16 bytes
  tmp1820 EQU rbp - 40 ; 16 bytes
  tmp1817 EQU rbp - 44 ; 4 bytes
  tmp1816 EQU rbp - 60 ; 16 bytes
  tmp1815 EQU rbp - 64 ; 4 bytes
  tmp1814 EQU rbp - 80 ; 16 bytes
  symbolInfo EQU rbp - 96 ; 16 bytes
  name EQU rbp - 112 ; 16 bytes
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1814 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1816 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1820 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1821 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1814 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp1814 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1816 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal167 ]
  lea  r8 , [ tmp1816 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1816 ]
  lea  rdi , [ tmp1814 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1817 ], 0
  mov [ tmp1816 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1817 ]
  mov [ tmp1816 + Variant_t.value], rax
  lea rcx, [ tmp1814 ]
  lea rdx, [ tmp1816 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1818
  lea  rcx, [ tmp1821 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal168 ]
  lea  r8 , [ tmp1821 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1820 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp1821 ]
  lea  r8 , [ tmp1820 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp1820 ]
  call  __SymbolTable__error$0
l1818:
l1819:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1814 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1816 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore name
  restore symbolInfo
  restore tmp1814
  restore tmp1815
  restore tmp1816
  restore tmp1817
  restore tmp1820
  restore tmp1821
; -----------------------------------------------
; function __SymbolTable_getDeep$0
; -----------------------------------------------
__SymbolTable_getDeep$0:
  ; init frame
  ; ----------
  tmp1822 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1822 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1822 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1822
; -----------------------------------------------
; function __SymbolTable_exportSymbols$0
; -----------------------------------------------
__SymbolTable_exportSymbols$0:
  ; init frame
  ; ----------
  tmp1823 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1823 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1823 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1823
; -----------------------------------------------
; function __SymbolTable_insert$0
; -----------------------------------------------
__SymbolTable_insert$0:
  ; init frame
  ; ----------
  tmp1832 EQU rbp - 24 ; 16 bytes
  tmp1831 EQU rbp - 40 ; 16 bytes
  tmp1828 EQU rbp - 44 ; 4 bytes
  tmp1827 EQU rbp - 60 ; 16 bytes
  tmp1826 EQU rbp - 76 ; 16 bytes
  tmp1825 EQU rbp - 92 ; 16 bytes
  tmp1824 EQU rbp - 96 ; 4 bytes
  entry EQU rbp - 112 ; 16 bytes
  name EQU rbp - 128 ; 16 bytes
  this EQU rbp - 144 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ entry ], xmm0
  mov [tmp1825 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1826 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1827 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1831 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1832 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1827 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp1827 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1826 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1827 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1826 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1826 ]
  lea  rdi , [ tmp1825 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1828 ], 0
  mov [ tmp1826 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1828 ]
  mov [ tmp1826 + Variant_t.value], rax
  lea rcx, [ tmp1825 ]
  lea rdx, [ tmp1826 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1829
  lea  rcx, [ tmp1832 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp1832 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1831 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal169 ]
  lea  rdx , [ tmp1832 ]
  lea  r8 , [ tmp1831 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp1831 ]
  call  __SymbolTable__error$0
  jmp l1830
l1829:
  lea  rcx, [ tmp1826 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp1826 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp1826 ]
  lea  rdx , [ name ]
  lea  r8 , [ entry ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1828 ], 0
  mov [ tmp1826 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1828 ]
  mov [ tmp1826 + Variant_t.value], rax
  lea  rcx , [ entry ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp1826 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp1828 ], 0
  mov [ tmp1826 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1828 ]
  mov [ tmp1826 + Variant_t.value], rax
  lea  rcx , [ entry ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp1826 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1826 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1826 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ entry ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1826 ]
  call  __MOLD_VariantStoreAtKey
l1830:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1825 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1826 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1827 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore name
  restore entry
  restore tmp1824
  restore tmp1825
  restore tmp1826
  restore tmp1827
  restore tmp1828
  restore tmp1831
  restore tmp1832
; -----------------------------------------------
; function __SymbolTable_remove$0
; -----------------------------------------------
__SymbolTable_remove$0:
  ; init frame
  ; ----------
  symbolInfo EQU rbp - 24 ; 16 bytes
  id EQU rbp - 40 ; 16 bytes
  tmp1838 EQU rbp - 56 ; 16 bytes
  tmp1837 EQU rbp - 72 ; 16 bytes
  tmp1836 EQU rbp - 76 ; 4 bytes
  tmp1833 EQU rbp - 92 ; 16 bytes
  newSymbols EQU rbp - 108 ; 16 bytes
  entry EQU rbp - 124 ; 16 bytes
  name EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [entry + Variant_t.type], VARIANT_UNDEFINED
  mov [newSymbols + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1833 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1837 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1838 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1833 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea rcx, [ entry ]
  lea rdx, [ tmp1833 ]
  call __MOLD_VariantMove
  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newSymbols ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1833 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp1833 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys id values symbolInfo
;
  jmp l1835
l1834:
  lea  rcx, [ tmp1837 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1837 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1838 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ entry ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1838 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp1837 ]
  lea rdx, [ tmp1838 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1839
  lea  rcx , [ newSymbols ]
  lea  rdx , [ id ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey
l1839:
l1840:
  ret
l1835:
  lea  rcx , [ tmp1833 ]
  lea  rdx , [ id ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l1834 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys id values symbolInfo
; -----------------------------
;
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ newSymbols ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1833 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1837 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1838 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore name
  restore entry
  restore newSymbols
  restore tmp1833
  restore tmp1836
  restore tmp1837
  restore tmp1838
  restore id
  restore symbolInfo
; -----------------------------------------------
; function __SymbolTable_importExternalVariable$0
; -----------------------------------------------
__SymbolTable_importExternalVariable$0:
  ; init frame
  ; ----------
  tmp1842 EQU rbp - 24 ; 16 bytes
  tmp1841 EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1841 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1842 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1841 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1841 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1842 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1842 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1841 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1842 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1842 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_VAR_GLOBAL ]
  mov [ tmp1842 + Variant_t.value], rax
  lea  rcx , [ tmp1841 ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp1842 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1841 ]
  call  __SymbolTable_insert$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1841 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1842 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1841
  restore tmp1842
; -----------------------------------------------
; function __SymbolTable_insertGlobal$0
; -----------------------------------------------
__SymbolTable_insertGlobal$0:
  ; init frame
  ; ----------
  tmp1845 EQU rbp - 24 ; 16 bytes
  tmp1844 EQU rbp - 40 ; 16 bytes
  tmp1843 EQU rbp - 56 ; 16 bytes
  entry EQU rbp - 72 ; 16 bytes
  name EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ entry ], xmm0
  mov [tmp1843 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1844 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1845 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1845 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp1845 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1845 ]
  lea  rdi, [ tmp1844 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 1
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ tmp1844 ]
  lea  rdx , [ name ]
  lea  r8 , [ entry ]
  lea  rdi, [ tmp1843 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 2
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1843 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1844 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1845 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore entry
  restore tmp1843
  restore tmp1844
  restore tmp1845
; -----------------------------------------------
; function __SymbolTable__lookupInternal$0
; -----------------------------------------------
__SymbolTable__lookupInternal$0:
  ; init frame
  ; ----------
  x EQU rbp - 24 ; 16 bytes
  tmp1862 EQU rbp - 28 ; 4 bytes
  tmp1858 EQU rbp - 32 ; 4 bytes
  tmp1856 EQU rbp - 36 ; 4 bytes
  tmp1853 EQU rbp - 40 ; 4 bytes
  tmp1852 EQU rbp - 44 ; 4 bytes
  tmp1850 EQU rbp - 48 ; 4 bytes
  tmp1847 EQU rbp - 64 ; 16 bytes
  tmp1846 EQU rbp - 80 ; 16 bytes
  tab EQU rbp - 96 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 112 ; 16 bytes
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tab + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1846 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1847 + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1847 ]
  lea  rdx , [ name ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tab ]
  call __MOLD_VariantDestroy
  lea rcx, [ tab ]
  lea rdx, [ this ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: while
;
l1848:
  mov dword [ tmp1850 ], 0
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp1846 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1853 ], 0
  mov [ tmp1847 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1853 ]
  mov [ tmp1847 + Variant_t.value], rax
  lea rcx, [ tmp1846 ]
  lea rdx, [ tmp1847 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1851
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tab ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1853 ], 0
  mov [ tmp1846 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1853 ]
  mov [ tmp1846 + Variant_t.value], rax
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ tmp1847 ]
  lea  r8 , [ tmp1850 ]
  call  __MOLD_VariantCompareLT
l1851:
  cmp dword [ tmp1850 ], 0
  jz l1849
  lea  rcx , [ tab ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tab ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tab ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp1846 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 3
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1846 ]
  call __MOLD_VariantMove
  jmp l1848
l1849:
;
; END: while
; -----------------------------
;
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp1846 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1853 ], 0
  mov [ tmp1847 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1853 ]
  mov [ tmp1847 + Variant_t.value], rax
  lea rcx, [ tmp1846 ]
  lea rdx, [ tmp1847 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1854
  mov dword [ tmp1856 ], 0
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tab ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1853 ], 0
  mov [ tmp1846 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1853 ]
  mov [ tmp1846 + Variant_t.value], rax
  lea rcx, [ tmp1847 ]
  lea rdx, [ tmp1846 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1857
  lea  rcx, [ tmp1846 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp1846 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1853 ], 0
  mov [ tmp1847 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1853 ]
  mov [ tmp1847 + Variant_t.value], rax
  lea  rcx , [ tmp1847 ]
  lea  rdx , [ tmp1846 ]
  lea  r8 , [ tmp1856 ]
  call  __MOLD_VariantCompareLT
l1857:
  cmp dword [ tmp1856 ], 0
  jz l1859
  mov dword [ tmp1858 ], 1
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp1847 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1853 ], 1
  mov [ tmp1846 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1853 ]
  mov [ tmp1846 + Variant_t.value], rax
  lea rcx, [ tmp1847 ]
  lea rdx, [ tmp1846 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1861
  lea  rcx, [ tmp1846 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp1846 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1853 ], 2
  mov [ tmp1847 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1853 ]
  mov [ tmp1847 + Variant_t.value], rax
  lea  rcx , [ tmp1846 ]
  lea  rdx , [ tmp1847 ]
  lea  r8 , [ tmp1858 ]
  call  __MOLD_VariantCompareEQ
l1861:
  cmp dword [ tmp1858 ], 0
  jz l1863
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  call  __MOLD_VariantArrayCreate
  mov dword [ tmp1853 ], 0
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ tmp1853 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
l1863:
l1864:
l1859:
l1860:
l1854:
l1855:

  ; clean frame
  ; -----------
  lea  rcx, [ tab ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1846 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1847 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tab
  restore tmp1846
  restore tmp1847
  restore tmp1850
  restore tmp1852
  restore tmp1853
  restore tmp1856
  restore tmp1858
  restore tmp1862
  restore x
; -----------------------------------------------
; function __SymbolTable_lookup$0
; -----------------------------------------------
__SymbolTable_lookup$0:
  ; init frame
  ; ----------
  tmp1872 EQU rbp - 24 ; 16 bytes
  tmp1871 EQU rbp - 40 ; 16 bytes
  tmp1868 EQU rbp - 56 ; 16 bytes
  tmp1867 EQU rbp - 60 ; 4 bytes
  tmp1866 EQU rbp - 64 ; 4 bytes
  tmp1865 EQU rbp - 80 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 96 ; 16 bytes
  this EQU rbp - 112 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1865 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1868 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1871 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1872 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1865 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__lookupInternal$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1865 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp1865 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1867 ], 0
  mov [ tmp1868 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1867 ]
  mov [ tmp1868 + Variant_t.value], rax
  lea rcx, [ tmp1865 ]
  lea rdx, [ tmp1868 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1869
  lea  rcx, [ tmp1872 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal173 ]
  lea  r8 , [ tmp1872 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1871 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp1872 ]
  lea  r8 , [ tmp1871 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp1871 ]
  call  __SymbolTable__error$0
l1869:
l1870:
  lea  rcx, [ tmp1868 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1868 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1865 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1865 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp1868 ]
  lea rdx, [ tmp1865 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l1873
  lea  rcx, [ tmp1865 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1865 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1865 ]
  call  __MOLD_VariantStoreAtKey
l1873:
l1874:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1865 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1868 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1865
  restore tmp1866
  restore tmp1867
  restore tmp1868
  restore tmp1871
  restore tmp1872
; -----------------------------------------------
; function __SymbolTable_lookupForRead$0
; -----------------------------------------------
__SymbolTable_lookupForRead$0:
  ; init frame
  ; ----------
  tmp1878 EQU rbp - 24 ; 16 bytes
  tmp1877 EQU rbp - 28 ; 4 bytes
  tmp1876 EQU rbp - 44 ; 16 bytes
  tmp1875 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1875 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1876 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1878 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1875 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1875 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1876 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp1876 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1877 ], 1
  mov [ tmp1878 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1877 ]
  mov [ tmp1878 + Variant_t.value], rax
  lea  rcx , [ tmp1876 ]
  lea  rdx , [ tmp1878 ]
  lea  r8 , [ tmp1875 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp1875 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1875 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1876 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1878 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1875
  restore tmp1876
  restore tmp1877
  restore tmp1878
; -----------------------------------------------
; function __SymbolTable_lookupForCall$0
; -----------------------------------------------
__SymbolTable_lookupForCall$0:
  ; init frame
  ; ----------
  tmp1882 EQU rbp - 24 ; 16 bytes
  tmp1881 EQU rbp - 28 ; 4 bytes
  tmp1880 EQU rbp - 44 ; 16 bytes
  tmp1879 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  isRetValUsed EQU rbp - 76 ; 16 bytes
  paramsCnt EQU rbp - 92 ; 16 bytes
  name EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ isRetValUsed ], xmm0
  mov [tmp1879 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1880 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1882 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ paramsCnt ]
  lea  r9 , [ isRetValUsed ]
  lea  rdi , [ tmp1879 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupFunction$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1879 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1880 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp1880 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1881 ], 1
  mov [ tmp1882 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1881 ]
  mov [ tmp1882 + Variant_t.value], rax
  lea  rcx , [ tmp1880 ]
  lea  rdx , [ tmp1882 ]
  lea  r8 , [ tmp1879 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp1879 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1879 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1880 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1882 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore name
  restore paramsCnt
  restore isRetValUsed
  restore rv
  restore tmp1879
  restore tmp1880
  restore tmp1881
  restore tmp1882
; -----------------------------------------------
; function __SymbolTable_lookupForWrite$0
; -----------------------------------------------
__SymbolTable_lookupForWrite$0:
  ; init frame
  ; ----------
  tmp1886 EQU rbp - 24 ; 16 bytes
  tmp1885 EQU rbp - 28 ; 4 bytes
  tmp1884 EQU rbp - 44 ; 16 bytes
  tmp1883 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1883 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1884 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1886 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1883 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1883 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1884 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp1884 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1885 ], 1
  mov [ tmp1886 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1885 ]
  mov [ tmp1886 + Variant_t.value], rax
  lea  rcx , [ tmp1884 ]
  lea  rdx , [ tmp1886 ]
  lea  r8 , [ tmp1883 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp1883 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1883 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1884 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1886 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1883
  restore tmp1884
  restore tmp1885
  restore tmp1886
; -----------------------------------------------
; function __SymbolTable_lookupForReadAndWrite$0
; -----------------------------------------------
__SymbolTable_lookupForReadAndWrite$0:
  ; init frame
  ; ----------
  tmp1890 EQU rbp - 24 ; 16 bytes
  tmp1889 EQU rbp - 28 ; 4 bytes
  tmp1888 EQU rbp - 44 ; 16 bytes
  tmp1887 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1887 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1888 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1890 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1887 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1887 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1888 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp1888 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1889 ], 1
  mov [ tmp1890 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1889 ]
  mov [ tmp1890 + Variant_t.value], rax
  lea  rcx , [ tmp1888 ]
  lea  rdx , [ tmp1890 ]
  lea  r8 , [ tmp1887 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp1887 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1890 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp1890 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1889 ], 1
  mov [ tmp1888 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1889 ]
  mov [ tmp1888 + Variant_t.value], rax
  lea  rcx , [ tmp1890 ]
  lea  rdx , [ tmp1888 ]
  lea  r8 , [ tmp1887 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp1887 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1887 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1888 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1890 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1887
  restore tmp1888
  restore tmp1889
  restore tmp1890
; -----------------------------------------------
; function __SymbolTable_lookupForWriteOrInsert$0
; -----------------------------------------------
__SymbolTable_lookupForWriteOrInsert$0:
  ; init frame
  ; ----------
  tmp1894 EQU rbp - 24 ; 16 bytes
  tmp1893 EQU rbp - 28 ; 4 bytes
  tmp1892 EQU rbp - 44 ; 16 bytes
  tmp1891 EQU rbp - 48 ; 4 bytes
  rv EQU rdi
  name EQU rbp - 64 ; 16 bytes
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1892 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1894 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1892 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_isset$0
  pop rdi
  mov dword [ tmp1893 ], 0
  mov eax, dword [ tmp1893 ]
  mov [ tmp1894 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1894 + Variant_t.value], rax
  lea rcx, [ tmp1892 ]
  lea rdx, [ tmp1894 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1895
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __SymbolTable_insertLocal$0
l1895:
l1896:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1894 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupForWrite$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1894 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1892 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1894 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1891
  restore tmp1892
  restore tmp1893
  restore tmp1894
; -----------------------------------------------
; function __SymbolTable_lookupGlobal$0
; -----------------------------------------------
__SymbolTable_lookupGlobal$0:
  ; init frame
  ; ----------
  tmp1898 EQU rbp - 24 ; 16 bytes
  tmp1897 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1897 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1898 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1898 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp1898 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1898 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp1897 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1897 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1897 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1898 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1897
  restore tmp1898
; -----------------------------------------------
; function __SymbolTable_decreaseReadHits$0
; -----------------------------------------------
__SymbolTable_decreaseReadHits$0:
  ; init frame
  ; ----------
  tmp1902 EQU rbp - 24 ; 16 bytes
  tmp1901 EQU rbp - 28 ; 4 bytes
  tmp1900 EQU rbp - 44 ; 16 bytes
  tmp1899 EQU rbp - 60 ; 16 bytes
  entry EQU rbp - 76 ; 16 bytes
  name EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [entry + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1899 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1900 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1902 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1899 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea rcx, [ entry ]
  lea rdx, [ tmp1899 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1900 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ entry ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp1900 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1901 ], 1
  mov [ tmp1902 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1901 ]
  mov [ tmp1902 + Variant_t.value], rax
  lea  rcx , [ tmp1900 ]
  lea  rdx , [ tmp1902 ]
  lea  r8 , [ tmp1899 ]
  call  __MOLD_VariantSub
  lea  rcx , [ entry ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp1899 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1899 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1900 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1902 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore entry
  restore tmp1899
  restore tmp1900
  restore tmp1901
  restore tmp1902
; -----------------------------------------------
; function __SymbolTable_decreaseWriteHits$0
; -----------------------------------------------
__SymbolTable_decreaseWriteHits$0:
  ; init frame
  ; ----------
  tmp1906 EQU rbp - 24 ; 16 bytes
  tmp1905 EQU rbp - 28 ; 4 bytes
  tmp1904 EQU rbp - 44 ; 16 bytes
  tmp1903 EQU rbp - 60 ; 16 bytes
  entry EQU rbp - 76 ; 16 bytes
  name EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [entry + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1903 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1904 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1906 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1903 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea rcx, [ entry ]
  lea rdx, [ tmp1903 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1904 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ entry ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp1904 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1905 ], 1
  mov [ tmp1906 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1905 ]
  mov [ tmp1906 + Variant_t.value], rax
  lea  rcx , [ tmp1904 ]
  lea  rdx , [ tmp1906 ]
  lea  r8 , [ tmp1903 ]
  call  __MOLD_VariantSub
  lea  rcx , [ entry ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp1903 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ entry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1903 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1904 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1906 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore entry
  restore tmp1903
  restore tmp1904
  restore tmp1905
  restore tmp1906
; -----------------------------------------------
; function __SymbolTable_isset$0
; -----------------------------------------------
__SymbolTable_isset$0:
  ; init frame
  ; ----------
  tmp1910 EQU rbp - 12 ; 4 bytes
  tmp1909 EQU rbp - 28 ; 16 bytes
  tmp1908 EQU rbp - 44 ; 16 bytes
  tmp1907 EQU rbp - 48 ; 4 bytes
  rv EQU rdi
  name EQU rbp - 64 ; 16 bytes
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1908 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1909 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1909 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__lookupInternal$0
  pop rdi
  push rdi
  lea  rcx , [ tmp1909 ]
  lea  rdi , [ tmp1908 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1910 ], 0
  mov [ tmp1909 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1910 ]
  mov [ tmp1909 + Variant_t.value], rax
  lea  rcx , [ tmp1908 ]
  lea  rdx , [ tmp1909 ]
  lea  r8 , [ tmp1907 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp1907 ]
  mov [ rv + Variant_t.type], VARIANT_BOOLEAN
  mov [ rv + Variant_t.value], rax

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1908 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1909 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1907
  restore tmp1908
  restore tmp1909
  restore tmp1910
; -----------------------------------------------
; function __SymbolTable_useAsArray$0
; -----------------------------------------------
__SymbolTable_useAsArray$0:
  ; init frame
  ; ----------
  tmp1912 EQU rbp - 24 ; 16 bytes
  tmp1911 EQU rbp - 28 ; 4 bytes
  name EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1912 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$0
  mov dword [ tmp1911 ], 9
  mov [ tmp1912 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1911 ]
  mov [ tmp1912 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1912 ]
  call  __SymbolTable_assignTypeAndFreeze$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1912 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1911
  restore tmp1912
; -----------------------------------------------
; function __SymbolTable_useAsArrayOrString$0
; -----------------------------------------------
__SymbolTable_useAsArrayOrString$0:
  ; init frame
  ; ----------
  tmp1914 EQU rbp - 24 ; 16 bytes
  tmp1913 EQU rbp - 28 ; 4 bytes
  name EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1914 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$0
  mov dword [ tmp1913 ], -1
  mov [ tmp1914 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1913 ]
  mov [ tmp1914 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1914 ]
  call  __SymbolTable_assignTypeAndFreeze$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1914 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1913
  restore tmp1914
; -----------------------------------------------
; function __SymbolTable_useAsMap$0
; -----------------------------------------------
__SymbolTable_useAsMap$0:
  ; init frame
  ; ----------
  tmp1916 EQU rbp - 24 ; 16 bytes
  tmp1915 EQU rbp - 28 ; 4 bytes
  name EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1916 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$0
  mov dword [ tmp1915 ], 10
  mov [ tmp1916 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1915 ]
  mov [ tmp1916 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1916 ]
  call  __SymbolTable_assignTypeAndFreeze$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1916 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1915
  restore tmp1916
; -----------------------------------------------
; function __SymbolTable_useAsIndex$0
; -----------------------------------------------
__SymbolTable_useAsIndex$0:
  ; init frame
  ; ----------
  tmp1918 EQU rbp - 24 ; 16 bytes
  tmp1917 EQU rbp - 28 ; 4 bytes
  name EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1918 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1917 ], 1
  mov [ tmp1918 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1917 ]
  mov [ tmp1918 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1918 ]
  call  __SymbolTable_assignType$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1918 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1917
  restore tmp1918
; -----------------------------------------------
; function __SymbolTable_useAsInteger$0
; -----------------------------------------------
__SymbolTable_useAsInteger$0:
  ; init frame
  ; ----------
  tmp1920 EQU rbp - 24 ; 16 bytes
  tmp1919 EQU rbp - 28 ; 4 bytes
  name EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1920 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1919 ], 1
  mov [ tmp1920 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1919 ]
  mov [ tmp1920 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1920 ]
  call  __SymbolTable_assignType$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1920 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1919
  restore tmp1920
; -----------------------------------------------
; function __SymbolTable_useAsFloat$0
; -----------------------------------------------
__SymbolTable_useAsFloat$0:
  ; init frame
  ; ----------
  tmp1922 EQU rbp - 24 ; 16 bytes
  tmp1921 EQU rbp - 28 ; 4 bytes
  name EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1922 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1921 ], 3
  mov [ tmp1922 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1921 ]
  mov [ tmp1922 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1922 ]
  call  __SymbolTable_assignType$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1922 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1921
  restore tmp1922
; -----------------------------------------------
; function __SymbolTable_useAsString$0
; -----------------------------------------------
__SymbolTable_useAsString$0:
  ; init frame
  ; ----------
  tmp1924 EQU rbp - 24 ; 16 bytes
  tmp1923 EQU rbp - 28 ; 4 bytes
  name EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1924 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$0
  mov dword [ tmp1923 ], 4
  mov [ tmp1924 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1923 ]
  mov [ tmp1924 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1924 ]
  call  __SymbolTable_assignType$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1924 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1923
  restore tmp1924
; -----------------------------------------------
; function __SymbolTable_useAsKey$0
; -----------------------------------------------
__SymbolTable_useAsKey$0:
  ; init frame
  ; ----------
  tmp1926 EQU rbp - 24 ; 16 bytes
  tmp1925 EQU rbp - 28 ; 4 bytes
  name EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1926 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$0
  mov dword [ tmp1925 ], 4
  mov [ tmp1926 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1925 ]
  mov [ tmp1926 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1926 ]
  call  __SymbolTable_assignType$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1926 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1925
  restore tmp1926
; -----------------------------------------------
; function __SymbolTable_useAsObject$0
; -----------------------------------------------
__SymbolTable_useAsObject$0:
  ; init frame
  ; ----------
  tmp1928 EQU rbp - 24 ; 16 bytes
  tmp1927 EQU rbp - 28 ; 4 bytes
  name EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1928 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$0
  mov dword [ tmp1927 ], 6
  mov [ tmp1928 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1927 ]
  mov [ tmp1928 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1928 ]
  call  __SymbolTable_assignType$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1928 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1927
  restore tmp1928
; -----------------------------------------------
; function __SymbolTable_useAsMapOrObject$0
; -----------------------------------------------
__SymbolTable_useAsMapOrObject$0:
  ; init frame
  ; ----------
  tmp1930 EQU rbp - 24 ; 16 bytes
  tmp1929 EQU rbp - 28 ; 4 bytes
  name EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1930 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __SymbolTable__errorIfUsedAsNumber$0
  mov dword [ tmp1929 ], -1
  mov [ tmp1930 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1929 ]
  mov [ tmp1930 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1930 ]
  call  __SymbolTable_assignTypeAndFreeze$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1930 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1929
  restore tmp1930
; -----------------------------------------------
; function __SymbolTable_useAsTypeofArg$0
; -----------------------------------------------
__SymbolTable_useAsTypeofArg$0:
  ; init frame
  ; ----------
  tmp1932 EQU rbp - 24 ; 16 bytes
  tmp1931 EQU rbp - 28 ; 4 bytes
  name EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1932 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp1931 ], -1
  mov [ tmp1932 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1931 ]
  mov [ tmp1932 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp1932 ]
  call  __SymbolTable_assignTypeAndFreeze$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1932 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore tmp1931
  restore tmp1932
; -----------------------------------------------
; function __SymbolTable_useAsNumber$0
; -----------------------------------------------
__SymbolTable_useAsNumber$0:
  ; init frame
  ; ----------
  tmp1934 EQU rbp - 12 ; 4 bytes
  tmp1933 EQU rbp - 28 ; 16 bytes
  symbolInfo EQU rbp - 44 ; 16 bytes
  name EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1933 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1933 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp1933 ]
  call __MOLD_VariantMove
  mov dword [ tmp1934 ], 1
  mov eax, dword [ tmp1934 ]
  mov [ tmp1933 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1933 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal167 ]
  lea  r8 , [ tmp1933 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1933 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore symbolInfo
  restore tmp1933
  restore tmp1934
; -----------------------------------------------
; function __SymbolTable_enterScope$0
; -----------------------------------------------
__SymbolTable_enterScope$0:
  ; init frame
  ; ----------
  tmp1944 EQU rbp - 24 ; 16 bytes
  tmp1943 EQU rbp - 28 ; 4 bytes
  tmp1942 EQU rbp - 44 ; 16 bytes
  tmp1941 EQU rbp - 60 ; 16 bytes
  tmp1940 EQU rbp - 76 ; 16 bytes
  tmp1937 EQU rbp - 92 ; 16 bytes
  tmp1936 EQU rbp - 108 ; 16 bytes
  tmp1935 EQU rbp - 112 ; 4 bytes
  rv EQU rdi
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1936 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1937 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1940 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1941 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1942 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1944 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1936 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp1936 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1937 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal150 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp1936 ]
  lea rdx, [ tmp1937 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l1938
  lea  rcx, [ tmp1936 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp1936 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1936 ]
  lea  rdi , [ tmp1937 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1941 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1937 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp1941 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1940 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal175 ]
  lea  rdx , [ tmp1941 ]
  lea  r8 , [ tmp1940 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp1940 ]
  call  __SymbolTable__error$0
l1938:
l1939:
  lea  rcx, [ tmp1937 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1937 ]
  lea  rdx, [vtable_SymbolTable]
  call __MOLD_VariantObjectCreate
  lea  rcx, [ tmp1936 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp1936 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1937 ]
  lea  rdx , [ tmp1936 ]
  lea  rdi , [ tmp1942 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_constructor$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1937 ]
  call __MOLD_VariantMove
  lea  rcx , [ rv ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ this ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1942 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp1942 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1943 ], 1
  mov [ tmp1944 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1943 ]
  mov [ tmp1944 + Variant_t.value], rax
  lea  rcx , [ tmp1942 ]
  lea  rdx , [ tmp1944 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1937 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1937 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1937 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ tmp1937 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1936 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1937 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1942 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1944 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1935
  restore tmp1936
  restore tmp1937
  restore tmp1940
  restore tmp1941
  restore tmp1942
  restore tmp1943
  restore tmp1944
; -----------------------------------------------
; function __SymbolTable_enterScopeForLoop$0
; -----------------------------------------------
__SymbolTable_enterScopeForLoop$0:
  ; init frame
  ; ----------
  tmp1948 EQU rbp - 24 ; 16 bytes
  tmp1947 EQU rbp - 28 ; 4 bytes
  tmp1946 EQU rbp - 44 ; 16 bytes
  tmp1945 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1945 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1946 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1948 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp1945 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_enterScope$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1945 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1946 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1946 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1947 ], 1
  mov [ tmp1948 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1947 ]
  mov [ tmp1948 + Variant_t.value], rax
  lea  rcx , [ tmp1946 ]
  lea  rdx , [ tmp1948 ]
  lea  r8 , [ tmp1945 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp1945 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1945 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1946 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1948 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1945
  restore tmp1946
  restore tmp1947
  restore tmp1948
; -----------------------------------------------
; function __SymbolTable_enterScopeForProcedure$0
; -----------------------------------------------
__SymbolTable_enterScopeForProcedure$0:
  ; init frame
  ; ----------
  tmp1952 EQU rbp - 24 ; 16 bytes
  tmp1951 EQU rbp - 28 ; 4 bytes
  tmp1950 EQU rbp - 44 ; 16 bytes
  tmp1949 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  functionName EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ functionName ], xmm0
  mov [tmp1949 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1950 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1952 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp1949 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_enterScope$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1949 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1950 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp1950 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1951 ], 1
  mov [ tmp1952 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1951 ]
  mov [ tmp1952 + Variant_t.value], rax
  lea  rcx , [ tmp1950 ]
  lea  rdx , [ tmp1952 ]
  lea  r8 , [ tmp1949 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ rv ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp1949 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ rv ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ functionName ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1949 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1950 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1952 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore functionName
  restore rv
  restore tmp1949
  restore tmp1950
  restore tmp1951
  restore tmp1952
; -----------------------------------------------
; function __SymbolTable_leaveScope$0
; -----------------------------------------------
__SymbolTable_leaveScope$0:
  ; init frame
  ; ----------
  tmp1956 EQU rbp - 24 ; 16 bytes
  tmp1955 EQU rbp - 28 ; 4 bytes
  tmp1954 EQU rbp - 44 ; 16 bytes
  tmp1953 EQU rbp - 48 ; 4 bytes
  rv EQU rdi
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1954 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1956 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1954 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp1954 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1955 ], 1
  mov [ tmp1956 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1955 ]
  mov [ tmp1956 + Variant_t.value], rax
  lea rcx, [ tmp1956 ]
  lea rdx, [ tmp1954 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l1957
  lea  rcx , [ this ]
  lea  rdx , [ __literal179 ]
  call  __SymbolTable__error$0
l1957:
l1958:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1954 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1956 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1953
  restore tmp1954
  restore tmp1955
  restore tmp1956
; -----------------------------------------------
; function __SymbolTable_insertFunction$0
; -----------------------------------------------
__SymbolTable_insertFunction$0:
  ; init frame
  ; ----------
  tmp1960 EQU rbp - 24 ; 16 bytes
  tmp1959 EQU rbp - 40 ; 16 bytes
  newEntry EQU rbp - 56 ; 16 bytes
  proto EQU rbp - 72 ; 16 bytes
  name EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  mov [newEntry + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1959 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1960 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1959 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1959 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1960 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1960 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1959 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1960 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1960 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_FUNCTION ]
  mov [ tmp1960 + Variant_t.value], rax
  lea  rcx , [ tmp1959 ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp1960 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1960 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1960 ]
  lea rdx, [ proto ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1959 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1960 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ newEntry ]
  lea rdx, [ tmp1959 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  call  __SymbolTable_insertGlobal$0

  ; clean frame
  ; -----------
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1959 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1960 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore proto
  restore newEntry
  restore tmp1959
  restore tmp1960
; -----------------------------------------------
; function __SymbolTable_lookupFunction$0
; -----------------------------------------------
__SymbolTable_lookupFunction$0:
  ; init frame
  ; ----------
  tmp1990 EQU rbp - 12 ; 4 bytes
  tmp1986 EQU rbp - 16 ; 4 bytes
  tmp1985 EQU rbp - 20 ; 4 bytes
  tmp1983 EQU rbp - 24 ; 4 bytes
  tmp1982 EQU rbp - 40 ; 16 bytes
  tmp1981 EQU rbp - 56 ; 16 bytes
  tmp1980 EQU rbp - 72 ; 16 bytes
  tmp1979 EQU rbp - 88 ; 16 bytes
  tmp1978 EQU rbp - 104 ; 16 bytes
  tmp1973 EQU rbp - 108 ; 4 bytes
  tmp1970 EQU rbp - 124 ; 16 bytes
  tmp1969 EQU rbp - 128 ; 4 bytes
  tmp1968 EQU rbp - 144 ; 16 bytes
  tmp1967 EQU rbp - 160 ; 16 bytes
  tmp1964 EQU rbp - 176 ; 16 bytes
  tmp1963 EQU rbp - 180 ; 4 bytes
  tmp1962 EQU rbp - 184 ; 4 bytes
  tmp1961 EQU rbp - 200 ; 16 bytes
  rv EQU rdi
  isRetValUsed EQU rbp - 216 ; 16 bytes
  paramsCnt EQU rbp - 232 ; 16 bytes
  name EQU rbp - 248 ; 16 bytes
  this EQU rbp - 264 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ isRetValUsed ], xmm0
  mov [tmp1961 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1964 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1967 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1968 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1970 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1978 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1979 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1980 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1981 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1982 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1961 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1961 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1961 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp1961 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1963 ], 7
  mov [ tmp1964 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1963 ]
  mov [ tmp1964 + Variant_t.value], rax
  lea rcx, [ tmp1961 ]
  lea rdx, [ tmp1964 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1965
  lea  rcx, [ tmp1968 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal180 ]
  lea  r8 , [ tmp1968 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1967 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp1968 ]
  lea  r8 , [ tmp1967 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp1967 ]
  call  __SymbolTable__error$0
  jmp l1966
l1965:
  lea  rcx, [ tmp1970 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1970 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1961 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1970 ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp1961 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1961 ]
  lea  rdi , [ tmp1964 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1963 ], 0
  mov [ tmp1961 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1963 ]
  mov [ tmp1961 + Variant_t.value], rax
  lea rcx, [ tmp1964 ]
  lea rdx, [ tmp1961 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1971
  lea  rcx, [ tmp1964 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1964 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1961 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1964 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp1961 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1963 ], 34
  mov [ tmp1964 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1963 ]
  mov [ tmp1964 + Variant_t.value], rax
  lea rcx, [ tmp1961 ]
  lea rdx, [ tmp1964 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1974
  mov dword [ tmp1963 ], 1
  mov [ tmp1961 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1963 ]
  mov [ tmp1961 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp1961 ]
  lea  r8 , [ paramsCnt ]
  call  __MOLD_VariantSub
l1974:
l1975:
  lea  rcx, [ tmp1970 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1970 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1961 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1970 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp1961 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1961 ]
  lea  rdi , [ tmp1964 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp1964 ]
  lea rdx, [ paramsCnt ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l1976
  lea  rcx, [ tmp1980 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1980 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1970 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1980 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp1970 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1970 ]
  lea  rdi , [ tmp1961 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ tmp1961 ]
  lea  rdi , [ tmp1964 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ paramsCnt ]
  lea  rdi , [ tmp1961 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp1982 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1961 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp1982 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1981 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal185 ]
  lea  rdx , [ tmp1982 ]
  lea  r8 , [ tmp1981 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1979 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1964 ]
  lea  rdx , [ tmp1981 ]
  lea  r8 , [ tmp1979 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1978 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal184 ]
  lea  rdx , [ tmp1979 ]
  lea  r8 , [ tmp1978 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1968 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp1978 ]
  lea  r8 , [ tmp1968 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1967 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal183 ]
  lea  rdx , [ tmp1968 ]
  lea  r8 , [ tmp1967 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp1967 ]
  call  __SymbolTable__error$0
  jmp l1977
l1976:
  mov dword [ tmp1983 ], 0
  mov dword [ tmp1986 ], 1
  mov eax, dword [ tmp1986 ]
  mov [ tmp1964 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1964 + Variant_t.value], rax
  lea rcx, [ isRetValUsed ]
  lea rdx, [ tmp1964 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1984
  lea  rcx, [ tmp1970 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1970 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1961 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1970 ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp1961 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1961 ]
  lea  rdi , [ tmp1964 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1963 ], 0
  mov [ tmp1961 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1963 ]
  mov [ tmp1961 + Variant_t.value], rax
  lea  rcx , [ tmp1964 ]
  lea  rdx , [ tmp1961 ]
  lea  r8 , [ tmp1983 ]
  call  __MOLD_VariantCompareEQ
l1984:
  cmp dword [ tmp1983 ], 0
  jz l1987
  lea  rcx, [ tmp1968 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal187 ]
  lea  r8 , [ tmp1968 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1967 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal183 ]
  lea  rdx , [ tmp1968 ]
  lea  r8 , [ tmp1967 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp1967 ]
  call  __SymbolTable__error$0
  jmp l1988
l1987:
  mov dword [ tmp1985 ], 0
  mov dword [ tmp1990 ], 0
  mov eax, dword [ tmp1990 ]
  mov [ tmp1961 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp1961 + Variant_t.value], rax
  lea rcx, [ isRetValUsed ]
  lea rdx, [ tmp1961 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l1989
  lea  rcx, [ tmp1970 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1970 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp1964 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1970 ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp1964 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp1964 ]
  lea  rdi , [ tmp1961 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp1963 ], 0
  mov [ tmp1964 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1963 ]
  mov [ tmp1964 + Variant_t.value], rax
  lea  rcx , [ tmp1961 ]
  lea  rdx , [ tmp1964 ]
  lea  r8 , [ tmp1985 ]
  call  __MOLD_VariantCompareNE
l1989:
  cmp dword [ tmp1985 ], 0
  jz l1991
  lea  rcx, [ tmp1968 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal189 ]
  lea  r8 , [ tmp1968 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp1967 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal188 ]
  lea  rdx , [ tmp1968 ]
  lea  r8 , [ tmp1967 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp1967 ]
  call  __SymbolTable__error$0
l1991:
l1992:
l1988:
l1977:
l1971:
l1972:
l1966:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1961 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1964 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1970 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1980 ]
  call __MOLD_VariantDestroy

  add  rsp, 304
  pop  rbp
  ret

  restore this
  restore name
  restore paramsCnt
  restore isRetValUsed
  restore rv
  restore tmp1961
  restore tmp1962
  restore tmp1963
  restore tmp1964
  restore tmp1967
  restore tmp1968
  restore tmp1969
  restore tmp1970
  restore tmp1973
  restore tmp1978
  restore tmp1979
  restore tmp1980
  restore tmp1981
  restore tmp1982
  restore tmp1983
  restore tmp1985
  restore tmp1986
  restore tmp1990
; -----------------------------------------------
; function __SymbolTable_getCurrentFunctionName$0
; -----------------------------------------------
__SymbolTable_getCurrentFunctionName$0:
  ; init frame
  ; ----------
  tmp1993 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp1993 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal177 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1993 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp1993
; -----------------------------------------------
; function __SymbolTable_insertClass$0
; -----------------------------------------------
__SymbolTable_insertClass$0:
  ; init frame
  ; ----------
  tmp1995 EQU rbp - 24 ; 16 bytes
  tmp1994 EQU rbp - 40 ; 16 bytes
  newEntry EQU rbp - 56 ; 16 bytes
  proto EQU rbp - 72 ; 16 bytes
  name EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  mov [newEntry + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1994 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1995 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp1994 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp1994 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp1995 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1995 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1994 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp1995 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp1995 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_CLASS ]
  mov [ tmp1995 + Variant_t.value], rax
  lea  rcx , [ tmp1994 ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp1995 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp1995 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp1995 ]
  lea rdx, [ proto ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp1994 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp1995 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ newEntry ]
  lea rdx, [ tmp1994 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  call  __SymbolTable_insertGlobal$0

  ; clean frame
  ; -----------
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1994 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1995 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore proto
  restore newEntry
  restore tmp1994
  restore tmp1995
; -----------------------------------------------
; function __SymbolTable_lookupClass$0
; -----------------------------------------------
__SymbolTable_lookupClass$0:
  ; init frame
  ; ----------
  tmp2003 EQU rbp - 24 ; 16 bytes
  tmp2002 EQU rbp - 40 ; 16 bytes
  tmp1999 EQU rbp - 56 ; 16 bytes
  tmp1998 EQU rbp - 60 ; 4 bytes
  tmp1997 EQU rbp - 64 ; 4 bytes
  tmp1996 EQU rbp - 80 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 96 ; 16 bytes
  this EQU rbp - 112 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp1996 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp1999 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2002 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2003 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp1996 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupGlobal$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp1996 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp1996 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp1996 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp1998 ], 8
  mov [ tmp1999 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp1998 ]
  mov [ tmp1999 + Variant_t.value], rax
  lea rcx, [ tmp1996 ]
  lea rdx, [ tmp1999 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2000
  lea  rcx, [ tmp2003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal190 ]
  lea  r8 , [ tmp2003 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2002 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp2003 ]
  lea  r8 , [ tmp2002 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp2002 ]
  call  __SymbolTable__error$0
l2000:
l2001:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp1996 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp1999 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp1996
  restore tmp1997
  restore tmp1998
  restore tmp1999
  restore tmp2002
  restore tmp2003
; -----------------------------------------------
; function __SymbolTable_insertLocal$0
; -----------------------------------------------
__SymbolTable_insertLocal$0:
  ; init frame
  ; ----------
  tmp2007 EQU rbp - 24 ; 16 bytes
  tmp2006 EQU rbp - 28 ; 4 bytes
  tmp2005 EQU rbp - 44 ; 16 bytes
  tmp2004 EQU rbp - 48 ; 4 bytes
  newEntry EQU rbp - 64 ; 16 bytes
  name EQU rbp - 80 ; 16 bytes
  this EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [newEntry + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2005 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2007 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2005 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp2005 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2006 ], 1
  mov [ tmp2007 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2006 ]
  mov [ tmp2007 + Variant_t.value], rax
  lea rcx, [ tmp2007 ]
  lea rdx, [ tmp2005 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l2008
  lea  rcx , [ this ]
  lea  rdx , [ __literal191 ]
  call  __SymbolTable__error$0
l2008:
l2009:
  lea  rcx, [ tmp2007 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2007 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2005 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2005 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2007 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2005 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2005 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_VAR_LOCAL ]
  mov [ tmp2005 + Variant_t.value], rax
  lea  rcx , [ tmp2007 ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2005 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ newEntry ]
  lea rdx, [ tmp2007 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  call  __SymbolTable_insert$0

  ; clean frame
  ; -----------
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2005 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2007 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore newEntry
  restore tmp2004
  restore tmp2005
  restore tmp2006
  restore tmp2007
; -----------------------------------------------
; function __SymbolTable_importGlobal$0
; -----------------------------------------------
__SymbolTable_importGlobal$0:
  ; init frame
  ; ----------
  loopLevel EQU rbp - 24 ; 16 bytes
  readHits EQU rbp - 40 ; 16 bytes
  writeHits EQU rbp - 56 ; 16 bytes
  mainScope EQU rbp - 72 ; 16 bytes
  tmp2026 EQU rbp - 88 ; 16 bytes
  tmp2025 EQU rbp - 104 ; 16 bytes
  tmp2022 EQU rbp - 108 ; 4 bytes
  tmp2017 EQU rbp - 112 ; 4 bytes
  tmp2016 EQU rbp - 116 ; 4 bytes
  tmp2013 EQU rbp - 132 ; 16 bytes
  tmp2012 EQU rbp - 136 ; 4 bytes
  tmp2011 EQU rbp - 152 ; 16 bytes
  tmp2010 EQU rbp - 156 ; 4 bytes
  symbolInfo EQU rbp - 172 ; 16 bytes
  name EQU rbp - 188 ; 16 bytes
  this EQU rbp - 204 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2011 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2013 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2025 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2026 + Variant_t.type], VARIANT_UNDEFINED
  mov [mainScope + Variant_t.type], VARIANT_UNDEFINED
  mov [writeHits + Variant_t.type], VARIANT_UNDEFINED
  mov [readHits + Variant_t.type], VARIANT_UNDEFINED
  mov [loopLevel + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp2011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2012 ], 1
  mov [ tmp2013 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2013 + Variant_t.value], rax
  lea rcx, [ tmp2013 ]
  lea rdx, [ tmp2011 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l2014
  lea  rcx , [ this ]
  lea  rdx , [ __literal192 ]
  call  __SymbolTable__error$0
  jmp l2015
l2014:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2013 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_isset$0
  pop rdi
  mov dword [ tmp2017 ], 1
  mov eax, dword [ tmp2017 ]
  mov [ tmp2011 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2011 + Variant_t.value], rax
  lea rcx, [ tmp2013 ]
  lea rdx, [ tmp2011 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2018
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2011 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2011 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2012 ], 2
  mov [ tmp2013 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2013 + Variant_t.value], rax
  lea rcx, [ tmp2011 ]
  lea rdx, [ tmp2013 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2020
  lea  rcx, [ tmp2013 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2013 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2012 ], 5
  mov [ tmp2011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2011 + Variant_t.value], rax
  lea rcx, [ tmp2013 ]
  lea rdx, [ tmp2011 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2023
  lea  rcx, [ tmp2026 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp2026 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2025 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal193 ]
  lea  rdx , [ tmp2026 ]
  lea  r8 , [ tmp2025 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp2025 ]
  call  __SymbolTable__error$0
l2023:
l2024:
l2020:
l2021:
  jmp l2019
l2018:
  lea  rcx, [ mainScope ]
  call __MOLD_VariantDestroy
  lea rcx, [ mainScope ]
  lea rdx, [ this ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: while
;
l2027:
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ mainScope ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp2011 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2012 ], 1
  mov [ tmp2013 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2013 + Variant_t.value], rax
  lea rcx, [ tmp2011 ]
  lea rdx, [ tmp2013 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l2028
  lea  rcx , [ mainScope ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ mainScope ]
  call  __MOLD_VariantLoadFromKey
  jmp l2027
l2028:
;
; END: while
; -----------------------------
;
  push rdi
  lea  rcx , [ mainScope ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp2013 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2013 ]
  call __MOLD_VariantMove
  lea  rcx, [ writeHits ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ readHits ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ loopLevel ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ loopLevel ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2013 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2013 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2012 ], 2
  mov [ tmp2011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2011 + Variant_t.value], rax
  lea rcx, [ tmp2013 ]
  lea rdx, [ tmp2011 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2029
  mov dword [ tmp2012 ], 2
  mov [ tmp2011 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2012 ]
  mov [ tmp2011 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2011 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2013 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp2013 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2013 ]
  lea  rdx , [ name ]
  lea  r8 , [ symbolInfo ]
  lea  rdi, [ tmp2011 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 2
  call __MOLD_VCall
  pop rdi
l2029:
l2030:
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ symbolInfo ]
  call  __SymbolTable_insert$0
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp2011 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ loopLevel ]
  lea rdx, [ tmp2011 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l2031
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ loopLevel ]
  call  __MOLD_VariantStoreAtKey
l2031:
l2032:
l2019:
l2015:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2011 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2013 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mainScope ]
  call __MOLD_VariantDestroy
  lea  rcx, [ writeHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ readHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLevel ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore name
  restore symbolInfo
  restore tmp2010
  restore tmp2011
  restore tmp2012
  restore tmp2013
  restore tmp2016
  restore tmp2017
  restore tmp2022
  restore tmp2025
  restore tmp2026
  restore mainScope
  restore writeHits
  restore readHits
  restore loopLevel
; -----------------------------------------------
; function __SymbolTable_insertParam$0
; -----------------------------------------------
__SymbolTable_insertParam$0:
  ; init frame
  ; ----------
  tmp2036 EQU rbp - 12 ; 4 bytes
  tmp2035 EQU rbp - 16 ; 4 bytes
  tmp2034 EQU rbp - 32 ; 16 bytes
  tmp2033 EQU rbp - 48 ; 16 bytes
  newEntry EQU rdi
  paramId EQU rbp - 64 ; 16 bytes
  name EQU rbp - 80 ; 16 bytes
  this EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramId ], xmm0
  mov [tmp2033 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2034 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2033 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2033 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2034 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2034 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2033 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2034 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2034 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_VAR_PARAM ]
  mov [ tmp2034 + Variant_t.value], rax
  lea  rcx , [ tmp2033 ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2034 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2034 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2034 ]
  lea rdx, [ paramId ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2033 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2034 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2036 ], 1
  mov eax, dword [ tmp2036 ]
  neg eax
  mov dword [ tmp2035 ], eax
  mov [ tmp2034 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2035 ]
  mov [ tmp2034 + Variant_t.value], rax
  lea  rcx , [ tmp2033 ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp2034 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ newEntry ]
  lea rdx, [ tmp2033 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  call  __SymbolTable_insert$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2033 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2034 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore paramId
  restore newEntry
  restore tmp2033
  restore tmp2034
  restore tmp2035
  restore tmp2036
; -----------------------------------------------
; function __SymbolTable_insertRetVal$0
; -----------------------------------------------
__SymbolTable_insertRetVal$0:
  ; init frame
  ; ----------
  tmp2040 EQU rbp - 12 ; 4 bytes
  tmp2039 EQU rbp - 16 ; 4 bytes
  tmp2038 EQU rbp - 32 ; 16 bytes
  tmp2037 EQU rbp - 48 ; 16 bytes
  unused EQU rbp - 64 ; 16 bytes
  newEntry EQU rdi
  name EQU rbp - 80 ; 16 bytes
  this EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [unused + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2037 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2038 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2037 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2037 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2038 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2038 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2037 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2038 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2038 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_VAR_RETVAL ]
  mov [ tmp2038 + Variant_t.value], rax
  lea  rcx , [ tmp2037 ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2038 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2040 ], 1
  mov eax, dword [ tmp2040 ]
  neg eax
  mov dword [ tmp2039 ], eax
  mov [ tmp2038 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2039 ]
  mov [ tmp2038 + Variant_t.value], rax
  lea  rcx , [ tmp2037 ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp2038 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ newEntry ]
  lea rdx, [ tmp2037 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  call  __SymbolTable_insert$0
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2037 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupForRead$0
  pop rdi
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea rcx, [ unused ]
  lea rdx, [ tmp2037 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2037 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2038 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore newEntry
  restore unused
  restore tmp2037
  restore tmp2038
  restore tmp2039
  restore tmp2040
; -----------------------------------------------
; function __SymbolTable_insertConst$0
; -----------------------------------------------
__SymbolTable_insertConst$0:
  ; init frame
  ; ----------
  tmp2042 EQU rbp - 24 ; 16 bytes
  tmp2041 EQU rbp - 40 ; 16 bytes
  newEntry EQU rdi
  value EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [tmp2041 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2042 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2041 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2042 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2042 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2041 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2042 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2042 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_CONST ]
  mov [ tmp2042 + Variant_t.value], rax
  lea  rcx , [ tmp2041 ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2042 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2042 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2042 ]
  lea rdx, [ value ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2041 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2042 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ newEntry ]
  lea rdx, [ tmp2041 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  call  __SymbolTable_insert$0
  lea  rcx, [ tmp2042 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp2042 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2042 ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  lea  rdi, [ tmp2041 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 2
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2041 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2042 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore newEntry
  restore tmp2041
  restore tmp2042
; -----------------------------------------------
; function __SymbolTable_insertLiteral$0
; -----------------------------------------------
__SymbolTable_insertLiteral$0:
  ; init frame
  ; ----------
  name EQU rbp - 24 ; 16 bytes
  tmp2050 EQU rbp - 40 ; 16 bytes
  tmp2047 EQU rbp - 44 ; 4 bytes
  tmp2046 EQU rbp - 48 ; 4 bytes
  tmp2045 EQU rbp - 64 ; 16 bytes
  tmp2044 EQU rbp - 80 ; 16 bytes
  tmp2043 EQU rbp - 96 ; 16 bytes
  literalEntry EQU rdi
  text EQU rbp - 112 ; 16 bytes
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ text ], xmm0
  mov [tmp2043 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2044 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2045 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2050 + Variant_t.type], VARIANT_UNDEFINED
  mov [name + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2045 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp2045 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2044 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2045 ]
  lea  rdx , [ __literal153 ]
  lea  r8 , [ tmp2044 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ literalEntry ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2044 ]
  lea  rdx , [ text ]
  lea  r8 , [ literalEntry ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ literalEntry ]
  lea  rdi , [ tmp2043 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2047 ], 0
  mov [ tmp2044 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2047 ]
  mov [ tmp2044 + Variant_t.value], rax
  lea rcx, [ tmp2043 ]
  lea rdx, [ tmp2044 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2048
  push rdi
  lea  rdi , [ tmp2047 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  SymbolTable_GetNextId
  pop rdi
  mov [ tmp2043 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2047 ]
  mov [ tmp2043 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp2043 ]
  lea  rdi , [ tmp2044 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal194 ]
  lea  rdx , [ tmp2044 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ text ]
  lea  rdi , [ tmp2044 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insertConst$0
  pop rdi
  lea  rcx, [ literalEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ literalEntry ]
  lea rdx, [ tmp2044 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2043 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp2043 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2044 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2043 ]
  lea  rdx , [ __literal153 ]
  lea  r8 , [ tmp2044 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2044 ]
  lea  rdx , [ text ]
  lea  r8 , [ literalEntry ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2047 ], 4
  mov [ tmp2044 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2047 ]
  mov [ tmp2044 + Variant_t.value], rax
  lea  rcx , [ literalEntry ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp2044 ]
  call  __MOLD_VariantStoreAtKey
l2048:
l2049:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2043 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2044 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2045 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore text
  restore literalEntry
  restore tmp2043
  restore tmp2044
  restore tmp2045
  restore tmp2046
  restore tmp2047
  restore tmp2050
  restore name
; -----------------------------------------------
; function __SymbolTable_createConstFromValue$0
; -----------------------------------------------
__SymbolTable_createConstFromValue$0:
  ; init frame
  ; ----------
  tmp2054 EQU rbp - 24 ; 16 bytes
  tmp2053 EQU rbp - 28 ; 4 bytes
  tmp2052 EQU rbp - 44 ; 16 bytes
  tmp2051 EQU rbp - 60 ; 16 bytes
  unused EQU rbp - 76 ; 16 bytes
  rv EQU rdi
  value EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  mov [unused + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2051 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2052 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2054 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rdi , [ tmp2053 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  SymbolTable_GetNextId
  pop rdi
  mov [ tmp2054 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2053 ]
  mov [ tmp2054 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp2054 ]
  lea  rdi , [ tmp2052 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal195 ]
  lea  rdx , [ tmp2052 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ value ]
  lea  rdi , [ tmp2052 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_insertConst$0
  pop rdi
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea rcx, [ unused ]
  lea rdx, [ tmp2052 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2052 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2054 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore value
  restore rv
  restore unused
  restore tmp2051
  restore tmp2052
  restore tmp2053
  restore tmp2054
; -----------------------------------------------
; function __SymbolTable_assignValue$0
; -----------------------------------------------
__SymbolTable_assignValue$0:
  ; init frame
  ; ----------
  tmp2055 EQU rbp - 24 ; 16 bytes
  symbolInfo EQU rbp - 40 ; 16 bytes
  value EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2055 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2055 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2055 ]
  call __MOLD_VariantMove
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2055 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore symbolInfo
  restore tmp2055
; -----------------------------------------------
; function __SymbolTable_assignNode$0
; -----------------------------------------------
__SymbolTable_assignNode$0:
  ; init frame
  ; ----------
  tmp2056 EQU rbp - 24 ; 16 bytes
  symbolInfo EQU rbp - 40 ; 16 bytes
  node EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2056 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2056 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2056 ]
  call __MOLD_VariantMove
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal196 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2056 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore node
  restore symbolInfo
  restore tmp2056
; -----------------------------------------------
; function __SymbolTable_assignType$0
; -----------------------------------------------
__SymbolTable_assignType$0:
  ; init frame
  ; ----------
  goOn EQU rbp - 12 ; 4 bytes
  tmp2078 EQU rbp - 16 ; 4 bytes
  tmp2077 EQU rbp - 20 ; 4 bytes
  tmp2071 EQU rbp - 24 ; 4 bytes
  tmp2069 EQU rbp - 28 ; 4 bytes
  tmp2067 EQU rbp - 32 ; 4 bytes
  tmp2062 EQU rbp - 48 ; 16 bytes
  tmp2061 EQU rbp - 52 ; 4 bytes
  tmp2060 EQU rbp - 56 ; 4 bytes
  tmp2058 EQU rbp - 60 ; 4 bytes
  tmp2057 EQU rbp - 76 ; 16 bytes
  oldType EQU rbp - 92 ; 16 bytes
  symbolInfo EQU rbp - 108 ; 16 bytes
  newType EQU rbp - 124 ; 16 bytes
  name EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ newType ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [oldType + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2057 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2062 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2057 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2057 ]
  call __MOLD_VariantMove
  lea  rcx, [ oldType ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ oldType ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2058 ], 1
  push rdi
  lea  rcx , [ oldType ]
  lea  rdi , [ tmp2057 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2061 ], 0
  mov [ tmp2062 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2061 ]
  mov [ tmp2062 + Variant_t.value], rax
  lea rcx, [ tmp2057 ]
  lea rdx, [ tmp2062 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2059
  lea  rcx , [ newType ]
  lea  rdx , [ oldType ]
  lea  r8 , [ tmp2058 ]
  call  __MOLD_VariantCompareNE
l2059:
  cmp dword [ tmp2058 ], 0
  jz l2063
  mov dword [ goOn ], 0
  push rdi
  lea  rcx , [ oldType ]
  lea  rdi , [ tmp2062 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2061 ], 0
  mov [ tmp2057 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2061 ]
  mov [ tmp2057 + Variant_t.value], rax
  lea rcx, [ tmp2062 ]
  lea rdx, [ tmp2057 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2065
  mov dword [ goOn ], 1
  jmp l2066
l2065:
  mov dword [ tmp2067 ], 1
  lea  rcx, [ tmp2057 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2057 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2061 ], 1
  mov [ tmp2062 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2061 ]
  mov [ tmp2062 + Variant_t.value], rax
  lea rcx, [ tmp2057 ]
  lea rdx, [ tmp2062 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2068
  mov dword [ tmp2069 ], 1
  lea  rcx, [ tmp2062 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2062 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2061 ], 2
  mov [ tmp2057 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2061 ]
  mov [ tmp2057 + Variant_t.value], rax
  lea rcx, [ tmp2062 ]
  lea rdx, [ tmp2057 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2070
  lea  rcx, [ tmp2057 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2057 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2061 ], 3
  mov [ tmp2062 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2061 ]
  mov [ tmp2062 + Variant_t.value], rax
  lea  rcx , [ tmp2057 ]
  lea  rdx , [ tmp2062 ]
  lea  r8 , [ tmp2069 ]
  call  __MOLD_VariantCompareEQ
l2070:
  mov eax, dword [ tmp2069 ]
  mov dword [ tmp2067 ], eax
l2068:
  cmp dword [ tmp2067 ], 0
  jz l2072
  mov dword [ tmp2061 ], -1
  mov [ tmp2062 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2061 ]
  mov [ tmp2062 + Variant_t.value], rax
  lea rcx, [ oldType ]
  lea rdx, [ tmp2062 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2074
  mov dword [ tmp2071 ], 1
  lea  rcx, [ tmp2057 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp2057 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2057 ]
  lea  rdi , [ tmp2062 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2061 ], 0
  mov [ tmp2057 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2061 ]
  mov [ tmp2057 + Variant_t.value], rax
  lea rcx, [ tmp2062 ]
  lea rdx, [ tmp2057 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2076
  lea  rcx, [ tmp2057 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp2057 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2078 ], 0
  mov eax, dword [ tmp2078 ]
  mov [ tmp2062 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2062 + Variant_t.value], rax
  lea  rcx , [ tmp2057 ]
  lea  rdx , [ tmp2062 ]
  lea  r8 , [ tmp2071 ]
  call  __MOLD_VariantCompareEQ
l2076:
  cmp dword [ tmp2071 ], 0
  jz l2079
  mov dword [ goOn ], 1
l2079:
l2080:
  jmp l2075
l2074:
  mov dword [ tmp2061 ], -1
  mov [ tmp2062 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2061 ]
  mov [ tmp2062 + Variant_t.value], rax
  lea rcx, [ newType ]
  lea rdx, [ tmp2062 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2081
  lea  rcx , [ this ]
  lea  rdx , [ oldType ]
  lea  r8 , [ newType ]
  call  __SymbolTable__errorTypeMismatch$0
l2081:
l2082:
l2075:
l2072:
l2073:
l2066:
  mov dword [ tmp2067 ], 1
  xor  eax, eax
  or   dword [ goOn ], eax
  setz cl
  or   dword [ tmp2067 ], eax
  setz al
  xor  al, cl
  jnz l2083
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ newType ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ newType ]
  lea  rdi , [ tmp2062 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp2062 ]
  call  __MOLD_VariantStoreAtKey
l2083:
l2084:
l2063:
l2064:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2057 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2062 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore name
  restore newType
  restore symbolInfo
  restore oldType
  restore tmp2057
  restore tmp2058
  restore tmp2060
  restore tmp2061
  restore tmp2062
  restore tmp2067
  restore tmp2069
  restore tmp2071
  restore tmp2077
  restore tmp2078
  restore goOn
; -----------------------------------------------
; function __SymbolTable_freezeType$0
; -----------------------------------------------
__SymbolTable_freezeType$0:
  ; init frame
  ; ----------
  tmp2086 EQU rbp - 12 ; 4 bytes
  tmp2085 EQU rbp - 28 ; 16 bytes
  symbolInfo EQU rbp - 44 ; 16 bytes
  name EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2085 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2085 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2085 ]
  call __MOLD_VariantMove
  mov dword [ tmp2086 ], 1
  mov eax, dword [ tmp2086 ]
  mov [ tmp2085 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2085 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp2085 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2085 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore symbolInfo
  restore tmp2085
  restore tmp2086
; -----------------------------------------------
; function __SymbolTable_assignTypeAndFreeze$0
; -----------------------------------------------
__SymbolTable_assignTypeAndFreeze$0:
  ; init frame
  ; ----------
  newType EQU rbp - 24 ; 16 bytes
  name EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ newType ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newType ]
  call  __SymbolTable_assignType$0
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __SymbolTable_freezeType$0

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore newType
; -----------------------------------------------
; function __SymbolTable_assignMirType$0
; -----------------------------------------------
__SymbolTable_assignMirType$0:
  ; init frame
  ; ----------
  tmp2087 EQU rbp - 24 ; 16 bytes
  symbolInfo EQU rbp - 40 ; 16 bytes
  type EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ type ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2087 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2087 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2087 ]
  call __MOLD_VariantMove
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ type ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2087 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore type
  restore symbolInfo
  restore tmp2087
; -----------------------------------------------
; function __SymbolTable_removeUnusedSymbols$0
; -----------------------------------------------
__SymbolTable_removeUnusedSymbols$0:
  ; init frame
  ; ----------
  symbolInfo EQU rbp - 24 ; 16 bytes
  symbolId EQU rbp - 40 ; 16 bytes
  tmp2100 EQU rbp - 56 ; 16 bytes
  tmp2099 EQU rbp - 60 ; 4 bytes
  tmp2098 EQU rbp - 76 ; 16 bytes
  tmp2097 EQU rbp - 80 ; 4 bytes
  tmp2095 EQU rbp - 84 ; 4 bytes
  tmp2093 EQU rbp - 88 ; 4 bytes
  tmp2091 EQU rbp - 92 ; 4 bytes
  tmp2088 EQU rbp - 108 ; 16 bytes
  newSymbols EQU rbp - 124 ; 16 bytes
  this EQU rbp - 140 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [newSymbols + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2088 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2098 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2100 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newSymbols ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2088 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp2088 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys symbolId values symbolInfo
;
  jmp l2090
l2089:
  mov dword [ tmp2091 ], 1
  mov dword [ tmp2093 ], 1
  mov dword [ tmp2095 ], 1
  lea  rcx, [ tmp2098 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2098 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2099 ], 0
  mov [ tmp2100 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2099 ]
  mov [ tmp2100 + Variant_t.value], rax
  lea rcx, [ tmp2100 ]
  lea rdx, [ tmp2098 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l2096
  lea  rcx, [ tmp2100 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2100 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2099 ], 0
  mov [ tmp2098 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2099 ]
  mov [ tmp2098 + Variant_t.value], rax
  lea  rcx , [ tmp2098 ]
  lea  rdx , [ tmp2100 ]
  lea  r8 , [ tmp2095 ]
  call  __MOLD_VariantCompareLT
l2096:
  cmp dword [ tmp2095 ], 0
  jnz l2094
  lea  rcx, [ tmp2098 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2098 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2099 ], 3
  mov [ tmp2100 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2099 ]
  mov [ tmp2100 + Variant_t.value], rax
  lea  rcx , [ tmp2098 ]
  lea  rdx , [ tmp2100 ]
  lea  r8 , [ tmp2093 ]
  call  __MOLD_VariantCompareEQ
l2094:
  cmp dword [ tmp2093 ], 0
  jnz l2092
  lea  rcx, [ tmp2100 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2100 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2099 ], 4
  mov [ tmp2098 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2099 ]
  mov [ tmp2098 + Variant_t.value], rax
  lea  rcx , [ tmp2100 ]
  lea  rdx , [ tmp2098 ]
  lea  r8 , [ tmp2091 ]
  call  __MOLD_VariantCompareEQ
l2092:
  cmp dword [ tmp2091 ], 0
  jz l2101
  lea  rcx, [ tmp2098 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2098 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ newSymbols ]
  lea  rdx , [ tmp2098 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey
l2101:
l2102:
  ret
l2090:
  lea  rcx , [ tmp2088 ]
  lea  rdx , [ symbolId ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l2089 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys symbolId values symbolInfo
; -----------------------------
;
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ newSymbols ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ newSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2088 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2098 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2100 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore newSymbols
  restore tmp2088
  restore tmp2091
  restore tmp2093
  restore tmp2095
  restore tmp2097
  restore tmp2098
  restore tmp2099
  restore tmp2100
  restore symbolId
  restore symbolInfo
; -----------------------------------------------
; function __SymbolTable_createLabel$0
; -----------------------------------------------
__SymbolTable_createLabel$0:
  ; init frame
  ; ----------
  tmp2106 EQU rbp - 24 ; 16 bytes
  tmp2105 EQU rbp - 28 ; 4 bytes
  tmp2104 EQU rbp - 44 ; 16 bytes
  tmp2103 EQU rbp - 60 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp2103 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2104 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2106 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rdi , [ tmp2105 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  SymbolTable_GetNextId
  pop rdi
  mov [ tmp2106 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2105 ]
  mov [ tmp2106 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp2106 ]
  lea  rdi , [ tmp2104 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal205 ]
  lea  rdx , [ tmp2104 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2104 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2104 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2106 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2106 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2104 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2106 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2106 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_LABEL ]
  mov [ tmp2106 + Variant_t.value], rax
  lea  rcx , [ tmp2104 ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2106 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp2104 ]
  call  __SymbolTable_insert$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2104 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2106 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp2103
  restore tmp2104
  restore tmp2105
  restore tmp2106
; -----------------------------------------------
; function __SymbolTable_insertJmpTable$0
; -----------------------------------------------
__SymbolTable_insertJmpTable$0:
  ; init frame
  ; ----------
  tmp2110 EQU rbp - 24 ; 16 bytes
  tmp2109 EQU rbp - 28 ; 4 bytes
  tmp2108 EQU rbp - 44 ; 16 bytes
  tmp2107 EQU rbp - 60 ; 16 bytes
  newEntry EQU rdi
  name EQU rbp - 76 ; 16 bytes
  jmpTable EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ jmpTable ], xmm0
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2107 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2108 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2110 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rdi , [ tmp2109 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  SymbolTable_GetNextId
  pop rdi
  mov [ tmp2110 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2109 ]
  mov [ tmp2110 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp2110 ]
  lea  rdi , [ tmp2108 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal206 ]
  lea  rdx , [ tmp2108 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2108 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2108 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2110 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2110 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2108 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2110 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2110 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ SYMBOL_KIND_JMP_TABLE ]
  mov [ tmp2110 + Variant_t.value], rax
  lea  rcx , [ tmp2108 ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2110 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2110 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2110 ]
  lea rdx, [ jmpTable ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2108 ]
  lea  rdx , [ __literal207 ]
  lea  r8 , [ tmp2110 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ newEntry ]
  lea rdx, [ tmp2108 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ newEntry ]
  call  __SymbolTable_insertGlobal$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2108 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2110 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore jmpTable
  restore name
  restore newEntry
  restore tmp2107
  restore tmp2108
  restore tmp2109
  restore tmp2110
; -----------------------------------------------
; function __SymbolTable_getTempVar$0
; -----------------------------------------------
__SymbolTable_getTempVar$0:
  ; init frame
  ; ----------
  symbolInfo EQU rbp - 24 ; 16 bytes
  tmp2119 EQU rbp - 28 ; 4 bytes
  tmp2118 EQU rbp - 44 ; 16 bytes
  poolCnt EQU rbp - 48 ; 4 bytes
  poolObj EQU rbp - 64 ; 16 bytes
  tmp2115 EQU rbp - 68 ; 4 bytes
  tmp2114 EQU rbp - 84 ; 16 bytes
  tmp2113 EQU rbp - 100 ; 16 bytes
  tmp2112 EQU rbp - 116 ; 16 bytes
  tmp2111 EQU rbp - 120 ; 4 bytes
  rv EQU rdi
  wantedType EQU rbp - 136 ; 16 bytes
  this EQU rbp - 152 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  mov [tmp2112 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2113 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2114 + Variant_t.type], VARIANT_UNDEFINED
  mov [poolObj + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2118 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2114 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp2114 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2113 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2114 ]
  lea  rdx , [ wantedType ]
  lea  r8 , [ tmp2113 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2112 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2113 ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp2112 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2115 ], 0
  mov [ tmp2113 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2115 ]
  mov [ tmp2113 + Variant_t.value], rax
  lea rcx, [ tmp2112 ]
  lea rdx, [ tmp2113 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l2116
  lea  rcx, [ tmp2112 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp2112 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ poolObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2112 ]
  lea  rdx , [ wantedType ]
  lea  r8 , [ poolObj ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2112 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp2112 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2115 ], 1
  mov [ tmp2114 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2115 ]
  mov [ tmp2114 + Variant_t.value], rax
  lea  rcx , [ tmp2112 ]
  lea  rdx , [ tmp2114 ]
  lea  r8 , [ tmp2113 ]
  call  __MOLD_VariantSub
  cmp [ tmp2113 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2113 + Variant_t.value]
  mov dword [ poolCnt ], eax
  mov [ tmp2113 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ poolCnt ]
  mov [ tmp2113 + Variant_t.value], rax
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp2113 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2114 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp2114 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2114 ]
  lea  rdx , [ poolCnt ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l2117
l2116:
  push rdi
  lea  rdi , [ tmp2115 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  SymbolTable_GetNextId
  pop rdi
  mov [ tmp2114 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2115 ]
  mov [ tmp2114 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp2114 ]
  lea  rdi , [ tmp2113 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal210 ]
  lea  rdx , [ tmp2113 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __SymbolTable_insertLocal$0
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp2113 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookup$0
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2113 ]
  call __MOLD_VariantMove
  mov dword [ tmp2119 ], 1
  mov eax, dword [ tmp2119 ]
  mov [ tmp2113 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2113 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal211 ]
  lea  r8 , [ tmp2113 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ wantedType ]
  call  __MOLD_VariantStoreAtKey
l2117:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2112 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2113 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2114 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ poolObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore wantedType
  restore rv
  restore tmp2111
  restore tmp2112
  restore tmp2113
  restore tmp2114
  restore tmp2115
  restore poolObj
  restore poolCnt
  restore tmp2118
  restore tmp2119
  restore symbolInfo
; -----------------------------------------------
; function __SymbolTable_getTempVarForWrite$0
; -----------------------------------------------
__SymbolTable_getTempVarForWrite$0:
  ; init frame
  ; ----------
  tmp2120 EQU rbp - 24 ; 16 bytes
  unused EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  wantedType EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  mov [unused + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2120 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ wantedType ]
  lea  rdi , [ tmp2120 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_getTempVar$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp2120 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp2120 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupForWrite$0
  pop rdi
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea rcx, [ unused ]
  lea rdx, [ tmp2120 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2120 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore wantedType
  restore rv
  restore unused
  restore tmp2120
; -----------------------------------------------
; function __SymbolTable_getTempVarForReadAndWrite$0
; -----------------------------------------------
__SymbolTable_getTempVarForReadAndWrite$0:
  ; init frame
  ; ----------
  tmp2121 EQU rbp - 24 ; 16 bytes
  unused EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  wantedType EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  mov [unused + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2121 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ wantedType ]
  lea  rdi , [ tmp2121 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_getTempVar$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp2121 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi , [ tmp2121 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_lookupForReadAndWrite$0
  pop rdi
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea rcx, [ unused ]
  lea rdx, [ tmp2121 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2121 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore wantedType
  restore rv
  restore unused
  restore tmp2121
; -----------------------------------------------
; function __SymbolTable_releaseTempVar$0
; -----------------------------------------------
__SymbolTable_releaseTempVar$0:
  ; init frame
  ; ----------
  poolObj EQU rbp - 24 ; 16 bytes
  mirType EQU rbp - 40 ; 16 bytes
  tmp2135 EQU rbp - 56 ; 16 bytes
  tmp2130 EQU rbp - 60 ; 4 bytes
  tmp2129 EQU rbp - 64 ; 4 bytes
  tmp2127 EQU rbp - 80 ; 16 bytes
  tmp2126 EQU rbp - 84 ; 4 bytes
  tmp2125 EQU rbp - 88 ; 4 bytes
  tmp2123 EQU rbp - 92 ; 4 bytes
  tmp2122 EQU rbp - 108 ; 16 bytes
  symbolInfo EQU rbp - 124 ; 16 bytes
  name EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2122 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2127 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2135 + Variant_t.type], VARIANT_UNDEFINED
  mov [mirType + Variant_t.type], VARIANT_UNDEFINED
  mov [poolObj + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp2122 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable__lookupInternal$0
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2122 ]
  call __MOLD_VariantMove
  mov dword [ tmp2123 ], 0
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp2122 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2126 ], 0
  mov [ tmp2127 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2126 ]
  mov [ tmp2127 + Variant_t.value], rax
  lea rcx, [ tmp2122 ]
  lea rdx, [ tmp2127 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2124
  mov dword [ tmp2125 ], 0
  lea  rcx, [ tmp2122 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal211 ]
  lea  r8 , [ tmp2122 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2122 ]
  lea  rdi , [ tmp2127 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2126 ], 0
  mov [ tmp2122 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2126 ]
  mov [ tmp2122 + Variant_t.value], rax
  lea rcx, [ tmp2127 ]
  lea rdx, [ tmp2122 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2128
  lea  rcx, [ tmp2122 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal211 ]
  lea  r8 , [ tmp2122 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2130 ], 1
  mov eax, dword [ tmp2130 ]
  mov [ tmp2127 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2127 + Variant_t.value], rax
  lea  rcx , [ tmp2122 ]
  lea  rdx , [ tmp2127 ]
  lea  r8 , [ tmp2125 ]
  call  __MOLD_VariantCompareEQ
l2128:
  mov eax, dword [ tmp2125 ]
  mov dword [ tmp2123 ], eax
l2124:
  cmp dword [ tmp2123 ], 0
  jz l2131
  lea  rcx, [ mirType ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ mirType ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ mirType ]
  lea  rdi , [ tmp2127 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2126 ], 0
  mov [ tmp2122 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2126 ]
  mov [ tmp2122 + Variant_t.value], rax
  lea rcx, [ tmp2127 ]
  lea rdx, [ tmp2122 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2133
  lea  rcx, [ tmp2127 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal154 ]
  lea  r8 , [ tmp2127 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ poolObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2127 ]
  lea  rdx , [ mirType ]
  lea  r8 , [ poolObj ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2122 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal157 ]
  lea  r8 , [ tmp2122 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2127 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp2127 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2127 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2127 + Variant_t.value]
  mov dword [ tmp2126 ], eax
  lea  rcx, [ tmp2127 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2127 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2122 ]
  lea  rdx , [ tmp2126 ]
  lea  r8 , [ tmp2127 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp2122 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp2122 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2126 ], 1
  mov [ tmp2135 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2126 ]
  mov [ tmp2135 + Variant_t.value], rax
  lea  rcx , [ tmp2122 ]
  lea  rdx , [ tmp2135 ]
  lea  r8 , [ tmp2127 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ poolObj ]
  lea  rdx , [ __literal156 ]
  lea  r8 , [ tmp2127 ]
  call  __MOLD_VariantStoreAtKey
l2133:
l2134:
l2131:
l2132:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2122 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2127 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2135 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ poolObj ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore name
  restore symbolInfo
  restore tmp2122
  restore tmp2123
  restore tmp2125
  restore tmp2126
  restore tmp2127
  restore tmp2129
  restore tmp2130
  restore tmp2135
  restore mirType
  restore poolObj
; -----------------------------------------------
; function __ASTModuleResolver_constructor$0
; -----------------------------------------------
__ASTModuleResolver_constructor$0:
  ; init frame
  ; ----------
  tmp2137 EQU rbp - 24 ; 16 bytes
  tmp2136 EQU rbp - 40 ; 16 bytes
  app EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp2136 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2137 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2136 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2136 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal216 ]
  lea  r8 , [ tmp2136 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2136 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2136 ]
  lea  rdx, [vtable_Parser]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp2136 ]
  lea  rdi , [ tmp2137 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal217 ]
  lea  r8 , [ tmp2136 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2136 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2137 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore app
  restore tmp2136
  restore tmp2137
; -----------------------------------------------
; function __ASTModuleResolver_resolveImports$0
; -----------------------------------------------
__ASTModuleResolver_resolveImports$0:
  ; init frame
  ; ----------
  oneImportedChild EQU rbp - 24 ; 16 bytes
  importedChildren EQU rbp - 40 ; 16 bytes
  importedProgram EQU rbp - 56 ; 16 bytes
  importedAst EQU rbp - 72 ; 16 bytes
  moduleName EQU rbp - 88 ; 16 bytes
  oneChild EQU rbp - 104 ; 16 bytes
  tmp2153 EQU rbp - 120 ; 16 bytes
  tmp2152 EQU rbp - 136 ; 16 bytes
  tmp2151 EQU rbp - 140 ; 4 bytes
  tmp2148 EQU rbp - 156 ; 16 bytes
  tmp2145 EQU rbp - 160 ; 4 bytes
  tmp2143 EQU rbp - 164 ; 4 bytes
  tmp2140 EQU rbp - 168 ; 4 bytes
  tmp2139 EQU rbp - 184 ; 16 bytes
  tmp2138 EQU rbp - 200 ; 16 bytes
  newChildren EQU rbp - 216 ; 16 bytes
  children EQU rbp - 232 ; 16 bytes
  program EQU rbp - 248 ; 16 bytes
  ast EQU rbp - 264 ; 16 bytes
  this EQU rbp - 280 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 320

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [program + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2138 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2139 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2148 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2152 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2153 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [moduleName + Variant_t.type], VARIANT_UNDEFINED
  mov [importedAst + Variant_t.type], VARIANT_UNDEFINED
  mov [importedProgram + Variant_t.type], VARIANT_UNDEFINED
  mov [importedChildren + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp2139 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2139 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2140 ], 0
  lea  rcx, [ program ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2139 ]
  lea  rdx , [ tmp2140 ]
  lea  r8 , [ program ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ program ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l2142
l2141:
  mov dword [ tmp2143 ], 0
  lea  rcx, [ tmp2138 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2138 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2140 ], 42
  mov [ tmp2139 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2140 ]
  mov [ tmp2139 + Variant_t.value], rax
  lea rcx, [ tmp2138 ]
  lea rdx, [ tmp2139 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2144
  lea  rcx, [ tmp2139 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2139 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2139 ]
  lea  rdx , [ __literal18 ]
  lea  r8 , [ tmp2143 ]
  call  __MOLD_VariantCompareEQ
l2144:
  cmp dword [ tmp2143 ], 0
  jz l2146
  lea  rcx, [ tmp2148 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2148 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2140 ], 0
  lea  rcx, [ tmp2138 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2148 ]
  lea  rdx , [ tmp2140 ]
  lea  r8 , [ tmp2138 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ moduleName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2138 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ moduleName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2148 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal216 ]
  lea  r8 , [ tmp2148 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2138 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2148 ]
  lea  rdx , [ moduleName ]
  lea  r8 , [ tmp2138 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2138 ]
  lea  rdi , [ tmp2139 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2140 ], 0
  mov [ tmp2138 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2140 ]
  mov [ tmp2138 + Variant_t.value], rax
  lea rcx, [ tmp2139 ]
  lea rdx, [ tmp2138 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2149
  lea  rcx, [ tmp2138 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal216 ]
  lea  r8 , [ tmp2138 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2151 ], 1
  mov eax, dword [ tmp2151 ]
  mov [ tmp2139 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2139 + Variant_t.value], rax
  lea  rcx , [ tmp2138 ]
  lea  rdx , [ moduleName ]
  lea  r8 , [ tmp2139 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2138 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2138 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ moduleName ]
  lea  rdi , [ tmp2148 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2153 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2148 ]
  lea  rdx , [ __literal219 ]
  lea  r8 , [ tmp2153 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2152 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal218 ]
  lea  rdx , [ tmp2153 ]
  lea  r8 , [ tmp2152 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp2138 ]
  lea  rdx , [ tmp2152 ]
  lea  rdi, [ tmp2139 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 5
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp2138 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal217 ]
  lea  r8 , [ tmp2138 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2138 ]
  lea  rdx , [ moduleName ]
  lea  rdi, [ tmp2139 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 6
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ importedAst ]
  call __MOLD_VariantDestroy
  lea rcx, [ importedAst ]
  lea rdx, [ tmp2139 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ importedAst ]
  call  __ASTModuleResolver_resolveImports$0
  lea  rcx, [ tmp2138 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ importedAst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2138 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2140 ], 0
  lea  rcx, [ importedProgram ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2138 ]
  lea  rdx , [ tmp2140 ]
  lea  r8 , [ importedProgram ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ importedChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ importedProgram ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ importedChildren ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values oneImportedChild
;
  jmp l2155
l2154:
  lea  rcx , [ newChildren ]
  lea  rdx , [ oneImportedChild ]
  mov eax,  50
  call  __MOLD_SysCall
  ret
l2155:
  lea  rcx , [ importedChildren ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneImportedChild ]
  lea  r9 , [ l2154 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneImportedChild
; -----------------------------
;
l2149:
l2150:
  jmp l2147
l2146:
  lea  rcx , [ newChildren ]
  lea  rdx , [ oneChild ]
  mov eax,  50
  call  __MOLD_SysCall
l2147:
  ret
l2142:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2141 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  lea  rcx , [ program ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ program ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2138 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2139 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2148 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ importedAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ importedProgram ]
  call __MOLD_VariantDestroy
  lea  rcx, [ importedChildren ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneImportedChild

  add  rsp, 320
  pop  rbp
  ret

  restore this
  restore ast
  restore program
  restore children
  restore newChildren
  restore tmp2138
  restore tmp2139
  restore tmp2140
  restore tmp2143
  restore tmp2145
  restore tmp2148
  restore tmp2151
  restore tmp2152
  restore tmp2153
  restore oneChild
  restore moduleName
  restore importedAst
  restore importedProgram
  restore importedChildren
  restore oneImportedChild
; -----------------------------------------------
; function __ASTSymbolsCollector_constructor$0
; -----------------------------------------------
__ASTSymbolsCollector_constructor$0:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTSymbolsCollector__debug$0
; -----------------------------------------------
__ASTSymbolsCollector__debug$0:
  ; init frame
  ; ----------
  tmp2157 EQU rbp - 12 ; 4 bytes
  tmp2156 EQU rbp - 16 ; 4 bytes
  msg EQU rbp - 32 ; 16 bytes
  this EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----
  mov dword [ tmp2157 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp2157 ], eax
  setz al
  xor  al, cl
  jnz l2158
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal220 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l2158:
l2159:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp2156
  restore tmp2157
; -----------------------------------------------
; function __ASTSymbolsCollector__collectSymbolsFromLeftNode$0
; -----------------------------------------------
__ASTSymbolsCollector__collectSymbolsFromLeftNode$0:
  ; init frame
  ; ----------
  tmp2161 EQU rbp - 24 ; 16 bytes
  tmp2160 EQU rbp - 28 ; 4 bytes
  node EQU rbp - 44 ; 16 bytes
  symbolTable EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [tmp2161 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2160 ], 1
  mov eax, dword [ tmp2160 ]
  mov [ tmp2161 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2161 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ node ]
  lea  r9 , [ tmp2161 ]
  call  __ASTSymbolsCollector__collectSymbols$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2161 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore tmp2160
  restore tmp2161
; -----------------------------------------------
; function __ASTSymbolsCollector__collectSymbolsFromRightNode$0
; -----------------------------------------------
__ASTSymbolsCollector__collectSymbolsFromRightNode$0:
  ; init frame
  ; ----------
  tmp2163 EQU rbp - 24 ; 16 bytes
  tmp2162 EQU rbp - 28 ; 4 bytes
  node EQU rbp - 44 ; 16 bytes
  symbolTable EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [tmp2163 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2162 ], 0
  mov eax, dword [ tmp2162 ]
  mov [ tmp2163 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2163 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ node ]
  lea  r9 , [ tmp2163 ]
  call  __ASTSymbolsCollector__collectSymbols$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2163 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore tmp2162
  restore tmp2163
; -----------------------------------------------
; function __ASTSymbolsCollector__updateVariableSymbolInfo$0
; -----------------------------------------------
__ASTSymbolsCollector__updateVariableSymbolInfo$0:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp2170 EQU rbp - 28 ; 4 bytes
  tmp2167 EQU rbp - 44 ; 16 bytes
  tmp2166 EQU rbp - 48 ; 4 bytes
  tmp2165 EQU rbp - 64 ; 16 bytes
  tmp2164 EQU rbp - 68 ; 4 bytes
  newSymbolInfo EQU rbp - 84 ; 16 bytes
  variableName EQU rbp - 100 ; 16 bytes
  node EQU rbp - 116 ; 16 bytes
  this EQU rbp - 132 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ variableName ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ newSymbolInfo ], xmm0
  mov [tmp2165 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2167 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp2165 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2165 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2166 ], 52
  mov [ tmp2167 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2166 ]
  mov [ tmp2167 + Variant_t.value], rax
  lea rcx, [ tmp2165 ]
  lea rdx, [ tmp2167 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2168
  lea  rcx, [ tmp2167 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2167 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp2167 ]
  lea rdx, [ variableName ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2171
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ newSymbolInfo ]
  call  __MOLD_VariantStoreAtKey
l2171:
l2172:
  jmp l2169
l2168:
  lea  rcx, [ tmp2167 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2167 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l2174
l2173:
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  lea  r8 , [ variableName ]
  lea  r9 , [ newSymbolInfo ]
  call  __ASTSymbolsCollector__updateVariableSymbolInfo$0
  ret
l2174:
  lea  rcx , [ tmp2167 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2173 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
l2169:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2165 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2167 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore node
  restore variableName
  restore newSymbolInfo
  restore tmp2164
  restore tmp2165
  restore tmp2166
  restore tmp2167
  restore tmp2170
  restore item
; -----------------------------------------------
; function __ASTSymbolsCollector__collectSymbols$0
; -----------------------------------------------
__ASTSymbolsCollector__collectSymbols$0:
  ; init frame
  ; ----------
  yType EQU rbp - 12 ; 4 bytes
  xType EQU rbp - 16 ; 4 bytes
  currentFunctionName EQU rbp - 32 ; 16 bytes
  isRetValUsed EQU rbp - 36 ; 4 bytes
  y EQU rbp - 52 ; 16 bytes
  goOnIntoChildren EQU rbp - 56 ; 4 bytes
  tmp2373 EQU rbp - 60 ; 4 bytes
  tmp2371 EQU rbp - 64 ; 4 bytes
  tmp2369 EQU rbp - 68 ; 4 bytes
  tmp2367 EQU rbp - 72 ; 4 bytes
  condNode EQU rbp - 88 ; 16 bytes
  __cse17 EQU rbp - 104 ; 16 bytes
  __cse16 EQU rbp - 120 ; 16 bytes
  idx EQU rbp - 124 ; 4 bytes
  boxNode EQU rbp - 140 ; 16 bytes
  iteratorsCnt EQU rbp - 144 ; 4 bytes
  tmp2327 EQU rbp - 148 ; 4 bytes
  tmp2322 EQU rbp - 152 ; 4 bytes
  __cse13 EQU rbp - 168 ; 16 bytes
  __cse15 EQU rbp - 184 ; 16 bytes
  __cse14 EQU rbp - 200 ; 16 bytes
  bodyNode EQU rbp - 216 ; 16 bytes
  idxStepNode EQU rbp - 232 ; 16 bytes
  idxEndNode EQU rbp - 248 ; 16 bytes
  idxStartNode EQU rbp - 264 ; 16 bytes
  iterNode EQU rbp - 280 ; 16 bytes
  classProto2 EQU rbp - 296 ; 16 bytes
  classProto1 EQU rbp - 312 ; 16 bytes
  id EQU rbp - 328 ; 16 bytes
  typeName2 EQU rbp - 344 ; 16 bytes
  typeName1 EQU rbp - 360 ; 16 bytes
  __cse12 EQU rbp - 376 ; 16 bytes
  astType2 EQU rbp - 380 ; 4 bytes
  astType1 EQU rbp - 384 ; 4 bytes
  writeHits EQU rbp - 400 ; 16 bytes
  readHits EQU rbp - 416 ; 16 bytes
  symbolInfo2 EQU rbp - 432 ; 16 bytes
  symbolInfo1 EQU rbp - 448 ; 16 bytes
  __cse11 EQU rbp - 464 ; 16 bytes
  symbols2 EQU rbp - 480 ; 16 bytes
  symbols1 EQU rbp - 496 ; 16 bytes
  symbolTable2 EQU rbp - 512 ; 16 bytes
  symbolTable1 EQU rbp - 528 ; 16 bytes
  tmp2308 EQU rbp - 544 ; 16 bytes
  tmp2305 EQU rbp - 548 ; 4 bytes
  tmp2300 EQU rbp - 552 ; 4 bytes
  x EQU rbp - 568 ; 16 bytes
  newClassProto EQU rbp - 584 ; 16 bytes
  oldClassProto EQU rbp - 600 ; 16 bytes
  rval EQU rbp - 616 ; 16 bytes
  lval EQU rbp - 632 ; 16 bytes
  tmp2278 EQU rbp - 636 ; 4 bytes
  tmp2270 EQU rbp - 640 ; 4 bytes
  nodeKey EQU rbp - 656 ; 16 bytes
  nodeIdx EQU rbp - 672 ; 16 bytes
  nodeBox EQU rbp - 688 ; 16 bytes
  __cse10 EQU rbp - 704 ; 16 bytes
  __cse9 EQU rbp - 720 ; 16 bytes
  paramName EQU rbp - 736 ; 16 bytes
  paramIdx EQU rbp - 740 ; 4 bytes
  __cse8 EQU rbp - 756 ; 16 bytes
  paramShift EQU rbp - 760 ; 4 bytes
  astTypeParams EQU rbp - 776 ; 16 bytes
  funcName EQU rbp - 792 ; 16 bytes
  value EQU rbp - 808 ; 16 bytes
  funcProto EQU rbp - 824 ; 16 bytes
  nodeBody EQU rbp - 840 ; 16 bytes
  tmp2231 EQU rbp - 844 ; 4 bytes
  tmp2224 EQU rbp - 860 ; 16 bytes
  tmp2223 EQU rbp - 876 ; 16 bytes
  baseMethodProto EQU rbp - 892 ; 16 bytes
  methodParamsCnt EQU rbp - 908 ; 16 bytes
  methodName EQU rbp - 924 ; 16 bytes
  child EQU rbp - 940 ; 16 bytes
  methodProto EQU rbp - 956 ; 16 bytes
  oneMethodName EQU rbp - 972 ; 16 bytes
  baseProto EQU rbp - 988 ; 16 bytes
  __cse7 EQU rbp - 1004 ; 16 bytes
  classProto EQU rbp - 1020 ; 16 bytes
  baseMethods EQU rbp - 1036 ; 16 bytes
  vtable EQU rbp - 1052 ; 16 bytes
  baseName EQU rbp - 1068 ; 16 bytes
  className EQU rbp - 1084 ; 16 bytes
  tmp2211 EQU rbp - 1088 ; 4 bytes
  tmp2208 EQU rbp - 1104 ; 16 bytes
  tmp2207 EQU rbp - 1120 ; 16 bytes
  tmp2206 EQU rbp - 1136 ; 16 bytes
  tmp2205 EQU rbp - 1152 ; 16 bytes
  tmp2204 EQU rbp - 1168 ; 16 bytes
  symbolInfo EQU rbp - 1184 ; 16 bytes
  tmp2192 EQU rbp - 1188 ; 4 bytes
  tmp2182 EQU rbp - 1192 ; 4 bytes
  tmp2180 EQU rbp - 1196 ; 4 bytes
  item EQU rbp - 1212 ; 16 bytes
  tmp2177 EQU rbp - 1216 ; 4 bytes
  tmp2176 EQU rbp - 1232 ; 16 bytes
  tmp2175 EQU rbp - 1248 ; 16 bytes
  childrenCnt EQU rbp - 1252 ; 4 bytes
  children EQU rbp - 1268 ; 16 bytes
  opcode EQU rbp - 1272 ; 4 bytes
  isLeftNode EQU rbp - 1288 ; 16 bytes
  node EQU rbp - 1304 ; 16 bytes
  symbolTable EQU rbp - 1320 ; 16 bytes
  this EQU rbp - 1336 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 1376

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ isLeftNode ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2175 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2176 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2204 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2205 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2206 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2207 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2208 + Variant_t.type], VARIANT_UNDEFINED
  mov [className + Variant_t.type], VARIANT_UNDEFINED
  mov [baseName + Variant_t.type], VARIANT_UNDEFINED
  mov [vtable + Variant_t.type], VARIANT_UNDEFINED
  mov [baseMethods + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse7 + Variant_t.type], VARIANT_UNDEFINED
  mov [baseProto + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [methodName + Variant_t.type], VARIANT_UNDEFINED
  mov [methodParamsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [baseMethodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2223 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2224 + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeBody + Variant_t.type], VARIANT_UNDEFINED
  mov [funcProto + Variant_t.type], VARIANT_UNDEFINED
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [funcName + Variant_t.type], VARIANT_UNDEFINED
  mov [astTypeParams + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse8 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [__cse9 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse10 + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeBox + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeIdx + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeKey + Variant_t.type], VARIANT_UNDEFINED
  mov [lval + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [oldClassProto + Variant_t.type], VARIANT_UNDEFINED
  mov [newClassProto + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2308 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolTable1 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolTable2 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbols1 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbols2 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse11 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [symbolInfo2 + Variant_t.type], VARIANT_UNDEFINED
  mov [readHits + Variant_t.type], VARIANT_UNDEFINED
  mov [writeHits + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse12 + Variant_t.type], VARIANT_UNDEFINED
  mov [typeName1 + Variant_t.type], VARIANT_UNDEFINED
  mov [typeName2 + Variant_t.type], VARIANT_UNDEFINED
  mov [id + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto1 + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto2 + Variant_t.type], VARIANT_UNDEFINED
  mov [iterNode + Variant_t.type], VARIANT_UNDEFINED
  mov [idxStartNode + Variant_t.type], VARIANT_UNDEFINED
  mov [idxEndNode + Variant_t.type], VARIANT_UNDEFINED
  mov [idxStepNode + Variant_t.type], VARIANT_UNDEFINED
  mov [bodyNode + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse14 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse15 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse13 + Variant_t.type], VARIANT_UNDEFINED
  mov [boxNode + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse16 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse17 + Variant_t.type], VARIANT_UNDEFINED
  mov [condNode + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [currentFunctionName + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ node ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 7
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2175 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp2175 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2175 + Variant_t.value]
  mov dword [ childrenCnt ], eax
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l2179
l2178:
  lea  rcx , [ item ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey
  ret
l2179:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2178 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  mov dword [ tmp2180 ], 1
  mov dword [ tmp2177 ], 52
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jnz l2181
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ __literal27 ]
  lea  r8 , [ tmp2180 ]
  call  __MOLD_VariantCompareNE
l2181:
  cmp dword [ tmp2180 ], 0
  jz l2183
  cmp dword [ opcode ], 4
  jl l2186
  cmp dword [ opcode ], 33
  jg l2186
  mov eax, dword [ opcode ]
  jmp qword [ __jmptable2187 + rax * 8]
l2188:
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 1
  call __MOLD_VCall
  pop rdi
  lea rcx, [ symbolTable ]
  lea rdx, [ tmp2175 ]
  call __MOLD_VariantMove
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantStoreAtKey
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l2190
l2189:
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp2175 ]
  lea  r8 , [ item ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0
  ret
l2190:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2189 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  jmp l2185
l2191:
  mov dword [ tmp2192 ], 1
  mov eax, dword [ tmp2192 ]
  mov [ tmp2175 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2175 + Variant_t.value], rax
  lea rcx, [ isLeftNode ]
  lea rdx, [ tmp2175 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2193
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ __literal222 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l2193:
l2194:
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2176 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 8
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2175 ]
  call __MOLD_VariantMove
  mov dword [ tmp2177 ], 52
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2175 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey
  jmp l2185
l2195:
  lea  rcx, [ __cse7 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse7 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse7 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ baseName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse7 ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ baseName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ vtable ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ baseMethods ]
  call __MOLD_VariantDestroy
  lea  rcx , [ baseMethods ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rcx , [ baseName ]
  lea  rdi , [ tmp2175 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2175 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2196
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ baseName ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 9
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ baseProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ baseProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ baseMethods ]
  call __MOLD_VariantDestroy
  lea  rcx , [ baseProto ]
  lea  rdx , [ __literal223 ]
  lea  r8 , [ baseMethods ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys oneMethodName values methodProto
;
  jmp l2199
l2198:
  lea  rcx , [ vtable ]
  lea  rdx , [ oneMethodName ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantStoreAtKey
  ret
l2199:
  lea  rcx , [ baseMethods ]
  lea  rdx , [ oneMethodName ]
  lea  r8 , [ methodProto ]
  lea  r9 , [ l2198 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys oneMethodName values methodProto
; -----------------------------
;
l2196:
l2197:
;
; -----------------------------
; BEGIN: for keys undefined values child
;
  jmp l2201
l2200:
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ child ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2176 + Variant_t.value]
  mov dword [ opcode ], eax
  mov dword [ tmp2177 ], 34
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jnz l2202
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ child ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ child ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2175 ]
  lea  rdi , [ methodParamsCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ methodParamsCnt ]
  lea  rdi , [ tmp2176 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2208 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal227 ]
  lea  rdx , [ tmp2176 ]
  lea  r8 , [ tmp2208 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2207 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodName ]
  lea  rdx , [ tmp2208 ]
  lea  r8 , [ tmp2207 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2206 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal226 ]
  lea  rdx , [ tmp2207 ]
  lea  r8 , [ tmp2206 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ className ]
  lea  rdx , [ tmp2206 ]
  lea  r8 , [ tmp2205 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2204 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal225 ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2204 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ child ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp2204 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ child ]
  lea  rdx , [ __literal228 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ child ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ baseMethods ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2175 ]
  lea  rdi , [ tmp2176 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2175 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2175 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2209
  lea  rcx, [ baseMethodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ baseMethods ]
  lea  rdx , [ methodName ]
  lea  r8 , [ baseMethodProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ child ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ baseMethodProto ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2211 ], 1
  mov eax, dword [ tmp2211 ]
  mov [ tmp2175 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2175 + Variant_t.value], rax
  lea  rcx , [ baseMethodProto ]
  lea  rdx , [ __literal231 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
l2209:
l2210:
  lea  rcx , [ vtable ]
  lea  rdx , [ methodName ]
  lea  r8 , [ child ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ child ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0
l2202:
l2203:
  ret
l2201:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ child ]
  lea  r9 , [ l2200 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values child
; -----------------------------
;
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ baseName ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal223 ]
  lea  r8 , [ vtable ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2175 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal232 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ className ]
  lea  r8 , [ classProto ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 10
  call __MOLD_VCall
  pop rdi
  jmp l2185
l2186:
  mov dword [ tmp2182 ], 1
  mov dword [ tmp2177 ], 32
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2212
  mov dword [ tmp2177 ], 34
  mov dword [ tmp2182 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2177 ]
  setz byte [ tmp2182 ]
l2212:
  cmp dword [ tmp2182 ], 0
  jz l2213
  mov dword [ tmp2177 ], 0
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ nodeBody ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcProto ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdi , [ tmp2175 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2175 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2215
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
  jmp l2216
l2215:
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
l2216:
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ astTypeParams ]
  call __MOLD_VariantDestroy
  lea  rcx , [ astTypeParams ]
  call  __MOLD_VariantArrayCreate
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ funcName ]
  lea  r8 , [ funcProto ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 11
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2175 ]
  lea  rdi , [ tmp2176 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2175 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2175 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2217
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ funcName ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 12
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ paramShift ], 0
  mov dword [ tmp2177 ], 34
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jnz l2219
  lea  rcx, [ __cse8 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ __cse8 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 0
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  push rdi
  lea  rcx , [ __cse8 ]
  lea  rdx , [ __literal233 ]
  lea  r8 , [ tmp2176 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 13
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2175 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2177 ], 6
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  push rdi
  lea  rcx , [ __cse8 ]
  lea  rdx , [ __literal233 ]
  lea  r8 , [ tmp2176 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 14
  call __MOLD_VCall
  pop rdi
  mov dword [ paramShift ], 1
  mov dword [ tmp2177 ], -1
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2175 + Variant_t.value], rax
  lea  rcx , [ astTypeParams ]
  lea  rdx , [ tmp2175 ]
  mov eax,  50
  call  __MOLD_SysCall
l2219:
l2220:
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys paramIdx values paramName
;
  jmp l2222
l2221:
  lea  rcx, [ tmp2223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2223 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ paramShift ]
  add eax, dword [ paramIdx ]
  mov dword [ tmp2177 ], eax
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp2223 ]
  lea  rdx , [ paramName ]
  lea  r8 , [ tmp2224 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 13
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp2177 ], 34
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jnz l2225
  lea  rcx, [ __cse9 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ __cse9 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], -1
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  push rdi
  lea  rcx , [ __cse9 ]
  lea  rdx , [ paramName ]
  lea  r8 , [ tmp2224 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 14
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ __cse9 ]
  lea  rdx , [ paramName ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 15
  call __MOLD_VCall
  pop rdi
l2225:
l2226:
  ret
l2222:
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ paramName ]
  lea  r9 , [ l2221 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys paramIdx values paramName
; -----------------------------
;
l2217:
l2218:
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp2175 ]
  lea  r8 , [ nodeBody ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys paramIdx values paramName
;
  jmp l2228
l2227:
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2224 ]
  lea  rdx , [ paramName ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2176 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ astTypeParams ]
  lea  rdx , [ tmp2176 ]
  mov eax,  50
  call  __MOLD_SysCall
  ret
l2228:
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ paramName ]
  lea  r9 , [ l2227 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys paramIdx values paramName
; -----------------------------
;
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal234 ]
  lea  r8 , [ astTypeParams ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdi , [ tmp2175 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2175 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2229
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 16
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp2231 ], 1
  mov eax, dword [ tmp2231 ]
  mov [ tmp2224 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2232
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ tmp2175 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2224 ]
  call __MOLD_VariantMove
  mov dword [ tmp2177 ], 4
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2177 ], 34
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jnz l2234
  mov dword [ tmp2177 ], -1
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2177 ], -1
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal136 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2235
l2234:
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal136 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantStoreAtKey
l2235:
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 1
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ tmp2176 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2233
l2232:
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2207 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal189 ]
  lea  r8 , [ tmp2207 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2206 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal236 ]
  lea  rdx , [ tmp2207 ]
  lea  r8 , [ tmp2206 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ tmp2206 ]
  lea  r8 , [ tmp2205 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2204 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal235 ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2204 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ tmp2204 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l2233:
l2229:
l2230:
  jmp l2214
l2213:
  cmp dword [ opcode ], 31
  jl l2237
  cmp dword [ opcode ], 56
  jg l2237
  mov eax, dword [ opcode ]
  jmp qword [ __jmptable2238 + rax * 8]
l2239:
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdi , [ tmp2224 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2224 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2240
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 17
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2224 ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 1
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2242
  lea  rcx, [ __cse10 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ __cse10 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse10 ]
  lea  rdx , [ __literal237 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 18
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ __cse10 ]
  lea  rdx , [ __literal238 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 18
  call __MOLD_VCall
  pop rdi
l2242:
l2243:
l2240:
l2241:
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l2245
l2244:
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp2224 ]
  lea  r8 , [ item ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0
  ret
l2245:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2244 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 19
  call __MOLD_VCall
  pop rdi
  jmp l2236
l2246:
  mov dword [ tmp2211 ], 1
  mov eax, dword [ tmp2211 ]
  mov [ tmp2224 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ isLeftNode ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2247
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2176 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 20
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2224 ]
  call __MOLD_VariantMove
  jmp l2248
l2247:
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2176 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 21
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2224 ]
  call __MOLD_VariantMove
l2248:
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2192 ], 0
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdi , [ tmp2224 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2224 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2249
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2231 ], 1
  mov eax, dword [ tmp2231 ]
  mov [ tmp2224 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2224 + Variant_t.value], rax
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ tmp2224 ]
  lea  r8 , [ tmp2192 ]
  call  __MOLD_VariantCompareEQ
l2249:
  cmp dword [ tmp2192 ], 0
  jz l2250
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2176 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 22
  call __MOLD_VCall
  pop rdi
l2250:
l2251:
  jmp l2236
l2252:
  mov dword [ tmp2177 ], 0
  lea  rcx, [ nodeBox ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ nodeBox ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2177 ], 1
  lea  rcx, [ nodeIdx ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ nodeIdx ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ nodeBox ]
  lea  r9 , [ isLeftNode ]
  call  __ASTSymbolsCollector__collectSymbols$0
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ nodeIdx ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$0
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBox ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 52
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2224 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2253
  mov dword [ tmp2177 ], 0
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 21
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp2231 ], 1
  mov eax, dword [ tmp2231 ]
  mov [ tmp2176 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ isLeftNode ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2255
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBox ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 23
  call __MOLD_VCall
  pop rdi
  jmp l2256
l2255:
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBox ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 24
  call __MOLD_VCall
  pop rdi
l2256:
l2253:
l2254:
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeIdx ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 52
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2257
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeIdx ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2176 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 25
  call __MOLD_VCall
  pop rdi
l2257:
l2258:
  jmp l2236
l2259:
  mov dword [ tmp2177 ], 0
  lea  rcx, [ nodeBox ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ nodeBox ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2177 ], 1
  lea  rcx, [ nodeKey ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ nodeKey ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ nodeBox ]
  lea  r9 , [ isLeftNode ]
  call  __ASTSymbolsCollector__collectSymbols$0
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ nodeKey ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$0
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBox ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 52
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2224 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2260
  mov dword [ tmp2177 ], 0
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 21
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBox ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 26
  call __MOLD_VCall
  pop rdi
l2260:
l2261:
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeKey ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 52
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2262
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeKey ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2176 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 27
  call __MOLD_VCall
  pop rdi
l2262:
l2263:
  jmp l2236
l2264:
  mov dword [ tmp2177 ], 0
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2177 ], 1
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 52
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2224 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2265
  mov dword [ tmp2211 ], 0
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 9
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2267
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdi , [ tmp2224 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2224 ]
  lea  rdx , [ __literal120 ]
  lea  r8 , [ tmp2211 ]
  call  __MOLD_VariantCompareEQ
l2267:
  cmp dword [ tmp2211 ], 0
  jz l2268
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2176 ]
  lea  r8 , [ tmp2175 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 28
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2224 ]
  call __MOLD_VariantMove
  mov dword [ tmp2177 ], 76
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2269
l2268:
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2175 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 29
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2224 ]
  call __MOLD_VariantMove
l2269:
  lea  rcx , [ lval ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ rval ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$0
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2175 ]
  lea  r8 , [ lval ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 30
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ rval ]
  lea  rdi , [ tmp2231 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2270 ], 1
  xor  eax, eax
  or   dword [ tmp2231 ], eax
  setz cl
  or   dword [ tmp2270 ], eax
  setz al
  xor  al, cl
  jnz l2271
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2175 ]
  lea  r8 , [ tmp2176 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 31
  call __MOLD_VCall
  pop rdi
l2271:
l2272:
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 37
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2224 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2273
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 16
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp2231 ], 1
  mov eax, dword [ tmp2231 ]
  mov [ tmp2224 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2275
  lea  rcx, [ oldClassProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ oldClassProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2175 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 9
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ newClassProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ newClassProto ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2231 ], 0
  push rdi
  lea  rcx , [ oldClassProto ]
  lea  rdi , [ tmp2224 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2224 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2277
  lea  rcx , [ oldClassProto ]
  lea  rdx , [ newClassProto ]
  lea  r8 , [ tmp2231 ]
  call  __MOLD_VariantCompareNE
l2277:
  cmp dword [ tmp2231 ], 0
  jz l2279
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2224 ]
  lea  rdi , [ tmp2176 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2204 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal240 ]
  lea  rdx , [ tmp2176 ]
  lea  r8 , [ tmp2204 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp2204 ]
  call  __ASTSymbolsCollector__debug$0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  call  __MOLD_VariantArrayCreate
  mov dword [ tmp2177 ], 0
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2280
l2279:
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ newClassProto ]
  call  __MOLD_VariantStoreAtKey
l2280:
l2275:
l2276:
l2273:
l2274:
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ rval ]
  lea  rdi , [ tmp2177 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2175 + Variant_t.value], rax
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  r8 , [ tmp2175 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 14
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 8
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2175 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2175 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2281
  mov dword [ tmp2270 ], 1
  mov eax, dword [ tmp2270 ]
  mov [ tmp2175 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2175 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
l2281:
l2282:
  jmp l2266
l2265:
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ lval ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ rval ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$0
l2266:
  jmp l2236
l2283:
  mov dword [ tmp2177 ], 0
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ tmp2175 ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$0
  mov dword [ tmp2177 ], 1
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ tmp2175 ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0
  mov dword [ tmp2177 ], 3
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp2177 ]
  jnz l2284
  mov dword [ tmp2177 ], 2
  lea  rcx, [ __cse11 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ __cse11 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ __cse11 ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0
  mov dword [ tmp2177 ], 1
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ symbolTable1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable1 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ symbolTable2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse11 ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable2 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable1 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 32
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbols1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols1 ]
  lea rdx, [ tmp2175 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ symbolTable2 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 32
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbols2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols2 ]
  lea rdx, [ tmp2175 ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys undefined values symbolInfo1
;
  jmp l2287
l2286:
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ symbolInfo2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbols2 ]
  lea  rdx , [ tmp2176 ]
  lea  r8 , [ symbolInfo2 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolInfo2 ]
  lea  rdi , [ tmp2175 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2175 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2288
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo2 ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ tmp2224 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantAdd
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo2 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2224 ]
  lea  rdx , [ tmp2175 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantAdd
  lea  rcx, [ __cse12 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ __cse12 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable1 ]
  lea  rdx , [ __cse12 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 33
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ symbolTable2 ]
  lea  rdx , [ __cse12 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 33
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2175 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 16
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp2231 ], 0
  mov eax, dword [ tmp2231 ]
  mov [ tmp2175 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2175 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2175 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2290
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2176 ]
  lea  r8 , [ symbolInfo1 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 2
  call __MOLD_VCall
  pop rdi
l2290:
l2291:
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ readHits ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ writeHits ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ astType1 ], -1
  mov dword [ astType2 ], -1
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolTable1 ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdi , [ tmp2175 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2175 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2292
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolTable1 ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2176 + Variant_t.value]
  mov dword [ astType1 ], eax
l2292:
l2293:
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolTable2 ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2175 ]
  lea  rdi , [ tmp2176 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2175 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2175 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2294
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolTable2 ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2175 + Variant_t.value]
  mov dword [ astType2 ], eax
l2294:
l2295:
  mov eax, dword [ astType1 ]
  cmp eax, dword [ astType2 ]
  jz l2296
  mov dword [ tmp2231 ], 1
  mov dword [ tmp2177 ], -1
  mov eax, dword [ astType1 ]
  cmp eax, dword [ tmp2177 ]
  jnz l2298
  mov dword [ tmp2278 ], 0
  mov dword [ tmp2177 ], 4
  mov eax, dword [ astType2 ]
  cmp eax, dword [ tmp2177 ]
  jz l2299
  mov dword [ tmp2177 ], 6
  mov dword [ tmp2278 ], 0
  mov ecx, dword [ astType2 ]
  cmp ecx, dword [ tmp2177 ]
  setl byte [ tmp2278 ]
l2299:
  mov eax, dword [ tmp2278 ]
  mov dword [ tmp2231 ], eax
l2298:
  cmp dword [ tmp2231 ], 0
  jz l2301
  mov dword [ tmp2278 ], 1
  mov dword [ tmp2177 ], -1
  mov eax, dword [ astType2 ]
  cmp eax, dword [ tmp2177 ]
  jnz l2303
  mov dword [ tmp2300 ], 0
  mov dword [ tmp2177 ], 4
  mov eax, dword [ astType1 ]
  cmp eax, dword [ tmp2177 ]
  jz l2304
  mov dword [ tmp2177 ], 6
  mov dword [ tmp2300 ], 0
  mov ecx, dword [ astType1 ]
  cmp ecx, dword [ tmp2177 ]
  setl byte [ tmp2300 ]
l2304:
  mov eax, dword [ tmp2300 ]
  mov dword [ tmp2278 ], eax
l2303:
  cmp dword [ tmp2278 ], 0
  jz l2306
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astType1 ]
  mov [ tmp2176 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdi , [ tmp2175 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ typeName1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ typeName1 ]
  lea rdx, [ tmp2175 ]
  call __MOLD_VariantMove
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astType2 ]
  mov [ tmp2176 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdi , [ tmp2175 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ typeName2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ typeName2 ]
  lea rdx, [ tmp2175 ]
  call __MOLD_VariantMove
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2308 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ typeName1 ]
  lea  rdx , [ __literal244 ]
  lea  r8 , [ tmp2308 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2208 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal243 ]
  lea  rdx , [ tmp2308 ]
  lea  r8 , [ tmp2208 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2207 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ typeName2 ]
  lea  rdx , [ tmp2208 ]
  lea  r8 , [ tmp2207 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2206 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal242 ]
  lea  rdx , [ tmp2207 ]
  lea  r8 , [ tmp2206 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ id ]
  lea  rdx , [ tmp2206 ]
  lea  r8 , [ tmp2205 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2204 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal241 ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2204 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ tmp2204 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l2306:
l2307:
l2301:
l2302:
  jmp l2297
l2296:
  lea  rcx, [ classProto1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ classProto1 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classProto2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo2 ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ classProto2 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ classProto1 ]
  lea rdx, [ classProto2 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2309
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
l2309:
l2310:
l2297:
  mov dword [ tmp2177 ], 1
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp2175 ]
  lea  r8 , [ tmp2176 ]
  lea  r9 , [ symbolInfo1 ]
  call  __ASTSymbolsCollector__updateVariableSymbolInfo$0
  mov dword [ tmp2177 ], 2
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo1 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp2176 ]
  lea  r8 , [ tmp2175 ]
  lea  r9 , [ symbolInfo1 ]
  call  __ASTSymbolsCollector__updateVariableSymbolInfo$0
l2288:
l2289:
  ret
l2287:
  lea  rcx , [ symbols1 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo1 ]
  lea  r9 , [ l2286 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values symbolInfo1
; -----------------------------
;
l2284:
l2285:
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdi , [ tmp2175 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2175 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2311
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantStoreAtKey
l2311:
l2312:
  jmp l2236
l2313:
  mov dword [ tmp2177 ], 0
  lea  rcx, [ iterNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ iterNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2177 ], 1
  lea  rcx, [ idxStartNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ idxStartNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2177 ], 2
  lea  rcx, [ idxEndNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ idxEndNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2177 ], 3
  lea  rcx, [ idxStepNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ idxStepNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2177 ], 4
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ bodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2175 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 16
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp2211 ], 1
  mov eax, dword [ tmp2211 ]
  mov [ tmp2175 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2175 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2175 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2314
  lea  rcx, [ __cse13 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ __cse13 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse13 ]
  lea  rdx , [ iterNode ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 7
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ __literal245 ]
  lea  r8 , [ tmp2205 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2204 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2204 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ __cse13 ]
  lea  rdx , [ tmp2204 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l2314:
l2315:
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 34
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ __cse14 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ __cse14 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ __cse15 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse15 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse14 ]
  lea  rdx , [ __cse15 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 35
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ __cse14 ]
  lea  rdx , [ __cse15 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 36
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 1
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  push rdi
  lea  rcx , [ __cse14 ]
  lea  rdx , [ tmp2176 ]
  lea  r8 , [ tmp2224 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 14
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ idxStartNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$0
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ idxEndNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$0
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ idxStepNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$0
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ bodyNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0
  jmp l2236
l2237:
  mov dword [ tmp2192 ], 1
  mov dword [ tmp2177 ], 45
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2316
  mov dword [ tmp2211 ], 1
  mov dword [ tmp2177 ], 46
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2317
  mov dword [ tmp2270 ], 1
  mov dword [ tmp2177 ], 47
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2318
  mov dword [ tmp2231 ], 1
  mov dword [ tmp2177 ], 48
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2319
  mov dword [ tmp2177 ], 49
  mov dword [ tmp2231 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2177 ]
  setz byte [ tmp2231 ]
l2319:
  mov eax, dword [ tmp2231 ]
  mov dword [ tmp2270 ], eax
l2318:
  mov eax, dword [ tmp2270 ]
  mov dword [ tmp2211 ], eax
l2317:
  mov eax, dword [ tmp2211 ]
  mov dword [ tmp2192 ], eax
l2316:
  cmp dword [ tmp2192 ], 0
  jz l2320
  mov dword [ tmp2322 ], 2
  mov eax, dword [ childrenCnt ]
  sub eax, dword [ tmp2322 ]
  mov dword [ iteratorsCnt ], eax
  lea  rcx, [ boxNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ iteratorsCnt ]
  lea  r8 , [ boxNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2322 ], 1
  mov eax, dword [ childrenCnt ]
  sub eax, dword [ tmp2322 ]
  mov dword [ tmp2177 ], eax
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ bodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 34
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2177 ], 1
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp2322 .. iteratorsCnt
;
l2323:
  mov eax, dword [ idx ]
  cmp eax, dword [ iteratorsCnt ]
  jge l2324
  lea  rcx, [ iterNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ iterNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 16
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp2270 ], 1
  mov eax, dword [ tmp2270 ]
  mov [ tmp2224 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ tmp2175 ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2325
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ __literal246 ]
  lea  r8 , [ tmp2205 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2204 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2204 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ tmp2204 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l2325:
l2326:
  lea  rcx, [ __cse16 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ __cse16 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ __cse17 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse17 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse16 ]
  lea  rdx , [ __cse17 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 35
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ __cse16 ]
  lea  rdx , [ __cse17 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 36
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2211 ], 1
  mov eax, dword [ tmp2211 ]
  mov [ tmp2175 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2175 + Variant_t.value], rax
  lea  rcx , [ tmp2224 ]
  lea  rdx , [ __literal247 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterNode ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2327 ], -1
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2327 ]
  mov [ tmp2224 + Variant_t.value], rax
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantStoreAtKey
  mov eax, dword [ idx ]
  add eax, dword [ tmp2177 ]
  mov dword [ idx ], eax
  jmp l2323
l2324:
;
; END: for idx in tmp2322 .. iteratorsCnt step tmp2177
; -----------------------------
;
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ boxNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ tmp2176 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 21
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ boxNode ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2211 ], 1
  mov dword [ tmp2322 ], 48
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2322 ]
  jz l2328
  mov dword [ tmp2322 ], 49
  mov dword [ tmp2211 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2322 ]
  setz byte [ tmp2211 ]
l2328:
  cmp dword [ tmp2211 ], 0
  jz l2329
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2322 ], 0
  lea  rcx, [ tmp2223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2322 ]
  lea  r8 , [ tmp2223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2223 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ tmp2175 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 25
  call __MOLD_VCall
  pop rdi
  jmp l2330
l2329:
  mov dword [ tmp2270 ], 1
  mov dword [ tmp2322 ], 46
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2322 ]
  jz l2331
  mov dword [ tmp2322 ], 47
  mov dword [ tmp2270 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2322 ]
  setz byte [ tmp2270 ]
l2331:
  cmp dword [ tmp2270 ], 0
  jz l2332
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2322 ], 0
  lea  rcx, [ tmp2223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2322 ]
  lea  r8 , [ tmp2223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2223 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ tmp2176 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 27
  call __MOLD_VCall
  pop rdi
l2332:
l2333:
l2330:
  mov dword [ tmp2322 ], 1
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp2177 .. iteratorsCnt
;
l2334:
  mov eax, dword [ idx ]
  cmp eax, dword [ iteratorsCnt ]
  jge l2335
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2211 ], 1
  mov eax, dword [ tmp2211 ]
  mov [ tmp2176 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2176 + Variant_t.value], rax
  lea  rcx , [ tmp2224 ]
  lea  rdx , [ __literal197 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantStoreAtKey
  mov eax, dword [ idx ]
  add eax, dword [ tmp2322 ]
  mov dword [ idx ], eax
  jmp l2334
l2335:
;
; END: for idx in tmp2177 .. iteratorsCnt step tmp2322
; -----------------------------
;
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ boxNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$0
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ bodyNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0
  jmp l2321
l2320:
  mov dword [ tmp2177 ], 43
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jnz l2336
  mov dword [ tmp2177 ], 0
  lea  rcx, [ condNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ condNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2177 ], 1
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ bodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 34
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2176 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ condNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromRightNode$0
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ bodyNode ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0
  jmp l2337
l2336:
  mov dword [ goOnIntoChildren ], 1
  mov dword [ tmp2177 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2177 ], 1
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2177 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2177 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jnz l2338
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2231 ], 1
  lea rcx, [ funcName ]
  lea rdx, [ __literal16 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2340
  mov dword [ tmp2278 ], 1
  lea rcx, [ funcName ]
  lea rdx, [ __literal248 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2341
  mov dword [ tmp2300 ], 1
  lea rcx, [ funcName ]
  lea rdx, [ __literal122 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2342
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal17 ]
  lea  r8 , [ tmp2300 ]
  call  __MOLD_VariantCompareEQ
l2342:
  mov eax, dword [ tmp2300 ]
  mov dword [ tmp2278 ], eax
l2341:
  mov eax, dword [ tmp2278 ]
  mov dword [ tmp2231 ], eax
l2340:
  cmp dword [ tmp2231 ], 0
  jz l2343
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ funcName ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 16
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp2300 ], 0
  mov eax, dword [ tmp2300 ]
  mov [ tmp2224 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ tmp2176 ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2345
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2176 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp2300 ], 1
  mov eax, dword [ tmp2300 ]
  mov [ tmp2175 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2175 + Variant_t.value], rax
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2322 ], 1
  mov eax, dword [ tmp2322 ]
  neg eax
  mov dword [ tmp2177 ], eax
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2175 + Variant_t.value], rax
  lea  rcx , [ tmp2176 ]
  lea  rdx , [ __literal136 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp2176 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 11
  call __MOLD_VCall
  pop rdi
l2345:
l2346:
l2343:
l2344:
  mov dword [ tmp2278 ], 1
  mov eax, dword [ tmp2278 ]
  mov [ tmp2224 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ isLeftNode ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2347
  mov dword [ isRetValUsed ], 0
  jmp l2348
l2347:
  mov dword [ isRetValUsed ], 1
l2348:
  mov dword [ tmp2231 ], 0
  mov eax, dword [ tmp2231 ]
  mov [ isLeftNode + Variant_t.type], VARIANT_BOOLEAN
  mov [ isLeftNode + Variant_t.value], rax
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ childrenCnt ]
  mov [ tmp2176 + Variant_t.value], rax
  mov eax, dword [ isRetValUsed ]
  mov [ tmp2175 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2175 + Variant_t.value], rax
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp2176 ]
  lea  r9 , [ tmp2175 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 37
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 38
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ currentFunctionName ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentFunctionName ]
  lea rdx, [ tmp2224 ]
  call __MOLD_VariantMove
  mov dword [ tmp2231 ], 0
  push rdi
  lea  rcx , [ currentFunctionName ]
  lea  rdi , [ tmp2224 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2177 ], 0
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2175 + Variant_t.value], rax
  lea rcx, [ tmp2224 ]
  lea rdx, [ tmp2175 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2349
  lea  rcx , [ currentFunctionName ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp2231 ]
  call  __MOLD_VariantCompareEQ
l2349:
  cmp dword [ tmp2231 ], 0
  jz l2350
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2224 ]
  lea  rdi , [ tmp2175 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2207 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp2207 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2206 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal250 ]
  lea  rdx , [ tmp2207 ]
  lea  r8 , [ tmp2206 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2205 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ tmp2206 ]
  lea  r8 , [ tmp2205 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2204 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal249 ]
  lea  rdx , [ tmp2205 ]
  lea  r8 , [ tmp2204 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp2204 ]
  call  __ASTSymbolsCollector__debug$0
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2224 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2278 ], 1
  mov eax, dword [ tmp2278 ]
  mov [ tmp2224 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2224 + Variant_t.value], rax
  lea  rcx , [ tmp2175 ]
  lea  rdx , [ __literal251 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantStoreAtKey
l2350:
l2351:
  lea rcx, [ funcName ]
  lea rdx, [ __literal17 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2352
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l2355
l2354:
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2175 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 39
  call __MOLD_VCall
  pop rdi
  ret
l2355:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2354 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  mov dword [ goOnIntoChildren ], 0
l2352:
l2353:
  jmp l2339
l2338:
  mov dword [ tmp2177 ], 36
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jnz l2356
  lea  rcx , [ node ]
  lea  rdx , [ __literal252 ]
  lea  r8 , [ isLeftNode ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2278 ], 0
  mov eax, dword [ tmp2278 ]
  mov [ isLeftNode + Variant_t.type], VARIANT_BOOLEAN
  mov [ isLeftNode + Variant_t.value], rax
l2356:
l2357:
l2339:
  mov dword [ tmp2231 ], 1
  xor  eax, eax
  or   dword [ goOnIntoChildren ], eax
  setz cl
  or   dword [ tmp2231 ], eax
  setz al
  xor  al, cl
  jnz l2358
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l2361
l2360:
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ item ]
  lea  r9 , [ isLeftNode ]
  call  __ASTSymbolsCollector__collectSymbols$0
  ret
l2361:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2360 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
l2358:
l2359:
  mov dword [ tmp2270 ], 1
  mov dword [ tmp2177 ], 58
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2362
  mov dword [ tmp2231 ], 1
  mov dword [ tmp2177 ], 59
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2363
  mov dword [ tmp2278 ], 1
  mov dword [ tmp2177 ], 60
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2364
  mov dword [ tmp2300 ], 1
  mov dword [ tmp2177 ], 61
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2365
  mov dword [ tmp2305 ], 1
  mov dword [ tmp2177 ], 64
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2366
  mov dword [ tmp2367 ], 1
  mov dword [ tmp2177 ], 70
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2368
  mov dword [ tmp2369 ], 1
  mov dword [ tmp2177 ], 71
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2370
  mov dword [ tmp2371 ], 1
  mov dword [ tmp2177 ], 68
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2372
  mov dword [ tmp2177 ], 69
  mov dword [ tmp2371 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2177 ]
  setz byte [ tmp2371 ]
l2372:
  mov eax, dword [ tmp2371 ]
  mov dword [ tmp2369 ], eax
l2370:
  mov eax, dword [ tmp2369 ]
  mov dword [ tmp2367 ], eax
l2368:
  mov eax, dword [ tmp2367 ]
  mov dword [ tmp2305 ], eax
l2366:
  mov eax, dword [ tmp2305 ]
  mov dword [ tmp2300 ], eax
l2365:
  mov eax, dword [ tmp2300 ]
  mov dword [ tmp2278 ], eax
l2364:
  mov eax, dword [ tmp2278 ]
  mov dword [ tmp2231 ], eax
l2363:
  mov eax, dword [ tmp2231 ]
  mov dword [ tmp2270 ], eax
l2362:
  cmp dword [ tmp2270 ], 0
  jz l2374
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp2177 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp2177 ]
  mov dword [ xType ], eax
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp2177 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp2177 ]
  mov dword [ yType ], eax
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 52
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2175 + Variant_t.value], rax
  lea rcx, [ tmp2224 ]
  lea rdx, [ tmp2175 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2376
  mov dword [ tmp2177 ], 1
  mov eax, dword [ yType ]
  cmp eax, dword [ tmp2177 ]
  jnz l2378
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 40
  call __MOLD_VCall
  pop rdi
  jmp l2379
l2378:
  mov dword [ tmp2177 ], 3
  mov eax, dword [ yType ]
  cmp eax, dword [ tmp2177 ]
  jnz l2380
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 41
  call __MOLD_VCall
  pop rdi
  jmp l2381
l2380:
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 42
  call __MOLD_VCall
  pop rdi
l2381:
l2379:
l2376:
l2377:
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 52
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ tmp2175 ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2382
  mov dword [ tmp2177 ], 1
  mov eax, dword [ xType ]
  cmp eax, dword [ tmp2177 ]
  jnz l2384
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2175 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 40
  call __MOLD_VCall
  pop rdi
  jmp l2385
l2384:
  mov dword [ tmp2177 ], 3
  mov eax, dword [ xType ]
  cmp eax, dword [ tmp2177 ]
  jnz l2386
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2175 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 41
  call __MOLD_VCall
  pop rdi
  jmp l2387
l2386:
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2175 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 42
  call __MOLD_VCall
  pop rdi
l2387:
l2385:
l2382:
l2383:
  jmp l2375
l2374:
  mov dword [ tmp2177 ], 57
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jnz l2388
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 52
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2175 + Variant_t.value], rax
  lea rcx, [ tmp2224 ]
  lea rdx, [ tmp2175 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2390
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  rdi, [ tmp2175 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 42
  call __MOLD_VCall
  pop rdi
l2390:
l2391:
  jmp l2389
l2388:
  mov dword [ tmp2278 ], 1
  mov dword [ tmp2177 ], 66
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2177 ]
  jz l2392
  mov dword [ tmp2177 ], 67
  mov dword [ tmp2278 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2177 ]
  setz byte [ tmp2278 ]
l2392:
  cmp dword [ tmp2278 ], 0
  jz l2393
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp2177 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp2177 ]
  mov dword [ xType ], eax
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp2177 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp2177 ]
  mov dword [ yType ], eax
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 52
  mov [ tmp2224 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2224 + Variant_t.value], rax
  lea rcx, [ tmp2175 ]
  lea rdx, [ tmp2224 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2395
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2175 ]
  call  __MOLD_VariantLoadFromKey
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ yType ]
  mov [ tmp2176 + Variant_t.value], rax
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2175 ]
  lea  r8 , [ tmp2176 ]
  lea  rdi, [ tmp2224 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 14
  call __MOLD_VCall
  pop rdi
l2395:
l2396:
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2177 ], 52
  mov [ tmp2176 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2177 ]
  mov [ tmp2176 + Variant_t.value], rax
  lea rcx, [ tmp2224 ]
  lea rdx, [ tmp2176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2397
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2224 ]
  call  __MOLD_VariantLoadFromKey
  mov [ tmp2175 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ xType ]
  mov [ tmp2175 + Variant_t.value], rax
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp2224 ]
  lea  r8 , [ tmp2175 ]
  lea  rdi, [ tmp2176 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 14
  call __MOLD_VCall
  pop rdi
l2397:
l2398:
l2393:
l2394:
l2389:
l2375:
l2337:
l2321:
l2236:
l2214:
l2185:
l2183:
l2184:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2175 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2176 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseMethods ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse7 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseProto ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator methodProto
  ; Skipped loop iterator child
  lea  rcx, [ methodParamsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ baseMethodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2223 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2224 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astTypeParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse8 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator paramName
  lea  rcx, [ __cse9 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse10 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeBox ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeIdx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeKey ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldClassProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newClassProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse11 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo1
  lea  rcx, [ symbolInfo2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ readHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ writeHits ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse12 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ typeName1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ typeName2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxStartNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxEndNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxStepNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse14 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse15 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse13 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ boxNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse16 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse17 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ condNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentFunctionName ]
  call __MOLD_VariantDestroy

  add  rsp, 1376
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore isLeftNode
  restore opcode
  restore children
  restore childrenCnt
  restore tmp2175
  restore tmp2176
  restore tmp2177
  restore item
  restore tmp2180
  restore tmp2182
  restore tmp2192
  restore symbolInfo
  restore tmp2204
  restore tmp2205
  restore tmp2206
  restore tmp2207
  restore tmp2208
  restore tmp2211
  restore className
  restore baseName
  restore vtable
  restore baseMethods
  restore classProto
  restore __cse7
  restore baseProto
  restore oneMethodName
  restore methodProto
  restore child
  restore methodName
  restore methodParamsCnt
  restore baseMethodProto
  restore tmp2223
  restore tmp2224
  restore tmp2231
  restore nodeBody
  restore funcProto
  restore value
  restore funcName
  restore astTypeParams
  restore paramShift
  restore __cse8
  restore paramIdx
  restore paramName
  restore __cse9
  restore __cse10
  restore nodeBox
  restore nodeIdx
  restore nodeKey
  restore tmp2270
  restore tmp2278
  restore lval
  restore rval
  restore oldClassProto
  restore newClassProto
  restore x
  restore tmp2300
  restore tmp2305
  restore tmp2308
  restore symbolTable1
  restore symbolTable2
  restore symbols1
  restore symbols2
  restore __cse11
  restore symbolInfo1
  restore symbolInfo2
  restore readHits
  restore writeHits
  restore astType1
  restore astType2
  restore __cse12
  restore typeName1
  restore typeName2
  restore id
  restore classProto1
  restore classProto2
  restore iterNode
  restore idxStartNode
  restore idxEndNode
  restore idxStepNode
  restore bodyNode
  restore __cse14
  restore __cse15
  restore __cse13
  restore tmp2322
  restore tmp2327
  restore iteratorsCnt
  restore boxNode
  restore idx
  restore __cse16
  restore __cse17
  restore condNode
  restore tmp2367
  restore tmp2369
  restore tmp2371
  restore tmp2373
  restore goOnIntoChildren
  restore y
  restore isRetValUsed
  restore currentFunctionName
  restore xType
  restore yType
; -----------------------------------------------
; function __ASTSymbolsCollector_buildSymbolTable$0
; -----------------------------------------------
__ASTSymbolsCollector_buildSymbolTable$0:
  ; init frame
  ; ----------
  tmp2404 EQU rbp - 24 ; 16 bytes
  tmp2403 EQU rbp - 28 ; 4 bytes
  tmp2402 EQU rbp - 44 ; 16 bytes
  tmp2401 EQU rbp - 48 ; 4 bytes
  tmp2399 EQU rbp - 52 ; 4 bytes
  node EQU rbp - 68 ; 16 bytes
  this EQU rbp - 84 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp2402 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2404 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2399 ], 0
  lea  rcx, [ tmp2402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2402 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2403 ], 31
  mov [ tmp2404 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2403 ]
  mov [ tmp2404 + Variant_t.value], rax
  lea rcx, [ tmp2402 ]
  lea rdx, [ tmp2404 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2400
  lea  rcx, [ tmp2404 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2404 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2403 ], 30
  mov [ tmp2402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2403 ]
  mov [ tmp2402 + Variant_t.value], rax
  lea  rcx , [ tmp2404 ]
  lea  rdx , [ tmp2402 ]
  lea  r8 , [ tmp2399 ]
  call  __MOLD_VariantCompareNE
l2400:
  cmp dword [ tmp2399 ], 0
  jz l2405
  lea  rcx , [ __literal253 ]
  mov eax,  41
  call  __MOLD_SysCall
l2405:
l2406:
  lea  rcx, [ tmp2402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2402 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp2402 ]
  lea  r8 , [ node ]
  call  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2402 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2404 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore node
  restore tmp2399
  restore tmp2401
  restore tmp2402
  restore tmp2403
  restore tmp2404
; -----------------------------------------------
; function __ASTEvaluator_constructor$0
; -----------------------------------------------
__ASTEvaluator_constructor$0:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTEvaluator__debug$0
; -----------------------------------------------
__ASTEvaluator__debug$0:
  ; init frame
  ; ----------
  tmp2408 EQU rbp - 12 ; 4 bytes
  tmp2407 EQU rbp - 16 ; 4 bytes
  msg EQU rbp - 32 ; 16 bytes
  this EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----
  mov dword [ tmp2408 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp2408 ], eax
  setz al
  xor  al, cl
  jnz l2409
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal254 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l2409:
l2410:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp2407
  restore tmp2408
; -----------------------------------------------
; function __ASTEvaluator__assignValue$0
; -----------------------------------------------
__ASTEvaluator__assignValue$0:
  ; init frame
  ; ----------
  tmp2411 EQU rbp - 24 ; 16 bytes
  newValue EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  rval EQU rbp - 72 ; 16 bytes
  lval EQU rbp - 88 ; 16 bytes
  valuesMap EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ lval ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rval ], xmm0
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2411 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValue ]
  lea rdx, [ rval ]
  call __MOLD_VariantMove
  lea  rcx , [ valuesMap ]
  lea  rdx , [ name ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ lval ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2411 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore valuesMap
  restore lval
  restore rval
  restore name
  restore newValue
  restore tmp2411
; -----------------------------------------------
; function __ASTEvaluator__getValue$0
; -----------------------------------------------
__ASTEvaluator__getValue$0:
  ; init frame
  ; ----------
  tmp2419 EQU rbp - 24 ; 16 bytes
  tmp2418 EQU rbp - 28 ; 4 bytes
  tmp2417 EQU rbp - 32 ; 4 bytes
  tmp2415 EQU rbp - 36 ; 4 bytes
  tmp2412 EQU rbp - 52 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 68 ; 16 bytes
  valuesMap EQU rbp - 84 ; 16 bytes
  this EQU rbp - 100 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ name ], xmm0
  mov [tmp2412 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2419 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ valuesMap ]
  lea  rdx , [ name ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: while
;
l2413:
  mov dword [ tmp2415 ], 0
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp2412 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2418 ], 0
  mov [ tmp2419 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2418 ]
  mov [ tmp2419 + Variant_t.value], rax
  lea rcx, [ tmp2412 ]
  lea rdx, [ tmp2419 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2416
  lea  rcx, [ tmp2412 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ valuesMap ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp2412 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2412 ]
  lea  rdi , [ tmp2419 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2418 ], 0
  mov [ tmp2412 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2418 ]
  mov [ tmp2412 + Variant_t.value], rax
  lea  rcx , [ tmp2419 ]
  lea  rdx , [ tmp2412 ]
  lea  r8 , [ tmp2415 ]
  call  __MOLD_VariantCompareNE
l2416:
  cmp dword [ tmp2415 ], 0
  jz l2414
  lea  rcx , [ valuesMap ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ valuesMap ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ valuesMap ]
  lea  rdx , [ name ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  jmp l2413
l2414:
;
; END: while
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2412 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2419 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore valuesMap
  restore name
  restore rv
  restore tmp2412
  restore tmp2415
  restore tmp2417
  restore tmp2418
  restore tmp2419
; -----------------------------------------------
; function __ASTEvaluator__mergeValues$0
; -----------------------------------------------
__ASTEvaluator__mergeValues$0:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp2426 EQU rbp - 28 ; 4 bytes
  tmp2423 EQU rbp - 44 ; 16 bytes
  tmp2422 EQU rbp - 48 ; 4 bytes
  tmp2421 EQU rbp - 52 ; 4 bytes
  tmp2420 EQU rbp - 68 ; 16 bytes
  rv EQU rdi
  y EQU rbp - 84 ; 16 bytes
  x EQU rbp - 100 ; 16 bytes
  this EQU rbp - 116 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ y ], xmm0
  mov [tmp2420 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2423 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  call  __MOLD_VariantArrayCreate
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp2420 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2422 ], 0
  mov [ tmp2423 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2422 ]
  mov [ tmp2423 + Variant_t.value], rax
  lea rcx, [ tmp2420 ]
  lea rdx, [ tmp2423 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2424
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp2423 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp2423 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2427
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l2430
l2429:
  lea  rcx , [ rv ]
  lea  rdx , [ item ]
  mov eax,  50
  call  __MOLD_SysCall
  ret
l2430:
  lea  rcx , [ x ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2429 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  jmp l2428
l2427:
  lea  rcx , [ rv ]
  lea  rdx , [ x ]
  mov eax,  50
  call  __MOLD_SysCall
l2428:
l2424:
l2425:
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp2423 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2422 ], 0
  mov [ tmp2420 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2422 ]
  mov [ tmp2420 + Variant_t.value], rax
  lea rcx, [ tmp2423 ]
  lea rdx, [ tmp2420 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2431
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp2420 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp2420 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2433
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l2436
l2435:
  lea  rcx , [ rv ]
  lea  rdx , [ item ]
  mov eax,  50
  call  __MOLD_SysCall
  ret
l2436:
  lea  rcx , [ y ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2435 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  jmp l2434
l2433:
  lea  rcx , [ rv ]
  lea  rdx , [ y ]
  mov eax,  50
  call  __MOLD_SysCall
l2434:
l2431:
l2432:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2420 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2423 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore x
  restore y
  restore rv
  restore tmp2420
  restore tmp2421
  restore tmp2422
  restore tmp2423
  restore tmp2426
  restore item
; -----------------------------------------------
; function __ASTEvaluator__processConditionalNode$0
; -----------------------------------------------
__ASTEvaluator__processConditionalNode$0:
  ; init frame
  ; ----------
  newValue EQU rbp - 24 ; 16 bytes
  oldValue EQU rbp - 40 ; 16 bytes
  varId EQU rbp - 56 ; 16 bytes
  tmp2441 EQU rbp - 60 ; 4 bytes
  tmp2438 EQU rbp - 76 ; 16 bytes
  tmp2437 EQU rbp - 92 ; 16 bytes
  newValuesMap EQU rbp - 108 ; 16 bytes
  node EQU rbp - 124 ; 16 bytes
  valuesMap EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [newValuesMap + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2437 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2438 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [oldValue + Variant_t.type], VARIANT_UNDEFINED
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2437 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2437 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2438 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2438 ]
  lea rdx, [ valuesMap ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2437 ]
  lea  rdx , [ __literal255 ]
  lea  r8 , [ tmp2438 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newValuesMap ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValuesMap ]
  lea rdx, [ tmp2437 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ newValuesMap ]
  lea  r8 , [ node ]
  call  __ASTEvaluator__processNode$0
;
; -----------------------------
; BEGIN: for keys varId values undefined
;
  jmp l2440
l2439:
  lea rcx, [ varId ]
  lea rdx, [ __literal255 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2442
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ varId ]
  lea  rdi , [ tmp2437 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__getValue$0
  pop rdi
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ oldValue ]
  lea rdx, [ tmp2437 ]
  call __MOLD_VariantMove
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oldValue ]
  lea  r8 , [ newValue ]
  lea  rdi , [ tmp2437 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__mergeValues$0
  pop rdi
  lea  rcx , [ valuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ tmp2437 ]
  call  __MOLD_VariantStoreAtKey
l2442:
l2443:
  ret
l2440:
  lea  rcx , [ newValuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ __TrashBin ]
  lea  r9 , [ l2439 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys varId values __TrashBin
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ newValuesMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2437 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2438 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore valuesMap
  restore node
  restore newValuesMap
  restore tmp2437
  restore tmp2438
  restore tmp2441
  restore varId
  restore oldValue
  restore newValue
; -----------------------------------------------
; function __ASTEvaluator__processTwoAlternativeNodes$0
; -----------------------------------------------
__ASTEvaluator__processTwoAlternativeNodes$0:
  ; init frame
  ; ----------
  value2 EQU rbp - 24 ; 16 bytes
  value1 EQU rbp - 40 ; 16 bytes
  oldValue EQU rbp - 56 ; 16 bytes
  varId EQU rbp - 72 ; 16 bytes
  tmp2448 EQU rbp - 76 ; 4 bytes
  tmp2445 EQU rbp - 92 ; 16 bytes
  tmp2444 EQU rbp - 108 ; 16 bytes
  newValuesMap2 EQU rbp - 124 ; 16 bytes
  newValuesMap1 EQU rbp - 140 ; 16 bytes
  node2 EQU rbp - 156 ; 16 bytes
  node1 EQU rbp - 172 ; 16 bytes
  valuesMap EQU rbp - 188 ; 16 bytes
  this EQU rbp - 204 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node1 ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ node2 ], xmm0
  mov [newValuesMap1 + Variant_t.type], VARIANT_UNDEFINED
  mov [newValuesMap2 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2444 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2445 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [oldValue + Variant_t.type], VARIANT_UNDEFINED
  mov [value1 + Variant_t.type], VARIANT_UNDEFINED
  mov [value2 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2444 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2444 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2445 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2445 ]
  lea rdx, [ valuesMap ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2444 ]
  lea  rdx , [ __literal255 ]
  lea  r8 , [ tmp2445 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newValuesMap1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValuesMap1 ]
  lea rdx, [ tmp2444 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2444 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2444 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2445 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2445 ]
  lea rdx, [ valuesMap ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2444 ]
  lea  rdx , [ __literal255 ]
  lea  r8 , [ tmp2445 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newValuesMap2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValuesMap2 ]
  lea rdx, [ tmp2444 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ newValuesMap1 ]
  lea  r8 , [ node1 ]
  call  __ASTEvaluator__processNode$0
  lea  rcx , [ this ]
  lea  rdx , [ newValuesMap2 ]
  lea  r8 , [ node2 ]
  call  __ASTEvaluator__processNode$0
;
; -----------------------------
; BEGIN: for keys varId values undefined
;
  jmp l2447
l2446:
  lea rcx, [ varId ]
  lea rdx, [ __literal255 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2449
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ varId ]
  lea  rdi , [ tmp2444 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__getValue$0
  pop rdi
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ oldValue ]
  lea rdx, [ tmp2444 ]
  call __MOLD_VariantMove
  lea  rcx, [ value1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap1 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value1 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ value2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap2 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value2 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ value1 ]
  lea  r8 , [ value2 ]
  lea  rdi , [ tmp2444 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__mergeValues$0
  pop rdi
  lea  rcx , [ valuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantStoreAtKey
l2449:
l2450:
  ret
l2447:
  lea  rcx , [ newValuesMap1 ]
  lea  rdx , [ varId ]
  lea  r8 , [ __TrashBin ]
  lea  r9 , [ l2446 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys varId values __TrashBin
; -----------------------------
;
;
; -----------------------------
; BEGIN: for keys varId values undefined
;
  jmp l2452
l2451:
  lea rcx, [ varId ]
  lea rdx, [ __literal255 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2453
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ varId ]
  lea  rdi , [ tmp2444 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__getValue$0
  pop rdi
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ oldValue ]
  lea rdx, [ tmp2444 ]
  call __MOLD_VariantMove
  lea  rcx, [ value1 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap1 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value1 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ value2 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValuesMap2 ]
  lea  rdx , [ varId ]
  lea  r8 , [ value2 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ value1 ]
  lea  r8 , [ value2 ]
  lea  rdi , [ tmp2444 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__mergeValues$0
  pop rdi
  lea  rcx , [ valuesMap ]
  lea  rdx , [ varId ]
  lea  r8 , [ tmp2444 ]
  call  __MOLD_VariantStoreAtKey
l2453:
l2454:
  ret
l2452:
  lea  rcx , [ newValuesMap2 ]
  lea  rdx , [ varId ]
  lea  r8 , [ __TrashBin ]
  lea  r9 , [ l2451 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys varId values __TrashBin
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ newValuesMap1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newValuesMap2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2444 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2445 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value2 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore valuesMap
  restore node1
  restore node2
  restore newValuesMap1
  restore newValuesMap2
  restore tmp2444
  restore tmp2445
  restore tmp2448
  restore varId
  restore oldValue
  restore value1
  restore value2
; -----------------------------------------------
; function __ASTEvaluator__getArrayOfValueNodes$0
; -----------------------------------------------
__ASTEvaluator__getArrayOfValueNodes$0:
  ; init frame
  ; ----------
  tmp2467 EQU rbp - 24 ; 16 bytes
  tmp2466 EQU rbp - 40 ; 16 bytes
  item EQU rbp - 56 ; 16 bytes
  tmp2461 EQU rbp - 60 ; 4 bytes
  tmp2458 EQU rbp - 76 ; 16 bytes
  tmp2457 EQU rbp - 80 ; 4 bytes
  tmp2456 EQU rbp - 84 ; 4 bytes
  tmp2455 EQU rbp - 100 ; 16 bytes
  rv EQU rdi
  storedValue EQU rbp - 116 ; 16 bytes
  node EQU rbp - 132 ; 16 bytes
  this EQU rbp - 148 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [storedValue + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2455 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2458 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp2466 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2467 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ storedValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ storedValue ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  call  __MOLD_VariantArrayCreate
  push rdi
  lea  rcx , [ storedValue ]
  lea  rdi , [ tmp2455 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2457 ], 0
  mov [ tmp2458 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2457 ]
  mov [ tmp2458 + Variant_t.value], rax
  lea rcx, [ tmp2455 ]
  lea rdx, [ tmp2458 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2459
  push rdi
  lea  rcx , [ storedValue ]
  lea  rdi , [ tmp2458 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp2458 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2462
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l2465
l2464:
  lea  rcx, [ tmp2458 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2458 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ rv ]
  lea  rdx , [ tmp2458 ]
  mov eax,  50
  call  __MOLD_SysCall
  ret
l2465:
  lea  rcx , [ storedValue ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l2464 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  jmp l2463
l2462:
  lea  rcx, [ tmp2458 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2458 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2455 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2455 + Variant_t.value], 0
  lea  rcx, [ tmp2466 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ storedValue ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2466 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2458 ]
  lea  rdx , [ tmp2455 ]
  lea  r8 , [ tmp2466 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp2458 ]
  call __MOLD_VariantMove
l2463:
l2459:
l2460:

  ; clean frame
  ; -----------
  lea  rcx, [ storedValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2455 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2458 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ tmp2466 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2467 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore node
  restore storedValue
  restore rv
  restore tmp2455
  restore tmp2456
  restore tmp2457
  restore tmp2458
  restore tmp2461
  restore item
  restore tmp2466
  restore tmp2467
; -----------------------------------------------
; function __ASTEvaluator__processNode$0
; -----------------------------------------------
__ASTEvaluator__processNode$0:
  ; init frame
  ; ----------
  astType EQU rbp - 24 ; 16 bytes
  childNode EQU rbp - 40 ; 16 bytes
  tmp2554 EQU rbp - 44 ; 4 bytes
  tmp2552 EQU rbp - 48 ; 4 bytes
  tmp2550 EQU rbp - 52 ; 4 bytes
  tmp2548 EQU rbp - 56 ; 4 bytes
  tmp2546 EQU rbp - 60 ; 4 bytes
  tmp2543 EQU rbp - 64 ; 4 bytes
  tmp2536 EQU rbp - 68 ; 4 bytes
  cond EQU rbp - 84 ; 16 bytes
  body EQU rbp - 100 ; 16 bytes
  iterBeginValue EQU rbp - 116 ; 16 bytes
  iter EQU rbp - 132 ; 16 bytes
  methodProto EQU rbp - 148 ; 16 bytes
  classProto EQU rbp - 164 ; 16 bytes
  rval EQU rbp - 180 ; 16 bytes
  lval EQU rbp - 196 ; 16 bytes
  tmp2510 EQU rbp - 200 ; 4 bytes
  tmp2501 EQU rbp - 216 ; 16 bytes
  tmp2500 EQU rbp - 232 ; 16 bytes
  tmp2499 EQU rbp - 248 ; 16 bytes
  tmp2498 EQU rbp - 264 ; 16 bytes
  tmp2497 EQU rbp - 280 ; 16 bytes
  tmp2494 EQU rbp - 284 ; 4 bytes
  tmp2491 EQU rbp - 288 ; 4 bytes
  tmp2488 EQU rbp - 292 ; 4 bytes
  tmp2485 EQU rbp - 308 ; 16 bytes
  symbolInfo EQU rbp - 324 ; 16 bytes
  tmp2478 EQU rbp - 328 ; 4 bytes
  tmp2476 EQU rbp - 332 ; 4 bytes
  tmp2474 EQU rbp - 336 ; 4 bytes
  tmp2471 EQU rbp - 340 ; 4 bytes
  tmp2470 EQU rbp - 356 ; 16 bytes
  tmp2469 EQU rbp - 360 ; 4 bytes
  tmp2468 EQU rbp - 376 ; 16 bytes
  childrenCnt EQU rbp - 380 ; 4 bytes
  children EQU rbp - 396 ; 16 bytes
  opcode EQU rbp - 400 ; 4 bytes
  node EQU rbp - 416 ; 16 bytes
  valuesMap EQU rbp - 432 ; 16 bytes
  this EQU rbp - 448 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 480

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ valuesMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2468 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2470 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2485 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2497 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2498 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2499 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2500 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2501 + Variant_t.type], VARIANT_UNDEFINED
  mov [lval + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [iter + Variant_t.type], VARIANT_UNDEFINED
  mov [iterBeginValue + Variant_t.type], VARIANT_UNDEFINED
  mov [body + Variant_t.type], VARIANT_UNDEFINED
  mov [cond + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [astType + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2468 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2468 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp2468 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2468 + Variant_t.value]
  mov dword [ childrenCnt ], eax
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2470 ]
  lea  rdx , [ node ]
  lea  rdi, [ tmp2468 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 7
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp2469 ], 52
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2469 ]
  jnz l2472
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2474 ], 0
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp2468 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2469 ], 0
  mov [ tmp2470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2470 + Variant_t.value], rax
  lea rcx, [ tmp2468 ]
  lea rdx, [ tmp2470 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2475
  mov dword [ tmp2476 ], 0
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2469 ], 2
  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2468 + Variant_t.value], rax
  lea rcx, [ tmp2470 ]
  lea rdx, [ tmp2468 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2477
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2468 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2469 ], 1
  mov [ tmp2470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2470 + Variant_t.value], rax
  lea  rcx , [ tmp2470 ]
  lea  rdx , [ tmp2468 ]
  lea  r8 , [ tmp2476 ]
  call  __MOLD_VariantCompareLT
l2477:
  mov eax, dword [ tmp2476 ]
  mov dword [ tmp2474 ], eax
l2475:
  cmp dword [ tmp2474 ], 0
  jz l2479
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey
  jmp l2480
l2479:
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2468 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ tmp2468 ]
  lea  rdi , [ tmp2470 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator__getValue$0
  pop rdi
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantStoreAtKey
l2480:
  jmp l2473
l2472:
  mov dword [ tmp2469 ], 56
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2469 ]
  jnz l2481
  mov dword [ tmp2469 ], 0
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2469 ], 1
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ rval ]
  call  __ASTEvaluator__processNode$0
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2469 ], 36
  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2468 + Variant_t.value], rax
  lea rcx, [ tmp2470 ]
  lea rdx, [ tmp2468 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2483
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2485 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2469 ], 0
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2485 ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2470 ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp2468 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2469 ], 0
  mov [ tmp2470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2470 + Variant_t.value], rax
  lea rcx, [ tmp2468 ]
  lea rdx, [ tmp2470 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2486
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ classProto ]
  lea  rdi , [ tmp2470 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2469 ], 0
  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2468 + Variant_t.value], rax
  lea rcx, [ tmp2470 ]
  lea rdx, [ tmp2468 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2489
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal223 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2485 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2470 ]
  lea  rdx , [ tmp2485 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp2468 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2469 ], 0
  mov [ tmp2485 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2485 + Variant_t.value], rax
  lea rcx, [ tmp2468 ]
  lea rdx, [ tmp2485 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2492
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp2468 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2468 ]
  lea  rdi , [ tmp2485 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2469 ], 0
  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2468 + Variant_t.value], rax
  lea rcx, [ tmp2485 ]
  lea rdx, [ tmp2468 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2495
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2485 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2501 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2501 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2500 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2501 ]
  lea  rdx , [ __literal258 ]
  lea  r8 , [ tmp2500 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2499 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal257 ]
  lea  rdx , [ tmp2500 ]
  lea  r8 , [ tmp2499 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2498 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2470 ]
  lea  rdx , [ tmp2499 ]
  lea  r8 , [ tmp2498 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2497 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal256 ]
  lea  rdx , [ tmp2498 ]
  lea  r8 , [ tmp2497 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp2485 ]
  lea  rdx , [ tmp2497 ]
  lea  rdi, [ tmp2468 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l2495:
l2496:
l2492:
l2493:
l2489:
l2490:
l2486:
l2487:
  jmp l2484
l2483:
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2468 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2469 ], 36
  mov [ tmp2485 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2485 + Variant_t.value], rax
  lea rcx, [ tmp2468 ]
  lea rdx, [ tmp2485 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2502
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2469 ], 0
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2470 ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ tmp2468 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2468 ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp2485 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2469 ], 0
  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2468 + Variant_t.value], rax
  lea rcx, [ tmp2485 ]
  lea rdx, [ tmp2468 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2504
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ classProto ]
  lea  rdi , [ tmp2468 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2469 ], 0
  mov [ tmp2485 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2485 + Variant_t.value], rax
  lea rcx, [ tmp2468 ]
  lea rdx, [ tmp2485 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2506
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal223 ]
  lea  r8 , [ tmp2468 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2468 ]
  lea  rdx , [ tmp2470 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp2485 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2469 ], 0
  mov [ tmp2470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2470 + Variant_t.value], rax
  lea rcx, [ tmp2485 ]
  lea rdx, [ tmp2470 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2508
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp2485 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2485 ]
  lea  rdi , [ tmp2470 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2469 ], 0
  mov [ tmp2485 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2485 + Variant_t.value], rax
  lea rcx, [ tmp2470 ]
  lea rdx, [ tmp2485 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2511
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2468 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2501 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2501 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2500 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2501 ]
  lea  rdx , [ __literal258 ]
  lea  r8 , [ tmp2500 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2499 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal257 ]
  lea  rdx , [ tmp2500 ]
  lea  r8 , [ tmp2499 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2498 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2468 ]
  lea  rdx , [ tmp2499 ]
  lea  r8 , [ tmp2498 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2497 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal259 ]
  lea  rdx , [ tmp2498 ]
  lea  r8 , [ tmp2497 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp2470 ]
  lea  rdx , [ tmp2497 ]
  lea  rdi, [ tmp2485 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l2511:
l2512:
l2508:
l2509:
l2506:
l2507:
l2504:
l2505:
l2502:
l2503:
l2484:
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2485 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2469 ], 52
  mov [ tmp2470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2470 + Variant_t.value], rax
  lea rcx, [ tmp2485 ]
  lea rdx, [ tmp2470 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2513
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ lval ]
  lea  r9 , [ rval ]
  call  __ASTEvaluator__assignValue$0
  jmp l2514
l2513:
  mov dword [ tmp2478 ], 1
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2469 ], 54
  mov [ tmp2485 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2485 + Variant_t.value], rax
  lea rcx, [ tmp2470 ]
  lea rdx, [ tmp2485 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2515
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2485 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2469 ], 55
  mov [ tmp2470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2470 + Variant_t.value], rax
  lea  rcx , [ tmp2485 ]
  lea  rdx , [ tmp2470 ]
  lea  r8 , [ tmp2478 ]
  call  __MOLD_VariantCompareEQ
l2515:
  cmp dword [ tmp2478 ], 0
  jz l2516
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2485 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2469 ], 0
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2485 ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp2470 ]
  lea  rdi , [ tmp2491 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsOkAsBox
  pop rdi
  mov dword [ tmp2494 ], 0
  xor  eax, eax
  or   dword [ tmp2491 ], eax
  setz cl
  or   dword [ tmp2494 ], eax
  setz al
  xor  al, cl
  jnz l2518
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp2485 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2485 ]
  lea  rdx , [ __literal260 ]
  lea  rdi, [ tmp2470 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l2518:
l2519:
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ lval ]
  lea  r9 , [ lval ]
  call  __ASTEvaluator__assignValue$0
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ lval ]
  call  __ASTEvaluator__processNode$0
l2516:
l2517:
l2514:
  jmp l2482
l2481:
  mov dword [ tmp2469 ], 40
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2469 ]
  jnz l2520
  mov dword [ tmp2469 ], 0
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ tmp2470 ]
  call  __ASTEvaluator__processNode$0
  mov dword [ tmp2469 ], 2
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp2469 ]
  jnz l2522
  mov dword [ tmp2469 ], 1
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ tmp2470 ]
  call  __ASTEvaluator__processConditionalNode$0
  jmp l2523
l2522:
  mov dword [ tmp2469 ], 1
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ tmp2470 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2469 ], 2
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ tmp2485 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ tmp2470 ]
  lea  r9 , [ tmp2485 ]
  call  __ASTEvaluator__processTwoAlternativeNodes$0
l2523:
  jmp l2521
l2520:
  mov dword [ tmp2469 ], 44
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2469 ]
  jnz l2524
  mov dword [ tmp2469 ], 0
  lea  rcx, [ iter ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ iter ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2469 ], 1
  lea  rcx, [ iterBeginValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ iterBeginValue ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2469 ], 4
  lea  rcx, [ body ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ iter ]
  lea  r9 , [ iter ]
  call  __ASTEvaluator__assignValue$0
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2485 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2470 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2470 + Variant_t.value], 0
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2468 ]
  lea rdx, [ iterBeginValue ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2485 ]
  lea  rdx , [ tmp2470 ]
  lea  r8 , [ tmp2468 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp2470 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2470 + Variant_t.value], 1
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2468 ]
  lea rdx, [ iter ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2485 ]
  lea  rdx , [ tmp2470 ]
  lea  r8 , [ tmp2468 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ iter ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp2485 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$0
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$0
  jmp l2525
l2524:
  mov dword [ tmp2488 ], 1
  mov dword [ tmp2469 ], 45
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2469 ]
  jz l2526
  mov dword [ tmp2494 ], 1
  mov dword [ tmp2469 ], 46
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2469 ]
  jz l2527
  mov dword [ tmp2469 ], 48
  mov dword [ tmp2494 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2469 ]
  setz byte [ tmp2494 ]
l2527:
  mov eax, dword [ tmp2494 ]
  mov dword [ tmp2488 ], eax
l2526:
  cmp dword [ tmp2488 ], 0
  jz l2528
  mov dword [ tmp2469 ], 2
  lea  rcx, [ body ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$0
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$0
  jmp l2529
l2528:
  mov dword [ tmp2494 ], 1
  mov dword [ tmp2469 ], 47
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2469 ]
  jz l2530
  mov dword [ tmp2469 ], 49
  mov dword [ tmp2494 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2469 ]
  setz byte [ tmp2494 ]
l2530:
  cmp dword [ tmp2494 ], 0
  jz l2531
  mov dword [ tmp2469 ], 3
  lea  rcx, [ body ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$0
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$0
  jmp l2532
l2531:
  mov dword [ tmp2469 ], 43
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2469 ]
  jnz l2533
  mov dword [ tmp2469 ], 0
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2469 ], 1
  lea  rcx, [ body ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2469 ]
  lea  r8 , [ body ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ cond ]
  call  __ASTEvaluator__processNode$0
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$0
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ cond ]
  call  __ASTEvaluator__processConditionalNode$0
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ body ]
  call  __ASTEvaluator__processConditionalNode$0
  jmp l2534
l2533:
  mov dword [ tmp2510 ], 1
  mov dword [ tmp2469 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2469 ]
  jz l2535
  mov dword [ tmp2469 ], 36
  mov dword [ tmp2510 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2469 ]
  setz byte [ tmp2510 ]
l2535:
  cmp dword [ tmp2510 ], 0
  jz l2537
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l2540
l2539:
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2485 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2469 ], 52
  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2468 + Variant_t.value], rax
  lea rcx, [ tmp2485 ]
  lea rdx, [ tmp2468 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2541
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp2468 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2469 ], 0
  mov [ tmp2485 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2485 + Variant_t.value], rax
  lea rcx, [ tmp2468 ]
  lea rdx, [ tmp2485 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2544
  lea  rcx, [ astType ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ astType ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2546 ], 1
  push rdi
  lea  rcx , [ astType ]
  lea  rdi , [ tmp2485 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2469 ], 0
  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2468 + Variant_t.value], rax
  lea rcx, [ tmp2485 ]
  lea rdx, [ tmp2468 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2547
  mov dword [ tmp2548 ], 1
  mov dword [ tmp2469 ], -1
  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2468 + Variant_t.value], rax
  lea rcx, [ astType ]
  lea rdx, [ tmp2468 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2549
  mov dword [ tmp2550 ], 1
  mov dword [ tmp2469 ], 6
  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2468 + Variant_t.value], rax
  lea rcx, [ astType ]
  lea rdx, [ tmp2468 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2551
  mov dword [ tmp2552 ], 1
  mov dword [ tmp2469 ], 10
  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2468 + Variant_t.value], rax
  lea rcx, [ astType ]
  lea rdx, [ tmp2468 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2553
  mov dword [ tmp2469 ], 9
  mov [ tmp2468 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2469 ]
  mov [ tmp2468 + Variant_t.value], rax
  lea  rcx , [ astType ]
  lea  rdx , [ tmp2468 ]
  lea  r8 , [ tmp2552 ]
  call  __MOLD_VariantCompareEQ
l2553:
  mov eax, dword [ tmp2552 ]
  mov dword [ tmp2550 ], eax
l2551:
  mov eax, dword [ tmp2550 ]
  mov dword [ tmp2548 ], eax
l2549:
  mov eax, dword [ tmp2548 ]
  mov dword [ tmp2546 ], eax
l2547:
  cmp dword [ tmp2546 ], 0
  jz l2555
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ childNode ]
  lea  r9 , [ childNode ]
  call  __ASTEvaluator__assignValue$0
l2555:
l2556:
l2544:
l2545:
l2541:
l2542:
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ childNode ]
  call  __ASTEvaluator__processNode$0
  ret
l2540:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l2539 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
  jmp l2538
l2537:
  mov dword [ tmp2536 ], 1
  mov dword [ tmp2469 ], 32
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2469 ]
  jz l2557
  mov dword [ tmp2469 ], 34
  mov dword [ tmp2536 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2469 ]
  setz byte [ tmp2536 ]
l2557:
  cmp dword [ tmp2536 ], 0
  jz l2558
  lea  rcx , [ valuesMap ]
  call  __MOLD_VariantMapCreate
l2558:
l2559:
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l2561
l2560:
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ childNode ]
  call  __ASTEvaluator__processNode$0
  ret
l2561:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l2560 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
l2538:
l2534:
l2532:
l2529:
l2525:
l2521:
l2482:
l2473:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2468 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2470 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2485 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2501 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iter ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterBeginValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ body ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ astType ]
  call __MOLD_VariantDestroy

  add  rsp, 480
  pop  rbp
  ret

  restore this
  restore valuesMap
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore tmp2468
  restore tmp2469
  restore tmp2470
  restore tmp2471
  restore tmp2474
  restore tmp2476
  restore tmp2478
  restore symbolInfo
  restore tmp2485
  restore tmp2488
  restore tmp2491
  restore tmp2494
  restore tmp2497
  restore tmp2498
  restore tmp2499
  restore tmp2500
  restore tmp2501
  restore tmp2510
  restore lval
  restore rval
  restore classProto
  restore methodProto
  restore iter
  restore iterBeginValue
  restore body
  restore cond
  restore tmp2536
  restore tmp2543
  restore tmp2546
  restore tmp2548
  restore tmp2550
  restore tmp2552
  restore tmp2554
  restore childNode
  restore astType
; -----------------------------------------------
; function __ASTEvaluator_processNode$0
; -----------------------------------------------
__ASTEvaluator_processNode$0:
  ; init frame
  ; ----------
  tmp2562 EQU rbp - 24 ; 16 bytes
  valuesMap EQU rbp - 40 ; 16 bytes
  node EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [valuesMap + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2562 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ valuesMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ valuesMap ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ valuesMap ]
  lea  r8 , [ node ]
  call  __ASTEvaluator__processNode$0

  ; clean frame
  ; -----------
  lea  rcx, [ valuesMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2562 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore node
  restore valuesMap
  restore tmp2562
; -----------------------------------------------
; function __ASTPreprocessor_constructor$0
; -----------------------------------------------
__ASTPreprocessor_constructor$0:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTPreprocessor__debug$0
; -----------------------------------------------
__ASTPreprocessor__debug$0:
  ; init frame
  ; ----------
  tmp2564 EQU rbp - 12 ; 4 bytes
  tmp2563 EQU rbp - 16 ; 4 bytes
  msg EQU rbp - 32 ; 16 bytes
  this EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----
  mov dword [ tmp2564 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp2564 ], eax
  setz al
  xor  al, cl
  jnz l2565
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal299 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l2565:
l2566:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp2563
  restore tmp2564
; -----------------------------------------------
; function __ASTPreprocessor__processNode$0
; -----------------------------------------------
__ASTPreprocessor__processNode$0:
  ; init frame
  ; ----------
  fullMethodName EQU rbp - 24 ; 16 bytes
  methodName EQU rbp - 40 ; 16 bytes
  className EQU rbp - 56 ; 16 bytes
  oneParamNode EQU rbp - 72 ; 16 bytes
  funcCode EQU rbp - 88 ; 16 bytes
  funcRetVar EQU rbp - 104 ; 16 bytes
  funcParams EQU rbp - 120 ; 16 bytes
  tmp2630 EQU rbp - 124 ; 4 bytes
  __cse20 EQU rbp - 140 ; 16 bytes
  __cse19 EQU rbp - 156 ; 16 bytes
  selector EQU rbp - 172 ; 16 bytes
  box EQU rbp - 188 ; 16 bytes
  tmp2619 EQU rbp - 192 ; 4 bytes
  tmp2618 EQU rbp - 208 ; 16 bytes
  tmp2617 EQU rbp - 224 ; 16 bytes
  tmp2616 EQU rbp - 240 ; 16 bytes
  tmp2615 EQU rbp - 256 ; 16 bytes
  tmp2614 EQU rbp - 272 ; 16 bytes
  tmp2613 EQU rbp - 288 ; 16 bytes
  tmp2612 EQU rbp - 304 ; 16 bytes
  idx EQU rbp - 308 ; 4 bytes
  childrenCnt EQU rbp - 324 ; 16 bytes
  newChildren EQU rbp - 340 ; 16 bytes
  __cse18 EQU rbp - 356 ; 16 bytes
  paramsPassedCnt EQU rbp - 372 ; 16 bytes
  paramsExpectedCnt EQU rbp - 388 ; 16 bytes
  sysCallId EQU rbp - 404 ; 16 bytes
  funcName EQU rbp - 420 ; 16 bytes
  tmp2606 EQU rbp - 424 ; 4 bytes
  tmp2605 EQU rbp - 428 ; 4 bytes
  tmp2602 EQU rbp - 432 ; 4 bytes
  tmp2599 EQU rbp - 448 ; 16 bytes
  tmp2598 EQU rbp - 464 ; 16 bytes
  tmp2597 EQU rbp - 480 ; 16 bytes
  tmp2596 EQU rbp - 496 ; 16 bytes
  tmp2595 EQU rbp - 512 ; 16 bytes
  tmp2594 EQU rbp - 528 ; 16 bytes
  name EQU rbp - 544 ; 16 bytes
  y EQU rbp - 560 ; 16 bytes
  x EQU rbp - 576 ; 16 bytes
  tmp2587 EQU rbp - 580 ; 4 bytes
  tmp2586 EQU rbp - 596 ; 16 bytes
  tmp2585 EQU rbp - 612 ; 16 bytes
  tmp2584 EQU rbp - 628 ; 16 bytes
  tmp2583 EQU rbp - 632 ; 4 bytes
  tmp2578 EQU rbp - 636 ; 4 bytes
  tmp2575 EQU rbp - 652 ; 16 bytes
  tmp2574 EQU rbp - 656 ; 4 bytes
  tmp2571 EQU rbp - 660 ; 4 bytes
  oneChild EQU rbp - 676 ; 16 bytes
  tmp2568 EQU rbp - 680 ; 4 bytes
  tmp2567 EQU rbp - 696 ; 16 bytes
  children EQU rbp - 712 ; 16 bytes
  opcode EQU rbp - 716 ; 4 bytes
  node EQU rbp - 732 ; 16 bytes
  this EQU rbp - 748 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 784

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2567 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp2575 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2584 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2585 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2586 + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2594 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2595 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2596 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2597 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2598 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2599 + Variant_t.type], VARIANT_UNDEFINED
  mov [funcName + Variant_t.type], VARIANT_UNDEFINED
  mov [sysCallId + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsExpectedCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsPassedCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse18 + Variant_t.type], VARIANT_UNDEFINED
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2612 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2613 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2614 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2615 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2616 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2617 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2618 + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [selector + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse19 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse20 + Variant_t.type], VARIANT_UNDEFINED
  mov [funcParams + Variant_t.type], VARIANT_UNDEFINED
  mov [funcRetVar + Variant_t.type], VARIANT_UNDEFINED
  mov [funcCode + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [className + Variant_t.type], VARIANT_UNDEFINED
  mov [methodName + Variant_t.type], VARIANT_UNDEFINED
  mov [fullMethodName + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2567 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2567 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l2570
l2569:
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  call  __ASTPreprocessor__processNode$0
  ret
l2570:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2569 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  mov dword [ tmp2568 ], 66
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2568 ]
  jnz l2572
  mov dword [ tmp2568 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2568 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2568 ], 1
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2568 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2568 ], 52
  mov [ tmp2575 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2568 ]
  mov [ tmp2575 + Variant_t.value], rax
  lea rcx, [ tmp2567 ]
  lea rdx, [ tmp2575 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2576
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ name ]
  lea rdx, [ __literal300 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2579
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea rcx, [ name ]
  lea rdx, [ __literal301 ]
  call __MOLD_VariantMove
  mov dword [ tmp2568 ], 67
  mov [ tmp2575 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2568 ]
  mov [ tmp2575 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantStoreAtKey
l2579:
l2580:
  lea rcx, [ name ]
  lea rdx, [ __literal301 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2581
  mov dword [ tmp2568 ], 0
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2575 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp2583 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp2567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2583 ]
  mov [ tmp2567 + Variant_t.value], rax
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_CALL ]
  mov [ tmp2567 + Variant_t.value], rax
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2567 ]
  lea rdx, [ __literal122 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2583 ], 57
  mov [ tmp2567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2583 ]
  mov [ tmp2567 + Variant_t.value], rax
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2584 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2585 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2585 + Variant_t.value], 0
  lea  rcx, [ tmp2586 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2586 ]
  lea rdx, [ x ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2584 ]
  lea  rdx , [ tmp2585 ]
  lea  r8 , [ tmp2586 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2567 ]
  lea rdx, [ tmp2584 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ children ]
  lea  rdx , [ tmp2568 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp2568 ], 1
  mov [ tmp2575 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2568 ]
  mov [ tmp2575 + Variant_t.value], rax
  lea  rcx , [ y ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2568 ], 0
  mov [ tmp2575 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2568 ]
  mov [ tmp2575 + Variant_t.value], rax
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2587 ], 1
  mov eax, dword [ tmp2587 ]
  mov [ tmp2575 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2575 + Variant_t.value], rax
  lea  rcx , [ x ]
  lea  rdx , [ __literal239 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantStoreAtKey
l2581:
l2582:
l2576:
l2577:
  jmp l2573
l2572:
  mov dword [ tmp2568 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2568 ]
  jnz l2588
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ sysCallId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ MOLD_SYSCALL_MAP ]
  lea  rdx , [ funcName ]
  lea  r8 , [ sysCallId ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ sysCallId ]
  lea  rdi , [ tmp2575 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2568 ], 0
  mov [ tmp2567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2568 ]
  mov [ tmp2567 + Variant_t.value], rax
  lea rcx, [ tmp2575 ]
  lea rdx, [ tmp2567 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2590
  mov dword [ tmp2568 ], 4096
  mov [ tmp2575 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2568 ]
  mov [ tmp2575 + Variant_t.value], rax
  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2575 ]
  lea  r8 , [ paramsExpectedCnt ]
  call  __MOLD_VariantDivAsInteger
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2575 ]
  lea  rdi , [ paramsPassedCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ paramsExpectedCnt ]
  lea rdx, [ paramsPassedCnt ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2592
  lea  rcx, [ __cse18 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ __cse18 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse18 ]
  lea  rdx , [ node ]
  lea  rdi, [ tmp2567 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 7
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ paramsExpectedCnt ]
  lea  rdi , [ tmp2575 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ paramsPassedCnt ]
  lea  rdi , [ tmp2584 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2599 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2584 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp2599 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2598 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal304 ]
  lea  rdx , [ tmp2599 ]
  lea  r8 , [ tmp2598 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ tmp2598 ]
  lea  r8 , [ tmp2597 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2596 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal303 ]
  lea  rdx , [ tmp2597 ]
  lea  r8 , [ tmp2596 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2595 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcName ]
  lea  rdx , [ tmp2596 ]
  lea  r8 , [ tmp2595 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2594 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal302 ]
  lea  rdx , [ tmp2595 ]
  lea  r8 , [ tmp2594 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ __cse18 ]
  lea  rdx , [ tmp2594 ]
  lea  rdi, [ tmp2567 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l2592:
l2593:
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __literal122 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2568 ], 255
  mov [ tmp2575 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2568 ]
  mov [ tmp2575 + Variant_t.value], rax
  push rdi
  lea  rcx , [ sysCallId ]
  lea  rdx , [ tmp2575 ]
  lea  rdi , [ tmp2567 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  35
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ node ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2591
l2590:
  lea rcx, [ funcName ]
  lea rdx, [ __literal122 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2600
  mov dword [ tmp2568 ], 0
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2568 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2575 ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2568 ], 1
  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp2583 ], eax
  mov dword [ idx ], 1
;
; -----------------------------
; BEGIN: for idx in tmp2602 .. tmp2583
;
l2603:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp2583 ]
  jge l2604
  mov dword [ tmp2606 ], 1
  mov eax, dword [ idx ]
  sub eax, dword [ tmp2606 ]
  mov dword [ tmp2605 ], eax
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ newChildren ]
  lea  rdx , [ tmp2605 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp2568 ]
  mov dword [ idx ], eax
  jmp l2603
l2604:
;
; END: for idx in tmp2602 .. tmp2583 step tmp2568
; -----------------------------
;
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey
l2600:
l2601:
l2591:
  jmp l2589
l2588:
  mov dword [ tmp2578 ], 0
  mov dword [ tmp2602 ], 54
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2602 ]
  jnz l2607
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2602 ], 1
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2584 ]
  lea  rdx , [ tmp2602 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2602 ], 20
  mov [ tmp2575 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2602 ]
  mov [ tmp2575 + Variant_t.value], rax
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ tmp2575 ]
  lea  r8 , [ tmp2578 ]
  call  __MOLD_VariantCompareEQ
l2607:
  cmp dword [ tmp2578 ], 0
  jz l2608
  lea  rcx, [ __cse19 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ __cse19 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2602 ], 0
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse19 ]
  lea  rdx , [ tmp2602 ]
  lea  r8 , [ box ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2602 ], 1
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse19 ]
  lea  rdx , [ tmp2602 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ selector ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ selector ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ selector ]
  lea rdx, [ __literal305 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2610
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2602 ], 1
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2567 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp2583 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp2584 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2583 ]
  mov [ tmp2584 + Variant_t.value], rax
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2584 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_SUB ]
  mov [ tmp2584 + Variant_t.value], rax
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2586 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2586 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2585 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2585 + Variant_t.value], 0
  lea  rcx, [ tmp2613 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2613 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp2583 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp2614 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2583 ]
  mov [ tmp2614 + Variant_t.value], rax
  lea  rcx , [ tmp2613 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2614 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2614 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_CALL ]
  mov [ tmp2614 + Variant_t.value], rax
  lea  rcx , [ tmp2613 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2614 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2614 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2614 ]
  lea rdx, [ __literal122 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2613 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2614 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2583 ], 43
  mov [ tmp2614 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2583 ]
  mov [ tmp2614 + Variant_t.value], rax
  lea  rcx , [ tmp2613 ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp2614 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2615 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2615 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2616 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2616 + Variant_t.value], 0
  push rdi
  lea  rcx , [ box ]
  lea  rdi , [ tmp2618 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_CloneNode
  pop rdi
  lea  rcx, [ tmp2617 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2617 ]
  lea rdx, [ tmp2618 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2615 ]
  lea  rdx , [ tmp2616 ]
  lea  r8 , [ tmp2617 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp2614 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2614 ]
  lea rdx, [ tmp2615 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2613 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2614 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2612 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2612 ]
  lea rdx, [ tmp2613 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2586 ]
  lea  rdx , [ tmp2585 ]
  lea  r8 , [ tmp2612 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp2585 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2585 + Variant_t.value], 1
  mov dword [ tmp2583 ], 1
  mov [ tmp2614 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2583 ]
  mov [ tmp2614 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp2614 ]
  lea  rdi , [ tmp2613 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_CreateNodeInteger
  pop rdi
  lea  rcx, [ tmp2612 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2612 ]
  lea rdx, [ tmp2613 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2586 ]
  lea  rdx , [ tmp2585 ]
  lea  r8 , [ tmp2612 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2584 ]
  lea rdx, [ tmp2586 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ tmp2602 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l2611
l2610:
  lea rcx, [ selector ]
  lea rdx, [ __literal306 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2620
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2602 ], 1
  mov dword [ tmp2583 ], 0
  mov [ tmp2584 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2583 ]
  mov [ tmp2584 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp2584 ]
  lea  rdi , [ tmp2575 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_CreateNodeInteger
  pop rdi
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ tmp2602 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l2621
l2620:
  lea  rcx, [ __cse20 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ __cse20 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse20 ]
  lea  rdx , [ node ]
  lea  rdi, [ tmp2575 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 7
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp2595 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ selector ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp2595 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2594 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal307 ]
  lea  rdx , [ tmp2595 ]
  lea  r8 , [ tmp2594 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ __cse20 ]
  lea  rdx , [ tmp2594 ]
  lea  rdi, [ tmp2575 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l2621:
l2611:
  jmp l2609
l2608:
  mov dword [ tmp2587 ], 1
  mov dword [ tmp2602 ], 32
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2602 ]
  jz l2622
  mov dword [ tmp2602 ], 34
  mov dword [ tmp2587 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2602 ]
  setz byte [ tmp2587 ]
l2622:
  cmp dword [ tmp2587 ], 0
  jz l2623
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ funcParams ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcParams ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ funcRetVar ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcCode ]
  call __MOLD_VariantDestroy
  mov dword [ tmp2602 ], 0
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2602 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values oneParamNode
;
  jmp l2626
l2625:
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneParamNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ funcParams ]
  lea  rdx , [ tmp2567 ]
  mov eax,  50
  call  __MOLD_SysCall
  ret
l2626:
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParamNode ]
  lea  r9 , [ l2625 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneParamNode
; -----------------------------
;
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp2575 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2602 ], 3
  mov [ tmp2567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2602 ]
  mov [ tmp2567 + Variant_t.value], rax
  lea rcx, [ tmp2575 ]
  lea rdx, [ tmp2567 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2627
  mov dword [ tmp2602 ], 1
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2602 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ funcRetVar ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ funcRetVar ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2602 ], 2
  lea  rcx, [ funcCode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2602 ]
  lea  r8 , [ funcCode ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l2628
l2627:
  mov dword [ tmp2602 ], 1
  lea  rcx, [ funcCode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2602 ]
  lea  r8 , [ funcCode ]
  call  __MOLD_VariantLoadFromIndex_int32
l2628:
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2567 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2575 ]
  lea rdx, [ funcName ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2575 ]
  lea rdx, [ funcParams ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2575 ]
  lea rdx, [ funcRetVar ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2619 ], 0
  mov dword [ tmp2602 ], 34
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2602 ]
  jnz l2629
  push rdi
  lea  rcx , [ funcCode ]
  lea  rdi , [ tmp2567 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2602 ], 0
  mov [ tmp2575 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2602 ]
  mov [ tmp2575 + Variant_t.value], rax
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ tmp2575 ]
  lea  r8 , [ tmp2619 ]
  call  __MOLD_VariantCompareEQ
l2629:
  cmp dword [ tmp2619 ], 0
  jz l2631
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2584 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2567 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea rcx, [ methodName ]
  lea rdx, [ funcName ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2595 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal257 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp2595 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ fullMethodName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ className ]
  lea  rdx , [ tmp2595 ]
  lea  r8 , [ fullMethodName ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2575 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp2602 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp2567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2602 ]
  mov [ tmp2567 + Variant_t.value], rax
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2567 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_BLOCK ]
  mov [ tmp2567 + Variant_t.value], rax
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2584 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2586 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2586 + Variant_t.value], 0
  lea  rcx, [ tmp2585 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2585 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp2602 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp2613 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2602 ]
  mov [ tmp2613 + Variant_t.value], rax
  lea  rcx , [ tmp2585 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2613 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2613 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_CALL ]
  mov [ tmp2613 + Variant_t.value], rax
  lea  rcx , [ tmp2585 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2613 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2613 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2613 ]
  lea rdx, [ __literal122 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2585 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2613 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2602 ], 41
  mov [ tmp2613 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2602 ]
  mov [ tmp2613 + Variant_t.value], rax
  lea  rcx , [ tmp2585 ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp2613 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2614 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2615 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2615 + Variant_t.value], 0
  lea  rcx, [ tmp2594 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal308 ]
  lea  rdx , [ fullMethodName ]
  lea  r8 , [ tmp2594 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp2594 ]
  lea  rdi , [ tmp2616 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_CreateNodeString
  pop rdi
  lea  rcx, [ tmp2617 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2617 ]
  lea rdx, [ tmp2616 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2614 ]
  lea  rdx , [ tmp2615 ]
  lea  r8 , [ tmp2617 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp2613 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2613 ]
  lea rdx, [ tmp2614 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2585 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2613 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2612 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2612 ]
  lea rdx, [ tmp2585 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2584 ]
  lea  rdx , [ tmp2586 ]
  lea  r8 , [ tmp2612 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2567 ]
  lea rdx, [ tmp2584 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2567 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ funcCode ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcCode ]
  lea rdx, [ tmp2575 ]
  call __MOLD_VariantMove
l2631:
l2632:
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2575 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp2567 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp2567 + Variant_t.value], 0
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2584 ]
  lea rdx, [ funcCode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2575 ]
  lea  rdx , [ tmp2567 ]
  lea  r8 , [ tmp2584 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2575 ]
  call  __MOLD_VariantStoreAtKey
l2623:
l2624:
l2609:
l2589:
l2573:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2567 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ tmp2575 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2584 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2585 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2586 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ sysCallId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsExpectedCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsPassedCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse18 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2612 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2613 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2614 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2615 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2617 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2618 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse19 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse20 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcRetVar ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcCode ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParamNode
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy

  add  rsp, 784
  pop  rbp
  ret

  restore this
  restore node
  restore opcode
  restore children
  restore tmp2567
  restore tmp2568
  restore oneChild
  restore tmp2571
  restore tmp2574
  restore tmp2575
  restore tmp2578
  restore tmp2583
  restore tmp2584
  restore tmp2585
  restore tmp2586
  restore tmp2587
  restore x
  restore y
  restore name
  restore tmp2594
  restore tmp2595
  restore tmp2596
  restore tmp2597
  restore tmp2598
  restore tmp2599
  restore tmp2602
  restore tmp2605
  restore tmp2606
  restore funcName
  restore sysCallId
  restore paramsExpectedCnt
  restore paramsPassedCnt
  restore __cse18
  restore newChildren
  restore childrenCnt
  restore idx
  restore tmp2612
  restore tmp2613
  restore tmp2614
  restore tmp2615
  restore tmp2616
  restore tmp2617
  restore tmp2618
  restore tmp2619
  restore box
  restore selector
  restore __cse19
  restore __cse20
  restore tmp2630
  restore funcParams
  restore funcRetVar
  restore funcCode
  restore oneParamNode
  restore className
  restore methodName
  restore fullMethodName
; -----------------------------------------------
; function __ASTPreprocessor_processNode$0
; -----------------------------------------------
__ASTPreprocessor_processNode$0:
  ; init frame
  ; ----------
  node EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  call  __ASTPreprocessor__processNode$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore node
; -----------------------------------------------
; function __ASTOptimizerConstantFolding_constructor$0
; -----------------------------------------------
__ASTOptimizerConstantFolding_constructor$0:
  ; init frame
  ; ----------
  tmp2633 EQU rbp - 24 ; 16 bytes
  app EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp2633 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp2633 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 1
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal309 ]
  lea  r8 , [ tmp2633 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2633 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore app
  restore tmp2633
; -----------------------------------------------
; function __ASTOptimizerConstantFolding__debug$0
; -----------------------------------------------
__ASTOptimizerConstantFolding__debug$0:
  ; init frame
  ; ----------
  tmp2635 EQU rbp - 12 ; 4 bytes
  tmp2634 EQU rbp - 16 ; 4 bytes
  msg EQU rbp - 32 ; 16 bytes
  this EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----
  mov dword [ tmp2635 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp2635 ], eax
  setz al
  xor  al, cl
  jnz l2636
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal310 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l2636:
l2637:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp2634
  restore tmp2635
; -----------------------------------------------
; function __ASTOptimizerConstantFolding__setToImm$0
; -----------------------------------------------
__ASTOptimizerConstantFolding__setToImm$0:
  ; init frame
  ; ----------
  newOpcode EQU rbp - 12 ; 4 bytes
  tmp2669 EQU rbp - 16 ; 4 bytes
  tmp2666 EQU rbp - 20 ; 4 bytes
  tmp2663 EQU rbp - 24 ; 4 bytes
  tmp2658 EQU rbp - 40 ; 16 bytes
  tmp2657 EQU rbp - 56 ; 16 bytes
  tmp2654 EQU rbp - 60 ; 4 bytes
  tmp2651 EQU rbp - 64 ; 4 bytes
  tmp2650 EQU rbp - 80 ; 16 bytes
  tmp2649 EQU rbp - 96 ; 16 bytes
  tmp2648 EQU rbp - 112 ; 16 bytes
  tmp2647 EQU rbp - 128 ; 16 bytes
  tmp2646 EQU rbp - 144 ; 16 bytes
  tmp2645 EQU rbp - 160 ; 16 bytes
  tmp2644 EQU rbp - 176 ; 16 bytes
  tmp2641 EQU rbp - 180 ; 4 bytes
  tmp2639 EQU rbp - 184 ; 4 bytes
  tmp2638 EQU rbp - 200 ; 16 bytes
  type EQU rbp - 216 ; 16 bytes
  value EQU rbp - 232 ; 16 bytes
  dst EQU rbp - 248 ; 16 bytes
  this EQU rbp - 264 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [type + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2638 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2644 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2645 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2646 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2647 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2648 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2649 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2650 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2657 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2658 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ type ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2639 ], 0
  lea rcx, [ type ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2640
  lea  rcx , [ type ]
  lea  rdx , [ __literal121 ]
  lea  r8 , [ tmp2639 ]
  call  __MOLD_VariantCompareNE
l2640:
  cmp dword [ tmp2639 ], 0
  jz l2642
  lea  rcx, [ tmp2646 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2646 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2646 ]
  lea  rdi , [ tmp2638 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp2646 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2650 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ type ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp2650 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2649 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal313 ]
  lea  rdx , [ tmp2650 ]
  lea  r8 , [ tmp2649 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2648 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2646 ]
  lea  rdx , [ tmp2649 ]
  lea  r8 , [ tmp2648 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2647 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal312 ]
  lea  rdx , [ tmp2648 ]
  lea  r8 , [ tmp2647 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2645 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2638 ]
  lea  rdx , [ tmp2647 ]
  lea  r8 , [ tmp2645 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2644 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal311 ]
  lea  rdx , [ tmp2645 ]
  lea  r8 , [ tmp2644 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp2644 ]
  call  __ASTOptimizerConstantFolding__debug$0
  lea  rcx, [ tmp2638 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2638 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2651 ], 52
  mov [ tmp2646 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2651 ]
  mov [ tmp2646 + Variant_t.value], rax
  lea rcx, [ tmp2638 ]
  lea rdx, [ tmp2646 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2652
  lea  rcx, [ tmp2638 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2638 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2638 ]
  lea  rdi , [ tmp2646 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2651 ], 0
  mov [ tmp2638 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2651 ]
  mov [ tmp2638 + Variant_t.value], rax
  lea rcx, [ tmp2646 ]
  lea rdx, [ tmp2638 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2655
  lea  rcx, [ tmp2638 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2638 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2658 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2658 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2657 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2658 ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2657 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2651 ], 1
  mov [ tmp2658 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2651 ]
  mov [ tmp2658 + Variant_t.value], rax
  lea  rcx , [ tmp2657 ]
  lea  rdx , [ tmp2658 ]
  lea  r8 , [ tmp2646 ]
  call  __MOLD_VariantSub
  lea  rcx , [ tmp2638 ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2646 ]
  call  __MOLD_VariantStoreAtKey
l2655:
l2656:
l2652:
l2653:
  lea rcx, [ type ]
  lea rdx, [ __literal35 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2659
  mov dword [ newOpcode ], 5
  jmp l2660
l2659:
  lea rcx, [ type ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2661
  mov dword [ newOpcode ], 1
  jmp l2662
l2661:
  lea rcx, [ type ]
  lea rdx, [ __literal34 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2664
  mov dword [ newOpcode ], 3
  jmp l2665
l2664:
  lea rcx, [ type ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2667
  mov dword [ newOpcode ], 4
  jmp l2668
l2667:
  lea rcx, [ type ]
  lea rdx, [ __literal301 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2670
  mov dword [ newOpcode ], 8
  jmp l2671
l2670:
  mov dword [ newOpcode ], -1
  lea  rcx, [ tmp2644 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal314 ]
  lea  rdx , [ type ]
  lea  r8 , [ tmp2644 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp2644 ]
  mov eax,  41
  call  __MOLD_SysCall
l2671:
l2668:
l2665:
l2662:
l2660:
  lea  rcx, [ tmp2646 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2646 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ dst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2646 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2646 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ newOpcode ]
  mov [ tmp2646 + Variant_t.value], rax
  lea  rcx , [ dst ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2646 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ dst ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStoreAtKey
l2642:
l2643:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2638 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2646 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2657 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2658 ]
  call __MOLD_VariantDestroy

  add  rsp, 304
  pop  rbp
  ret

  restore this
  restore dst
  restore value
  restore type
  restore tmp2638
  restore tmp2639
  restore tmp2641
  restore tmp2644
  restore tmp2645
  restore tmp2646
  restore tmp2647
  restore tmp2648
  restore tmp2649
  restore tmp2650
  restore tmp2651
  restore tmp2654
  restore tmp2657
  restore tmp2658
  restore tmp2663
  restore tmp2666
  restore tmp2669
  restore newOpcode
; -----------------------------------------------
; function __ASTOptimizerConstantFolding__processNodeArray$0
; -----------------------------------------------
__ASTOptimizerConstantFolding__processNodeArray$0:
  ; init frame
  ; ----------
  __cse21 EQU rbp - 24 ; 16 bytes
  isChanged EQU rbp - 40 ; 16 bytes
  tmp2680 EQU rbp - 44 ; 4 bytes
  tmp2679 EQU rbp - 48 ; 4 bytes
  tmp2678 EQU rbp - 52 ; 4 bytes
  tmp2674 EQU rbp - 56 ; 4 bytes
  tmp2673 EQU rbp - 60 ; 4 bytes
  tmp2672 EQU rbp - 76 ; 16 bytes
  childrenCnt EQU rbp - 80 ; 4 bytes
  children EQU rbp - 96 ; 16 bytes
  idx EQU rbp - 100 ; 4 bytes
  isImm EQU rbp - 104 ; 4 bytes
  newValue EQU rbp - 120 ; 16 bytes
  node EQU rbp - 136 ; 16 bytes
  this EQU rbp - 152 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2672 + Variant_t.type], VARIANT_UNDEFINED
  mov [isChanged + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse21 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValue ]
  call  __MOLD_VariantArrayCreate
  mov dword [ isImm ], 1
  mov dword [ idx ], 0
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp2672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp2672 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2672 + Variant_t.value]
  mov dword [ childrenCnt ], eax
;
; -----------------------------
; BEGIN: while
;
l2675:
  mov dword [ tmp2673 ], 0
  mov dword [ tmp2679 ], 1
  xor  eax, eax
  or   dword [ isImm ], eax
  setz cl
  or   dword [ tmp2679 ], eax
  setz al
  xor  al, cl
  jnz l2677
  mov dword [ tmp2673 ], 0
  mov ecx, dword [ idx ]
  cmp ecx, dword [ childrenCnt ]
  setl byte [ tmp2673 ]
l2677:
  cmp dword [ tmp2673 ], 0
  jz l2676
  lea  rcx, [ __cse21 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ __cse21 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __cse21 ]
  lea  rdi , [ tmp2672 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_processNode$0
  pop rdi
  lea  rcx, [ isChanged ]
  call __MOLD_VariantDestroy
  lea rcx, [ isChanged ]
  lea rdx, [ tmp2672 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2672 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse21 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2672 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ newValue ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2672 ]
  call  __MOLD_VariantStoreAtIndex_int32
  push rdi
  lea  rcx , [ __cse21 ]
  lea  rdi , [ tmp2678 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov eax, dword [ tmp2678 ]
  mov dword [ isImm ], eax
  mov dword [ tmp2680 ], 1
  mov eax, dword [ idx ]
  add eax, dword [ tmp2680 ]
  mov dword [ idx ], eax
  jmp l2675
l2676:
;
; END: while
; -----------------------------
;
  mov dword [ tmp2679 ], 1
  xor  eax, eax
  or   dword [ isImm ], eax
  setz cl
  or   dword [ tmp2679 ], eax
  setz al
  xor  al, cl
  jnz l2681
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ newValue ]
  call  __ASTOptimizerConstantFolding__setToImm$0
l2681:
l2682:

  ; clean frame
  ; -----------
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2672 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ isChanged ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse21 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore node
  restore newValue
  restore isImm
  restore idx
  restore children
  restore childrenCnt
  restore tmp2672
  restore tmp2673
  restore tmp2674
  restore tmp2678
  restore tmp2679
  restore tmp2680
  restore isChanged
  restore __cse21
; -----------------------------------------------
; function __ASTOptimizerConstantFolding__processNodeMap$0
; -----------------------------------------------
__ASTOptimizerConstantFolding__processNodeMap$0:
  ; init frame
  ; ----------
  isValueChanged EQU rbp - 24 ; 16 bytes
  isKeyChanged EQU rbp - 40 ; 16 bytes
  nodeValue EQU rbp - 56 ; 16 bytes
  nodeKey EQU rbp - 72 ; 16 bytes
  tmp2697 EQU rbp - 88 ; 16 bytes
  tmp2694 EQU rbp - 92 ; 4 bytes
  tmp2693 EQU rbp - 96 ; 4 bytes
  tmp2691 EQU rbp - 100 ; 4 bytes
  tmp2690 EQU rbp - 104 ; 4 bytes
  tmp2689 EQU rbp - 108 ; 4 bytes
  tmp2685 EQU rbp - 112 ; 4 bytes
  tmp2684 EQU rbp - 116 ; 4 bytes
  tmp2683 EQU rbp - 132 ; 16 bytes
  childrenCnt EQU rbp - 136 ; 4 bytes
  children EQU rbp - 152 ; 16 bytes
  idx EQU rbp - 156 ; 4 bytes
  isImm EQU rbp - 160 ; 4 bytes
  newValue EQU rbp - 176 ; 16 bytes
  node EQU rbp - 192 ; 16 bytes
  this EQU rbp - 208 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2683 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2697 + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeKey + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeValue + Variant_t.type], VARIANT_UNDEFINED
  mov [isKeyChanged + Variant_t.type], VARIANT_UNDEFINED
  mov [isValueChanged + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newValue ]
  call  __MOLD_VariantMapCreate
  mov dword [ isImm ], 1
  mov dword [ idx ], 0
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp2683 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp2683 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2683 + Variant_t.value]
  mov dword [ childrenCnt ], eax
;
; -----------------------------
; BEGIN: while
;
l2686:
  mov dword [ tmp2684 ], 0
  mov dword [ tmp2690 ], 1
  xor  eax, eax
  or   dword [ isImm ], eax
  setz cl
  or   dword [ tmp2690 ], eax
  setz al
  xor  al, cl
  jnz l2688
  mov dword [ tmp2684 ], 0
  mov ecx, dword [ idx ]
  cmp ecx, dword [ childrenCnt ]
  setl byte [ tmp2684 ]
l2688:
  cmp dword [ tmp2684 ], 0
  jz l2687
  lea  rcx, [ nodeKey ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ nodeKey ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2691 ], 1
  mov eax, dword [ idx ]
  add eax, dword [ tmp2691 ]
  mov dword [ tmp2685 ], eax
  lea  rcx, [ nodeValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2685 ]
  lea  r8 , [ nodeValue ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ nodeKey ]
  lea  rdi , [ tmp2683 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_processNode$0
  pop rdi
  lea  rcx, [ isKeyChanged ]
  call __MOLD_VariantDestroy
  lea rcx, [ isKeyChanged ]
  lea rdx, [ tmp2683 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ nodeValue ]
  lea  rdi , [ tmp2683 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_processNode$0
  pop rdi
  lea  rcx, [ isValueChanged ]
  call __MOLD_VariantDestroy
  lea rcx, [ isValueChanged ]
  lea rdx, [ tmp2683 ]
  call __MOLD_VariantMove
  mov dword [ tmp2689 ], 0
  push rdi
  lea  rcx , [ nodeKey ]
  lea  rdi , [ tmp2693 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2694 ], 1
  xor  eax, eax
  or   dword [ tmp2693 ], eax
  setz cl
  or   dword [ tmp2694 ], eax
  setz al
  xor  al, cl
  jnz l2692
  push rdi
  lea  rcx , [ nodeValue ]
  lea  rdi , [ tmp2694 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2693 ], 1
  xor   eax, eax
  or    dword [ tmp2694 ], eax
  setnz cl
  or    dword [ tmp2693 ], eax
  setz  al
  xor   al, cl
  mov   dword [ tmp2689 ], eax
l2692:
  cmp dword [ tmp2689 ], 0
  jz l2695
  lea  rcx, [ tmp2683 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeKey ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2683 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2697 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeValue ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2697 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ newValue ]
  lea  rdx , [ tmp2683 ]
  lea  r8 , [ tmp2697 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2696
l2695:
  mov dword [ isImm ], 0
l2696:
  mov dword [ tmp2691 ], 2
  mov eax, dword [ idx ]
  add eax, dword [ tmp2691 ]
  mov dword [ idx ], eax
  jmp l2686
l2687:
;
; END: while
; -----------------------------
;
  mov dword [ tmp2690 ], 1
  xor  eax, eax
  or   dword [ isImm ], eax
  setz cl
  or   dword [ tmp2690 ], eax
  setz al
  xor  al, cl
  jnz l2698
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ newValue ]
  call  __ASTOptimizerConstantFolding__setToImm$0
l2698:
l2699:

  ; clean frame
  ; -----------
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2683 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2697 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeKey ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ isKeyChanged ]
  call __MOLD_VariantDestroy
  lea  rcx, [ isValueChanged ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore node
  restore newValue
  restore isImm
  restore idx
  restore children
  restore childrenCnt
  restore tmp2683
  restore tmp2684
  restore tmp2685
  restore tmp2689
  restore tmp2690
  restore tmp2691
  restore tmp2693
  restore tmp2694
  restore tmp2697
  restore nodeKey
  restore nodeValue
  restore isKeyChanged
  restore isValueChanged
; -----------------------------------------------
; function __ASTOptimizerConstantFolding_processNode$0
; -----------------------------------------------
__ASTOptimizerConstantFolding_processNode$0:
  ; init frame
  ; ----------
  astType EQU rbp - 12 ; 4 bytes
  xValue EQU rbp - 28 ; 16 bytes
  sysCallId EQU rbp - 32 ; 4 bytes
  oneChild EQU rbp - 48 ; 16 bytes
  lastWasImm EQU rbp - 52 ; 4 bytes
  newParams EQU rbp - 68 ; 16 bytes
  __cse24 EQU rbp - 84 ; 16 bytes
  symbolInfo EQU rbp - 100 ; 16 bytes
  __cse23 EQU rbp - 116 ; 16 bytes
  __cse22 EQU rbp - 132 ; 16 bytes
  tmp EQU rbp - 148 ; 16 bytes
  isChildChanged EQU rbp - 164 ; 16 bytes
  idx EQU rbp - 168 ; 4 bytes
  startIdx EQU rbp - 172 ; 4 bytes
  tmp2871 EQU rbp - 176 ; 4 bytes
  tmp2865 EQU rbp - 180 ; 4 bytes
  tmp2864 EQU rbp - 184 ; 4 bytes
  tmp2860 EQU rbp - 188 ; 4 bytes
  tmp2855 EQU rbp - 192 ; 4 bytes
  tmp2850 EQU rbp - 196 ; 4 bytes
  tmp2845 EQU rbp - 200 ; 4 bytes
  tmp2842 EQU rbp - 204 ; 4 bytes
  tmp2839 EQU rbp - 208 ; 4 bytes
  tmp2836 EQU rbp - 212 ; 4 bytes
  tmp2815 EQU rbp - 216 ; 4 bytes
  tmp2812 EQU rbp - 220 ; 4 bytes
  tmp2785 EQU rbp - 224 ; 4 bytes
  tmp2784 EQU rbp - 228 ; 4 bytes
  tmp2777 EQU rbp - 244 ; 16 bytes
  tmp2776 EQU rbp - 260 ; 16 bytes
  tmp2775 EQU rbp - 276 ; 16 bytes
  tmp2774 EQU rbp - 292 ; 16 bytes
  tmp2744 EQU rbp - 296 ; 4 bytes
  tmp2743 EQU rbp - 300 ; 4 bytes
  tmp2742 EQU rbp - 304 ; 4 bytes
  tmp2740 EQU rbp - 308 ; 4 bytes
  tmp2736 EQU rbp - 312 ; 4 bytes
  tmp2735 EQU rbp - 328 ; 16 bytes
  tmp2727 EQU rbp - 332 ; 4 bytes
  tmp2722 EQU rbp - 348 ; 16 bytes
  tmp2721 EQU rbp - 352 ; 4 bytes
  tmp2716 EQU rbp - 356 ; 4 bytes
  tmp2710 EQU rbp - 372 ; 16 bytes
  tmp2709 EQU rbp - 376 ; 4 bytes
  tmp2704 EQU rbp - 380 ; 4 bytes
  tmp2702 EQU rbp - 384 ; 4 bytes
  tmp2701 EQU rbp - 400 ; 16 bytes
  tmp2700 EQU rbp - 404 ; 4 bytes
  areArgsImm EQU rbp - 408 ; 4 bytes
  y EQU rbp - 424 ; 16 bytes
  x EQU rbp - 440 ; 16 bytes
  childrenCnt EQU rbp - 444 ; 4 bytes
  children EQU rbp - 460 ; 16 bytes
  newValue EQU rbp - 476 ; 16 bytes
  value EQU rbp - 492 ; 16 bytes
  opcode EQU rbp - 496 ; 4 bytes
  isNodeChanged EQU rdi
  node EQU rbp - 512 ; 16 bytes
  this EQU rbp - 528 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 560

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2701 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2710 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2722 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2735 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2774 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2775 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2776 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2777 + Variant_t.type], VARIANT_UNDEFINED
  mov [isChildChanged + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse22 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse23 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse24 + Variant_t.type], VARIANT_UNDEFINED
  mov [newParams + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [xValue + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2700 ], 0
  mov eax, dword [ tmp2700 ]
  mov [ isNodeChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isNodeChanged + Variant_t.value], rax
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2701 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2701 + Variant_t.value]
  mov dword [ childrenCnt ], eax
  mov dword [ tmp2702 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2702 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2702 ], 1
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2702 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ areArgsImm ], 1
  mov dword [ tmp2700 ], 1
  mov dword [ tmp2702 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2703
  lea  rcx , [ value ]
  lea  rdx , [ __literal17 ]
  lea  r8 , [ tmp2700 ]
  call  __MOLD_VariantCompareNE
l2703:
  cmp dword [ tmp2700 ], 0
  jz l2705
  mov dword [ tmp2702 ], 9
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2707
  lea  rcx, [ tmp2710 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2710 ]
  lea rdx, [ __const2711 ]
  call __MOLD_VariantMove
  lea rcx, [ tmp2710 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2712
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  call  __ASTOptimizerConstantFolding__processNodeArray$0
l2712:
l2713:
  jmp l2708
l2707:
  mov dword [ tmp2702 ], 10
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2714
  lea  rcx, [ tmp2710 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2710 ]
  lea rdx, [ __const2717 ]
  call __MOLD_VariantMove
  lea rcx, [ tmp2710 ]
  lea rdx, [ __literal121 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2718
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  call  __ASTOptimizerConstantFolding__processNodeMap$0
l2718:
l2719:
  jmp l2715
l2714:
  mov dword [ startIdx ], 0
  mov dword [ tmp2716 ], 0
  mov dword [ tmp2702 ], 56
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2720
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 52
  mov [ tmp2722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2722 + Variant_t.value], rax
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ tmp2722 ]
  lea  r8 , [ tmp2716 ]
  call  __MOLD_VariantCompareEQ
l2720:
  cmp dword [ tmp2716 ], 0
  jz l2723
  mov dword [ startIdx ], 1
l2723:
l2724:
  mov dword [ tmp2702 ], 1
  mov eax, dword [ startIdx ]
  mov dword [ idx ], eax
;
; -----------------------------
; BEGIN: for idx in startIdx .. childrenCnt
;
l2725:
  mov eax, dword [ idx ]
  cmp eax, dword [ childrenCnt ]
  jge l2726
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp2701 ]
  lea  rdi , [ tmp2722 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_processNodeUntilNotChanged$0
  pop rdi
  lea  rcx, [ isChildChanged ]
  call __MOLD_VariantDestroy
  lea rcx, [ isChildChanged ]
  lea rdx, [ tmp2722 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp2722 ]
  lea  rdi , [ tmp2721 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2727 ], 0
  xor  eax, eax
  or   dword [ tmp2721 ], eax
  setz cl
  or   dword [ tmp2727 ], eax
  setz al
  xor  al, cl
  jnz l2728
  mov dword [ areArgsImm ], 0
l2728:
l2729:
  mov eax, dword [ idx ]
  add eax, dword [ tmp2702 ]
  mov dword [ idx ], eax
  jmp l2725
l2726:
;
; END: for idx in startIdx .. childrenCnt step tmp2702
; -----------------------------
;
  mov dword [ tmp2716 ], 1
  mov dword [ tmp2702 ], 60
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jz l2730
  mov dword [ tmp2702 ], 58
  mov dword [ tmp2716 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2702 ]
  setz byte [ tmp2716 ]
l2730:
  cmp dword [ tmp2716 ], 0
  jz l2731
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  mov [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp2701 + Variant_t.value], rax
  lea rcx, [ tmp2722 ]
  lea rdx, [ tmp2701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2733
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 1
  lea  rcx, [ tmp ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2722 ]
  lea  rdx , [ tmp2702 ]
  lea  r8 , [ tmp ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 1
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2736 ], 0
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2735 ]
  lea  rdx , [ tmp2736 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ tmp2702 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 0
  lea  rcx , [ tmp2722 ]
  lea  rdx , [ tmp2702 ]
  lea  r8 , [ tmp ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp2721 ], 1
  mov eax, dword [ tmp2721 ]
  mov [ isNodeChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isNodeChanged + Variant_t.value], rax
l2733:
l2734:
  jmp l2732
l2731:
  mov dword [ tmp2702 ], 52
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2737
  lea  rcx, [ __cse22 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ __cse22 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2721 ], 0
  push rdi
  lea  rcx , [ __cse22 ]
  lea  rdi , [ tmp2722 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2702 ], 0
  mov [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2701 + Variant_t.value], rax
  lea rcx, [ tmp2722 ]
  lea rdx, [ tmp2701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2739
  mov dword [ tmp2740 ], 0
  push rdi
  lea  rcx , [ __cse22 ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp2701 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2741
  push rdi
  lea  rcx , [ __cse22 ]
  lea  rdi , [ tmp2743 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2744 ], 1
  xor   eax, eax
  or    dword [ tmp2743 ], eax
  setnz cl
  or    dword [ tmp2744 ], eax
  setz  al
  xor   al, cl
  mov   dword [ tmp2740 ], eax
l2741:
  mov eax, dword [ tmp2740 ]
  mov dword [ tmp2721 ], eax
l2739:
  cmp dword [ tmp2721 ], 0
  jz l2745
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2722 ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp2701 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2747
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ __cse23 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2722 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse23 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2742 ], 0
  push rdi
  lea  rcx , [ __cse23 ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp2701 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2749
  push rdi
  lea  rcx , [ __cse23 ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ __literal121 ]
  lea  r8 , [ tmp2742 ]
  call  __MOLD_VariantCompareNE
l2749:
  cmp dword [ tmp2742 ], 0
  jz l2750
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal309 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2722 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp2701 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 16
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp2743 ], 0
  mov eax, dword [ tmp2743 ]
  mov [ tmp2722 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2722 + Variant_t.value], rax
  lea rcx, [ tmp2701 ]
  lea rdx, [ tmp2722 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2752
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
l2752:
l2753:
l2750:
l2751:
l2747:
l2748:
l2745:
l2746:
  mov dword [ tmp2721 ], 0
  push rdi
  lea  rcx , [ newValue ]
  lea  rdi , [ tmp2722 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2702 ], 0
  mov [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2701 + Variant_t.value], rax
  lea rcx, [ tmp2722 ]
  lea rdx, [ tmp2701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2754
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal309 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2722 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp2701 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 16
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp2742 ], 1
  mov eax, dword [ tmp2742 ]
  mov [ tmp2722 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2722 + Variant_t.value], rax
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ tmp2722 ]
  lea  r8 , [ tmp2721 ]
  call  __MOLD_VariantCompareEQ
l2754:
  cmp dword [ tmp2721 ], 0
  jz l2755
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal309 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp2722 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp2722 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 1
  mov [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2701 + Variant_t.value], rax
  lea rcx, [ tmp2722 ]
  lea rdx, [ tmp2701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2757
  lea  rcx, [ __cse24 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse24 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2742 ], 1
  push rdi
  lea  rcx , [ __cse24 ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp2701 ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2759
  mov dword [ tmp2744 ], 1
  push rdi
  lea  rcx , [ __cse24 ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp2701 ]
  lea rdx, [ __literal34 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2760
  push rdi
  lea  rcx , [ __cse24 ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ __literal35 ]
  lea  r8 , [ tmp2744 ]
  call  __MOLD_VariantCompareEQ
l2760:
  mov eax, dword [ tmp2744 ]
  mov dword [ tmp2742 ], eax
l2759:
  cmp dword [ tmp2742 ], 0
  jz l2761
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
l2761:
l2762:
l2757:
l2758:
l2755:
l2756:
  jmp l2738
l2737:
  mov dword [ tmp2721 ], 0
  mov dword [ tmp2702 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2763
  lea  rcx , [ value ]
  lea  rdx , [ __literal16 ]
  lea  r8 , [ tmp2721 ]
  call  __MOLD_VariantCompareEQ
l2763:
  cmp dword [ tmp2721 ], 0
  jz l2764
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newParams ]
  call  __MOLD_VariantArrayCreate
  mov dword [ lastWasImm ], 0
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l2767
l2766:
  mov dword [ tmp2740 ], 1
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 30
  mov [ tmp2722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2722 + Variant_t.value], rax
  lea rcx, [ tmp2722 ]
  lea rdx, [ tmp2701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l2768
  mov dword [ tmp2742 ], 1
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 9
  mov [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2701 + Variant_t.value], rax
  lea rcx, [ tmp2722 ]
  lea rdx, [ tmp2701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2769
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 10
  mov [ tmp2722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2722 + Variant_t.value], rax
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ tmp2722 ]
  lea  r8 , [ tmp2742 ]
  call  __MOLD_VariantCompareEQ
l2769:
  mov eax, dword [ tmp2742 ]
  mov dword [ tmp2740 ], eax
l2768:
  cmp dword [ tmp2740 ], 0
  jz l2770
  mov dword [ lastWasImm ], 0
  lea  rcx , [ newParams ]
  lea  rdx , [ oneChild ]
  mov eax,  50
  call  __MOLD_SysCall
  jmp l2771
l2770:
  mov dword [ tmp2744 ], 1
  xor  eax, eax
  or   dword [ lastWasImm ], eax
  setz cl
  or   dword [ tmp2744 ], eax
  setz al
  xor  al, cl
  jnz l2772
  push rdi
  lea  rcx , [ newParams ]
  lea  rdi , [ tmp2735 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2702 ], 1
  mov [ tmp2774 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2774 + Variant_t.value], rax
  lea  rcx , [ tmp2735 ]
  lea  rdx , [ tmp2774 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantSub
  cmp [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2701 + Variant_t.value]
  mov dword [ tmp2702 ], eax
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newParams ]
  lea  rdx , [ tmp2702 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ newParams ]
  lea  rdi , [ tmp2775 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2702 ], 1
  mov [ tmp2776 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2776 + Variant_t.value], rax
  lea  rcx , [ tmp2775 ]
  lea  rdx , [ tmp2776 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantSub
  cmp [ tmp2735 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2735 + Variant_t.value]
  mov dword [ tmp2702 ], eax
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newParams ]
  lea  rdx , [ tmp2702 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2774 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2735 ]
  lea  rdi , [ tmp2774 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2777 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal315 ]
  lea  rdx , [ tmp2774 ]
  lea  r8 , [ tmp2777 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ tmp2777 ]
  lea  r8 , [ tmp2710 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp2722 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2710 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2773
l2772:
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 4
  mov [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2701 + Variant_t.value], rax
  lea rcx, [ tmp2722 ]
  lea rdx, [ tmp2701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2778
  lea  rcx , [ newParams ]
  lea  rdx , [ oneChild ]
  mov eax,  50
  call  __MOLD_SysCall
  jmp l2779
l2778:
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2722 ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  r8 , [ tmp2701 ]
  call  __ASTOptimizerConstantFolding__setToImm$0
  lea  rcx , [ newParams ]
  lea  rdx , [ oneChild ]
  mov eax,  50
  call  __MOLD_SysCall
l2779:
l2773:
  mov dword [ lastWasImm ], 1
l2771:
  ret
l2767:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2766 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newParams ]
  call  __MOLD_VariantStoreAtKey
  jmp l2765
l2764:
  mov dword [ tmp2740 ], 0
  mov dword [ tmp2742 ], 1
  mov dword [ tmp2702 ], 54
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jz l2781
  mov dword [ tmp2702 ], 55
  mov dword [ tmp2742 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2702 ]
  setz byte [ tmp2742 ]
l2781:
  cmp dword [ tmp2742 ], 0
  jz l2780
  mov dword [ tmp2742 ], 0
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 52
  mov [ tmp2722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2722 + Variant_t.value], rax
  lea rcx, [ tmp2701 ]
  lea rdx, [ tmp2722 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2782
  mov dword [ tmp2744 ], 0
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 5
  mov [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2701 + Variant_t.value], rax
  lea rcx, [ tmp2722 ]
  lea rdx, [ tmp2701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2783
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp2784 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImm
  pop rdi
  mov dword [ tmp2785 ], 1
  xor   eax, eax
  or    dword [ tmp2784 ], eax
  setnz cl
  or    dword [ tmp2785 ], eax
  setz  al
  xor   al, cl
  mov   dword [ tmp2744 ], eax
l2783:
  mov eax, dword [ tmp2744 ]
  mov dword [ tmp2742 ], eax
l2782:
  mov eax, dword [ tmp2742 ]
  mov dword [ tmp2740 ], eax
l2780:
  cmp dword [ tmp2740 ], 0
  jz l2786
  mov dword [ tmp2702 ], 54
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2788
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2774 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2774 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2774 + Variant_t.value]
  mov dword [ tmp2702 ], eax
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2722 ]
  lea  rdx , [ tmp2702 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l2789
l2788:
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2774 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2722 ]
  lea  rdx , [ tmp2774 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
l2789:
  mov dword [ tmp2742 ], 0
  push rdi
  lea  rcx , [ newValue ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp2701 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2790
  push rdi
  lea  rcx , [ newValue ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ __literal121 ]
  lea  r8 , [ tmp2742 ]
  call  __MOLD_VariantCompareNE
l2790:
  cmp dword [ tmp2742 ], 0
  jz l2791
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2735 ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2722 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 1
  mov [ tmp2735 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2735 + Variant_t.value], rax
  lea  rcx , [ tmp2722 ]
  lea  rdx , [ tmp2735 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantSub
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantStoreAtKey
l2791:
l2792:
l2786:
l2787:
l2765:
l2738:
l2732:
  mov dword [ tmp2727 ], 1
  xor  eax, eax
  or   dword [ areArgsImm ], eax
  setz cl
  or   dword [ tmp2727 ], eax
  setz al
  xor  al, cl
  jnz l2793
  mov dword [ tmp2702 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2795
  mov dword [ tmp2721 ], 0
  lea rcx, [ value ]
  lea rdx, [ __literal122 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2797
  mov dword [ tmp2702 ], 1
  mov dword [ tmp2721 ], 0
  mov ecx, dword [ childrenCnt ]
  cmp ecx, dword [ tmp2702 ]
  setz byte [ tmp2721 ]
l2797:
  cmp dword [ tmp2721 ], 0
  jz l2798
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2774 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2774 + Variant_t.value]
  mov dword [ sysCallId ], eax
  lea  rcx, [ xValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ xValue ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 31
  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2702 ]
  jnz l2800
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  31
  call  __MOLD_SysCall
  pop rdi
  jmp l2801
l2800:
  mov dword [ tmp2702 ], 32
  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2702 ]
  jnz l2802
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  32
  call  __MOLD_SysCall
  pop rdi
  jmp l2803
l2802:
  mov dword [ tmp2702 ], 33
  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2702 ]
  jnz l2804
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  33
  call  __MOLD_SysCall
  pop rdi
  jmp l2805
l2804:
  mov dword [ tmp2702 ], 34
  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2702 ]
  jnz l2806
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  34
  call  __MOLD_SysCall
  pop rdi
  jmp l2807
l2806:
  mov dword [ tmp2702 ], 42
  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2702 ]
  jnz l2808
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  jmp l2809
l2808:
  mov dword [ tmp2702 ], 43
  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2702 ]
  jnz l2810
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  jmp l2811
l2810:
  mov dword [ tmp2702 ], 44
  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2702 ]
  jnz l2813
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  jmp l2814
l2813:
  mov dword [ tmp2702 ], 57
  mov eax, dword [ sysCallId ]
  cmp eax, dword [ tmp2702 ]
  jnz l2816
  push rdi
  lea  rcx , [ xValue ]
  lea  rdi , [ newValue ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
l2816:
l2817:
l2814:
l2811:
l2809:
l2807:
l2805:
l2803:
l2801:
l2798:
l2799:
  jmp l2796
l2795:
  mov dword [ tmp2702 ], 57
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2818
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ newValue ]
  call  __MOLD_VariantNeg
  jmp l2819
l2818:
  mov dword [ tmp2702 ], 2
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp2702 ]
  jnz l2820
  mov dword [ tmp2702 ], 58
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2822
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ tmp2735 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantAdd
  jmp l2823
l2822:
  mov dword [ tmp2702 ], 65
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2824
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2774 ]
  lea  rdx , [ tmp2735 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStringJoin
  jmp l2825
l2824:
  mov dword [ tmp2702 ], 59
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2826
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2774 ]
  lea  rdx , [ tmp2701 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantSub
  jmp l2827
l2826:
  mov dword [ tmp2702 ], 60
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2828
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ tmp2774 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantMul
  jmp l2829
l2828:
  mov dword [ tmp2702 ], 61
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2830
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2774 ]
  lea  rdx , [ tmp2701 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantDiv
  jmp l2831
l2830:
  mov dword [ tmp2702 ], 64
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2832
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2701 ]
  lea  rdx , [ tmp2774 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantDivAsInteger
  jmp l2833
l2832:
  mov dword [ tmp2702 ], 66
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2834
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2735 ]
  lea  rdx , [ tmp2774 ]
  lea  r8 , [ tmp2836 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp2836 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2835
l2834:
  mov dword [ tmp2702 ], 67
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2837
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2774 ]
  lea  rdx , [ tmp2735 ]
  lea  r8 , [ tmp2839 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp2839 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2838
l2837:
  mov dword [ tmp2702 ], 70
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2840
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp2774 ]
  lea rdx, [ tmp2735 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l2843
  mov dword [ tmp2845 ], 1
  mov eax, dword [ tmp2845 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2844
l2843:
  mov dword [ tmp2845 ], 0
  mov eax, dword [ tmp2845 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2844:
  jmp l2841
l2840:
  mov dword [ tmp2702 ], 71
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2846
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp2735 ]
  lea rdx, [ tmp2774 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l2848
  mov dword [ tmp2850 ], 1
  mov eax, dword [ tmp2850 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2849
l2848:
  mov dword [ tmp2850 ], 0
  mov eax, dword [ tmp2850 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2849:
  jmp l2847
l2846:
  mov dword [ tmp2702 ], 68
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2851
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp2735 ]
  lea rdx, [ tmp2774 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l2853
  mov dword [ tmp2855 ], 1
  mov eax, dword [ tmp2855 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2854
l2853:
  mov dword [ tmp2855 ], 0
  mov eax, dword [ tmp2855 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2854:
  jmp l2852
l2851:
  mov dword [ tmp2702 ], 69
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2856
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp2774 ]
  lea rdx, [ tmp2735 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l2858
  mov dword [ tmp2860 ], 1
  mov eax, dword [ tmp2860 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2859
l2858:
  mov dword [ tmp2860 ], 0
  mov eax, dword [ tmp2860 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2859:
  jmp l2857
l2856:
  mov dword [ tmp2702 ], 72
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2861
  mov dword [ tmp2860 ], 0
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2865 ], 1
  mov eax, dword [ tmp2865 ]
  mov [ tmp2774 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2774 + Variant_t.value], rax
  lea rcx, [ tmp2735 ]
  lea rdx, [ tmp2774 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2863
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2865 ], 1
  mov eax, dword [ tmp2865 ]
  mov [ tmp2735 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2735 + Variant_t.value], rax
  lea  rcx , [ tmp2774 ]
  lea  rdx , [ tmp2735 ]
  lea  r8 , [ tmp2860 ]
  call  __MOLD_VariantCompareEQ
l2863:
  cmp dword [ tmp2860 ], 0
  jz l2866
  mov dword [ tmp2864 ], 1
  mov eax, dword [ tmp2864 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2867
l2866:
  mov dword [ tmp2864 ], 0
  mov eax, dword [ tmp2864 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2867:
  jmp l2862
l2861:
  mov dword [ tmp2702 ], 73
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2868
  mov dword [ tmp2864 ], 1
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2871 ], 1
  mov eax, dword [ tmp2871 ]
  mov [ tmp2774 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2774 + Variant_t.value], rax
  lea rcx, [ tmp2735 ]
  lea rdx, [ tmp2774 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2870
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2871 ], 1
  mov eax, dword [ tmp2871 ]
  mov [ tmp2735 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2735 + Variant_t.value], rax
  lea  rcx , [ tmp2774 ]
  lea  rdx , [ tmp2735 ]
  lea  r8 , [ tmp2864 ]
  call  __MOLD_VariantCompareEQ
l2870:
  cmp dword [ tmp2864 ], 0
  jz l2872
  mov dword [ tmp2865 ], 1
  mov eax, dword [ tmp2865 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
  jmp l2873
l2872:
  mov dword [ tmp2865 ], 0
  mov eax, dword [ tmp2865 ]
  mov [ newValue + Variant_t.type], VARIANT_BOOLEAN
  mov [ newValue + Variant_t.value], rax
l2873:
  jmp l2869
l2868:
  mov dword [ tmp2702 ], 54
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2874
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2701 + Variant_t.value]
  mov dword [ tmp2702 ], eax
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2774 ]
  lea  rdx , [ tmp2702 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l2875
l2874:
  mov dword [ tmp2702 ], 55
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2876
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2774 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ y ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2774 ]
  lea  rdx , [ tmp2701 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
l2876:
l2877:
l2875:
l2869:
l2862:
l2857:
l2852:
l2847:
l2841:
l2838:
l2835:
l2833:
l2831:
l2829:
l2827:
l2825:
l2823:
l2820:
l2821:
l2819:
l2796:
  jmp l2794
l2793:
  mov dword [ tmp2727 ], 0
  mov dword [ tmp2702 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2702 ]
  jnz l2878
  mov dword [ tmp2721 ], 0
  lea rcx, [ value ]
  lea rdx, [ __literal122 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2879
  mov dword [ tmp2740 ], 0
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp2701 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2701 ]
  lea  rdi , [ tmp2735 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp2735 ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2880
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp2735 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2702 ], 44
  mov [ tmp2701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2701 + Variant_t.value], rax
  lea  rcx , [ tmp2735 ]
  lea  rdx , [ tmp2701 ]
  lea  r8 , [ tmp2740 ]
  call  __MOLD_VariantCompareEQ
l2880:
  mov eax, dword [ tmp2740 ]
  mov dword [ tmp2721 ], eax
l2879:
  mov eax, dword [ tmp2721 ]
  mov dword [ tmp2727 ], eax
l2878:
  cmp dword [ tmp2727 ], 0
  jz l2881
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp2702 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp2702 ]
  mov dword [ astType ], eax
  mov dword [ tmp2702 ], -1
  mov eax, dword [ astType ]
  cmp eax, dword [ tmp2702 ]
  jz l2883
  mov [ tmp2735 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astType ]
  mov [ tmp2735 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp2735 ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ newValue ]
  lea rdx, [ tmp2701 ]
  call __MOLD_VariantMove
l2883:
l2884:
l2881:
l2882:
l2794:
  push rdi
  lea  rcx , [ newValue ]
  lea  rdi , [ tmp2701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2702 ], 0
  mov [ tmp2735 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2702 ]
  mov [ tmp2735 + Variant_t.value], rax
  lea rcx, [ tmp2701 ]
  lea rdx, [ tmp2735 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2885
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ newValue ]
  call  __ASTOptimizerConstantFolding__setToImm$0
  mov dword [ tmp2727 ], 1
  mov eax, dword [ tmp2727 ]
  mov [ isNodeChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isNodeChanged + Variant_t.value], rax
  jmp l2886
l2885:
  mov dword [ tmp2727 ], 0
  mov eax, dword [ tmp2727 ]
  mov [ isNodeChanged + Variant_t.type], VARIANT_BOOLEAN
  mov [ isNodeChanged + Variant_t.value], rax
l2886:
l2715:
l2708:
l2705:
l2706:

  ; clean frame
  ; -----------
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2701 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2722 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2735 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2774 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2775 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2776 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ isChildChanged ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse22 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse23 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse24 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ xValue ]
  call __MOLD_VariantDestroy

  add  rsp, 560
  pop  rbp
  ret

  restore this
  restore node
  restore isNodeChanged
  restore opcode
  restore value
  restore newValue
  restore children
  restore childrenCnt
  restore x
  restore y
  restore areArgsImm
  restore tmp2700
  restore tmp2701
  restore tmp2702
  restore tmp2704
  restore tmp2709
  restore tmp2710
  restore tmp2716
  restore tmp2721
  restore tmp2722
  restore tmp2727
  restore tmp2735
  restore tmp2736
  restore tmp2740
  restore tmp2742
  restore tmp2743
  restore tmp2744
  restore tmp2774
  restore tmp2775
  restore tmp2776
  restore tmp2777
  restore tmp2784
  restore tmp2785
  restore tmp2812
  restore tmp2815
  restore tmp2836
  restore tmp2839
  restore tmp2842
  restore tmp2845
  restore tmp2850
  restore tmp2855
  restore tmp2860
  restore tmp2864
  restore tmp2865
  restore tmp2871
  restore startIdx
  restore idx
  restore isChildChanged
  restore tmp
  restore __cse22
  restore __cse23
  restore symbolInfo
  restore __cse24
  restore newParams
  restore lastWasImm
  restore oneChild
  restore sysCallId
  restore xValue
  restore astType
; -----------------------------------------------
; function __ASTOptimizerConstantFolding_processNodeUntilNotChanged$0
; -----------------------------------------------
__ASTOptimizerConstantFolding_processNodeUntilNotChanged$0:
  ; init frame
  ; ----------
  tmp2892 EQU rbp - 24 ; 16 bytes
  tmp2891 EQU rbp - 28 ; 4 bytes
  tmp2888 EQU rbp - 44 ; 16 bytes
  tmp2887 EQU rbp - 48 ; 4 bytes
  isAnyChangedDone EQU rdi
  node EQU rbp - 64 ; 16 bytes
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp2888 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2892 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp2887 ], 0
  mov eax, dword [ tmp2887 ]
  mov [ isAnyChangedDone + Variant_t.type], VARIANT_BOOLEAN
  mov [ isAnyChangedDone + Variant_t.value], rax
;
; -----------------------------
; BEGIN: while
;
l2889:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  rdi , [ tmp2888 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_processNode$0
  pop rdi
  mov dword [ tmp2891 ], 1
  mov eax, dword [ tmp2891 ]
  mov [ tmp2892 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp2892 + Variant_t.value], rax
  lea rcx, [ tmp2888 ]
  lea rdx, [ tmp2892 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2890
  mov dword [ tmp2891 ], 1
  mov eax, dword [ tmp2891 ]
  mov [ isAnyChangedDone + Variant_t.type], VARIANT_BOOLEAN
  mov [ isAnyChangedDone + Variant_t.value], rax
  jmp l2889
l2890:
;
; END: while
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2888 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2892 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore node
  restore isAnyChangedDone
  restore tmp2887
  restore tmp2888
  restore tmp2891
  restore tmp2892
; -----------------------------------------------
; function __ASTOptimizerCSE_constructor$0
; -----------------------------------------------
__ASTOptimizerCSE_constructor$0:
  ; init frame
  ; ----------
  tmp2894 EQU rbp - 24 ; 16 bytes
  tmp2893 EQU rbp - 28 ; 4 bytes
  app EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp2894 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp2893 ], 0
  mov [ tmp2894 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2893 ]
  mov [ tmp2894 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal316 ]
  lea  r8 , [ tmp2894 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2894 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore app
  restore tmp2893
  restore tmp2894
; -----------------------------------------------
; function __ASTOptimizerCSE__getNextId$0
; -----------------------------------------------
__ASTOptimizerCSE__getNextId$0:
  ; init frame
  ; ----------
  tmp2897 EQU rbp - 24 ; 16 bytes
  tmp2896 EQU rbp - 28 ; 4 bytes
  tmp2895 EQU rbp - 44 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp2895 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2897 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal316 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2896 ], 1
  mov [ tmp2897 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2896 ]
  mov [ tmp2897 + Variant_t.value], rax
  lea  rcx , [ rv ]
  lea  rdx , [ tmp2897 ]
  lea  r8 , [ tmp2895 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal316 ]
  lea  r8 , [ tmp2895 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2895 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2897 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp2895
  restore tmp2896
  restore tmp2897
; -----------------------------------------------
; function __ASTOptimizerCSE__createNodeVariable$0
; -----------------------------------------------
__ASTOptimizerCSE__createNodeVariable$0:
  ; init frame
  ; ----------
  tmp2903 EQU rbp - 24 ; 16 bytes
  tmp2902 EQU rbp - 40 ; 16 bytes
  tmp2901 EQU rbp - 56 ; 16 bytes
  tmp2900 EQU rbp - 60 ; 4 bytes
  tmp2899 EQU rbp - 76 ; 16 bytes
  tmp2898 EQU rbp - 92 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp2898 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2899 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2901 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2902 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2903 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2898 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2898 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp2900 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp2899 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2900 ]
  mov [ tmp2899 + Variant_t.value], rax
  lea  rcx , [ tmp2898 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2899 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2899 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_VARIABLE ]
  mov [ tmp2899 + Variant_t.value], rax
  lea  rcx , [ tmp2898 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2899 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp2903 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__getNextId$0
  pop rdi
  push rdi
  lea  rcx , [ tmp2903 ]
  lea  rdi , [ tmp2902 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2901 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal317 ]
  lea  rdx , [ tmp2902 ]
  lea  r8 , [ tmp2901 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2899 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2899 ]
  lea rdx, [ tmp2901 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2898 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2899 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2899 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2899 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp2898 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2899 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp2898 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp2898 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2899 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2902 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2903 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp2898
  restore tmp2899
  restore tmp2900
  restore tmp2901
  restore tmp2902
  restore tmp2903
; -----------------------------------------------
; function __ASTOptimizerCSE__debug$0
; -----------------------------------------------
__ASTOptimizerCSE__debug$0:
  ; init frame
  ; ----------
  tmp2905 EQU rbp - 12 ; 4 bytes
  tmp2904 EQU rbp - 16 ; 4 bytes
  msg EQU rbp - 32 ; 16 bytes
  this EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----
  mov dword [ tmp2905 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp2905 ], eax
  setz al
  xor  al, cl
  jnz l2906
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal318 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l2906:
l2907:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp2904
  restore tmp2905
; -----------------------------------------------
; function __ASTOptimizerCSE__processInnerNode$0
; -----------------------------------------------
__ASTOptimizerCSE__processInnerNode$0:
  ; init frame
  ; ----------
  tmp2908 EQU rbp - 24 ; 16 bytes
  unused EQU rbp - 40 ; 16 bytes
  symbolTable EQU rbp - 56 ; 16 bytes
  mapOfExpressions EQU rbp - 72 ; 16 bytes
  node EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mapOfExpressions ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ symbolTable ], xmm0
  mov [unused + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2908 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  lea  rdi , [ tmp2908 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__processNode$0
  pop rdi
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea rcx, [ unused ]
  lea rdx, [ tmp2908 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ unused ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2908 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore node
  restore mapOfExpressions
  restore symbolTable
  restore unused
  restore tmp2908
; -----------------------------------------------
; function __ASTOptimizerCSE__processNode$0
; -----------------------------------------------
__ASTOptimizerCSE__processNode$0:
  ; init frame
  ; ----------
  deep2 EQU rbp - 12 ; 4 bytes
  deep1 EQU rbp - 16 ; 4 bytes
  __cse26 EQU rbp - 32 ; 16 bytes
  __cse25 EQU rbp - 48 ; 16 bytes
  isCseEmited EQU rbp - 52 ; 4 bytes
  newCommonBlockChildren EQU rbp - 68 ; 16 bytes
  commonBlock EQU rbp - 84 ; 16 bytes
  lastInstructionNode2 EQU rbp - 100 ; 16 bytes
  lastInstructionNode1 EQU rbp - 116 ; 16 bytes
  block2 EQU rbp - 132 ; 16 bytes
  block1 EQU rbp - 148 ; 16 bytes
  matchedNode EQU rbp - 164 ; 16 bytes
  tmp3004 EQU rbp - 180 ; 16 bytes
  tmp3003 EQU rbp - 196 ; 16 bytes
  tmp3000 EQU rbp - 200 ; 4 bytes
  tmp2996 EQU rbp - 204 ; 4 bytes
  tmp2993 EQU rbp - 208 ; 4 bytes
  tmp2990 EQU rbp - 212 ; 4 bytes
  tmp2987 EQU rbp - 216 ; 4 bytes
  tmp2980 EQU rbp - 232 ; 16 bytes
  tmp2979 EQU rbp - 236 ; 4 bytes
  tmp2977 EQU rbp - 240 ; 4 bytes
  tmp2975 EQU rbp - 244 ; 4 bytes
  tmp2972 EQU rbp - 248 ; 4 bytes
  tmp2971 EQU rbp - 264 ; 16 bytes
  tmp2970 EQU rbp - 280 ; 16 bytes
  tmp2969 EQU rbp - 296 ; 16 bytes
  tmp2966 EQU rbp - 300 ; 4 bytes
  tmp2958 EQU rbp - 304 ; 4 bytes
  newNode EQU rbp - 320 ; 16 bytes
  childNode EQU rbp - 336 ; 16 bytes
  childIdx EQU rbp - 340 ; 4 bytes
  tmp2950 EQU rbp - 344 ; 4 bytes
  tmp2944 EQU rbp - 348 ; 4 bytes
  newRval EQU rbp - 364 ; 16 bytes
  rval EQU rbp - 380 ; 16 bytes
  lval EQU rbp - 396 ; 16 bytes
  tmp2931 EQU rbp - 412 ; 16 bytes
  tmp2930 EQU rbp - 428 ; 16 bytes
  tmp2929 EQU rbp - 444 ; 16 bytes
  tmp2928 EQU rbp - 460 ; 16 bytes
  tmp2925 EQU rbp - 464 ; 4 bytes
  tmp2923 EQU rbp - 468 ; 4 bytes
  tmp2919 EQU rbp - 472 ; 4 bytes
  oneChild EQU rbp - 488 ; 16 bytes
  tmp2912 EQU rbp - 492 ; 4 bytes
  tmp2911 EQU rbp - 508 ; 16 bytes
  tmp2910 EQU rbp - 524 ; 16 bytes
  tmp2909 EQU rbp - 528 ; 4 bytes
  rv EQU rdi
  children EQU rbp - 544 ; 16 bytes
  goOn EQU rbp - 548 ; 4 bytes
  opcode EQU rbp - 552 ; 4 bytes
  symbolTable EQU rbp - 568 ; 16 bytes
  mapOfExpressions EQU rbp - 584 ; 16 bytes
  node EQU rbp - 600 ; 16 bytes
  this EQU rbp - 616 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 656

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ mapOfExpressions ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ symbolTable ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2910 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2911 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp2928 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2929 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2930 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2931 + Variant_t.type], VARIANT_UNDEFINED
  mov [lval + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [newRval + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [newNode + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2969 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2970 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2971 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp2980 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3003 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3004 + Variant_t.type], VARIANT_UNDEFINED
  mov [matchedNode + Variant_t.type], VARIANT_UNDEFINED
  mov [block1 + Variant_t.type], VARIANT_UNDEFINED
  mov [block2 + Variant_t.type], VARIANT_UNDEFINED
  mov [lastInstructionNode1 + Variant_t.type], VARIANT_UNDEFINED
  mov [lastInstructionNode2 + Variant_t.type], VARIANT_UNDEFINED
  mov [commonBlock + Variant_t.type], VARIANT_UNDEFINED
  mov [newCommonBlockChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse25 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse26 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2911 ]
  lea  rdi , [ tmp2910 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2912 ], 0
  mov [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2911 + Variant_t.value], rax
  lea rcx, [ tmp2910 ]
  lea rdx, [ tmp2911 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2913
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
l2913:
l2914:
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2911 + Variant_t.value]
  mov dword [ opcode ], eax
  mov dword [ goOn ], 1
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l2916
l2915:
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey
  ret
l2916:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2915 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  mov dword [ tmp2912 ], 56
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2912 ]
  jnz l2917
  mov dword [ tmp2912 ], 0
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2912 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp2912 ], 1
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp2912 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2912 ], 52
  mov [ tmp2910 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2910 + Variant_t.value], rax
  lea rcx, [ tmp2911 ]
  lea rdx, [ tmp2910 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2920
  lea  rcx , [ lval ]
  call  AST_PrefetchHash
l2920:
l2921:
  lea  rcx , [ rval ]
  call  AST_PrefetchHash
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rval ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  lea  rdi , [ tmp2910 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__processNode$0
  pop rdi
  lea  rcx, [ newRval ]
  call __MOLD_VariantDestroy
  lea rcx, [ newRval ]
  lea rdx, [ tmp2910 ]
  call __MOLD_VariantMove
  mov dword [ tmp2919 ], 0
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2912 ], 52
  mov [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2911 + Variant_t.value], rax
  lea rcx, [ tmp2910 ]
  lea rdx, [ tmp2911 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2922
  mov dword [ tmp2923 ], 0
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newRval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2912 ], 52
  mov [ tmp2910 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2910 + Variant_t.value], rax
  lea rcx, [ tmp2911 ]
  lea rdx, [ tmp2910 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2924
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newRval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ tmp2911 ]
  lea  r8 , [ tmp2923 ]
  call  __MOLD_VariantCompareEQ
l2924:
  mov eax, dword [ tmp2923 ]
  mov dword [ tmp2919 ], eax
l2922:
  cmp dword [ tmp2919 ], 0
  jz l2926
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2910 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2931 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp2931 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2930 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal250 ]
  lea  rdx , [ tmp2931 ]
  lea  r8 , [ tmp2930 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2929 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2911 ]
  lea  rdx , [ tmp2930 ]
  lea  r8 , [ tmp2929 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2928 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal319 ]
  lea  rdx , [ tmp2929 ]
  lea  r8 , [ tmp2928 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp2928 ]
  call  __ASTOptimizerCSE__debug$0
  mov dword [ tmp2912 ], 76
  mov [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2911 + Variant_t.value], rax
  lea  rcx , [ rv ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2911 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ rv ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantStoreAtKey
  jmp l2927
l2926:
  lea rcx, [ newRval ]
  lea rdx, [ rval ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2932
  mov dword [ tmp2912 ], 1
  lea  rcx , [ children ]
  lea  rdx , [ tmp2912 ]
  lea  r8 , [ newRval ]
  call  __MOLD_VariantStoreAtIndex_int32
l2932:
l2933:
l2927:
  jmp l2918
l2917:
  mov dword [ tmp2919 ], 1
  mov dword [ tmp2912 ], 40
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2912 ]
  jz l2934
  mov dword [ tmp2912 ], 50
  mov dword [ tmp2919 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2912 ]
  setz byte [ tmp2919 ]
l2934:
  cmp dword [ tmp2919 ], 0
  jz l2935
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l2938
l2937:
  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  call  __ASTOptimizerCSE__processInnerNode$0
  ret
l2938:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2937 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  jmp l2936
l2935:
  mov dword [ tmp2912 ], 43
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2912 ]
  jnz l2939
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l2942
l2941:
  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  call  __ASTOptimizerCSE__processInnerNode$0
  ret
l2942:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2941 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  jmp l2940
l2939:
  mov dword [ tmp2925 ], 1
  mov dword [ tmp2912 ], 32
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2912 ]
  jz l2943
  mov dword [ tmp2912 ], 34
  mov dword [ tmp2925 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2912 ]
  setz byte [ tmp2925 ]
l2943:
  cmp dword [ tmp2925 ], 0
  jz l2945
  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l2948
l2947:
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  call  __ASTOptimizerCSE__processInnerNode$0
  ret
l2948:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2947 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  jmp l2946
l2945:
  mov dword [ tmp2944 ], 1
  mov dword [ tmp2912 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2912 ]
  jz l2949
  mov dword [ tmp2912 ], 36
  mov dword [ tmp2944 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2912 ]
  setz byte [ tmp2944 ]
l2949:
  cmp dword [ tmp2944 ], 0
  jz l2951
;
; -----------------------------
; BEGIN: for keys childIdx values childNode
;
  jmp l2954
l2953:
  lea  rcx , [ childNode ]
  call  AST_PrefetchHash
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__processNode$0
  pop rdi
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ newNode ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  lea rcx, [ newNode ]
  lea rdx, [ childNode ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2955
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ newNode ]
  call  __MOLD_VariantStoreAtIndex_int32
l2955:
l2956:
  ret
l2954:
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l2953 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys childIdx values childNode
; -----------------------------
;
  jmp l2952
l2951:
  mov dword [ tmp2950 ], 0
  mov dword [ tmp2912 ], 44
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp2912 ]
  jl l2957
  mov dword [ tmp2912 ], 49
  mov dword [ tmp2950 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp2912 ]
  setl byte [ tmp2950 ]
l2957:
  cmp dword [ tmp2950 ], 0
  jz l2959
  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate
l2959:
l2960:
  mov dword [ tmp2950 ], 0
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2910 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2912 ], 0
  mov [ tmp2910 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2910 + Variant_t.value], rax
  lea rcx, [ tmp2911 ]
  lea rdx, [ tmp2910 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l2961
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2911 ]
  lea  rdi , [ tmp2910 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2912 ], 0
  mov [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2911 + Variant_t.value], rax
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ tmp2911 ]
  lea  r8 , [ tmp2950 ]
  call  __MOLD_VariantCompareNE
l2961:
  cmp dword [ tmp2950 ], 0
  jz l2962
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ matchedNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ mapOfExpressions ]
  lea  rdx , [ tmp2910 ]
  lea  r8 , [ matchedNode ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ matchedNode ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2912 ], 0
  mov [ tmp2910 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2910 + Variant_t.value], rax
  lea rcx, [ tmp2911 ]
  lea rdx, [ tmp2910 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2964
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ mapOfExpressions ]
  lea  rdx , [ tmp2910 ]
  lea  r8 , [ node ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2911 ]
  lea  rdi , [ tmp2910 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2931 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2911 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp2931 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2930 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal321 ]
  lea  rdx , [ tmp2931 ]
  lea  r8 , [ tmp2930 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2929 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ tmp2930 ]
  lea  r8 , [ tmp2929 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2928 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal320 ]
  lea  rdx , [ tmp2929 ]
  lea  r8 , [ tmp2928 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp2928 ]
  call  __ASTOptimizerCSE__debug$0
  jmp l2965
l2964:
  lea rcx, [ matchedNode ]
  lea rdx, [ node ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2967
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2911 ]
  lea  rdi , [ tmp2910 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2969 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2969 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2969 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2969 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp2969 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2971 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2969 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp2971 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2970 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal324 ]
  lea  rdx , [ tmp2971 ]
  lea  r8 , [ tmp2970 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2931 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2911 ]
  lea  rdx , [ tmp2970 ]
  lea  r8 , [ tmp2931 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2930 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal323 ]
  lea  rdx , [ tmp2931 ]
  lea  r8 , [ tmp2930 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2929 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ tmp2930 ]
  lea  r8 , [ tmp2929 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp2928 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal322 ]
  lea  rdx , [ tmp2929 ]
  lea  r8 , [ tmp2928 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp2928 ]
  call  __ASTOptimizerCSE__debug$0
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2912 ], 52
  mov [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2911 + Variant_t.value], rax
  lea rcx, [ tmp2910 ]
  lea rdx, [ tmp2911 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2973
  mov dword [ tmp2975 ], 0
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2912 ], 56
  mov [ tmp2910 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2910 + Variant_t.value], rax
  lea rcx, [ tmp2911 ]
  lea rdx, [ tmp2910 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2976
  mov dword [ tmp2977 ], 0
  lea  rcx, [ tmp2980 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp2980 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2969 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2980 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2969 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2912 ], 0
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2969 ]
  lea  rdx , [ tmp2912 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2911 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2912 ], 52
  mov [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2911 + Variant_t.value], rax
  lea rcx, [ tmp2910 ]
  lea rdx, [ tmp2911 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2978
  lea  rcx, [ tmp2969 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp2969 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2969 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2912 ], 1
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ tmp2912 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp2911 ]
  lea  rdx , [ matchedNode ]
  lea  r8 , [ tmp2977 ]
  call  __MOLD_VariantCompareEQ
l2978:
  mov eax, dword [ tmp2977 ]
  mov dword [ tmp2975 ], eax
l2976:
  cmp dword [ tmp2975 ], 0
  jz l2981
  lea  rcx, [ tmp2969 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp2969 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2969 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp2912 ], 0
  lea  rcx, [ matchedNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ tmp2912 ]
  lea  r8 , [ matchedNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l2982
l2981:
  push rdi
  lea  rcx , [ matchedNode ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block1 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block2 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ matchedNode ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode1 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode2 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  lea rcx, [ block1 ]
  lea rdx, [ block2 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l2983
  lea  rcx, [ commonBlock ]
  call __MOLD_VariantDestroy
  lea rcx, [ commonBlock ]
  lea rdx, [ block1 ]
  call __MOLD_VariantMove
  jmp l2984
l2983:
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ block1 ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2911 + Variant_t.value]
  mov dword [ deep1 ], eax
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ block2 ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp2911 + Variant_t.value]
  mov dword [ deep2 ], eax
;
; -----------------------------
; BEGIN: while
;
l2985:
  mov eax, dword [ deep1 ]
  cmp eax, dword [ deep2 ]
  jle l2986
  push rdi
  lea  rcx , [ block1 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode1 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ block1 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block1 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  mov dword [ tmp2987 ], 1
  mov eax, dword [ deep1 ]
  sub eax, dword [ tmp2987 ]
  mov dword [ deep1 ], eax
  jmp l2985
l2986:
;
; END: while
; -----------------------------
;
;
; -----------------------------
; BEGIN: while
;
l2988:
  mov eax, dword [ deep2 ]
  cmp eax, dword [ deep1 ]
  jle l2989
  push rdi
  lea  rcx , [ block2 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode2 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ block2 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block2 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  mov dword [ tmp2987 ], 1
  mov eax, dword [ deep2 ]
  sub eax, dword [ tmp2987 ]
  mov dword [ deep2 ], eax
  jmp l2988
l2989:
;
; END: while
; -----------------------------
;
;
; -----------------------------
; BEGIN: while
;
l2991:
  lea rcx, [ block1 ]
  lea rdx, [ block2 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2992
  push rdi
  lea  rcx , [ block1 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode1 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ block2 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetTopNodeInBlock
  pop rdi
  lea  rcx, [ lastInstructionNode2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ lastInstructionNode2 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ block1 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block1 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ block2 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ block2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ block2 ]
  lea rdx, [ tmp2911 ]
  call __MOLD_VariantMove
  jmp l2991
l2992:
;
; END: while
; -----------------------------
;
  lea  rcx, [ commonBlock ]
  call __MOLD_VariantDestroy
  lea rcx, [ commonBlock ]
  lea rdx, [ block1 ]
  call __MOLD_VariantMove
l2984:
  mov dword [ tmp2912 ], 52
  mov [ tmp2911 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2911 + Variant_t.value], rax
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp2910 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__getNextId$0
  pop rdi
  push rdi
  lea  rcx , [ tmp2910 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp2928 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal317 ]
  lea  rdx , [ tmp2911 ]
  lea  r8 , [ tmp2928 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2928 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2911 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ __cse25 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ commonBlock ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ __cse25 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ __cse26 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse26 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse25 ]
  lea  rdx , [ __cse26 ]
  lea  rdi, [ tmp2911 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 29
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ __cse25 ]
  lea  rdx , [ __cse26 ]
  lea  rdi, [ tmp2911 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 21
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ newCommonBlockChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newCommonBlockChildren ]
  call  __MOLD_VariantArrayCreate
  mov dword [ isCseEmited ], 0
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ commonBlock ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l2995
l2994:
  mov dword [ tmp2996 ], 0
  xor  eax, eax
  or   dword [ isCseEmited ], eax
  setz cl
  or   dword [ tmp2996 ], eax
  setz al
  xor  al, cl
  jnz l2997
  mov dword [ tmp2996 ], 1
  lea rcx, [ oneChild ]
  lea rdx, [ lastInstructionNode1 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l2999
  lea  rcx , [ oneChild ]
  lea  rdx , [ lastInstructionNode2 ]
  lea  r8 , [ tmp2996 ]
  call  __MOLD_VariantCompareEQ
l2999:
  cmp dword [ tmp2996 ], 0
  jz l3001
  mov dword [ isCseEmited ], 1
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2910 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp2912 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp2969 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2969 + Variant_t.value], rax
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp2969 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp2969 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_DECLARE_OR_ASSIGN ]
  mov [ tmp2969 + Variant_t.value], rax
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp2969 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp2980 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp2980 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3003 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3003 + Variant_t.value], 0
  lea  rcx, [ tmp3004 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3004 ]
  lea rdx, [ matchedNode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2980 ]
  lea  rdx , [ tmp3003 ]
  lea  r8 , [ tmp3004 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3003 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3003 + Variant_t.value], 1
  lea  rcx, [ tmp3004 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3004 ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2980 ]
  lea  rdx , [ tmp3003 ]
  lea  r8 , [ tmp3004 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp2969 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp2969 ]
  lea rdx, [ tmp2980 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp2910 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp2969 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ newCommonBlockChildren ]
  lea  rdx , [ tmp2910 ]
  mov eax,  50
  call  __MOLD_SysCall
l3001:
l3002:
l2997:
l2998:
  lea  rcx , [ newCommonBlockChildren ]
  lea  rdx , [ oneChild ]
  mov eax,  50
  call  __MOLD_SysCall
  ret
l2995:
  lea  rcx , [ tmp2911 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l2994 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  mov dword [ tmp2996 ], 0
  xor  eax, eax
  or   dword [ isCseEmited ], eax
  setz cl
  or   dword [ tmp2996 ], eax
  setz al
  xor  al, cl
  jnz l3005
  lea  rcx , [ __literal325 ]
  mov eax,  41
  call  __MOLD_SysCall
l3005:
l3006:
  lea  rcx , [ commonBlock ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newCommonBlockChildren ]
  call  __MOLD_VariantStoreAtKey
l2982:
l2973:
l2974:
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2910 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2910 ]
  lea  rdi , [ tmp2911 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp2912 ], 0
  mov [ tmp2910 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp2912 ]
  mov [ tmp2910 + Variant_t.value], rax
  lea rcx, [ tmp2911 ]
  lea rdx, [ tmp2910 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3007
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp2911 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp2969 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ matchedNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp2969 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp2911 ]
  lea  rdx , [ tmp2969 ]
  lea  rdi, [ tmp2910 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 21
  call __MOLD_VCall
  pop rdi
l3007:
l3008:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ matchedNode ]
  call __MOLD_VariantMove
  mov dword [ goOn ], 0
l2967:
l2968:
l2965:
l2962:
l2963:
  mov dword [ tmp2958 ], 1
  xor  eax, eax
  or   dword [ goOn ], eax
  setz cl
  or   dword [ tmp2958 ], eax
  setz al
  xor  al, cl
  jnz l3009
;
; -----------------------------
; BEGIN: for keys childIdx values childNode
;
  jmp l3012
l3011:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  lea  rdi , [ tmp2910 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE__processNode$0
  pop rdi
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ newNode ]
  lea rdx, [ tmp2910 ]
  call __MOLD_VariantMove
  lea rcx, [ newNode ]
  lea rdx, [ childNode ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3013
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ newNode ]
  call  __MOLD_VariantStoreAtIndex_int32
l3013:
l3014:
  ret
l3012:
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3011 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys childIdx values childNode
; -----------------------------
;
l3009:
l3010:
l2952:
l2946:
l2940:
l2936:
l2918:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2910 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2911 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newRval ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2969 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp2980 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3003 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3004 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ matchedNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ block1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ block2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastInstructionNode1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastInstructionNode2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ commonBlock ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newCommonBlockChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse25 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse26 ]
  call __MOLD_VariantDestroy

  add  rsp, 656
  pop  rbp
  ret

  restore this
  restore node
  restore mapOfExpressions
  restore symbolTable
  restore opcode
  restore goOn
  restore children
  restore rv
  restore tmp2909
  restore tmp2910
  restore tmp2911
  restore tmp2912
  restore oneChild
  restore tmp2919
  restore tmp2923
  restore tmp2925
  restore tmp2928
  restore tmp2929
  restore tmp2930
  restore tmp2931
  restore lval
  restore rval
  restore newRval
  restore tmp2944
  restore tmp2950
  restore childIdx
  restore childNode
  restore newNode
  restore tmp2958
  restore tmp2966
  restore tmp2969
  restore tmp2970
  restore tmp2971
  restore tmp2972
  restore tmp2975
  restore tmp2977
  restore tmp2979
  restore tmp2980
  restore tmp2987
  restore tmp2990
  restore tmp2993
  restore tmp2996
  restore tmp3000
  restore tmp3003
  restore tmp3004
  restore matchedNode
  restore block1
  restore block2
  restore lastInstructionNode1
  restore lastInstructionNode2
  restore commonBlock
  restore newCommonBlockChildren
  restore isCseEmited
  restore __cse25
  restore __cse26
  restore deep1
  restore deep2
; -----------------------------------------------
; function __ASTOptimizerCSE_processNode$0
; -----------------------------------------------
__ASTOptimizerCSE_processNode$0:
  ; init frame
  ; ----------
  tmp3015 EQU rbp - 24 ; 16 bytes
  symbolTable EQU rbp - 40 ; 16 bytes
  mapOfExpressions EQU rbp - 56 ; 16 bytes
  node EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [mapOfExpressions + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3015 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ mapOfExpressions ]
  call __MOLD_VariantDestroy
  lea  rcx , [ mapOfExpressions ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ mapOfExpressions ]
  lea  r9 , [ symbolTable ]
  call  __ASTOptimizerCSE__processInnerNode$0

  ; clean frame
  ; -----------
  lea  rcx, [ mapOfExpressions ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3015 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore node
  restore mapOfExpressions
  restore symbolTable
  restore tmp3015
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove_constructor$0
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove_constructor$0:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__debug$0
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__debug$0:
  ; init frame
  ; ----------
  tmp3017 EQU rbp - 12 ; 4 bytes
  tmp3016 EQU rbp - 16 ; 4 bytes
  msg EQU rbp - 32 ; 16 bytes
  this EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----
  mov dword [ tmp3017 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp3017 ], eax
  setz al
  xor  al, cl
  jnz l3018
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal326 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l3018:
l3019:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3016
  restore tmp3017
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__removeNode$0
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__removeNode$0:
  ; init frame
  ; ----------
  tmp3023 EQU rbp - 12 ; 4 bytes
  tmp3022 EQU rbp - 28 ; 16 bytes
  tmp3021 EQU rbp - 44 ; 16 bytes
  tmp3020 EQU rbp - 60 ; 16 bytes
  node EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp3020 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3021 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3022 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3022 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3022 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3022 ]
  lea  rdi , [ tmp3021 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3020 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal327 ]
  lea  rdx , [ tmp3021 ]
  lea  r8 , [ tmp3020 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3020 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  mov dword [ tmp3023 ], 76
  mov [ tmp3021 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3023 ]
  mov [ tmp3021 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3021 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3021 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3021 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3021 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3021 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3022 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore node
  restore tmp3020
  restore tmp3021
  restore tmp3022
  restore tmp3023
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__moveNode$0
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__moveNode$0:
  ; init frame
  ; ----------
  tmp3028 EQU rbp - 24 ; 16 bytes
  tmp3027 EQU rbp - 40 ; 16 bytes
  tmp3026 EQU rbp - 56 ; 16 bytes
  tmp3025 EQU rbp - 72 ; 16 bytes
  tmp3024 EQU rbp - 88 ; 16 bytes
  __cse27 EQU rbp - 104 ; 16 bytes
  src EQU rbp - 120 ; 16 bytes
  dst EQU rbp - 136 ; 16 bytes
  this EQU rbp - 152 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0
  mov [__cse27 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3024 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3025 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3026 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3027 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3028 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse27 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ src ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ __cse27 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3027 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3027 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3027 ]
  lea  rdi , [ tmp3024 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ __cse27 ]
  lea  rdi , [ tmp3027 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3028 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal329 ]
  lea  rdx , [ tmp3027 ]
  lea  r8 , [ tmp3028 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3026 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3024 ]
  lea  rdx , [ tmp3028 ]
  lea  r8 , [ tmp3026 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3025 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal328 ]
  lea  rdx , [ tmp3026 ]
  lea  r8 , [ tmp3025 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3025 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  lea  rcx , [ dst ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ __cse27 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3024 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ src ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3024 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ dst ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3024 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3024 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ src ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3024 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ dst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3024 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ __cse27 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3024 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3027 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore dst
  restore src
  restore __cse27
  restore tmp3024
  restore tmp3025
  restore tmp3026
  restore tmp3027
  restore tmp3028
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__processChildNodes$0
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__processChildNodes$0:
  ; init frame
  ; ----------
  newNode EQU rbp - 24 ; 16 bytes
  childNode EQU rbp - 40 ; 16 bytes
  tmp3037 EQU rbp - 56 ; 16 bytes
  tmp3036 EQU rbp - 60 ; 4 bytes
  tmp3033 EQU rbp - 64 ; 4 bytes
  tmp3032 EQU rbp - 80 ; 16 bytes
  tmp3029 EQU rbp - 96 ; 16 bytes
  newChildren EQU rbp - 112 ; 16 bytes
  node EQU rbp - 128 ; 16 bytes
  symbolTable EQU rbp - 144 ; 16 bytes
  this EQU rbp - 160 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3029 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3032 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3037 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [newNode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ tmp3029 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3029 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l3031
l3030:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ childNode ]
  lea  rdi , [ tmp3032 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__processNode$0
  pop rdi
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ newNode ]
  lea rdx, [ tmp3032 ]
  call __MOLD_VariantMove
  lea rcx, [ newNode ]
  lea rdx, [ childNode ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3034
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  lea  r8 , [ newNode ]
  call  __ASTOptimizerDeadCodeRemove__moveNode$0
l3034:
l3035:
  lea  rcx, [ tmp3032 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3032 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3036 ], 76
  mov [ tmp3037 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3036 ]
  mov [ tmp3037 + Variant_t.value], rax
  lea rcx, [ tmp3032 ]
  lea rdx, [ tmp3037 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3038
  lea  rcx , [ newChildren ]
  lea  rdx , [ newNode ]
  mov eax,  50
  call  __MOLD_SysCall
l3038:
l3039:
  ret
l3031:
  lea  rcx , [ tmp3029 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3030 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3029 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3032 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3037 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore newChildren
  restore tmp3029
  restore tmp3032
  restore tmp3033
  restore tmp3036
  restore tmp3037
  restore childNode
  restore newNode
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove__processNode$0
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove__processNode$0:
  ; init frame
  ; ----------
  __cse30 EQU rbp - 24 ; 16 bytes
  __cse29 EQU rbp - 40 ; 16 bytes
  tmp3103 EQU rbp - 44 ; 4 bytes
  __cse28 EQU rbp - 60 ; 16 bytes
  rval EQU rbp - 76 ; 16 bytes
  symbolInfo EQU rbp - 92 ; 16 bytes
  tmp3096 EQU rbp - 108 ; 16 bytes
  tmp3095 EQU rbp - 124 ; 16 bytes
  tmp3094 EQU rbp - 140 ; 16 bytes
  nodeElse EQU rbp - 156 ; 16 bytes
  nodeBody EQU rbp - 172 ; 16 bytes
  nodeCond EQU rbp - 188 ; 16 bytes
  tmp3072 EQU rbp - 192 ; 4 bytes
  tmp3071 EQU rbp - 208 ; 16 bytes
  tmp3063 EQU rbp - 212 ; 4 bytes
  tmp3056 EQU rbp - 228 ; 16 bytes
  tmp3053 EQU rbp - 232 ; 4 bytes
  tmp3052 EQU rbp - 236 ; 4 bytes
  tmp3051 EQU rbp - 240 ; 4 bytes
  tmp3043 EQU rbp - 244 ; 4 bytes
  tmp3042 EQU rbp - 248 ; 4 bytes
  tmp3041 EQU rbp - 264 ; 16 bytes
  tmp3040 EQU rbp - 280 ; 16 bytes
  removeNode EQU rbp - 284 ; 4 bytes
  rv EQU rdi
  value EQU rbp - 300 ; 16 bytes
  childrenCntOnEnter EQU rbp - 316 ; 16 bytes
  x EQU rbp - 332 ; 16 bytes
  childrenCnt EQU rbp - 336 ; 4 bytes
  children EQU rbp - 352 ; 16 bytes
  opcode EQU rbp - 356 ; 4 bytes
  node EQU rbp - 372 ; 16 bytes
  symbolTable EQU rbp - 388 ; 16 bytes
  this EQU rbp - 404 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 432

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCntOnEnter + Variant_t.type], VARIANT_UNDEFINED
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3040 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3041 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3056 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3071 + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeCond + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeBody + Variant_t.type], VARIANT_UNDEFINED
  mov [nodeElse + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3094 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3095 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3096 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse28 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse29 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse30 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3041 ]
  lea  rdx , [ node ]
  lea  rdi, [ tmp3040 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 7
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi , [ tmp3040 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3043 ], 0
  mov [ tmp3041 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3043 ]
  mov [ tmp3041 + Variant_t.value], rax
  lea rcx, [ tmp3040 ]
  lea rdx, [ tmp3041 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3044
  lea  rcx , [ __literal330 ]
  mov eax,  41
  call  __MOLD_SysCall
l3044:
l3045:
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp3041 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3043 ], 0
  mov [ tmp3040 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3043 ]
  mov [ tmp3040 + Variant_t.value], rax
  lea rcx, [ tmp3041 ]
  lea rdx, [ tmp3040 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3046
  lea  rcx , [ __literal331 ]
  mov eax,  41
  call  __MOLD_SysCall
l3046:
l3047:
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3040 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3040 + Variant_t.value]
  mov dword [ opcode ], eax
  mov dword [ tmp3043 ], 31
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3043 ]
  jnz l3048
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
l3048:
l3049:
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ node ]
  call  __ASTOptimizerDeadCodeRemove__processChildNodes$0
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3040 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3040 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp3040 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp3040 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3040 + Variant_t.value]
  mov dword [ childrenCnt ], eax
  mov dword [ tmp3043 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3043 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov [ childrenCntOnEnter + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ childrenCnt ]
  mov [ childrenCntOnEnter + Variant_t.value], rax
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  mov dword [ removeNode ], 0
  mov dword [ tmp3042 ], 0
  mov dword [ tmp3043 ], 44
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3043 ]
  jnz l3050
  mov dword [ tmp3043 ], 4
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3043 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3052 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp3053 ], 1
  xor   eax, eax
  or    dword [ tmp3052 ], eax
  setnz cl
  or    dword [ tmp3053 ], eax
  setz  al
  xor   al, cl
  mov   dword [ tmp3042 ], eax
l3050:
  cmp dword [ tmp3042 ], 0
  jz l3054
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3041 ]
  lea  rdi , [ tmp3040 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal332 ]
  lea  rdx , [ tmp3040 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  mov dword [ removeNode ], 1
  jmp l3055
l3054:
  cmp dword [ opcode ], 32
  jl l3058
  cmp dword [ opcode ], 56
  jg l3058
  mov eax, dword [ opcode ]
  jmp qword [ __jmptable3059 + rax * 8]
l3060:
  mov dword [ tmp3043 ], 1
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3043 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3053 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp3052 ], 1
  xor  eax, eax
  or   dword [ tmp3053 ], eax
  setz cl
  or   dword [ tmp3052 ], eax
  setz al
  xor  al, cl
  jnz l3061
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3041 ]
  lea  rdi , [ tmp3040 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal333 ]
  lea  rdx , [ tmp3040 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  mov dword [ removeNode ], 1
  jmp l3062
l3061:
  mov dword [ tmp3043 ], 0
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3043 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3063 ], 0
  mov eax, dword [ tmp3063 ]
  mov [ tmp3041 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3041 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdx , [ tmp3041 ]
  lea  rdi , [ tmp3053 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmWithValue
  pop rdi
  mov dword [ tmp3063 ], 1
  xor  eax, eax
  or   dword [ tmp3053 ], eax
  setz cl
  or   dword [ tmp3063 ], eax
  setz al
  xor  al, cl
  jnz l3064
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3041 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal334 ]
  lea  rdx , [ tmp3041 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  mov dword [ removeNode ], 1
l3064:
l3065:
l3062:
  jmp l3057
l3066:
  mov dword [ tmp3043 ], 0
  lea  rcx, [ nodeCond ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3043 ]
  lea  r8 , [ nodeCond ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3043 ], 1
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3043 ]
  lea  r8 , [ nodeBody ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3043 ], 2
  lea  rcx, [ nodeElse ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3043 ]
  lea  r8 , [ nodeElse ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3043 ], 3
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp3043 ]
  jnz l3067
  push rdi
  lea  rcx , [ nodeElse ]
  lea  rdi , [ tmp3063 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp3053 ], 1
  xor  eax, eax
  or   dword [ tmp3063 ], eax
  setz cl
  or   dword [ tmp3053 ], eax
  setz al
  xor  al, cl
  jnz l3069
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeElse ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3041 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal335 ]
  lea  rdx , [ tmp3041 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3041 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3040 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3040 + Variant_t.value], 0
  lea  rcx, [ tmp3071 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3071 ]
  lea rdx, [ nodeCond ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3041 ]
  lea  rdx , [ tmp3040 ]
  lea  r8 , [ tmp3071 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3040 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3040 + Variant_t.value], 1
  lea  rcx, [ tmp3071 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3071 ]
  lea rdx, [ nodeBody ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3041 ]
  lea  rdx , [ tmp3040 ]
  lea  r8 , [ tmp3071 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ childrenCnt ], 2
  push rdi
  lea  rcx , [ nodeBody ]
  lea  rdi , [ tmp3063 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp3072 ], 1
  xor  eax, eax
  or   dword [ tmp3063 ], eax
  setz cl
  or   dword [ tmp3072 ], eax
  setz al
  xor  al, cl
  jnz l3073
  lea  rcx, [ tmp3071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ nodeBody ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3071 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3071 ]
  lea  rdi , [ tmp3041 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal336 ]
  lea  rdx , [ tmp3041 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  mov dword [ removeNode ], 1
l3073:
l3074:
  jmp l3070
l3069:
  push rdi
  lea  rcx , [ nodeBody ]
  lea  rdi , [ tmp3072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp3063 ], 1
  xor  eax, eax
  or   dword [ tmp3072 ], eax
  setz cl
  or   dword [ tmp3063 ], eax
  setz al
  xor  al, cl
  jnz l3075
  lea  rcx, [ tmp3071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3071 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3071 ]
  lea  rdi , [ tmp3041 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal337 ]
  lea  rdx , [ tmp3041 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  lea  rcx , [ nodeCond ]
  call  AST_InvertBoolean
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3041 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3071 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3071 + Variant_t.value], 0
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3040 ]
  lea rdx, [ nodeCond ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3041 ]
  lea  rdx , [ tmp3071 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3071 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3071 + Variant_t.value], 1
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3040 ]
  lea rdx, [ nodeElse ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3041 ]
  lea  rdx , [ tmp3071 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea rcx, [ nodeBody ]
  lea rdx, [ nodeElse ]
  call __MOLD_VariantMove
  mov dword [ childrenCnt ], 2
l3075:
l3076:
l3070:
  jmp l3068
l3067:
  push rdi
  lea  rcx , [ nodeBody ]
  lea  rdi , [ tmp3053 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp3063 ], 1
  xor  eax, eax
  or   dword [ tmp3053 ], eax
  setz cl
  or   dword [ tmp3063 ], eax
  setz al
  xor  al, cl
  jnz l3077
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3041 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal338 ]
  lea  rdx , [ tmp3041 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  mov dword [ removeNode ], 1
l3077:
l3078:
l3068:
  mov dword [ tmp3052 ], 1
  xor   eax, eax
  or    dword [ removeNode ], eax
  setnz cl
  or    dword [ tmp3052 ], eax
  setz  al
  xor   al, cl
  jnz l3079
  mov dword [ tmp3053 ], 1
  mov eax, dword [ tmp3053 ]
  mov [ tmp3041 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3041 + Variant_t.value], rax
  push rdi
  lea  rcx , [ nodeCond ]
  lea  rdx , [ tmp3041 ]
  lea  rdi , [ tmp3063 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmWithValue
  pop rdi
  mov dword [ tmp3053 ], 1
  xor  eax, eax
  or   dword [ tmp3063 ], eax
  setz cl
  or   dword [ tmp3053 ], eax
  setz al
  xor  al, cl
  jnz l3081
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3041 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal339 ]
  lea  rdx , [ tmp3041 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ nodeBody ]
  call __MOLD_VariantMove
  jmp l3082
l3081:
  mov dword [ tmp3072 ], 0
  mov eax, dword [ tmp3072 ]
  mov [ tmp3041 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3041 + Variant_t.value], rax
  push rdi
  lea  rcx , [ nodeCond ]
  lea  rdx , [ tmp3041 ]
  lea  rdi , [ tmp3063 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmWithValue
  pop rdi
  mov dword [ tmp3072 ], 1
  xor  eax, eax
  or   dword [ tmp3063 ], eax
  setz cl
  or   dword [ tmp3072 ], eax
  setz al
  xor  al, cl
  jnz l3083
  mov dword [ tmp3043 ], 3
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp3043 ]
  jnz l3085
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3041 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal340 ]
  lea  rdx , [ tmp3041 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ nodeElse ]
  call __MOLD_VariantMove
  jmp l3086
l3085:
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3041 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal341 ]
  lea  rdx , [ tmp3041 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  mov dword [ removeNode ], 1
l3086:
l3083:
l3084:
l3082:
l3079:
l3080:
  jmp l3057
l3087:
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3043 ], 52
  mov [ tmp3040 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3043 ]
  mov [ tmp3040 + Variant_t.value], rax
  lea rcx, [ tmp3041 ]
  lea rdx, [ tmp3040 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3088
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp3041 ]
  lea  rdi, [ tmp3040 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp3040 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3043 ], 0
  mov [ tmp3041 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3043 ]
  mov [ tmp3041 + Variant_t.value], rax
  lea rcx, [ tmp3040 ]
  lea rdx, [ tmp3041 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3090
  mov dword [ tmp3043 ], 1
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3043 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ rval ]
  lea  rdi , [ tmp3072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_HasSideEffects
  pop rdi
  mov dword [ tmp3063 ], 1
  xor  eax, eax
  or   dword [ tmp3072 ], eax
  setz cl
  or   dword [ tmp3063 ], eax
  setz al
  xor  al, cl
  jnz l3092
  mov dword [ tmp3063 ], 1
  mov eax, dword [ tmp3063 ]
  mov [ tmp3041 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3041 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal342 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantStoreAtKey
  jmp l3093
l3092:
  lea  rcx, [ __cse28 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse28 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3041 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse28 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3095 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal250 ]
  lea  rdx , [ tmp3096 ]
  lea  r8 , [ tmp3095 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3094 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3041 ]
  lea  rdx , [ tmp3095 ]
  lea  r8 , [ tmp3094 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal343 ]
  lea  rdx , [ tmp3094 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  mov dword [ removeNode ], 1
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ __cse28 ]
  lea  rdi, [ tmp3041 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 43
  call __MOLD_VCall
  pop rdi
l3093:
l3090:
l3091:
l3088:
l3089:
  jmp l3057
l3097:
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp3040 ]
  lea  rdi, [ tmp3041 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp3041 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3043 ], 0
  mov [ tmp3040 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3043 ]
  mov [ tmp3040 + Variant_t.value], rax
  lea rcx, [ tmp3041 ]
  lea rdx, [ tmp3040 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3098
  mov dword [ removeNode ], 1
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolTable ]
  lea  rdx , [ __literal162 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3071 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3041 ]
  lea  rdx , [ tmp3071 ]
  lea  rdi, [ tmp3040 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 33
  call __MOLD_VCall
  pop rdi
l3098:
l3099:
  jmp l3057
l3058:
  mov dword [ tmp3051 ], 0
  mov dword [ tmp3043 ], 75
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3043 ]
  jnz l3100
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3043 ], 75
  mov [ tmp3071 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3043 ]
  mov [ tmp3071 + Variant_t.value], rax
  lea  rcx , [ tmp3040 ]
  lea  rdx , [ tmp3071 ]
  lea  r8 , [ tmp3051 ]
  call  __MOLD_VariantCompareEQ
l3100:
  cmp dword [ tmp3051 ], 0
  jz l3101
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3071 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal344 ]
  lea  rdx , [ tmp3071 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  lea  rcx, [ tmp3071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3071 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3043 ], 0
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3103 ], 0
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3041 ]
  lea  rdx , [ tmp3103 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp3071 ]
  lea  rdx , [ tmp3043 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3102
l3101:
  mov dword [ tmp3043 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3043 ]
  jnz l3104
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp3040 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp3040 ]
  call __MOLD_VariantMove
  lea  rcx, [ __cse29 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ __cse29 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp3071 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ __cse30 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3071 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ __cse30 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3053 ], 0
  push rdi
  lea  rcx , [ __cse29 ]
  lea  rdi , [ tmp3040 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3043 ], 0
  mov [ tmp3071 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3043 ]
  mov [ tmp3071 + Variant_t.value], rax
  lea rcx, [ tmp3040 ]
  lea rdx, [ tmp3071 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3106
  mov dword [ tmp3063 ], 0
  push rdi
  lea  rcx , [ __cse30 ]
  lea  rdi , [ tmp3071 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3043 ], 0
  mov [ tmp3040 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3043 ]
  mov [ tmp3040 + Variant_t.value], rax
  lea rcx, [ tmp3071 ]
  lea rdx, [ tmp3040 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3107
  mov dword [ tmp3043 ], 0
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse30 ]
  lea  rdx , [ tmp3043 ]
  lea  r8 , [ tmp3041 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3041 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3071 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3071 ]
  lea  rdi , [ tmp3040 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3043 ], 0
  mov [ tmp3071 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3043 ]
  mov [ tmp3071 + Variant_t.value], rax
  lea  rcx , [ tmp3040 ]
  lea  rdx , [ tmp3071 ]
  lea  r8 , [ tmp3063 ]
  call  __MOLD_VariantCompareEQ
l3107:
  mov eax, dword [ tmp3063 ]
  mov dword [ tmp3053 ], eax
l3106:
  cmp dword [ tmp3053 ], 0
  jz l3108
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3071 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3096 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3096 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3095 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal250 ]
  lea  rdx , [ tmp3096 ]
  lea  r8 , [ tmp3095 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3094 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3071 ]
  lea  rdx , [ tmp3095 ]
  lea  r8 , [ tmp3094 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3056 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal345 ]
  lea  rdx , [ tmp3094 ]
  lea  r8 , [ tmp3056 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3056 ]
  call  __ASTOptimizerDeadCodeRemove__debug$0
  mov dword [ removeNode ], 1
l3108:
l3109:
l3104:
l3105:
l3102:
l3057:
l3055:
  mov dword [ tmp3051 ], 1
  xor  eax, eax
  or   dword [ removeNode ], eax
  setz cl
  or   dword [ tmp3051 ], eax
  setz al
  xor  al, cl
  jnz l3110
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  call  __ASTOptimizerDeadCodeRemove__removeNode$0
  jmp l3111
l3110:
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3040 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3040 ]
  lea  rdi , [ tmp3071 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ childrenCntOnEnter ]
  lea rdx, [ tmp3071 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3112
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ node ]
  call  __ASTOptimizerDeadCodeRemove__processChildNodes$0
l3112:
l3113:
l3111:
  mov dword [ tmp3043 ], 31
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3043 ]
  jnz l3114
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp3071 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 44
  call __MOLD_VCall
  pop rdi
l3114:
l3115:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCntOnEnter ]
  call __MOLD_VariantDestroy
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3040 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3041 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3071 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeCond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeBody ]
  call __MOLD_VariantDestroy
  lea  rcx, [ nodeElse ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse28 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse29 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse30 ]
  call __MOLD_VariantDestroy

  add  rsp, 432
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore x
  restore childrenCntOnEnter
  restore value
  restore rv
  restore removeNode
  restore tmp3040
  restore tmp3041
  restore tmp3042
  restore tmp3043
  restore tmp3051
  restore tmp3052
  restore tmp3053
  restore tmp3056
  restore tmp3063
  restore tmp3071
  restore tmp3072
  restore nodeCond
  restore nodeBody
  restore nodeElse
  restore tmp3094
  restore tmp3095
  restore tmp3096
  restore symbolInfo
  restore rval
  restore __cse28
  restore tmp3103
  restore __cse29
  restore __cse30
; -----------------------------------------------
; function __ASTOptimizerDeadCodeRemove_processNode$0
; -----------------------------------------------
__ASTOptimizerDeadCodeRemove_processNode$0:
  ; init frame
  ; ----------
  tmp3117 EQU rbp - 24 ; 16 bytes
  tmp3116 EQU rbp - 40 ; 16 bytes
  newNode EQU rbp - 56 ; 16 bytes
  node EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [newNode + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3116 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3117 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3117 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3117 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3117 ]
  lea  r8 , [ node ]
  lea  rdi , [ tmp3116 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove__processNode$0
  pop rdi
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ newNode ]
  lea rdx, [ tmp3116 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3116 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3117 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore node
  restore newNode
  restore tmp3116
  restore tmp3117
; -----------------------------------------------
; function __ASTOptimizerVCall_constructor$0
; -----------------------------------------------
__ASTOptimizerVCall_constructor$0:
  ; init frame
  ; ----------
  tmp3118 EQU rbp - 24 ; 16 bytes
  app EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp3118 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp3118 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 1
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3118 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3118 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore app
  restore tmp3118
; -----------------------------------------------
; function __ASTOptimizerVCall__debug$0
; -----------------------------------------------
__ASTOptimizerVCall__debug$0:
  ; init frame
  ; ----------
  tmp3120 EQU rbp - 12 ; 4 bytes
  tmp3119 EQU rbp - 16 ; 4 bytes
  msg EQU rbp - 32 ; 16 bytes
  this EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----
  mov dword [ tmp3120 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp3120 ], eax
  setz al
  xor  al, cl
  jnz l3121
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal346 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l3121:
l3122:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3119
  restore tmp3120
; -----------------------------------------------
; function __ASTOptimizerVCall__processNode$0
; -----------------------------------------------
__ASTOptimizerVCall__processNode$0:
  ; init frame
  ; ----------
  oneChild EQU rbp - 24 ; 16 bytes
  __cse31 EQU rbp - 40 ; 16 bytes
  currentMethodName EQU rbp - 56 ; 16 bytes
  symbolTable EQU rbp - 72 ; 16 bytes
  blockNode EQU rbp - 88 ; 16 bytes
  isRetValUsed EQU rbp - 92 ; 4 bytes
  methodProto EQU rbp - 108 ; 16 bytes
  classProto EQU rbp - 124 ; 16 bytes
  symbolInfoThiz EQU rbp - 140 ; 16 bytes
  thiz EQU rbp - 156 ; 16 bytes
  tmp3154 EQU rbp - 172 ; 16 bytes
  tmp3148 EQU rbp - 188 ; 16 bytes
  tmp3147 EQU rbp - 204 ; 16 bytes
  tmp3146 EQU rbp - 220 ; 16 bytes
  tmp3143 EQU rbp - 224 ; 4 bytes
  tmp3142 EQU rbp - 228 ; 4 bytes
  tmp3140 EQU rbp - 232 ; 4 bytes
  tmp3137 EQU rbp - 248 ; 16 bytes
  tmp3134 EQU rbp - 252 ; 4 bytes
  tmp3132 EQU rbp - 256 ; 4 bytes
  tmp3129 EQU rbp - 260 ; 4 bytes
  tmp3126 EQU rbp - 264 ; 4 bytes
  tmp3125 EQU rbp - 268 ; 4 bytes
  tmp3124 EQU rbp - 284 ; 16 bytes
  tmp3123 EQU rbp - 300 ; 16 bytes
  childrenCnt EQU rbp - 316 ; 16 bytes
  children EQU rbp - 332 ; 16 bytes
  opcode EQU rbp - 336 ; 4 bytes
  node EQU rbp - 352 ; 16 bytes
  this EQU rbp - 368 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 400

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3123 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3124 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3137 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3146 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3147 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3148 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3154 + Variant_t.type], VARIANT_UNDEFINED
  mov [thiz + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfoThiz + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [blockNode + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [currentMethodName + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse31 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp3124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp3124 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3124 ]
  lea  rdx , [ node ]
  lea  rdi, [ tmp3123 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 7
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp3123 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3123 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3123 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3123 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3125 ], 36
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3125 ]
  jnz l3127
  mov dword [ tmp3125 ], 0
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3125 ]
  lea  r8 , [ thiz ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ symbolInfoThiz ]
  call __MOLD_VariantDestroy
  lea  rcx , [ thiz ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ symbolInfoThiz ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolInfoThiz ]
  lea  rdi , [ tmp3123 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3125 ], 0
  mov [ tmp3124 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3125 ]
  mov [ tmp3124 + Variant_t.value], rax
  lea rcx, [ tmp3123 ]
  lea rdx, [ tmp3124 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3130
  lea  rcx, [ tmp3123 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ thiz ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp3123 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3123 ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3132 ], 0
  push rdi
  lea  rcx , [ classProto ]
  lea  rdi , [ tmp3124 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3125 ], 0
  mov [ tmp3123 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3125 ]
  mov [ tmp3123 + Variant_t.value], rax
  lea rcx, [ tmp3124 ]
  lea rdx, [ tmp3123 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3133
  lea  rcx, [ tmp3124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal223 ]
  lea  r8 , [ tmp3124 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3124 ]
  lea  rdi , [ tmp3123 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3125 ], 0
  mov [ tmp3124 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3125 ]
  mov [ tmp3124 + Variant_t.value], rax
  lea  rcx , [ tmp3123 ]
  lea  rdx , [ tmp3124 ]
  lea  r8 , [ tmp3132 ]
  call  __MOLD_VariantCompareNE
l3133:
  cmp dword [ tmp3132 ], 0
  jz l3135
  lea  rcx, [ tmp3123 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal223 ]
  lea  r8 , [ tmp3123 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3137 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3137 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3123 ]
  lea  rdx , [ tmp3137 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp3124 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3125 ], 0
  mov [ tmp3137 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3125 ]
  mov [ tmp3137 + Variant_t.value], rax
  lea rcx, [ tmp3124 ]
  lea rdx, [ tmp3137 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3138
  mov dword [ tmp3140 ], 0
  lea  rcx, [ tmp3124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal231 ]
  lea  r8 , [ tmp3124 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3124 ]
  lea  rdi , [ tmp3137 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3125 ], 0
  mov [ tmp3124 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3125 ]
  mov [ tmp3124 + Variant_t.value], rax
  lea rcx, [ tmp3137 ]
  lea rdx, [ tmp3124 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3141
  lea  rcx, [ tmp3124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal231 ]
  lea  r8 , [ tmp3124 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3143 ], 1
  mov eax, dword [ tmp3143 ]
  mov [ tmp3137 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3137 + Variant_t.value], rax
  lea  rcx , [ tmp3124 ]
  lea  rdx , [ tmp3137 ]
  lea  r8 , [ tmp3140 ]
  call  __MOLD_VariantCompareEQ
l3141:
  cmp dword [ tmp3140 ], 0
  jz l3144
  lea  rcx, [ tmp3137 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3137 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3123 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3123 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3123 ]
  lea  rdi , [ tmp3124 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3148 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal348 ]
  lea  rdx , [ tmp3124 ]
  lea  r8 , [ tmp3148 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3147 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3137 ]
  lea  rdx , [ tmp3148 ]
  lea  r8 , [ tmp3147 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3146 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal347 ]
  lea  rdx , [ tmp3147 ]
  lea  r8 , [ tmp3146 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3146 ]
  call  __ASTOptimizerVCall__debug$0
  jmp l3145
l3144:
  lea  rcx, [ tmp3137 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal252 ]
  lea  r8 , [ tmp3137 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3143 ], 1
  mov eax, dword [ tmp3143 ]
  mov [ tmp3124 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3124 + Variant_t.value], rax
  lea rcx, [ tmp3137 ]
  lea rdx, [ tmp3124 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3149
  mov dword [ isRetValUsed ], 0
  jmp l3150
l3149:
  mov dword [ isRetValUsed ], 1
l3150:
  lea  rcx, [ __cse31 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ __cse31 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ __cse31 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3125 ], 42
  mov [ tmp3124 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3125 ]
  mov [ tmp3124 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3124 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3137 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3137 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ isRetValUsed ]
  mov [ tmp3123 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3123 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp3137 ]
  lea  rdx , [ __cse31 ]
  lea  r8 , [ childrenCnt ]
  lea  r9 , [ tmp3123 ]
  lea  rdi, [ tmp3124 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 37
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp3124 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3124 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3137 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3137 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3137 ]
  lea  rdi , [ tmp3123 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3148 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal350 ]
  lea  rdx , [ tmp3123 ]
  lea  r8 , [ tmp3148 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3147 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3124 ]
  lea  rdx , [ tmp3148 ]
  lea  r8 , [ tmp3147 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3146 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal349 ]
  lea  rdx , [ tmp3147 ]
  lea  r8 , [ tmp3146 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3146 ]
  call  __ASTOptimizerVCall__debug$0
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp3124 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetParentBlock
  pop rdi
  lea  rcx, [ blockNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ blockNode ]
  lea rdx, [ tmp3124 ]
  call __MOLD_VariantMove
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ blockNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp3124 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 38
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ currentMethodName ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentMethodName ]
  lea rdx, [ tmp3124 ]
  call __MOLD_VariantMove
  mov dword [ tmp3142 ], 0
  push rdi
  lea  rcx , [ currentMethodName ]
  lea  rdi , [ tmp3124 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3125 ], 0
  mov [ tmp3123 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3125 ]
  mov [ tmp3123 + Variant_t.value], rax
  lea rcx, [ tmp3124 ]
  lea rdx, [ tmp3123 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3151
  lea  rcx, [ tmp3123 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp3123 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ currentMethodName ]
  lea  rdx , [ tmp3123 ]
  lea  r8 , [ tmp3142 ]
  call  __MOLD_VariantCompareEQ
l3151:
  cmp dword [ tmp3142 ], 0
  jz l3152
  lea  rcx, [ tmp3124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3124 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3124 ]
  lea  rdi , [ tmp3123 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp3124 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3154 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3124 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3154 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3148 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal250 ]
  lea  rdx , [ tmp3154 ]
  lea  r8 , [ tmp3148 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3147 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3123 ]
  lea  rdx , [ tmp3148 ]
  lea  r8 , [ tmp3147 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3146 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal249 ]
  lea  rdx , [ tmp3147 ]
  lea  r8 , [ tmp3146 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3146 ]
  call  __ASTOptimizerVCall__debug$0
  lea  rcx, [ tmp3124 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp3124 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3123 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3124 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp3123 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3143 ], 1
  mov eax, dword [ tmp3143 ]
  mov [ tmp3124 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3124 + Variant_t.value], rax
  lea  rcx , [ tmp3123 ]
  lea  rdx , [ __literal251 ]
  lea  r8 , [ tmp3124 ]
  call  __MOLD_VariantStoreAtKey
l3152:
l3153:
l3145:
l3138:
l3139:
l3135:
l3136:
l3130:
l3131:
  jmp l3128
l3127:
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l3156
l3155:
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  call  __ASTOptimizerVCall__processNode$0
  ret
l3156:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3155 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
l3128:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3123 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3124 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3137 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfoThiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ blockNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentMethodName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse31 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild

  add  rsp, 400
  pop  rbp
  ret

  restore this
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore tmp3123
  restore tmp3124
  restore tmp3125
  restore tmp3126
  restore tmp3129
  restore tmp3132
  restore tmp3134
  restore tmp3137
  restore tmp3140
  restore tmp3142
  restore tmp3143
  restore tmp3146
  restore tmp3147
  restore tmp3148
  restore tmp3154
  restore thiz
  restore symbolInfoThiz
  restore classProto
  restore methodProto
  restore isRetValUsed
  restore blockNode
  restore symbolTable
  restore currentMethodName
  restore __cse31
  restore oneChild
; -----------------------------------------------
; function __ASTOptimizerVCall_processNode$0
; -----------------------------------------------
__ASTOptimizerVCall_processNode$0:
  ; init frame
  ; ----------
  node EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  call  __ASTOptimizerVCall__processNode$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore node
; -----------------------------------------------
; function __ASTOptimizerIf_constructor$0
; -----------------------------------------------
__ASTOptimizerIf_constructor$0:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTOptimizerIf__debug$0
; -----------------------------------------------
__ASTOptimizerIf__debug$0:
  ; init frame
  ; ----------
  tmp3158 EQU rbp - 12 ; 4 bytes
  tmp3157 EQU rbp - 16 ; 4 bytes
  msg EQU rbp - 32 ; 16 bytes
  this EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----
  mov dword [ tmp3158 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp3158 ], eax
  setz al
  xor  al, cl
  jnz l3159
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal351 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l3159:
l3160:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3157
  restore tmp3158
; -----------------------------------------------
; function __ASTOptimizerIf__processNode$0
; -----------------------------------------------
__ASTOptimizerIf__processNode$0:
  ; init frame
  ; ----------
  oneChild EQU rbp - 24 ; 16 bytes
  lastCaseNode EQU rbp - 40 ; 16 bytes
  reusedNode EQU rbp - 56 ; 16 bytes
  caseNodeHash EQU rbp - 72 ; 16 bytes
  caseValue EQU rbp - 76 ; 4 bytes
  caseNode EQU rbp - 92 ; 16 bytes
  casesCnt EQU rbp - 96 ; 4 bytes
  currentIfNode EQU rbp - 112 ; 16 bytes
  goOn EQU rbp - 116 ; 4 bytes
  valueMax EQU rbp - 120 ; 4 bytes
  valueMin EQU rbp - 124 ; 4 bytes
  exprHash EQU rbp - 140 ; 16 bytes
  caseHashMap EQU rbp - 156 ; 16 bytes
  newChildren EQU rbp - 172 ; 16 bytes
  tmp3186 EQU rbp - 176 ; 4 bytes
  tmp3183 EQU rbp - 180 ; 4 bytes
  tmp3181 EQU rbp - 184 ; 4 bytes
  tmp3175 EQU rbp - 200 ; 16 bytes
  tmp3174 EQU rbp - 216 ; 16 bytes
  tmp3171 EQU rbp - 232 ; 16 bytes
  tmp3170 EQU rbp - 248 ; 16 bytes
  tmp3169 EQU rbp - 252 ; 4 bytes
  tmp3167 EQU rbp - 256 ; 4 bytes
  tmp3165 EQU rbp - 260 ; 4 bytes
  tmp3163 EQU rbp - 264 ; 4 bytes
  tmp3162 EQU rbp - 268 ; 4 bytes
  tmp3161 EQU rbp - 284 ; 16 bytes
  cond EQU rbp - 300 ; 16 bytes
  childrenCnt EQU rbp - 304 ; 4 bytes
  children EQU rbp - 320 ; 16 bytes
  opcode EQU rbp - 324 ; 4 bytes
  node EQU rbp - 340 ; 16 bytes
  this EQU rbp - 356 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 384

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [cond + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3161 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3170 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3171 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3174 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3175 + Variant_t.type], VARIANT_UNDEFINED
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [caseHashMap + Variant_t.type], VARIANT_UNDEFINED
  mov [exprHash + Variant_t.type], VARIANT_UNDEFINED
  mov [currentIfNode + Variant_t.type], VARIANT_UNDEFINED
  mov [caseNode + Variant_t.type], VARIANT_UNDEFINED
  mov [caseNodeHash + Variant_t.type], VARIANT_UNDEFINED
  mov [reusedNode + Variant_t.type], VARIANT_UNDEFINED
  mov [lastCaseNode + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3161 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3161 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp3161 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp3161 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3161 + Variant_t.value]
  mov dword [ childrenCnt ], eax
  mov dword [ tmp3162 ], 0
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3163 ], 0
  mov dword [ tmp3162 ], 40
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3162 ]
  jnz l3164
  mov dword [ tmp3165 ], 0
  mov dword [ tmp3162 ], 3
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp3162 ]
  jnz l3166
  mov dword [ tmp3167 ], 0
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 66
  mov [ tmp3170 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3162 ]
  mov [ tmp3170 + Variant_t.value], rax
  lea rcx, [ tmp3161 ]
  lea rdx, [ tmp3170 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3168
  lea  rcx, [ tmp3171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3171 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 1
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3171 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3170 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3161 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3170 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 1
  mov [ tmp3161 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3162 ]
  mov [ tmp3161 + Variant_t.value], rax
  lea  rcx , [ tmp3170 ]
  lea  rdx , [ tmp3161 ]
  lea  r8 , [ tmp3167 ]
  call  __MOLD_VariantCompareEQ
l3168:
  mov eax, dword [ tmp3167 ]
  mov dword [ tmp3165 ], eax
l3166:
  mov eax, dword [ tmp3165 ]
  mov dword [ tmp3163 ], eax
l3164:
  cmp dword [ tmp3163 ], 0
  jz l3172
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3161 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3170 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3170 + Variant_t.value], 0
  lea  rcx, [ tmp3175 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3175 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 0
  lea  rcx, [ tmp3171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3175 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ tmp3171 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp3161 ]
  lea  rdx , [ tmp3170 ]
  lea  r8 , [ tmp3171 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea rcx, [ newChildren ]
  lea rdx, [ tmp3161 ]
  call __MOLD_VariantMove
  lea  rcx, [ caseHashMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ caseHashMap ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp3170 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3170 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 0
  lea  rcx, [ tmp3171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3170 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ tmp3171 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp3171 ]
  lea  rdi , [ tmp3161 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetHash
  pop rdi
  lea  rcx, [ exprHash ]
  call __MOLD_VariantDestroy
  lea rcx, [ exprHash ]
  lea rdx, [ tmp3161 ]
  call __MOLD_VariantMove
  mov dword [ valueMin ], 2147483647
  mov dword [ valueMax ], -2147483647
  mov dword [ goOn ], 1
  lea  rcx, [ currentIfNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentIfNode ]
  lea rdx, [ node ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3171 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 0
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3171 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ casesCnt ], 0
;
; -----------------------------
; BEGIN: while
;
l3176:
  mov dword [ tmp3167 ], 1
  xor  eax, eax
  or   dword [ goOn ], eax
  setz cl
  or   dword [ tmp3167 ], eax
  setz al
  xor  al, cl
  jnz l3177
  mov dword [ goOn ], 0
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 40
  mov [ tmp3171 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3162 ]
  mov [ tmp3171 + Variant_t.value], rax
  lea rcx, [ tmp3161 ]
  lea rdx, [ tmp3171 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3178
  mov dword [ tmp3169 ], 0
  lea  rcx, [ tmp3171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3171 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 66
  mov [ tmp3161 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3162 ]
  mov [ tmp3161 + Variant_t.value], rax
  lea rcx, [ tmp3171 ]
  lea rdx, [ tmp3161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3180
  mov dword [ tmp3181 ], 0
  lea  rcx, [ tmp3170 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3170 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 1
  lea  rcx, [ tmp3171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3170 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ tmp3171 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3171 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 1
  mov [ tmp3171 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3162 ]
  mov [ tmp3171 + Variant_t.value], rax
  lea rcx, [ tmp3161 ]
  lea rdx, [ tmp3171 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3182
  lea  rcx, [ tmp3170 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3170 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 0
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3170 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp3161 ]
  lea  rdi , [ tmp3171 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetHash
  pop rdi
  lea  rcx , [ tmp3171 ]
  lea  rdx , [ exprHash ]
  lea  r8 , [ tmp3181 ]
  call  __MOLD_VariantCompareEQ
l3182:
  mov eax, dword [ tmp3181 ]
  mov dword [ tmp3169 ], eax
l3180:
  cmp dword [ tmp3169 ], 0
  jz l3184
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 1
  lea  rcx, [ caseNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3161 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ caseNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3170 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ cond ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3170 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 1
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3170 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3171 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3161 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3171 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3171 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3171 + Variant_t.value]
  mov dword [ caseValue ], eax
  push rdi
  lea  rcx , [ caseNode ]
  lea  rdi , [ tmp3171 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetHashForCodeComparison
  pop rdi
  lea  rcx, [ caseNodeHash ]
  call __MOLD_VariantDestroy
  lea rcx, [ caseNodeHash ]
  lea rdx, [ tmp3171 ]
  call __MOLD_VariantMove
  lea  rcx, [ reusedNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ caseHashMap ]
  lea  rdx , [ caseNodeHash ]
  lea  r8 , [ reusedNode ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3186 ], 1
  mov eax, dword [ casesCnt ]
  add eax, dword [ tmp3186 ]
  mov dword [ casesCnt ], eax
  push rdi
  lea  rcx , [ reusedNode ]
  lea  rdi , [ tmp3171 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3162 ], 0
  mov [ tmp3161 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3162 ]
  mov [ tmp3161 + Variant_t.value], rax
  lea rcx, [ tmp3171 ]
  lea rdx, [ tmp3161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3187
  lea  rcx , [ caseHashMap ]
  lea  rdx , [ caseNodeHash ]
  lea  r8 , [ caseNode ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ newChildren ]
  lea  rdx , [ caseNode ]
  mov eax,  50
  call  __MOLD_SysCall
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3161 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3171 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3171 + Variant_t.value], 0
  mov [ tmp3170 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ caseValue ]
  mov [ tmp3170 + Variant_t.value], rax
  lea  rcx , [ tmp3161 ]
  lea  rdx , [ tmp3171 ]
  lea  r8 , [ tmp3170 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ caseNode ]
  lea  rdx , [ __literal352 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantStoreAtKey
  jmp l3188
l3187:
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ reusedNode ]
  lea  rdx , [ __literal352 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromKey
  mov [ tmp3170 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ caseValue ]
  mov [ tmp3170 + Variant_t.value], rax
  lea  rcx , [ tmp3161 ]
  lea  rdx , [ tmp3170 ]
  mov eax,  50
  call  __MOLD_SysCall
l3188:
  mov eax, dword [ caseValue ]
  cmp eax, dword [ valueMax ]
  jle l3189
  mov eax, dword [ caseValue ]
  mov dword [ valueMax ], eax
l3189:
l3190:
  mov eax, dword [ caseValue ]
  cmp eax, dword [ valueMin ]
  jge l3191
  mov eax, dword [ caseValue ]
  mov dword [ valueMin ], eax
l3191:
l3192:
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3161 ]
  lea  rdi , [ tmp3170 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3162 ], 3
  mov [ tmp3161 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3162 ]
  mov [ tmp3161 + Variant_t.value], rax
  lea rcx, [ tmp3170 ]
  lea rdx, [ tmp3161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3193
  mov dword [ goOn ], 1
  lea  rcx, [ tmp3170 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3170 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 2
  lea  rcx, [ currentIfNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3170 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ currentIfNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3170 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3170 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 0
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3170 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ cond ]
  call  __MOLD_VariantLoadFromIndex_int32
l3193:
l3194:
l3184:
l3185:
l3178:
l3179:
  jmp l3176
l3177:
;
; END: while
; -----------------------------
;
  mov dword [ tmp3162 ], 3
  mov eax, dword [ casesCnt ]
  cmp eax, dword [ tmp3162 ]
  jl l3195
  push rdi
  lea  rcx , [ newChildren ]
  lea  rdi , [ tmp3171 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3162 ], 1
  mov [ tmp3174 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3162 ]
  mov [ tmp3174 + Variant_t.value], rax
  lea  rcx , [ tmp3171 ]
  lea  rdx , [ tmp3174 ]
  lea  r8 , [ tmp3170 ]
  call  __MOLD_VariantSub
  cmp [ tmp3170 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3170 + Variant_t.value]
  mov dword [ tmp3162 ], eax
  lea  rcx, [ lastCaseNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ lastCaseNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3169 ], 1
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 40
  mov [ tmp3170 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3162 ]
  mov [ tmp3170 + Variant_t.value], rax
  lea rcx, [ tmp3161 ]
  lea rdx, [ tmp3170 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3197
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentIfNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3174 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3162 ], 1
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3174 ]
  lea  rdx , [ tmp3162 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp3161 ]
  lea  rdi , [ tmp3170 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetHashForCodeComparison
  pop rdi
  push rdi
  lea  rcx , [ lastCaseNode ]
  lea  rdi , [ tmp3161 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetHashForCodeComparison
  pop rdi
  lea  rcx , [ tmp3170 ]
  lea  rdx , [ tmp3161 ]
  lea  r8 , [ tmp3169 ]
  call  __MOLD_VariantCompareNE
l3197:
  cmp dword [ tmp3169 ], 0
  jz l3198
  lea  rcx , [ newChildren ]
  lea  rdx , [ currentIfNode ]
  mov eax,  50
  call  __MOLD_SysCall
  lea  rcx , [ this ]
  lea  rdx , [ currentIfNode ]
  call  __ASTOptimizerIf__processNode$0
l3198:
l3199:
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3162 ], 50
  mov [ tmp3161 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3162 ]
  mov [ tmp3161 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp3161 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ valueMin ]
  mov [ tmp3161 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal353 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp3161 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ valueMax ]
  mov [ tmp3161 + Variant_t.value], rax
  lea  rcx , [ node ]
  lea  rdx , [ __literal354 ]
  lea  r8 , [ tmp3161 ]
  call  __MOLD_VariantStoreAtKey
l3195:
l3196:
  jmp l3173
l3172:
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l3201
l3200:
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  call  __ASTOptimizerIf__processNode$0
  ret
l3201:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3200 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
l3173:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3161 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3170 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3171 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3174 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3175 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseHashMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ exprHash ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentIfNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ reusedNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastCaseNode ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild

  add  rsp, 384
  pop  rbp
  ret

  restore this
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore cond
  restore tmp3161
  restore tmp3162
  restore tmp3163
  restore tmp3165
  restore tmp3167
  restore tmp3169
  restore tmp3170
  restore tmp3171
  restore tmp3174
  restore tmp3175
  restore tmp3181
  restore tmp3183
  restore tmp3186
  restore newChildren
  restore caseHashMap
  restore exprHash
  restore valueMin
  restore valueMax
  restore goOn
  restore currentIfNode
  restore casesCnt
  restore caseNode
  restore caseValue
  restore caseNodeHash
  restore reusedNode
  restore lastCaseNode
  restore oneChild
; -----------------------------------------------
; function __ASTOptimizerIf_processNode$0
; -----------------------------------------------
__ASTOptimizerIf_processNode$0:
  ; init frame
  ; ----------
  node EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  call  __ASTOptimizerIf__processNode$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore node
; -----------------------------------------------
; function __ASTOptimizerInline_constructor$0
; -----------------------------------------------
__ASTOptimizerInline_constructor$0:
  ; init frame
  ; ----------
  tmp3202 EQU rbp - 24 ; 16 bytes
  app EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp3202 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp3202 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 1
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3202 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp3202 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 45
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal355 ]
  lea  r8 , [ tmp3202 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3202 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore app
  restore tmp3202
; -----------------------------------------------
; function __ASTOptimizerInline__debug$0
; -----------------------------------------------
__ASTOptimizerInline__debug$0:
  ; init frame
  ; ----------
  tmp3204 EQU rbp - 12 ; 4 bytes
  tmp3203 EQU rbp - 16 ; 4 bytes
  msg EQU rbp - 32 ; 16 bytes
  this EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----
  mov dword [ tmp3204 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp3204 ], eax
  setz al
  xor  al, cl
  jnz l3205
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal356 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l3205:
l3206:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3203
  restore tmp3204
; -----------------------------------------------
; function __ASTOptimizerInline__resolveParamsForInline$0
; -----------------------------------------------
__ASTOptimizerInline__resolveParamsForInline$0:
  ; init frame
  ; ----------
  childNode EQU rbp - 24 ; 16 bytes
  childIdx EQU rbp - 28 ; 4 bytes
  symbolInfo EQU rbp - 44 ; 16 bytes
  tmp3223 EQU rbp - 60 ; 16 bytes
  tmp3220 EQU rbp - 64 ; 4 bytes
  tmp3218 EQU rbp - 68 ; 4 bytes
  tmp3214 EQU rbp - 72 ; 4 bytes
  tmp3213 EQU rbp - 76 ; 4 bytes
  tmp3210 EQU rbp - 92 ; 16 bytes
  tmp3209 EQU rbp - 96 ; 4 bytes
  tmp3208 EQU rbp - 100 ; 4 bytes
  tmp3207 EQU rbp - 116 ; 16 bytes
  rv EQU rdi
  newOpcode EQU rbp - 132 ; 16 bytes
  newValue EQU rbp - 148 ; 16 bytes
  children EQU rbp - 164 ; 16 bytes
  newChildren EQU rbp - 180 ; 16 bytes
  node EQU rbp - 196 ; 16 bytes
  namePrefix EQU rbp - 212 ; 16 bytes
  symbolTable EQU rbp - 228 ; 16 bytes
  this EQU rbp - 244 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ namePrefix ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ node ], xmm0
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [newValue + Variant_t.type], VARIANT_UNDEFINED
  mov [newOpcode + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3207 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3210 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3223 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ newOpcode ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3207 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3207 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3209 ], 52
  mov [ tmp3210 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3209 ]
  mov [ tmp3210 + Variant_t.value], rax
  lea rcx, [ tmp3207 ]
  lea rdx, [ tmp3210 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3211
  lea  rcx, [ tmp3207 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3207 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp3207 ]
  lea  rdi, [ tmp3210 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 16
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp3214 ], 1
  mov eax, dword [ tmp3214 ]
  mov [ tmp3207 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3207 + Variant_t.value], rax
  lea rcx, [ tmp3210 ]
  lea rdx, [ tmp3207 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3215
  lea  rcx, [ tmp3210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3210 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ tmp3210 ]
  lea  rdi, [ tmp3207 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp3207 ]
  call __MOLD_VariantMove
  mov dword [ tmp3214 ], 1
  lea  rcx, [ tmp3207 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp3207 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3209 ], 3
  mov [ tmp3210 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3209 ]
  mov [ tmp3210 + Variant_t.value], rax
  lea rcx, [ tmp3207 ]
  lea rdx, [ tmp3210 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3217
  mov dword [ tmp3218 ], 1
  lea  rcx, [ tmp3210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp3210 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3209 ], 4
  mov [ tmp3207 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3209 ]
  mov [ tmp3207 + Variant_t.value], rax
  lea rcx, [ tmp3210 ]
  lea rdx, [ tmp3207 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3219
  lea  rcx, [ tmp3207 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp3207 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3209 ], 1
  mov [ tmp3210 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3209 ]
  mov [ tmp3210 + Variant_t.value], rax
  lea  rcx , [ tmp3207 ]
  lea  rdx , [ tmp3210 ]
  lea  r8 , [ tmp3218 ]
  call  __MOLD_VariantCompareEQ
l3219:
  mov eax, dword [ tmp3218 ]
  mov dword [ tmp3214 ], eax
l3217:
  cmp dword [ tmp3214 ], 0
  jz l3221
  lea  rcx, [ tmp3210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ tmp3210 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStringJoin
l3221:
l3222:
  jmp l3216
l3215:
  lea  rcx, [ tmp3210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3210 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ tmp3210 ]
  lea  r8 , [ newValue ]
  call  __MOLD_VariantStringJoin
l3216:
  jmp l3212
l3211:
;
; -----------------------------
; BEGIN: for keys childIdx values childNode
;
  jmp l3225
l3224:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ namePrefix ]
  lea  r9 , [ childNode ]
  lea  rdi , [ tmp3210 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__resolveParamsForInline$0
  pop rdi
  lea  rcx , [ newChildren ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ tmp3210 ]
  call  __MOLD_VariantStoreAtIndex_int32
  ret
l3225:
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3224 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys childIdx values childNode
; -----------------------------
;
l3212:
  lea  rcx, [ tmp3210 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3210 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp3209 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp3207 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3209 ]
  mov [ tmp3207 + Variant_t.value], rax
  lea  rcx , [ tmp3210 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3207 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3207 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3207 ]
  lea rdx, [ newOpcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3210 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3207 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3207 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3207 ]
  lea rdx, [ newChildren ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3210 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3207 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3207 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3207 ]
  lea rdx, [ newValue ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3210 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3207 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp3210 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3207 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3210 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore namePrefix
  restore node
  restore newChildren
  restore children
  restore newValue
  restore newOpcode
  restore rv
  restore tmp3207
  restore tmp3208
  restore tmp3209
  restore tmp3210
  restore tmp3213
  restore tmp3214
  restore tmp3218
  restore tmp3220
  restore tmp3223
  restore symbolInfo
  restore childIdx
  restore childNode
; -----------------------------------------------
; function __ASTOptimizerInline__injectParamInit$0
; -----------------------------------------------
__ASTOptimizerInline__injectParamInit$0:
  ; init frame
  ; ----------
  tmp3234 EQU rbp - 24 ; 16 bytes
  tmp3233 EQU rbp - 40 ; 16 bytes
  tmp3232 EQU rbp - 56 ; 16 bytes
  tmp3231 EQU rbp - 72 ; 16 bytes
  tmp3230 EQU rbp - 88 ; 16 bytes
  tmp3229 EQU rbp - 104 ; 16 bytes
  tmp3228 EQU rbp - 108 ; 4 bytes
  tmp3227 EQU rbp - 124 ; 16 bytes
  tmp3226 EQU rbp - 140 ; 16 bytes
  paramInitValueNode EQU rbp - 156 ; 16 bytes
  paramName EQU rbp - 172 ; 16 bytes
  symbolTable EQU rbp - 188 ; 16 bytes
  dst EQU rbp - 204 ; 16 bytes
  this EQU rbp - 220 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ paramName ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ paramInitValueNode ], xmm0
  mov [tmp3226 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3227 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3229 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3230 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3231 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3232 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3233 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3234 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ paramName ]
  lea  rdi, [ tmp3226 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 29
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp3226 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3226 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp3228 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp3227 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3228 ]
  mov [ tmp3227 + Variant_t.value], rax
  lea  rcx , [ tmp3226 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3227 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp3227 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_DECLARE_OR_ASSIGN ]
  mov [ tmp3227 + Variant_t.value], rax
  lea  rcx , [ tmp3226 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3227 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3229 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3229 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3230 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3230 + Variant_t.value], 0
  lea  rcx, [ tmp3232 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3232 ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rdi , [ tmp3228 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetNextId
  pop rdi
  mov [ tmp3233 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3228 ]
  mov [ tmp3233 + Variant_t.value], rax
  lea  rcx , [ tmp3232 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3233 ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp3233 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ AST_OPCODE_VARIABLE ]
  mov [ tmp3233 + Variant_t.value], rax
  lea  rcx , [ tmp3232 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3233 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3233 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3233 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp3232 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3233 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3233 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3233 ]
  lea rdx, [ paramName ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3232 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3233 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3231 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3231 ]
  lea rdx, [ tmp3232 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3229 ]
  lea  rdx , [ tmp3230 ]
  lea  r8 , [ tmp3231 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3230 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3230 + Variant_t.value], 1
  lea  rcx, [ tmp3231 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3231 ]
  lea rdx, [ paramInitValueNode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3229 ]
  lea  rdx , [ tmp3230 ]
  lea  r8 , [ tmp3231 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ tmp3227 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3227 ]
  lea rdx, [ tmp3229 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3226 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3227 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ dst ]
  lea  rdx , [ tmp3226 ]
  mov eax,  50
  call  __MOLD_SysCall

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3226 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3227 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3229 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3230 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3231 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3232 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3233 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3234 ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore dst
  restore symbolTable
  restore paramName
  restore paramInitValueNode
  restore tmp3226
  restore tmp3227
  restore tmp3228
  restore tmp3229
  restore tmp3230
  restore tmp3231
  restore tmp3232
  restore tmp3233
  restore tmp3234
; -----------------------------------------------
; function __ASTOptimizerInline__injectFunctionBody$0
; -----------------------------------------------
__ASTOptimizerInline__injectFunctionBody$0:
  ; init frame
  ; ----------
  newNode EQU rbp - 24 ; 16 bytes
  childNode EQU rbp - 40 ; 16 bytes
  paramInitValueNode EQU rbp - 56 ; 16 bytes
  paramNameWithPrefix EQU rbp - 72 ; 16 bytes
  oneParamName EQU rbp - 88 ; 16 bytes
  paramIdx EQU rbp - 92 ; 4 bytes
  paramName EQU rbp - 108 ; 16 bytes
  thizParamNode EQU rbp - 124 ; 16 bytes
  childIdx EQU rbp - 128 ; 4 bytes
  rvFullName EQU rbp - 144 ; 16 bytes
  rvName EQU rbp - 160 ; 16 bytes
  children EQU rbp - 176 ; 16 bytes
  bodyNode EQU rbp - 192 ; 16 bytes
  namePrefix EQU rbp - 208 ; 16 bytes
  params EQU rbp - 224 ; 16 bytes
  tmp3263 EQU rbp - 228 ; 4 bytes
  tmp3261 EQU rbp - 232 ; 4 bytes
  tmp3257 EQU rbp - 236 ; 4 bytes
  tmp3250 EQU rbp - 252 ; 16 bytes
  tmp3249 EQU rbp - 268 ; 16 bytes
  tmp3248 EQU rbp - 284 ; 16 bytes
  tmp3247 EQU rbp - 300 ; 16 bytes
  tmp3246 EQU rbp - 316 ; 16 bytes
  tmp3241 EQU rbp - 320 ; 4 bytes
  tmp3240 EQU rbp - 336 ; 16 bytes
  tmp3239 EQU rbp - 340 ; 4 bytes
  tmp3238 EQU rbp - 344 ; 4 bytes
  tmp3236 EQU rbp - 348 ; 4 bytes
  tmp3235 EQU rbp - 364 ; 16 bytes
  functionProto EQU rbp - 380 ; 16 bytes
  symbolInfo EQU rbp - 396 ; 16 bytes
  callNode EQU rbp - 412 ; 16 bytes
  symbolTable EQU rbp - 428 ; 16 bytes
  dst EQU rbp - 444 ; 16 bytes
  this EQU rbp - 460 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 496

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ callNode ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [functionProto + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3235 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3240 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3246 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3247 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3248 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3249 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3250 + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [namePrefix + Variant_t.type], VARIANT_UNDEFINED
  mov [bodyNode + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [rvName + Variant_t.type], VARIANT_UNDEFINED
  mov [rvFullName + Variant_t.type], VARIANT_UNDEFINED
  mov [thizParamNode + Variant_t.type], VARIANT_UNDEFINED
  mov [paramName + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [paramNameWithPrefix + Variant_t.type], VARIANT_UNDEFINED
  mov [paramInitValueNode + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [newNode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ functionProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ functionProto ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3236 ], 0
  push rdi
  lea  rcx , [ functionProto ]
  lea  rdi , [ tmp3235 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3239 ], 0
  mov [ tmp3240 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3239 ]
  mov [ tmp3240 + Variant_t.value], rax
  lea rcx, [ tmp3235 ]
  lea rdx, [ tmp3240 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3237
  lea  rcx, [ tmp3240 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal181 ]
  lea  r8 , [ tmp3240 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3241 ], 1
  mov eax, dword [ tmp3241 ]
  mov [ tmp3235 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3235 + Variant_t.value], rax
  lea  rcx , [ tmp3240 ]
  lea  rdx , [ tmp3235 ]
  lea  r8 , [ tmp3236 ]
  call  __MOLD_VariantCompareNE
l3237:
  cmp dword [ tmp3236 ], 0
  jz l3242
  lea  rcx, [ tmp3235 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal251 ]
  lea  r8 , [ tmp3235 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3241 ], 1
  mov eax, dword [ tmp3241 ]
  mov [ tmp3240 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3240 + Variant_t.value], rax
  lea rcx, [ tmp3235 ]
  lea rdx, [ tmp3240 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3244
  lea  rcx, [ tmp3235 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3235 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3235 ]
  lea  rdi , [ tmp3240 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3235 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3235 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3249 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3235 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3249 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal250 ]
  lea  rdx , [ tmp3249 ]
  lea  r8 , [ tmp3248 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3240 ]
  lea  rdx , [ tmp3248 ]
  lea  r8 , [ tmp3247 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3246 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal357 ]
  lea  rdx , [ tmp3247 ]
  lea  r8 , [ tmp3246 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3246 ]
  call  __ASTOptimizerInline__debug$0
  jmp l3245
l3244:
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3235 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3235 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3235 ]
  lea  rdi , [ tmp3240 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3240 ]
  lea  rdx , [ __literal226 ]
  lea  r8 , [ tmp3247 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ namePrefix ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal358 ]
  lea  rdx , [ tmp3247 ]
  lea  r8 , [ namePrefix ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3235 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3235 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3239 ], 0
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3235 ]
  lea  rdx , [ tmp3239 ]
  lea  r8 , [ bodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3235 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp3235 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3239 ], 1
  mov [ tmp3250 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3239 ]
  mov [ tmp3250 + Variant_t.value], rax
  lea  rcx , [ tmp3235 ]
  lea  rdx , [ tmp3250 ]
  lea  r8 , [ tmp3240 ]
  call  __MOLD_VariantSub
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp3240 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ rvName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ rvFullName ]
  call __MOLD_VariantDestroy
  lea rcx, [ rvFullName ]
  lea rdx, [ rvName ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ rvName ]
  lea  rdi , [ tmp3240 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3239 ], 0
  mov [ tmp3250 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3239 ]
  mov [ tmp3250 + Variant_t.value], rax
  lea rcx, [ tmp3240 ]
  lea rdx, [ tmp3250 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3251
  lea  rcx, [ rvFullName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ rvName ]
  lea  r8 , [ rvFullName ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ rvFullName ]
  lea  rdi, [ tmp3250 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 35
  call __MOLD_VCall
  pop rdi
l3251:
l3252:
  lea  rcx, [ tmp3240 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ functionProto ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp3240 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3240 ]
  lea  rdi , [ tmp3250 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3239 ], 0
  mov [ tmp3240 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3239 ]
  mov [ tmp3240 + Variant_t.value], rax
  lea rcx, [ tmp3250 ]
  lea rdx, [ tmp3240 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3253
  lea  rcx, [ tmp3250 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3250 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3239 ], 0
  lea  rcx, [ thizParamNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3250 ]
  lea  rdx , [ tmp3239 ]
  lea  r8 , [ thizParamNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ paramName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ __literal233 ]
  lea  r8 , [ paramName ]
  call  __MOLD_VariantStringJoin
  mov dword [ childIdx ], 1
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ paramName ]
  lea  rax , [ thizParamNode ]
  push rax
  call  __ASTOptimizerInline__injectParamInit$0
  add rsp, 8
  jmp l3254
l3253:
  mov dword [ childIdx ], 0
l3254:
;
; -----------------------------
; BEGIN: for keys paramIdx values oneParamName
;
  jmp l3256
l3255:
  lea  rcx, [ paramNameWithPrefix ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ oneParamName ]
  lea  r8 , [ paramNameWithPrefix ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3250 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3250 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ paramInitValueNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3250 ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ paramInitValueNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ paramNameWithPrefix ]
  lea  rax , [ paramInitValueNode ]
  push rax
  call  __ASTOptimizerInline__injectParamInit$0
  add rsp, 8
  mov dword [ tmp3257 ], 1
  mov eax, dword [ childIdx ]
  add eax, dword [ tmp3257 ]
  mov dword [ childIdx ], eax
  ret
l3256:
  lea  rcx , [ params ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ oneParamName ]
  lea  r9 , [ l3255 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys paramIdx values oneParamName
; -----------------------------
;
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l3259
l3258:
  mov dword [ tmp3241 ], 1
  lea  rcx, [ tmp3240 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3240 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3239 ], 42
  mov [ tmp3250 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3239 ]
  mov [ tmp3250 + Variant_t.value], rax
  lea rcx, [ tmp3240 ]
  lea rdx, [ tmp3250 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3260
  mov dword [ tmp3261 ], 1
  lea  rcx, [ tmp3250 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3250 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp3250 ]
  lea rdx, [ __literal17 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3262
  lea  rcx, [ tmp3250 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolTable ]
  lea  rdx , [ __literal149 ]
  lea  r8 , [ tmp3250 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3239 ], 1
  mov [ tmp3240 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3239 ]
  mov [ tmp3240 + Variant_t.value], rax
  lea  rcx , [ tmp3240 ]
  lea  rdx , [ tmp3250 ]
  lea  r8 , [ tmp3261 ]
  call  __MOLD_VariantCompareLT
l3262:
  mov eax, dword [ tmp3261 ]
  mov dword [ tmp3241 ], eax
l3260:
  cmp dword [ tmp3241 ], 0
  jz l3264
  lea  rcx, [ tmp3250 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyNode ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3250 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp3250 ]
  lea  r8 , [ namePrefix ]
  lea  r9 , [ childNode ]
  lea  rdi , [ tmp3240 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline__resolveParamsForInline$0
  pop rdi
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy
  lea rcx, [ newNode ]
  lea rdx, [ tmp3240 ]
  call __MOLD_VariantMove
  lea  rcx , [ dst ]
  lea  rdx , [ newNode ]
  mov eax,  50
  call  __MOLD_SysCall
  lea  rcx, [ tmp3250 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal355 ]
  lea  r8 , [ tmp3250 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3261 ], 1
  mov eax, dword [ tmp3261 ]
  mov [ tmp3235 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3235 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp3250 ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ newNode ]
  lea  r9 , [ tmp3235 ]
  lea  rdi, [ tmp3240 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 46
  call __MOLD_VCall
  pop rdi
l3264:
l3265:
  ret
l3259:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3258 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
  lea  rcx, [ tmp3240 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3240 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3240 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3240 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3240 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3250 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3250 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3250 ]
  lea  rdi , [ tmp3235 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3248 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal360 ]
  lea  rdx , [ tmp3235 ]
  lea  r8 , [ tmp3248 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3247 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3240 ]
  lea  rdx , [ tmp3248 ]
  lea  r8 , [ tmp3247 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3246 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal359 ]
  lea  rdx , [ tmp3247 ]
  lea  r8 , [ tmp3246 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3246 ]
  call  __ASTOptimizerInline__debug$0
  lea  rcx, [ tmp3235 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp3235 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3240 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3235 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3240 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3239 ], 31
  mov [ tmp3235 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3239 ]
  mov [ tmp3235 + Variant_t.value], rax
  lea rcx, [ tmp3240 ]
  lea rdx, [ tmp3235 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3266
  mov dword [ tmp3239 ], 76
  mov [ tmp3235 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3239 ]
  mov [ tmp3235 + Variant_t.value], rax
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3235 ]
  call  __MOLD_VariantStoreAtKey
  jmp l3267
l3266:
  mov dword [ tmp3239 ], 52
  mov [ tmp3235 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3239 ]
  mov [ tmp3235 + Variant_t.value], rax
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3235 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3246 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ namePrefix ]
  lea  rdx , [ rvName ]
  lea  r8 , [ tmp3246 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3246 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ rvFullName ]
  lea  rdi, [ tmp3235 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 21
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ callNode ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp3235 ]
  call  __MOLD_VariantStoreAtKey
l3267:
l3245:
l3242:
l3243:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ functionProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3235 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3240 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3250 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ thizParamNode ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParamName
  lea  rcx, [ paramInitValueNode ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ newNode ]
  call __MOLD_VariantDestroy

  add  rsp, 496
  pop  rbp
  ret

  restore this
  restore dst
  restore symbolTable
  restore callNode
  restore symbolInfo
  restore functionProto
  restore tmp3235
  restore tmp3236
  restore tmp3238
  restore tmp3239
  restore tmp3240
  restore tmp3241
  restore tmp3246
  restore tmp3247
  restore tmp3248
  restore tmp3249
  restore tmp3250
  restore tmp3257
  restore tmp3261
  restore tmp3263
  restore params
  restore namePrefix
  restore bodyNode
  restore children
  restore rvName
  restore rvFullName
  restore childIdx
  restore thizParamNode
  restore paramName
  restore paramIdx
  restore oneParamName
  restore paramNameWithPrefix
  restore paramInitValueNode
  restore childNode
  restore newNode
; -----------------------------------------------
; function __ASTOptimizerInline__processNode_injectInlineFunctions$0
; -----------------------------------------------
__ASTOptimizerInline__processNode_injectInlineFunctions$0:
  ; init frame
  ; ----------
  childNode EQU rbp - 24 ; 16 bytes
  idx EQU rbp - 28 ; 4 bytes
  startIdx EQU rbp - 32 ; 4 bytes
  tmp3282 EQU rbp - 48 ; 16 bytes
  tmp3279 EQU rbp - 52 ; 4 bytes
  tmp3276 EQU rbp - 56 ; 4 bytes
  tmp3272 EQU rbp - 60 ; 4 bytes
  tmp3270 EQU rbp - 64 ; 4 bytes
  tmp3269 EQU rbp - 68 ; 4 bytes
  tmp3268 EQU rbp - 84 ; 16 bytes
  childrenCnt EQU rbp - 100 ; 16 bytes
  children EQU rbp - 116 ; 16 bytes
  opcode EQU rbp - 120 ; 4 bytes
  node EQU rbp - 136 ; 16 bytes
  symbolTable EQU rbp - 152 ; 16 bytes
  dst EQU rbp - 168 ; 16 bytes
  this EQU rbp - 184 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ node ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3268 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3282 + Variant_t.type], VARIANT_UNDEFINED
  mov [childNode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3268 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3268 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3268 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3268 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3270 ], 0
  mov dword [ tmp3269 ], 72
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3269 ]
  jz l3271
  mov dword [ tmp3269 ], 73
  mov dword [ tmp3270 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3269 ]
  setnz byte [ tmp3270 ]
l3271:
  cmp dword [ tmp3270 ], 0
  jz l3273
  mov dword [ tmp3272 ], 1
  mov dword [ tmp3269 ], 40
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3269 ]
  jz l3275
  mov dword [ tmp3269 ], 43
  mov dword [ tmp3272 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3269 ]
  setz byte [ tmp3272 ]
l3275:
  cmp dword [ tmp3272 ], 0
  jz l3277
  mov dword [ startIdx ], 1
  jmp l3278
l3277:
  mov dword [ startIdx ], 0
l3278:
  mov dword [ tmp3269 ], 1
  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3279 ], eax
  mov eax, dword [ startIdx ]
  mov dword [ idx ], eax
;
; -----------------------------
; BEGIN: for idx in startIdx .. tmp3279
;
l3280:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3279 ]
  jge l3281
  lea  rcx, [ childNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ childNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ childNode ]
  call  __ASTOptimizerInline__processNode_injectInlineFunctions$0
  mov eax, dword [ idx ]
  add eax, dword [ tmp3269 ]
  mov dword [ idx ], eax
  jmp l3280
l3281:
;
; END: for idx in startIdx .. tmp3279 step tmp3269
; -----------------------------
;
  lea  rcx, [ tmp3268 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3268 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3279 ], 42
  mov [ tmp3282 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3279 ]
  mov [ tmp3282 + Variant_t.value], rax
  lea rcx, [ tmp3268 ]
  lea rdx, [ tmp3282 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3283
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ node ]
  call  __ASTOptimizerInline__injectFunctionBody$0
l3283:
l3284:
l3273:
l3274:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3268 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3282 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childNode ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore dst
  restore symbolTable
  restore node
  restore opcode
  restore children
  restore childrenCnt
  restore tmp3268
  restore tmp3269
  restore tmp3270
  restore tmp3272
  restore tmp3276
  restore tmp3279
  restore tmp3282
  restore startIdx
  restore idx
  restore childNode
; -----------------------------------------------
; function __ASTOptimizerInline__processNode$0
; -----------------------------------------------
__ASTOptimizerInline__processNode$0:
  ; init frame
  ; ----------
  childIdx EQU rbp - 12 ; 4 bytes
  __cse32 EQU rbp - 28 ; 16 bytes
  oneParam EQU rbp - 44 ; 16 bytes
  callParams EQU rbp - 60 ; 16 bytes
  rvalNode EQU rbp - 76 ; 16 bytes
  childNode EQU rbp - 92 ; 16 bytes
  tmp3307 EQU rbp - 96 ; 4 bytes
  tmp3306 EQU rbp - 100 ; 4 bytes
  tmp3303 EQU rbp - 104 ; 4 bytes
  tmp3297 EQU rbp - 108 ; 4 bytes
  tmp3295 EQU rbp - 112 ; 4 bytes
  tmp3288 EQU rbp - 128 ; 16 bytes
  tmp3287 EQU rbp - 132 ; 4 bytes
  tmp3286 EQU rbp - 136 ; 4 bytes
  tmp3285 EQU rbp - 152 ; 16 bytes
  newChildren EQU rbp - 168 ; 16 bytes
  children EQU rbp - 184 ; 16 bytes
  opcode EQU rbp - 188 ; 4 bytes
  node EQU rbp - 204 ; 16 bytes
  symbolTable EQU rbp - 220 ; 16 bytes
  this EQU rbp - 236 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [newChildren + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3285 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3288 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [rvalNode + Variant_t.type], VARIANT_UNDEFINED
  mov [callParams + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [__cse32 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3285 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3285 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3285 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3285 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3288 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3288 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3288 ]
  lea  rdi , [ tmp3285 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3286 ], 0
  mov [ tmp3288 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3286 ]
  mov [ tmp3288 + Variant_t.value], rax
  lea rcx, [ tmp3285 ]
  lea rdx, [ tmp3288 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3289
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
l3289:
l3290:
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newChildren ]
  call  __MOLD_VariantArrayCreate
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l3292
l3291:
  lea  rcx, [ tmp3288 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3288 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3286 ], 56
  mov [ tmp3285 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3286 ]
  mov [ tmp3285 + Variant_t.value], rax
  lea rcx, [ tmp3288 ]
  lea rdx, [ tmp3285 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3293
  lea  rcx, [ tmp3288 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3288 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3286 ], 1
  lea  rcx, [ rvalNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3288 ]
  lea  rdx , [ tmp3286 ]
  lea  r8 , [ rvalNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ newChildren ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ rvalNode ]
  call  __ASTOptimizerInline__processNode_injectInlineFunctions$0
  jmp l3294
l3293:
  mov dword [ tmp3295 ], 1
  lea  rcx, [ tmp3285 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3285 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3286 ], 42
  mov [ tmp3288 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3286 ]
  mov [ tmp3288 + Variant_t.value], rax
  lea rcx, [ tmp3285 ]
  lea rdx, [ tmp3288 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3296
  lea  rcx, [ tmp3288 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3288 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3286 ], 36
  mov [ tmp3285 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3286 ]
  mov [ tmp3285 + Variant_t.value], rax
  lea  rcx , [ tmp3288 ]
  lea  rdx , [ tmp3285 ]
  lea  r8 , [ tmp3295 ]
  call  __MOLD_VariantCompareEQ
l3296:
  cmp dword [ tmp3295 ], 0
  jz l3298
  lea  rcx, [ callParams ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ callParams ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values oneParam
;
  jmp l3301
l3300:
  lea  rcx , [ this ]
  lea  rdx , [ newChildren ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ oneParam ]
  call  __ASTOptimizerInline__processNode_injectInlineFunctions$0
  ret
l3301:
  lea  rcx , [ callParams ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l3300 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneParam
; -----------------------------
;
  lea  rcx , [ this ]
  lea  rdx , [ newChildren ]
  lea  r8 , [ symbolTable ]
  lea  r9 , [ childNode ]
  call  __ASTOptimizerInline__processNode_injectInlineFunctions$0
  jmp l3299
l3298:
  mov dword [ tmp3297 ], 1
  mov dword [ tmp3286 ], 40
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3286 ]
  jz l3302
  mov dword [ tmp3286 ], 43
  mov dword [ tmp3297 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3286 ]
  setz byte [ tmp3297 ]
l3302:
  cmp dword [ tmp3297 ], 0
  jz l3304
  lea  rcx, [ __cse32 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ __cse32 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3286 ], 1
  push rdi
  lea  rcx , [ __cse32 ]
  lea  rdi , [ tmp3285 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp3285 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3285 + Variant_t.value]
  mov dword [ tmp3306 ], eax
  mov dword [ childIdx ], 1
;
; -----------------------------
; BEGIN: for childIdx in tmp3307 .. tmp3306
;
l3308:
  mov eax, dword [ childIdx ]
  cmp eax, dword [ tmp3306 ]
  jge l3309
  lea  rcx, [ tmp3285 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse32 ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ tmp3285 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ tmp3285 ]
  call  __ASTOptimizerInline__processNode$0
  mov eax, dword [ childIdx ]
  add eax, dword [ tmp3286 ]
  mov dword [ childIdx ], eax
  jmp l3308
l3309:
;
; END: for childIdx in tmp3307 .. tmp3306 step tmp3286
; -----------------------------
;
  jmp l3305
l3304:
  lea  rcx , [ this ]
  lea  rdx , [ symbolTable ]
  lea  r8 , [ childNode ]
  call  __ASTOptimizerInline__processNode$0
l3305:
l3299:
l3294:
  lea  rcx , [ newChildren ]
  lea  rdx , [ childNode ]
  mov eax,  50
  call  __MOLD_SysCall
  ret
l3292:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3291 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ newChildren ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newChildren ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3285 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3288 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ rvalNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ callParams ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParam
  lea  rcx, [ __cse32 ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore node
  restore opcode
  restore children
  restore newChildren
  restore tmp3285
  restore tmp3286
  restore tmp3287
  restore tmp3288
  restore tmp3295
  restore tmp3297
  restore tmp3303
  restore tmp3306
  restore tmp3307
  restore childNode
  restore rvalNode
  restore callParams
  restore oneParam
  restore __cse32
  restore childIdx
; -----------------------------------------------
; function __ASTOptimizerInline_processNode$0
; -----------------------------------------------
__ASTOptimizerInline_processNode$0:
  ; init frame
  ; ----------
  tmp3310 EQU rbp - 24 ; 16 bytes
  node EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp3310 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3310 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3310 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp3310 ]
  lea  r8 , [ node ]
  call  __ASTOptimizerInline__processNode$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3310 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore node
  restore tmp3310
; -----------------------------------------------
; function __ASTTypeCast_constructor$0
; -----------------------------------------------
__ASTTypeCast_constructor$0:
  ; init frame
  ; ----------
  app EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore app
; -----------------------------------------------
; function __ASTTypeCast__debug$0
; -----------------------------------------------
__ASTTypeCast__debug$0:
  ; init frame
  ; ----------
  tmp3312 EQU rbp - 12 ; 4 bytes
  tmp3311 EQU rbp - 16 ; 4 bytes
  msg EQU rbp - 32 ; 16 bytes
  this EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----
  mov dword [ tmp3312 ], 1
  xor  eax, eax
  or   dword [ DEBUG_AST_OPTIMIZER ], eax
  setz cl
  or   dword [ tmp3312 ], eax
  setz al
  xor  al, cl
  jnz l3313
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal361 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l3313:
l3314:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3311
  restore tmp3312
; -----------------------------------------------
; function __ASTTypeCast__processNode$0
; -----------------------------------------------
__ASTTypeCast__processNode$0:
  ; init frame
  ; ----------
  childOpcode EQU rbp - 12 ; 4 bytes
  childNode EQU rbp - 28 ; 16 bytes
  idx EQU rbp - 32 ; 4 bytes
  astTypeParams EQU rbp - 48 ; 16 bytes
  funcProto EQU rbp - 64 ; 16 bytes
  yType EQU rbp - 68 ; 4 bytes
  xType EQU rbp - 72 ; 4 bytes
  astDataTypeRight EQU rbp - 76 ; 4 bytes
  astDataTypeLeft EQU rbp - 80 ; 4 bytes
  y EQU rbp - 96 ; 16 bytes
  x EQU rbp - 112 ; 16 bytes
  oneChild EQU rbp - 128 ; 16 bytes
  childrenCnt EQU rbp - 144 ; 16 bytes
  children EQU rbp - 160 ; 16 bytes
  tmp3399 EQU rbp - 164 ; 4 bytes
  tmp3386 EQU rbp - 168 ; 4 bytes
  tmp3385 EQU rbp - 172 ; 4 bytes
  tmp3382 EQU rbp - 176 ; 4 bytes
  tmp3379 EQU rbp - 180 ; 4 bytes
  tmp3376 EQU rbp - 184 ; 4 bytes
  tmp3360 EQU rbp - 200 ; 16 bytes
  tmp3359 EQU rbp - 216 ; 16 bytes
  tmp3358 EQU rbp - 232 ; 16 bytes
  tmp3357 EQU rbp - 248 ; 16 bytes
  tmp3356 EQU rbp - 264 ; 16 bytes
  tmp3355 EQU rbp - 280 ; 16 bytes
  tmp3354 EQU rbp - 296 ; 16 bytes
  tmp3353 EQU rbp - 312 ; 16 bytes
  tmp3346 EQU rbp - 316 ; 4 bytes
  tmp3344 EQU rbp - 320 ; 4 bytes
  tmp3342 EQU rbp - 324 ; 4 bytes
  tmp3340 EQU rbp - 328 ; 4 bytes
  tmp3336 EQU rbp - 332 ; 4 bytes
  tmp3333 EQU rbp - 336 ; 4 bytes
  tmp3329 EQU rbp - 340 ; 4 bytes
  tmp3326 EQU rbp - 356 ; 16 bytes
  tmp3325 EQU rbp - 360 ; 4 bytes
  tmp3322 EQU rbp - 364 ; 4 bytes
  tmp3317 EQU rbp - 368 ; 4 bytes
  tmp3316 EQU rbp - 372 ; 4 bytes
  tmp3315 EQU rbp - 388 ; 16 bytes
  opcode EQU rbp - 392 ; 4 bytes
  node EQU rbp - 408 ; 16 bytes
  this EQU rbp - 424 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 464

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [tmp3315 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3326 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3353 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3354 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3355 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3356 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3357 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3358 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3359 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3360 + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [funcProto + Variant_t.type], VARIANT_UNDEFINED
  mov [astTypeParams + Variant_t.type], VARIANT_UNDEFINED
  mov [childNode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3315 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3315 + Variant_t.value]
  mov dword [ opcode ], eax
  mov dword [ tmp3316 ], 75
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jz l3318
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l3321
l3320:
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  call  __ASTTypeCast__processNode$0
  ret
l3321:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l3320 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  mov dword [ tmp3316 ], 56
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jnz l3323
  mov dword [ tmp3316 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3316 ], 1
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3316 ], 52
  mov [ tmp3326 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3316 ]
  mov [ tmp3326 + Variant_t.value], rax
  lea rcx, [ tmp3315 ]
  lea rdx, [ tmp3326 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3327
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp3316 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp3316 ]
  mov dword [ astDataTypeLeft ], eax
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp3316 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp3316 ]
  mov dword [ astDataTypeRight ], eax
  mov eax, dword [ astDataTypeLeft ]
  cmp eax, dword [ astDataTypeRight ]
  jz l3330
  mov dword [ tmp3316 ], 1
  push rdi
  lea  rcx , [ y ]
  lea  rdx , [ astDataTypeLeft ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
l3330:
l3331:
  jmp l3328
l3327:
  mov dword [ tmp3329 ], 1
  lea  rcx, [ tmp3326 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3316 ], 54
  mov [ tmp3315 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3316 ]
  mov [ tmp3315 + Variant_t.value], rax
  lea rcx, [ tmp3326 ]
  lea rdx, [ tmp3315 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3332
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3316 ], 55
  mov [ tmp3326 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3316 ]
  mov [ tmp3326 + Variant_t.value], rax
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3326 ]
  lea  r8 , [ tmp3329 ]
  call  __MOLD_VariantCompareEQ
l3332:
  cmp dword [ tmp3329 ], 0
  jz l3334
  mov dword [ tmp3316 ], 1
  mov dword [ tmp3336 ], -1
  push rdi
  lea  rcx , [ y ]
  lea  rdx , [ tmp3336 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
l3334:
l3335:
l3328:
  jmp l3324
l3323:
  mov dword [ tmp3325 ], 1
  mov dword [ tmp3316 ], 58
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jz l3337
  mov dword [ tmp3329 ], 1
  mov dword [ tmp3316 ], 60
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jz l3338
  mov dword [ tmp3333 ], 1
  mov dword [ tmp3316 ], 59
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jz l3339
  mov dword [ tmp3340 ], 1
  mov dword [ tmp3316 ], 61
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jz l3341
  mov dword [ tmp3342 ], 1
  mov dword [ tmp3316 ], 64
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jz l3343
  mov dword [ tmp3344 ], 0
  mov dword [ tmp3316 ], 66
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jl l3345
  mov dword [ tmp3316 ], 71
  mov dword [ tmp3344 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3316 ]
  setle byte [ tmp3344 ]
l3345:
  mov eax, dword [ tmp3344 ]
  mov dword [ tmp3342 ], eax
l3343:
  mov eax, dword [ tmp3342 ]
  mov dword [ tmp3340 ], eax
l3341:
  mov eax, dword [ tmp3340 ]
  mov dword [ tmp3333 ], eax
l3339:
  mov eax, dword [ tmp3333 ]
  mov dword [ tmp3329 ], eax
l3338:
  mov eax, dword [ tmp3329 ]
  mov dword [ tmp3325 ], eax
l3337:
  cmp dword [ tmp3325 ], 0
  jz l3347
  mov dword [ tmp3316 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3316 ], 1
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp3316 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp3316 ]
  mov dword [ xType ], eax
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp3316 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp3316 ]
  mov dword [ yType ], eax
  mov eax, dword [ xType ]
  cmp eax, dword [ yType ]
  jz l3349
  mov dword [ tmp3316 ], -1
  mov eax, dword [ xType ]
  cmp eax, dword [ tmp3316 ]
  jnz l3351
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov [ tmp3357 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ xType ]
  mov [ tmp3357 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp3357 ]
  lea  rdi , [ tmp3315 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov [ tmp3360 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ yType ]
  mov [ tmp3360 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp3360 ]
  lea  rdi , [ tmp3357 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3359 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3357 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3359 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3358 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal363 ]
  lea  rdx , [ tmp3359 ]
  lea  r8 , [ tmp3358 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3356 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3358 ]
  lea  r8 , [ tmp3356 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3355 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal250 ]
  lea  rdx , [ tmp3356 ]
  lea  r8 , [ tmp3355 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3354 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3326 ]
  lea  rdx , [ tmp3355 ]
  lea  r8 , [ tmp3354 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3353 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal362 ]
  lea  rdx , [ tmp3354 ]
  lea  r8 , [ tmp3353 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3353 ]
  call  __ASTTypeCast__debug$0
  mov dword [ tmp3316 ], 1
  push rdi
  lea  rcx , [ y ]
  lea  rdx , [ xType ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3352
l3351:
  mov dword [ tmp3316 ], -1
  mov eax, dword [ yType ]
  cmp eax, dword [ tmp3316 ]
  jnz l3361
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov [ tmp3357 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ xType ]
  mov [ tmp3357 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp3357 ]
  lea  rdi , [ tmp3315 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov [ tmp3360 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ yType ]
  mov [ tmp3360 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp3360 ]
  lea  rdi , [ tmp3357 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3359 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3357 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp3359 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3358 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal363 ]
  lea  rdx , [ tmp3359 ]
  lea  r8 , [ tmp3358 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3356 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3358 ]
  lea  r8 , [ tmp3356 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3355 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal250 ]
  lea  rdx , [ tmp3356 ]
  lea  r8 , [ tmp3355 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3354 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3326 ]
  lea  rdx , [ tmp3355 ]
  lea  r8 , [ tmp3354 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3353 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal362 ]
  lea  rdx , [ tmp3354 ]
  lea  r8 , [ tmp3353 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp3353 ]
  call  __ASTTypeCast__debug$0
  mov dword [ tmp3316 ], 0
  push rdi
  lea  rcx , [ x ]
  lea  rdx , [ yType ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3362
l3361:
  lea  rcx , [ __literal364 ]
  mov eax,  41
  call  __MOLD_SysCall
l3362:
l3352:
l3349:
l3350:
  jmp l3348
l3347:
  mov dword [ tmp3329 ], 1
  mov dword [ tmp3316 ], 72
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jz l3363
  mov dword [ tmp3316 ], 73
  mov dword [ tmp3329 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3316 ]
  setz byte [ tmp3329 ]
l3363:
  cmp dword [ tmp3329 ], 0
  jz l3364
  mov dword [ tmp3316 ], 0
  mov dword [ tmp3336 ], 0
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3336 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3336 ], 5
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3336 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3316 ], 1
  mov dword [ tmp3336 ], 1
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3336 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3336 ], 5
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3336 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3365
l3364:
  mov dword [ tmp3316 ], 65
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jnz l3366
  mov dword [ tmp3316 ], 0
  mov dword [ tmp3336 ], 0
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3336 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3336 ], 4
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3336 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3316 ], 1
  mov dword [ tmp3336 ], 1
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3336 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3336 ], 4
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3336 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3367
l3366:
  mov dword [ tmp3316 ], 54
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jnz l3368
  mov dword [ tmp3316 ], 1
  mov dword [ tmp3336 ], 1
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3336 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3336 ], 1
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3336 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3369
l3368:
  mov dword [ tmp3316 ], 55
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jnz l3370
  mov dword [ tmp3316 ], 1
  mov dword [ tmp3336 ], 1
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3336 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3336 ], 4
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3336 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3371
l3370:
  mov dword [ tmp3316 ], 44
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jnz l3372
  mov dword [ tmp3316 ], 1
  mov dword [ tmp3336 ], 1
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3336 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3336 ], 1
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3336 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3316 ], 2
  mov dword [ tmp3336 ], 2
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3336 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3336 ], 1
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3336 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3316 ], 3
  mov dword [ tmp3336 ], 3
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3336 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3336 ], 1
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3336 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3373
l3372:
  mov dword [ tmp3316 ], 50
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jnz l3374
  mov dword [ tmp3316 ], 0
  mov dword [ tmp3336 ], 0
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3336 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3336 ], 1
  push rdi
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ tmp3336 ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ tmp3316 ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3375
l3374:
  mov dword [ tmp3316 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jnz l3377
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3315 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ astTypeParams ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal234 ]
  lea  r8 , [ astTypeParams ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ astTypeParams ]
  lea  rdi , [ tmp3326 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3316 ], 0
  mov [ tmp3315 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3316 ]
  mov [ tmp3315 + Variant_t.value], rax
  lea rcx, [ tmp3326 ]
  lea rdx, [ tmp3315 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3380
  mov dword [ tmp3316 ], 1
  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3336 ], eax
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp3382 .. tmp3336
;
l3383:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3336 ]
  jge l3384
  lea  rcx, [ tmp3326 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3357 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ astTypeParams ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3357 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp3357 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3357 + Variant_t.value]
  mov dword [ tmp3385 ], eax
  push rdi
  lea  rcx , [ tmp3326 ]
  lea  rdx , [ tmp3385 ]
  lea  rdi , [ tmp3315 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp3316 ]
  mov dword [ idx ], eax
  jmp l3383
l3384:
;
; END: for idx in tmp3382 .. tmp3336 step tmp3316
; -----------------------------
;
  jmp l3381
l3380:
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp3315 ]
  lea rdx, [ __literal17 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3387
  mov dword [ tmp3382 ], 1
  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3336 ], eax
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp3316 .. tmp3336
;
l3389:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3336 ]
  jge l3390
  lea  rcx, [ tmp3326 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3385 ], -1
  push rdi
  lea  rcx , [ tmp3326 ]
  lea  rdx , [ tmp3385 ]
  lea  rdi , [ tmp3315 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp3382 ]
  mov dword [ idx ], eax
  jmp l3389
l3390:
;
; END: for idx in tmp3316 .. tmp3336 step tmp3382
; -----------------------------
;
l3387:
l3388:
l3381:
  jmp l3378
l3377:
  mov dword [ tmp3379 ], 1
  mov dword [ tmp3316 ], 36
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3316 ]
  jz l3391
  mov dword [ tmp3316 ], 37
  mov dword [ tmp3379 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3316 ]
  setz byte [ tmp3379 ]
l3391:
  cmp dword [ tmp3379 ], 0
  jz l3392
  mov dword [ tmp3316 ], 1
  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3336 ], eax
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp3382 .. tmp3336
;
l3394:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3336 ]
  jge l3395
  lea  rcx, [ tmp3326 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3326 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3385 ], -1
  push rdi
  lea  rcx , [ tmp3326 ]
  lea  rdx , [ tmp3385 ]
  lea  rdi , [ tmp3315 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp3316 ]
  mov dword [ idx ], eax
  jmp l3394
l3395:
;
; END: for idx in tmp3382 .. tmp3336 step tmp3316
; -----------------------------
;
  jmp l3393
l3392:
  mov dword [ tmp3382 ], 1
  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3336 ], eax
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp3316 .. tmp3336
;
l3396:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3336 ]
  jge l3397
  lea  rcx, [ childNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ childNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3315 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3315 + Variant_t.value]
  mov dword [ childOpcode ], eax
  mov dword [ tmp3386 ], 0
  mov dword [ tmp3385 ], 66
  mov eax, dword [ childOpcode ]
  cmp eax, dword [ tmp3385 ]
  jl l3398
  mov dword [ tmp3385 ], 74
  mov dword [ tmp3386 ], 0
  mov ecx, dword [ childOpcode ]
  cmp ecx, dword [ tmp3385 ]
  setle byte [ tmp3386 ]
l3398:
  cmp dword [ tmp3386 ], 0
  jz l3400
  mov dword [ tmp3385 ], 5
  push rdi
  lea  rcx , [ childNode ]
  lea  rdx , [ tmp3385 ]
  lea  rdi , [ tmp3315 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_TypeCast
  pop rdi
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3315 ]
  call  __MOLD_VariantStoreAtIndex_int32
l3400:
l3401:
  mov eax, dword [ idx ]
  add eax, dword [ tmp3382 ]
  mov dword [ idx ], eax
  jmp l3396
l3397:
;
; END: for idx in tmp3316 .. tmp3336 step tmp3382
; -----------------------------
;
l3393:
l3378:
l3375:
l3373:
l3371:
l3369:
l3367:
l3365:
l3348:
l3324:
l3318:
l3319:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3315 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3326 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3357 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3360 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astTypeParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childNode ]
  call __MOLD_VariantDestroy

  add  rsp, 464
  pop  rbp
  ret

  restore this
  restore node
  restore opcode
  restore tmp3315
  restore tmp3316
  restore tmp3317
  restore tmp3322
  restore tmp3325
  restore tmp3326
  restore tmp3329
  restore tmp3333
  restore tmp3336
  restore tmp3340
  restore tmp3342
  restore tmp3344
  restore tmp3346
  restore tmp3353
  restore tmp3354
  restore tmp3355
  restore tmp3356
  restore tmp3357
  restore tmp3358
  restore tmp3359
  restore tmp3360
  restore tmp3376
  restore tmp3379
  restore tmp3382
  restore tmp3385
  restore tmp3386
  restore tmp3399
  restore children
  restore childrenCnt
  restore oneChild
  restore x
  restore y
  restore astDataTypeLeft
  restore astDataTypeRight
  restore xType
  restore yType
  restore funcProto
  restore astTypeParams
  restore idx
  restore childNode
  restore childOpcode
; -----------------------------------------------
; function __ASTTypeCast_processNode$0
; -----------------------------------------------
__ASTTypeCast_processNode$0:
  ; init frame
  ; ----------
  node EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  call  __ASTTypeCast__processNode$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore node
; -----------------------------------------------
; function __MIRCode_constructor$0
; -----------------------------------------------
__MIRCode_constructor$0:
  ; init frame
  ; ----------
  tmp3403 EQU rbp - 12 ; 4 bytes
  tmp3402 EQU rbp - 28 ; 16 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3402 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3402 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3403 ], 0
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3403 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3402 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal207 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3403 ], 0
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3403 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal367 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3402 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal368 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3403 ], 0
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3403 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal369 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3402 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal370 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3403 ], 0
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3403 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal371 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3403 ], 0
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3403 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal372 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3403 ], -1
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3403 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal373 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3403 ], -1
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3403 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3402 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3402 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal376 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3403 ], 0
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3403 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal377 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3402 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3402 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3403 ], 0
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3403 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3402 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal381 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3403 ], 0
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3403 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3402 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal383 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3403 ], 0
  mov [ tmp3402 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3403 ]
  mov [ tmp3402 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ tmp3402 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3402 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3402
  restore tmp3403
; -----------------------------------------------
; function __MIRCode_beginProc$0
; -----------------------------------------------
__MIRCode_beginProc$0:
  ; init frame
  ; ----------
  tmp3408 EQU rbp - 24 ; 16 bytes
  tmp3407 EQU rbp - 40 ; 16 bytes
  tmp3406 EQU rbp - 44 ; 4 bytes
  tmp3405 EQU rbp - 60 ; 16 bytes
  tmp3404 EQU rbp - 76 ; 16 bytes
  rv EQU rbp - 92 ; 16 bytes
  paramsCnt EQU rbp - 108 ; 16 bytes
  params EQU rbp - 124 ; 16 bytes
  name EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ params ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ paramsCnt ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ rv ], xmm0
  mov [tmp3404 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3405 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3407 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3408 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3404 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal370 ]
  lea  r8 , [ tmp3404 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3405 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal371 ]
  lea  r8 , [ tmp3405 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3405 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3405 + Variant_t.value]
  mov dword [ tmp3406 ], eax
  lea  rcx, [ tmp3405 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3405 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp3407 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3407 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3405 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3407 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3407 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3407 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3405 ]
  lea  rdx , [ __literal385 ]
  lea  r8 , [ tmp3407 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3407 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3407 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3405 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp3407 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3407 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3407 ]
  lea rdx, [ paramsCnt ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3405 ]
  lea  rdx , [ __literal386 ]
  lea  r8 , [ tmp3407 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3407 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3407 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3405 ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp3407 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ tmp3404 ]
  lea  rdx , [ tmp3406 ]
  lea  r8 , [ tmp3405 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3406 ], -1
  mov [ tmp3405 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3406 ]
  mov [ tmp3405 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal372 ]
  lea  r8 , [ tmp3405 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3406 ], -1
  mov [ tmp3405 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3406 ]
  mov [ tmp3405 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal373 ]
  lea  r8 , [ tmp3405 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3404 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3405 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3407 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3408 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore name
  restore params
  restore paramsCnt
  restore rv
  restore tmp3404
  restore tmp3405
  restore tmp3406
  restore tmp3407
  restore tmp3408
; -----------------------------------------------
; function __MIRCode_endProc$0
; -----------------------------------------------
__MIRCode_endProc$0:
  ; init frame
  ; ----------
  tmp3412 EQU rbp - 24 ; 16 bytes
  tmp3411 EQU rbp - 28 ; 4 bytes
  tmp3410 EQU rbp - 44 ; 16 bytes
  tmp3409 EQU rbp - 60 ; 16 bytes
  __cse34 EQU rbp - 76 ; 16 bytes
  __cse33 EQU rbp - 92 ; 16 bytes
  proto EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [proto + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse33 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse34 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3409 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3410 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3412 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse34 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal371 ]
  lea  r8 , [ __cse34 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3410 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal370 ]
  lea  r8 , [ tmp3410 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ __cse34 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ __cse34 + Variant_t.value]
  mov dword [ tmp3411 ], eax
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3410 ]
  lea  rdx , [ tmp3411 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ __cse33 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ __cse33 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ proto ]
  lea  rdx , [ __literal387 ]
  lea  r8 , [ __cse33 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3410 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal373 ]
  lea  r8 , [ tmp3410 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3411 ], 1
  mov [ tmp3412 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3411 ]
  mov [ tmp3412 + Variant_t.value], rax
  lea  rcx , [ tmp3410 ]
  lea  rdx , [ tmp3412 ]
  lea  r8 , [ tmp3409 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ proto ]
  lea  rdx , [ __literal388 ]
  lea  r8 , [ tmp3409 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3412 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal385 ]
  lea  r8 , [ tmp3412 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ __cse33 ]
  lea  rdx , [ tmp3412 ]
  lea  r8 , [ tmp3409 ]
  call  __MOLD_VariantSub
  lea  rcx , [ proto ]
  lea  rdx , [ __literal389 ]
  lea  r8 , [ tmp3409 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3411 ], 1
  mov [ tmp3412 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3411 ]
  mov [ tmp3412 + Variant_t.value], rax
  lea  rcx , [ __cse34 ]
  lea  rdx , [ tmp3412 ]
  lea  r8 , [ tmp3409 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal371 ]
  lea  r8 , [ tmp3409 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse33 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse34 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3409 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3410 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3412 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore proto
  restore __cse33
  restore __cse34
  restore tmp3409
  restore tmp3410
  restore tmp3411
  restore tmp3412
; -----------------------------------------------
; function __MIRCode_resolveLabel$0
; -----------------------------------------------
__MIRCode_resolveLabel$0:
  ; init frame
  ; ----------
  tmp3415 EQU rbp - 12 ; 4 bytes
  tmp3414 EQU rbp - 28 ; 16 bytes
  tmp3413 EQU rbp - 44 ; 16 bytes
  rv EQU rdi
  labelId EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  mov [tmp3413 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3414 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3414 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal207 ]
  lea  r8 , [ tmp3414 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ labelId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ labelId + Variant_t.value]
  mov dword [ tmp3415 ], eax
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3414 ]
  lea  rdx , [ tmp3415 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3413 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3414 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore labelId
  restore rv
  restore tmp3413
  restore tmp3414
  restore tmp3415
; -----------------------------------------------
; function __MIRCode__resolveJmps$0
; -----------------------------------------------
__MIRCode__resolveJmps$0:
  ; init frame
  ; ----------
  targetIp EQU rbp - 12 ; 4 bytes
  labelId EQU rbp - 16 ; 4 bytes
  sourceIp EQU rbp - 20 ; 4 bytes
  idx EQU rbp - 24 ; 4 bytes
  tmp3427 EQU rbp - 28 ; 4 bytes
  tmp3424 EQU rbp - 32 ; 4 bytes
  tmp3423 EQU rbp - 48 ; 16 bytes
  tmp3422 EQU rbp - 52 ; 4 bytes
  tmp3419 EQU rbp - 56 ; 4 bytes
  tmp3418 EQU rbp - 60 ; 4 bytes
  tmp3417 EQU rbp - 64 ; 4 bytes
  tmp3416 EQU rbp - 80 ; 16 bytes
  code EQU rbp - 96 ; 16 bytes
  labels EQU rbp - 112 ; 16 bytes
  newUnresolvedJmpsCnt EQU rbp - 116 ; 4 bytes
  newUnresolvedJmps EQU rbp - 132 ; 16 bytes
  unresolvedJmpsCnt EQU rbp - 148 ; 16 bytes
  unresolvedJmps EQU rbp - 164 ; 16 bytes
  this EQU rbp - 180 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [unresolvedJmps + Variant_t.type], VARIANT_UNDEFINED
  mov [unresolvedJmpsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [newUnresolvedJmps + Variant_t.type], VARIANT_UNDEFINED
  mov [labels + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3416 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3423 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ unresolvedJmps ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal383 ]
  lea  r8 , [ unresolvedJmps ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ unresolvedJmpsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ unresolvedJmpsCnt ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newUnresolvedJmps ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newUnresolvedJmps ]
  call  __MOLD_VariantArrayCreate
  mov dword [ newUnresolvedJmpsCnt ], 0
  lea  rcx, [ labels ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal207 ]
  lea  r8 , [ labels ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3417 ], 1
  cmp [ unresolvedJmpsCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ unresolvedJmpsCnt + Variant_t.value]
  mov dword [ tmp3418 ], eax
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp3419 .. tmp3418
;
l3420:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3418 ]
  jge l3421
  lea  rcx, [ tmp3416 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ unresolvedJmps ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3416 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp3416 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3416 + Variant_t.value]
  mov dword [ sourceIp ], eax
  lea  rcx, [ tmp3423 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ code ]
  lea  rdx , [ sourceIp ]
  lea  r8 , [ tmp3423 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3422 ], 1
  lea  rcx, [ tmp3416 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3423 ]
  lea  rdx , [ tmp3422 ]
  lea  r8 , [ tmp3416 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp3416 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3416 + Variant_t.value]
  mov dword [ labelId ], eax
  lea  rcx, [ tmp3416 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ labels ]
  lea  rdx , [ labelId ]
  lea  r8 , [ tmp3416 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp3416 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3416 + Variant_t.value]
  mov dword [ targetIp ], eax
  mov dword [ tmp3422 ], 0
  mov eax, dword [ targetIp ]
  cmp eax, dword [ tmp3422 ]
  jl l3425
  lea  rcx, [ tmp3416 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ code ]
  lea  rdx , [ sourceIp ]
  lea  r8 , [ tmp3416 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3422 ], 1
  mov [ tmp3423 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ targetIp ]
  mov [ tmp3423 + Variant_t.value], rax
  lea  rcx , [ tmp3416 ]
  lea  rdx , [ tmp3422 ]
  lea  r8 , [ tmp3423 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l3426
l3425:
  mov [ tmp3423 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ sourceIp ]
  mov [ tmp3423 + Variant_t.value], rax
  lea  rcx , [ newUnresolvedJmps ]
  lea  rdx , [ newUnresolvedJmpsCnt ]
  lea  r8 , [ tmp3423 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3427 ], 1
  mov eax, dword [ newUnresolvedJmpsCnt ]
  add eax, dword [ tmp3427 ]
  mov dword [ newUnresolvedJmpsCnt ], eax
l3426:
  mov eax, dword [ idx ]
  add eax, dword [ tmp3417 ]
  mov dword [ idx ], eax
  jmp l3420
l3421:
;
; END: for idx in tmp3419 .. tmp3418 step tmp3417
; -----------------------------
;
  lea  rcx , [ this ]
  lea  rdx , [ __literal383 ]
  lea  r8 , [ newUnresolvedJmps ]
  call  __MOLD_VariantStoreAtKey
  mov [ tmp3423 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ newUnresolvedJmpsCnt ]
  mov [ tmp3423 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ tmp3423 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ unresolvedJmps ]
  call __MOLD_VariantDestroy
  lea  rcx, [ unresolvedJmpsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newUnresolvedJmps ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labels ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3416 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3423 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore unresolvedJmps
  restore unresolvedJmpsCnt
  restore newUnresolvedJmps
  restore newUnresolvedJmpsCnt
  restore labels
  restore code
  restore tmp3416
  restore tmp3417
  restore tmp3418
  restore tmp3419
  restore tmp3422
  restore tmp3423
  restore tmp3424
  restore tmp3427
  restore idx
  restore sourceIp
  restore labelId
  restore targetIp
; -----------------------------------------------
; function __MIRCode_comment$0
; -----------------------------------------------
__MIRCode_comment$0:
  ; init frame
  ; ----------
  tmp3433 EQU rbp - 24 ; 16 bytes
  tmp3432 EQU rbp - 40 ; 16 bytes
  tmp3431 EQU rbp - 56 ; 16 bytes
  tmp3430 EQU rbp - 60 ; 4 bytes
  tmp3429 EQU rbp - 76 ; 16 bytes
  tmp3428 EQU rbp - 92 ; 16 bytes
  msg EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp3428 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3429 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3431 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3432 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3433 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3428 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal381 ]
  lea  r8 , [ tmp3428 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3429 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3429 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3429 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3429 + Variant_t.value]
  mov dword [ tmp3430 ], eax
  lea  rcx, [ tmp3429 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3429 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3431 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3431 + Variant_t.value], 0
  lea  rcx, [ tmp3432 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3432 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3429 ]
  lea  rdx , [ tmp3431 ]
  lea  r8 , [ tmp3432 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3431 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3431 + Variant_t.value], 1
  lea  rcx, [ tmp3432 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3432 ]
  lea rdx, [ msg ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3429 ]
  lea  rdx , [ tmp3431 ]
  lea  r8 , [ tmp3432 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ tmp3428 ]
  lea  rdx , [ tmp3430 ]
  lea  r8 , [ tmp3429 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3428 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3428 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3430 ], 1
  mov [ tmp3432 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3430 ]
  mov [ tmp3432 + Variant_t.value], rax
  lea  rcx , [ tmp3428 ]
  lea  rdx , [ tmp3432 ]
  lea  r8 , [ tmp3429 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp3429 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3428 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3429 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3431 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3432 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3433 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3428
  restore tmp3429
  restore tmp3430
  restore tmp3431
  restore tmp3432
  restore tmp3433
; -----------------------------------------------
; function __MIRCode_push0$0
; -----------------------------------------------
__MIRCode_push0$0:
  ; init frame
  ; ----------
  tmp3438 EQU rbp - 24 ; 16 bytes
  tmp3437 EQU rbp - 40 ; 16 bytes
  tmp3436 EQU rbp - 44 ; 4 bytes
  tmp3435 EQU rbp - 60 ; 16 bytes
  tmp3434 EQU rbp - 76 ; 16 bytes
  op EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  mov [tmp3434 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3435 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3437 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3438 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3434 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp3434 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3435 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3435 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3435 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3435 + Variant_t.value]
  mov dword [ tmp3436 ], eax
  lea  rcx, [ tmp3435 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3435 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3437 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3437 + Variant_t.value], 0
  lea  rcx, [ tmp3438 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3438 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3435 ]
  lea  rdx , [ tmp3437 ]
  lea  r8 , [ tmp3438 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ tmp3434 ]
  lea  rdx , [ tmp3436 ]
  lea  r8 , [ tmp3435 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3434 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3434 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3436 ], 1
  mov [ tmp3438 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3436 ]
  mov [ tmp3438 + Variant_t.value], rax
  lea  rcx , [ tmp3434 ]
  lea  rdx , [ tmp3438 ]
  lea  r8 , [ tmp3435 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3435 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3434 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3435 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3437 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3438 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore op
  restore tmp3434
  restore tmp3435
  restore tmp3436
  restore tmp3437
  restore tmp3438
; -----------------------------------------------
; function __MIRCode_push1$0
; -----------------------------------------------
__MIRCode_push1$0:
  ; init frame
  ; ----------
  tmp3443 EQU rbp - 24 ; 16 bytes
  tmp3442 EQU rbp - 40 ; 16 bytes
  tmp3441 EQU rbp - 44 ; 4 bytes
  tmp3440 EQU rbp - 60 ; 16 bytes
  tmp3439 EQU rbp - 76 ; 16 bytes
  arg EQU rbp - 92 ; 16 bytes
  op EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ arg ], xmm0
  mov [tmp3439 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3440 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3442 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3443 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3439 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp3439 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3440 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3440 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3440 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3440 + Variant_t.value]
  mov dword [ tmp3441 ], eax
  lea  rcx, [ tmp3440 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3440 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3442 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3442 + Variant_t.value], 0
  lea  rcx, [ tmp3443 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3443 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3440 ]
  lea  rdx , [ tmp3442 ]
  lea  r8 , [ tmp3443 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3442 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3442 + Variant_t.value], 1
  lea  rcx, [ tmp3443 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3443 ]
  lea rdx, [ arg ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3440 ]
  lea  rdx , [ tmp3442 ]
  lea  r8 , [ tmp3443 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ tmp3439 ]
  lea  rdx , [ tmp3441 ]
  lea  r8 , [ tmp3440 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3439 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3439 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3441 ], 1
  mov [ tmp3443 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3441 ]
  mov [ tmp3443 + Variant_t.value], rax
  lea  rcx , [ tmp3439 ]
  lea  rdx , [ tmp3443 ]
  lea  r8 , [ tmp3440 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3440 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3439 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3440 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3442 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3443 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore op
  restore arg
  restore tmp3439
  restore tmp3440
  restore tmp3441
  restore tmp3442
  restore tmp3443
; -----------------------------------------------
; function __MIRCode_push2$0
; -----------------------------------------------
__MIRCode_push2$0:
  ; init frame
  ; ----------
  tmp3448 EQU rbp - 24 ; 16 bytes
  tmp3447 EQU rbp - 40 ; 16 bytes
  tmp3446 EQU rbp - 44 ; 4 bytes
  tmp3445 EQU rbp - 60 ; 16 bytes
  tmp3444 EQU rbp - 76 ; 16 bytes
  arg2 EQU rbp - 92 ; 16 bytes
  arg1 EQU rbp - 108 ; 16 bytes
  op EQU rbp - 124 ; 16 bytes
  this EQU rbp - 140 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ arg1 ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ arg2 ], xmm0
  mov [tmp3444 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3445 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3447 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3448 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3444 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp3444 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3445 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3445 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3445 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3445 + Variant_t.value]
  mov dword [ tmp3446 ], eax
  lea  rcx, [ tmp3445 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3445 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3447 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3447 + Variant_t.value], 0
  lea  rcx, [ tmp3448 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3448 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3445 ]
  lea  rdx , [ tmp3447 ]
  lea  r8 , [ tmp3448 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3447 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3447 + Variant_t.value], 1
  lea  rcx, [ tmp3448 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3448 ]
  lea rdx, [ arg1 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3445 ]
  lea  rdx , [ tmp3447 ]
  lea  r8 , [ tmp3448 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3447 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3447 + Variant_t.value], 2
  lea  rcx, [ tmp3448 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3448 ]
  lea rdx, [ arg2 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3445 ]
  lea  rdx , [ tmp3447 ]
  lea  r8 , [ tmp3448 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ tmp3444 ]
  lea  rdx , [ tmp3446 ]
  lea  r8 , [ tmp3445 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3444 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3444 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3446 ], 1
  mov [ tmp3448 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3446 ]
  mov [ tmp3448 + Variant_t.value], rax
  lea  rcx , [ tmp3444 ]
  lea  rdx , [ tmp3448 ]
  lea  r8 , [ tmp3445 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3445 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3444 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3445 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3447 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3448 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore op
  restore arg1
  restore arg2
  restore tmp3444
  restore tmp3445
  restore tmp3446
  restore tmp3447
  restore tmp3448
; -----------------------------------------------
; function __MIRCode_push3$0
; -----------------------------------------------
__MIRCode_push3$0:
  ; init frame
  ; ----------
  tmp3453 EQU rbp - 24 ; 16 bytes
  tmp3452 EQU rbp - 40 ; 16 bytes
  tmp3451 EQU rbp - 44 ; 4 bytes
  tmp3450 EQU rbp - 60 ; 16 bytes
  tmp3449 EQU rbp - 76 ; 16 bytes
  arg3 EQU rbp - 92 ; 16 bytes
  arg2 EQU rbp - 108 ; 16 bytes
  arg1 EQU rbp - 124 ; 16 bytes
  op EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ op ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ arg1 ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ arg2 ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ arg3 ], xmm0
  mov [tmp3449 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3450 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3452 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3453 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3449 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp3449 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3450 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3450 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3450 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3450 + Variant_t.value]
  mov dword [ tmp3451 ], eax
  lea  rcx, [ tmp3450 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3450 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp3452 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3452 + Variant_t.value], 0
  lea  rcx, [ tmp3453 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3453 ]
  lea rdx, [ op ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3450 ]
  lea  rdx , [ tmp3452 ]
  lea  r8 , [ tmp3453 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3452 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3452 + Variant_t.value], 1
  lea  rcx, [ tmp3453 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3453 ]
  lea rdx, [ arg1 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3450 ]
  lea  rdx , [ tmp3452 ]
  lea  r8 , [ tmp3453 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3452 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3452 + Variant_t.value], 2
  lea  rcx, [ tmp3453 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3453 ]
  lea rdx, [ arg2 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3450 ]
  lea  rdx , [ tmp3452 ]
  lea  r8 , [ tmp3453 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp3452 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp3452 + Variant_t.value], 3
  lea  rcx, [ tmp3453 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3453 ]
  lea rdx, [ arg3 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3450 ]
  lea  rdx , [ tmp3452 ]
  lea  r8 , [ tmp3453 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ tmp3449 ]
  lea  rdx , [ tmp3451 ]
  lea  r8 , [ tmp3450 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3449 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3449 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3451 ], 1
  mov [ tmp3453 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3451 ]
  mov [ tmp3453 + Variant_t.value], rax
  lea  rcx , [ tmp3449 ]
  lea  rdx , [ tmp3453 ]
  lea  r8 , [ tmp3450 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3450 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3449 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3450 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3452 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3453 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore op
  restore arg1
  restore arg2
  restore arg3
  restore tmp3449
  restore tmp3450
  restore tmp3451
  restore tmp3452
  restore tmp3453
; -----------------------------------------------
; function __MIRCode_nop$0
; -----------------------------------------------
__MIRCode_nop$0:
  ; init frame
  ; ----------
  tmp3455 EQU rbp - 24 ; 16 bytes
  tmp3454 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3455 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3454 ], 0
  mov [ tmp3455 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3454 ]
  mov [ tmp3455 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3455 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3455 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3454
  restore tmp3455
; -----------------------------------------------
; function __MIRCode_neg$0
; -----------------------------------------------
__MIRCode_neg$0:
  ; init frame
  ; ----------
  tmp3457 EQU rbp - 24 ; 16 bytes
  tmp3456 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3457 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3456 ], 1
  mov [ tmp3457 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3456 ]
  mov [ tmp3457 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3457 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3457 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3456
  restore tmp3457
; -----------------------------------------------
; function __MIRCode_add$0
; -----------------------------------------------
__MIRCode_add$0:
  ; init frame
  ; ----------
  tmp3459 EQU rbp - 24 ; 16 bytes
  tmp3458 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3459 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3458 ], 2
  mov [ tmp3459 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3458 ]
  mov [ tmp3459 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3459 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3459 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3458
  restore tmp3459
; -----------------------------------------------
; function __MIRCode_sub$0
; -----------------------------------------------
__MIRCode_sub$0:
  ; init frame
  ; ----------
  tmp3461 EQU rbp - 24 ; 16 bytes
  tmp3460 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3461 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3460 ], 3
  mov [ tmp3461 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3460 ]
  mov [ tmp3461 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3461 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3461 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3460
  restore tmp3461
; -----------------------------------------------
; function __MIRCode_mul$0
; -----------------------------------------------
__MIRCode_mul$0:
  ; init frame
  ; ----------
  tmp3463 EQU rbp - 24 ; 16 bytes
  tmp3462 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3463 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3462 ], 4
  mov [ tmp3463 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3462 ]
  mov [ tmp3463 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3463 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3463 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3462
  restore tmp3463
; -----------------------------------------------
; function __MIRCode_div$0
; -----------------------------------------------
__MIRCode_div$0:
  ; init frame
  ; ----------
  tmp3465 EQU rbp - 24 ; 16 bytes
  tmp3464 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3465 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3464 ], 5
  mov [ tmp3465 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3464 ]
  mov [ tmp3465 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3465 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3465 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3464
  restore tmp3465
; -----------------------------------------------
; function __MIRCode_idiv$0
; -----------------------------------------------
__MIRCode_idiv$0:
  ; init frame
  ; ----------
  tmp3467 EQU rbp - 24 ; 16 bytes
  tmp3466 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3467 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3466 ], 6
  mov [ tmp3467 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3466 ]
  mov [ tmp3467 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3467 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3467 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3466
  restore tmp3467
; -----------------------------------------------
; function __MIRCode_stringJoin$0
; -----------------------------------------------
__MIRCode_stringJoin$0:
  ; init frame
  ; ----------
  tmp3469 EQU rbp - 24 ; 16 bytes
  tmp3468 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3469 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3468 ], 49
  mov [ tmp3469 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3468 ]
  mov [ tmp3469 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3469 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3469 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3468
  restore tmp3469
; -----------------------------------------------
; function __MIRCode_loadNull$0
; -----------------------------------------------
__MIRCode_loadNull$0:
  ; init frame
  ; ----------
  tmp3471 EQU rbp - 24 ; 16 bytes
  tmp3470 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3471 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3470 ], 10
  mov [ tmp3471 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3470 ]
  mov [ tmp3471 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3471 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3471 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3470
  restore tmp3471
; -----------------------------------------------
; function __MIRCode_loadArray$0
; -----------------------------------------------
__MIRCode_loadArray$0:
  ; init frame
  ; ----------
  tmp3473 EQU rbp - 24 ; 16 bytes
  tmp3472 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3473 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3472 ], 8
  mov [ tmp3473 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3472 ]
  mov [ tmp3473 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3473 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3473 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3472
  restore tmp3473
; -----------------------------------------------
; function __MIRCode_loadMap$0
; -----------------------------------------------
__MIRCode_loadMap$0:
  ; init frame
  ; ----------
  tmp3475 EQU rbp - 24 ; 16 bytes
  tmp3474 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3475 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3474 ], 9
  mov [ tmp3475 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3474 ]
  mov [ tmp3475 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3475 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3475 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3474
  restore tmp3475
; -----------------------------------------------
; function __MIRCode_loadImm$0
; -----------------------------------------------
__MIRCode_loadImm$0:
  ; init frame
  ; ----------
  tmp3477 EQU rbp - 24 ; 16 bytes
  tmp3476 EQU rbp - 28 ; 4 bytes
  value EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ value ], xmm0
  mov [tmp3477 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3476 ], 7
  mov [ tmp3477 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3476 ]
  mov [ tmp3477 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3477 ]
  lea  r8 , [ value ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3477 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore value
  restore tmp3476
  restore tmp3477
; -----------------------------------------------
; function __MIRCode_cmpEQ$0
; -----------------------------------------------
__MIRCode_cmpEQ$0:
  ; init frame
  ; ----------
  tmp3479 EQU rbp - 24 ; 16 bytes
  tmp3478 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3479 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3478 ], 11
  mov [ tmp3479 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3478 ]
  mov [ tmp3479 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3479 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3479 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3478
  restore tmp3479
; -----------------------------------------------
; function __MIRCode_cmpNEQ$0
; -----------------------------------------------
__MIRCode_cmpNEQ$0:
  ; init frame
  ; ----------
  tmp3481 EQU rbp - 24 ; 16 bytes
  tmp3480 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3481 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3480 ], 12
  mov [ tmp3481 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3480 ]
  mov [ tmp3481 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3481 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3481 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3480
  restore tmp3481
; -----------------------------------------------
; function __MIRCode_cmpGT$0
; -----------------------------------------------
__MIRCode_cmpGT$0:
  ; init frame
  ; ----------
  tmp3483 EQU rbp - 24 ; 16 bytes
  tmp3482 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3483 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3482 ], 13
  mov [ tmp3483 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3482 ]
  mov [ tmp3483 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3483 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3483 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3482
  restore tmp3483
; -----------------------------------------------
; function __MIRCode_cmpGE$0
; -----------------------------------------------
__MIRCode_cmpGE$0:
  ; init frame
  ; ----------
  tmp3485 EQU rbp - 24 ; 16 bytes
  tmp3484 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3485 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3484 ], 14
  mov [ tmp3485 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3484 ]
  mov [ tmp3485 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3485 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3485 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3484
  restore tmp3485
; -----------------------------------------------
; function __MIRCode_cmpLT$0
; -----------------------------------------------
__MIRCode_cmpLT$0:
  ; init frame
  ; ----------
  tmp3487 EQU rbp - 24 ; 16 bytes
  tmp3486 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3487 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3486 ], 15
  mov [ tmp3487 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3486 ]
  mov [ tmp3487 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3487 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3487 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3486
  restore tmp3487
; -----------------------------------------------
; function __MIRCode_cmpLE$0
; -----------------------------------------------
__MIRCode_cmpLE$0:
  ; init frame
  ; ----------
  tmp3489 EQU rbp - 24 ; 16 bytes
  tmp3488 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3489 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3488 ], 16
  mov [ tmp3489 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3488 ]
  mov [ tmp3489 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3489 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3489 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3488
  restore tmp3489
; -----------------------------------------------
; function __MIRCode_loadLocal$0
; -----------------------------------------------
__MIRCode_loadLocal$0:
  ; init frame
  ; ----------
  tmp3492 EQU rbp - 12 ; 4 bytes
  tmp3491 EQU rbp - 28 ; 16 bytes
  tmp3490 EQU rbp - 32 ; 4 bytes
  id EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3491 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3490 ], 17
  mov [ tmp3491 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3490 ]
  mov [ tmp3491 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3491 ]
  lea  r8 , [ id ]
  call  __MIRCode_push1$0
  lea  rcx, [ tmp3491 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal373 ]
  lea  r8 , [ tmp3491 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ id ]
  lea rdx, [ tmp3491 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l3493
  lea  rcx , [ this ]
  lea  rdx , [ __literal373 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantStoreAtKey
l3493:
l3494:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3491 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore id
  restore tmp3490
  restore tmp3491
  restore tmp3492
; -----------------------------------------------
; function __MIRCode_loadParamN$0
; -----------------------------------------------
__MIRCode_loadParamN$0:
  ; init frame
  ; ----------
  tmp3496 EQU rbp - 24 ; 16 bytes
  tmp3495 EQU rbp - 28 ; 4 bytes
  id EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3496 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3495 ], 18
  mov [ tmp3496 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3495 ]
  mov [ tmp3496 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3496 ]
  lea  r8 , [ id ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3496 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore id
  restore tmp3495
  restore tmp3496
; -----------------------------------------------
; function __MIRCode_loadGlobal$0
; -----------------------------------------------
__MIRCode_loadGlobal$0:
  ; init frame
  ; ----------
  tmp3498 EQU rbp - 24 ; 16 bytes
  tmp3497 EQU rbp - 28 ; 4 bytes
  id EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3498 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3497 ], 19
  mov [ tmp3498 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3497 ]
  mov [ tmp3498 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3498 ]
  lea  r8 , [ id ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3498 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore id
  restore tmp3497
  restore tmp3498
; -----------------------------------------------
; function __MIRCode_loadRetVal$0
; -----------------------------------------------
__MIRCode_loadRetVal$0:
  ; init frame
  ; ----------
  tmp3500 EQU rbp - 24 ; 16 bytes
  tmp3499 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3500 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3499 ], 20
  mov [ tmp3500 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3499 ]
  mov [ tmp3500 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3500 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3500 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3499
  restore tmp3500
; -----------------------------------------------
; function __MIRCode_loadFromIndex$0
; -----------------------------------------------
__MIRCode_loadFromIndex$0:
  ; init frame
  ; ----------
  tmp3502 EQU rbp - 24 ; 16 bytes
  tmp3501 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3502 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3501 ], 21
  mov [ tmp3502 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3501 ]
  mov [ tmp3502 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3502 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3502 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3501
  restore tmp3502
; -----------------------------------------------
; function __MIRCode_loadFromKey$0
; -----------------------------------------------
__MIRCode_loadFromKey$0:
  ; init frame
  ; ----------
  tmp3504 EQU rbp - 24 ; 16 bytes
  tmp3503 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3504 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3503 ], 22
  mov [ tmp3504 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3503 ]
  mov [ tmp3504 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3504 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3504 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3503
  restore tmp3504
; -----------------------------------------------
; function __MIRCode_allocateLocalId$0
; -----------------------------------------------
__MIRCode_allocateLocalId$0:
  ; init frame
  ; ----------
  tmp3508 EQU rbp - 24 ; 16 bytes
  tmp3507 EQU rbp - 28 ; 4 bytes
  tmp3506 EQU rbp - 44 ; 16 bytes
  tmp3505 EQU rbp - 60 ; 16 bytes
  newId EQU rdi
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3505 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3506 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3508 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3506 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal373 ]
  lea  r8 , [ tmp3506 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3507 ], 1
  mov [ tmp3508 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3507 ]
  mov [ tmp3508 + Variant_t.value], rax
  lea  rcx , [ tmp3506 ]
  lea  rdx , [ tmp3508 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal373 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3505 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3506 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3508 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore newId
  restore tmp3505
  restore tmp3506
  restore tmp3507
  restore tmp3508
; -----------------------------------------------
; function __MIRCode_storeLocal$0
; -----------------------------------------------
__MIRCode_storeLocal$0:
  ; init frame
  ; ----------
  tmp3515 EQU rbp - 24 ; 16 bytes
  tmp3512 EQU rbp - 40 ; 16 bytes
  tmp3511 EQU rbp - 44 ; 4 bytes
  tmp3510 EQU rbp - 60 ; 16 bytes
  tmp3509 EQU rbp - 64 ; 4 bytes
  newId EQU rdi
  id EQU rbp - 80 ; 16 bytes
  this EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3510 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3512 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3515 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ id ]
  lea  rdi , [ tmp3510 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3511 ], 0
  mov [ tmp3512 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3511 ]
  mov [ tmp3512 + Variant_t.value], rax
  lea rcx, [ tmp3510 ]
  lea rdx, [ tmp3512 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3513
  lea  rcx, [ tmp3510 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal373 ]
  lea  r8 , [ tmp3510 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3511 ], 1
  mov [ tmp3515 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3511 ]
  mov [ tmp3515 + Variant_t.value], rax
  lea  rcx , [ tmp3510 ]
  lea  rdx , [ tmp3515 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal373 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantStoreAtKey
  jmp l3514
l3513:
  lea  rcx, [ newId ]
  call __MOLD_VariantDestroy
  lea rcx, [ newId ]
  lea rdx, [ id ]
  call __MOLD_VariantMove
l3514:
  mov dword [ tmp3511 ], 24
  mov [ tmp3512 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3511 ]
  mov [ tmp3512 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3512 ]
  lea  r8 , [ newId ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3510 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3512 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3515 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore id
  restore newId
  restore tmp3509
  restore tmp3510
  restore tmp3511
  restore tmp3512
  restore tmp3515
; -----------------------------------------------
; function __MIRCode_storeParamN$0
; -----------------------------------------------
__MIRCode_storeParamN$0:
  ; init frame
  ; ----------
  tmp3517 EQU rbp - 24 ; 16 bytes
  tmp3516 EQU rbp - 28 ; 4 bytes
  id EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3517 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3516 ], 25
  mov [ tmp3517 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3516 ]
  mov [ tmp3517 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3517 ]
  lea  r8 , [ id ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3517 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore id
  restore tmp3516
  restore tmp3517
; -----------------------------------------------
; function __MIRCode_storeGlobal$0
; -----------------------------------------------
__MIRCode_storeGlobal$0:
  ; init frame
  ; ----------
  tmp3524 EQU rbp - 24 ; 16 bytes
  tmp3521 EQU rbp - 40 ; 16 bytes
  tmp3520 EQU rbp - 44 ; 4 bytes
  tmp3519 EQU rbp - 60 ; 16 bytes
  tmp3518 EQU rbp - 64 ; 4 bytes
  newId EQU rdi
  id EQU rbp - 80 ; 16 bytes
  this EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  mov [tmp3519 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3521 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3524 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ id ]
  lea  rdi , [ tmp3519 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3520 ], 0
  mov [ tmp3521 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3520 ]
  mov [ tmp3521 + Variant_t.value], rax
  lea rcx, [ tmp3519 ]
  lea rdx, [ tmp3521 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3522
  lea  rcx, [ tmp3519 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ tmp3519 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3520 ], 1
  mov [ tmp3524 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3520 ]
  mov [ tmp3524 + Variant_t.value], rax
  lea  rcx , [ tmp3519 ]
  lea  rdx , [ tmp3524 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal374 ]
  lea  r8 , [ newId ]
  call  __MOLD_VariantStoreAtKey
  jmp l3523
l3522:
  lea  rcx, [ newId ]
  call __MOLD_VariantDestroy
  lea rcx, [ newId ]
  lea rdx, [ id ]
  call __MOLD_VariantMove
l3523:
  mov dword [ tmp3520 ], 26
  mov [ tmp3521 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3520 ]
  mov [ tmp3521 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3521 ]
  lea  r8 , [ newId ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3519 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3521 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3524 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore id
  restore newId
  restore tmp3518
  restore tmp3519
  restore tmp3520
  restore tmp3521
  restore tmp3524
; -----------------------------------------------
; function __MIRCode_storeRetVal$0
; -----------------------------------------------
__MIRCode_storeRetVal$0:
  ; init frame
  ; ----------
  tmp3526 EQU rbp - 24 ; 16 bytes
  tmp3525 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3526 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3525 ], 27
  mov [ tmp3526 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3525 ]
  mov [ tmp3526 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3526 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3526 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3525
  restore tmp3526
; -----------------------------------------------
; function __MIRCode_storeAtIndex$0
; -----------------------------------------------
__MIRCode_storeAtIndex$0:
  ; init frame
  ; ----------
  tmp3528 EQU rbp - 24 ; 16 bytes
  tmp3527 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3528 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3527 ], 28
  mov [ tmp3528 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3527 ]
  mov [ tmp3528 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3528 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3528 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3527
  restore tmp3528
; -----------------------------------------------
; function __MIRCode_storeAtKey$0
; -----------------------------------------------
__MIRCode_storeAtKey$0:
  ; init frame
  ; ----------
  tmp3530 EQU rbp - 24 ; 16 bytes
  tmp3529 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3530 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3529 ], 29
  mov [ tmp3530 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3529 ]
  mov [ tmp3530 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3530 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3530 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3529
  restore tmp3530
; -----------------------------------------------
; function __MIRCode_moveBack$0
; -----------------------------------------------
__MIRCode_moveBack$0:
  ; init frame
  ; ----------
  tmp3532 EQU rbp - 24 ; 16 bytes
  tmp3531 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3532 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3531 ], 34
  mov [ tmp3532 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3531 ]
  mov [ tmp3532 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3532 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3532 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3531
  restore tmp3532
; -----------------------------------------------
; function __MIRCode_drop$0
; -----------------------------------------------
__MIRCode_drop$0:
  ; init frame
  ; ----------
  tmp3534 EQU rbp - 24 ; 16 bytes
  tmp3533 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3534 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3533 ], 30
  mov [ tmp3534 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3533 ]
  mov [ tmp3534 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3534 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3534 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3533
  restore tmp3534
; -----------------------------------------------
; function __MIRCode_dropN$0
; -----------------------------------------------
__MIRCode_dropN$0:
  ; init frame
  ; ----------
  tmp3536 EQU rbp - 24 ; 16 bytes
  tmp3535 EQU rbp - 28 ; 4 bytes
  n EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ n ], xmm0
  mov [tmp3536 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3535 ], 31
  mov [ tmp3536 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3535 ]
  mov [ tmp3536 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3536 ]
  lea  r8 , [ n ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3536 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore n
  restore tmp3535
  restore tmp3536
; -----------------------------------------------
; function __MIRCode_dup$0
; -----------------------------------------------
__MIRCode_dup$0:
  ; init frame
  ; ----------
  tmp3538 EQU rbp - 24 ; 16 bytes
  tmp3537 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3538 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3537 ], 32
  mov [ tmp3538 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3537 ]
  mov [ tmp3538 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3538 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3538 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3537
  restore tmp3538
; -----------------------------------------------
; function __MIRCode_over$0
; -----------------------------------------------
__MIRCode_over$0:
  ; init frame
  ; ----------
  tmp3540 EQU rbp - 24 ; 16 bytes
  tmp3539 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3540 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3539 ], 33
  mov [ tmp3540 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3539 ]
  mov [ tmp3540 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3540 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3540 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3539
  restore tmp3540
; -----------------------------------------------
; function __MIRCode_loadArgc$0
; -----------------------------------------------
__MIRCode_loadArgc$0:
  ; init frame
  ; ----------
  tmp3542 EQU rbp - 24 ; 16 bytes
  tmp3541 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3542 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3541 ], 252
  mov [ tmp3542 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3541 ]
  mov [ tmp3542 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3542 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3542 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3541
  restore tmp3542
; -----------------------------------------------
; function __MIRCode_loadArgv$0
; -----------------------------------------------
__MIRCode_loadArgv$0:
  ; init frame
  ; ----------
  tmp3544 EQU rbp - 24 ; 16 bytes
  tmp3543 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3544 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3543 ], 253
  mov [ tmp3544 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3543 ]
  mov [ tmp3544 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3544 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3544 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3543
  restore tmp3544
; -----------------------------------------------
; function __MIRCode_createObject$0
; -----------------------------------------------
__MIRCode_createObject$0:
  ; init frame
  ; ----------
  tmp3546 EQU rbp - 24 ; 16 bytes
  tmp3545 EQU rbp - 28 ; 4 bytes
  classProto EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ classProto ], xmm0
  mov [tmp3546 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3545 ], 36
  mov [ tmp3546 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3545 ]
  mov [ tmp3546 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3546 ]
  lea  r8 , [ classProto ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3546 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore classProto
  restore tmp3545
  restore tmp3546
; -----------------------------------------------
; function __MIRCode__jmpInternal$0
; -----------------------------------------------
__MIRCode__jmpInternal$0:
  ; init frame
  ; ----------
  tmp3560 EQU rbp - 24 ; 16 bytes
  tmp3557 EQU rbp - 28 ; 4 bytes
  tmp3556 EQU rbp - 44 ; 16 bytes
  tmp3555 EQU rbp - 60 ; 16 bytes
  tmp3550 EQU rbp - 76 ; 16 bytes
  tmp3549 EQU rbp - 80 ; 4 bytes
  tmp3548 EQU rbp - 96 ; 16 bytes
  tmp3547 EQU rbp - 100 ; 4 bytes
  addr EQU rbp - 116 ; 16 bytes
  opcode EQU rbp - 132 ; 16 bytes
  labelId EQU rbp - 148 ; 16 bytes
  this EQU rbp - 164 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ opcode ], xmm0
  mov [addr + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3548 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3550 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3555 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3556 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3560 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ labelId ]
  lea  rdi , [ tmp3548 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3549 ], 0
  mov [ tmp3550 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3549 ]
  mov [ tmp3550 + Variant_t.value], rax
  lea rcx, [ tmp3548 ]
  lea rdx, [ tmp3550 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3551
  lea  rcx , [ __literal390 ]
  mov eax,  41
  call  __MOLD_SysCall
l3551:
l3552:
  lea  rcx, [ tmp3548 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal207 ]
  lea  r8 , [ tmp3548 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ labelId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ labelId + Variant_t.value]
  mov dword [ tmp3549 ], eax
  lea  rcx, [ addr ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3548 ]
  lea  rdx , [ tmp3549 ]
  lea  r8 , [ addr ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ addr ]
  lea  rdi , [ tmp3550 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3549 ], 0
  mov [ tmp3548 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3549 ]
  mov [ tmp3548 + Variant_t.value], rax
  lea rcx, [ tmp3550 ]
  lea rdx, [ tmp3548 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3553
  push rdi
  lea  rcx , [ labelId ]
  lea  rdi , [ tmp3548 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3556 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3548 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp3556 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3555 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal391 ]
  lea  rdx , [ tmp3556 ]
  lea  r8 , [ tmp3555 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3555 ]
  mov eax,  41
  call  __MOLD_SysCall
  jmp l3554
l3553:
  mov dword [ tmp3549 ], -1
  mov [ tmp3548 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3549 ]
  mov [ tmp3548 + Variant_t.value], rax
  lea rcx, [ addr ]
  lea rdx, [ tmp3548 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3558
  lea  rcx, [ tmp3548 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal383 ]
  lea  r8 , [ tmp3548 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3550 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ tmp3550 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3550 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3550 + Variant_t.value]
  mov dword [ tmp3549 ], eax
  lea  rcx, [ tmp3550 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3550 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3548 ]
  lea  rdx , [ tmp3549 ]
  lea  r8 , [ tmp3550 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3548 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ tmp3548 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3549 ], 1
  mov [ tmp3560 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3549 ]
  mov [ tmp3560 + Variant_t.value], rax
  lea  rcx , [ tmp3548 ]
  lea  rdx , [ tmp3560 ]
  lea  r8 , [ tmp3550 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal384 ]
  lea  r8 , [ tmp3550 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ labelId ]
  call  __MIRCode_push1$0
  jmp l3559
l3558:
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ addr ]
  call  __MIRCode_push1$0
l3559:
l3554:

  ; clean frame
  ; -----------
  lea  rcx, [ addr ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3548 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3550 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3560 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore labelId
  restore opcode
  restore addr
  restore tmp3547
  restore tmp3548
  restore tmp3549
  restore tmp3550
  restore tmp3555
  restore tmp3556
  restore tmp3557
  restore tmp3560
; -----------------------------------------------
; function __MIRCode_jmp$0
; -----------------------------------------------
__MIRCode_jmp$0:
  ; init frame
  ; ----------
  tmp3562 EQU rbp - 24 ; 16 bytes
  tmp3561 EQU rbp - 28 ; 4 bytes
  labelId EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  mov [tmp3562 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3561 ], 39
  mov [ tmp3562 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3561 ]
  mov [ tmp3562 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ labelId ]
  lea  r8 , [ tmp3562 ]
  call  __MIRCode__jmpInternal$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3562 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore labelId
  restore tmp3561
  restore tmp3562
; -----------------------------------------------
; function __MIRCode_jmpIfTrue$0
; -----------------------------------------------
__MIRCode_jmpIfTrue$0:
  ; init frame
  ; ----------
  tmp3564 EQU rbp - 24 ; 16 bytes
  tmp3563 EQU rbp - 28 ; 4 bytes
  labelId EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  mov [tmp3564 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3563 ], 40
  mov [ tmp3564 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3563 ]
  mov [ tmp3564 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ labelId ]
  lea  r8 , [ tmp3564 ]
  call  __MIRCode__jmpInternal$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3564 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore labelId
  restore tmp3563
  restore tmp3564
; -----------------------------------------------
; function __MIRCode_jmpIfFalse$0
; -----------------------------------------------
__MIRCode_jmpIfFalse$0:
  ; init frame
  ; ----------
  tmp3566 EQU rbp - 24 ; 16 bytes
  tmp3565 EQU rbp - 28 ; 4 bytes
  labelId EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  mov [tmp3566 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3565 ], 41
  mov [ tmp3566 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3565 ]
  mov [ tmp3566 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ labelId ]
  lea  r8 , [ tmp3566 ]
  call  __MIRCode__jmpInternal$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3566 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore labelId
  restore tmp3565
  restore tmp3566
; -----------------------------------------------
; function __MIRCode_ret$0
; -----------------------------------------------
__MIRCode_ret$0:
  ; init frame
  ; ----------
  tmp3568 EQU rbp - 24 ; 16 bytes
  tmp3567 EQU rbp - 28 ; 4 bytes
  frameSize EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ frameSize ], xmm0
  mov [tmp3568 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3567 ], 43
  mov [ tmp3568 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3567 ]
  mov [ tmp3568 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3568 ]
  lea  r8 , [ frameSize ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3568 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore frameSize
  restore tmp3567
  restore tmp3568
; -----------------------------------------------
; function __MIRCode_innerRet$0
; -----------------------------------------------
__MIRCode_innerRet$0:
  ; init frame
  ; ----------
  tmp3570 EQU rbp - 24 ; 16 bytes
  tmp3569 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3570 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3569 ], 44
  mov [ tmp3570 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3569 ]
  mov [ tmp3570 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3570 ]
  call  __MIRCode_push0$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3570 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp3569
  restore tmp3570
; -----------------------------------------------
; function __MIRCode_call$0
; -----------------------------------------------
__MIRCode_call$0:
  ; init frame
  ; ----------
  tmp3572 EQU rbp - 24 ; 16 bytes
  tmp3571 EQU rbp - 28 ; 4 bytes
  proto EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ proto ], xmm0
  mov [tmp3572 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3571 ], 42
  mov [ tmp3572 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3571 ]
  mov [ tmp3572 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3572 ]
  lea  r8 , [ proto ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3572 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore proto
  restore tmp3571
  restore tmp3572
; -----------------------------------------------
; function __MIRCode_vcall$0
; -----------------------------------------------
__MIRCode_vcall$0:
  ; init frame
  ; ----------
  tmp3574 EQU rbp - 24 ; 16 bytes
  tmp3573 EQU rbp - 28 ; 4 bytes
  paramsCnt EQU rbp - 44 ; 16 bytes
  name EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp3574 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3573 ], 37
  mov [ tmp3574 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3573 ]
  mov [ tmp3574 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3574 ]
  lea  r8 , [ name ]
  lea  r9 , [ paramsCnt ]
  call  __MIRCode_push2$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3574 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore paramsCnt
  restore tmp3573
  restore tmp3574
; -----------------------------------------------
; function __MIRCode_callPrint$0
; -----------------------------------------------
__MIRCode_callPrint$0:
  ; init frame
  ; ----------
  tmp3576 EQU rbp - 24 ; 16 bytes
  tmp3575 EQU rbp - 28 ; 4 bytes
  paramsCnt EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp3576 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3575 ], 35
  mov [ tmp3576 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3575 ]
  mov [ tmp3576 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3576 ]
  lea  r8 , [ paramsCnt ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3576 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore paramsCnt
  restore tmp3575
  restore tmp3576
; -----------------------------------------------
; function __MIRCode_initFrame$0
; -----------------------------------------------
__MIRCode_initFrame$0:
  ; init frame
  ; ----------
  tmp3578 EQU rbp - 24 ; 16 bytes
  tmp3577 EQU rbp - 28 ; 4 bytes
  paramsCnt EQU rbp - 44 ; 16 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp3578 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3577 ], 46
  mov [ tmp3578 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3577 ]
  mov [ tmp3578 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3578 ]
  lea  r8 , [ paramsCnt ]
  call  __MIRCode_push1$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3578 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore paramsCnt
  restore tmp3577
  restore tmp3578
; -----------------------------------------------
; function __MIRCode_createLabel$0
; -----------------------------------------------
__MIRCode_createLabel$0:
  ; init frame
  ; ----------
  tmp3583 EQU rbp - 24 ; 16 bytes
  tmp3582 EQU rbp - 28 ; 4 bytes
  tmp3581 EQU rbp - 32 ; 4 bytes
  tmp3580 EQU rbp - 48 ; 16 bytes
  tmp3579 EQU rbp - 64 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3579 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3580 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3583 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal367 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3579 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal207 ]
  lea  r8 , [ tmp3579 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3580 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal367 ]
  lea  r8 , [ tmp3580 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3580 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3580 + Variant_t.value]
  mov dword [ tmp3581 ], eax
  mov dword [ tmp3582 ], -1
  mov [ tmp3580 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3582 ]
  mov [ tmp3580 + Variant_t.value], rax
  lea  rcx , [ tmp3579 ]
  lea  rdx , [ tmp3581 ]
  lea  r8 , [ tmp3580 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3579 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal367 ]
  lea  r8 , [ tmp3579 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3581 ], 1
  mov [ tmp3583 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3581 ]
  mov [ tmp3583 + Variant_t.value], rax
  lea  rcx , [ tmp3579 ]
  lea  rdx , [ tmp3583 ]
  lea  r8 , [ tmp3580 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal367 ]
  lea  r8 , [ tmp3580 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3579 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3580 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3583 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3579
  restore tmp3580
  restore tmp3581
  restore tmp3582
  restore tmp3583
; -----------------------------------------------
; function __MIRCode_emitLabel$0
; -----------------------------------------------
__MIRCode_emitLabel$0:
  ; init frame
  ; ----------
  tmp3595 EQU rbp - 24 ; 16 bytes
  tmp3592 EQU rbp - 28 ; 4 bytes
  tmp3591 EQU rbp - 44 ; 16 bytes
  tmp3590 EQU rbp - 60 ; 16 bytes
  tmp3587 EQU rbp - 64 ; 4 bytes
  tmp3586 EQU rbp - 68 ; 4 bytes
  tmp3585 EQU rbp - 84 ; 16 bytes
  tmp3584 EQU rbp - 100 ; 16 bytes
  targetId EQU rbp - 116 ; 16 bytes
  labelId EQU rbp - 132 ; 16 bytes
  this EQU rbp - 148 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ labelId ], xmm0
  mov [targetId + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3584 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3585 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3590 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3591 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3595 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3585 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal207 ]
  lea  r8 , [ tmp3585 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ labelId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ labelId + Variant_t.value]
  mov dword [ tmp3586 ], eax
  lea  rcx, [ targetId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3585 ]
  lea  rdx , [ tmp3586 ]
  lea  r8 , [ targetId ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ targetId ]
  lea  rdi , [ tmp3584 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3586 ], 0
  mov [ tmp3585 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3586 ]
  mov [ tmp3585 + Variant_t.value], rax
  lea rcx, [ tmp3584 ]
  lea rdx, [ tmp3585 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3588
  push rdi
  lea  rcx , [ targetId ]
  lea  rdi , [ tmp3585 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3585 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp3591 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3590 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal391 ]
  lea  rdx , [ tmp3591 ]
  lea  r8 , [ tmp3590 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3590 ]
  mov eax,  41
  call  __MOLD_SysCall
  jmp l3589
l3588:
  mov dword [ tmp3586 ], 0
  mov [ tmp3585 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3586 ]
  mov [ tmp3585 + Variant_t.value], rax
  lea rcx, [ targetId ]
  lea rdx, [ tmp3585 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l3593
  push rdi
  lea  rcx , [ targetId ]
  lea  rdi , [ tmp3585 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3591 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3585 ]
  lea  rdx , [ __literal393 ]
  lea  r8 , [ tmp3591 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3590 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal392 ]
  lea  rdx , [ tmp3591 ]
  lea  r8 , [ tmp3590 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3590 ]
  mov eax,  41
  call  __MOLD_SysCall
  jmp l3594
l3593:
  lea  rcx, [ tmp3585 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal207 ]
  lea  r8 , [ tmp3585 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ labelId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ labelId + Variant_t.value]
  mov dword [ tmp3586 ], eax
  lea  rcx, [ tmp3584 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3584 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3585 ]
  lea  rdx , [ tmp3586 ]
  lea  r8 , [ tmp3584 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3584 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal368 ]
  lea  r8 , [ tmp3584 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3585 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal369 ]
  lea  r8 , [ tmp3585 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3585 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3585 + Variant_t.value]
  mov dword [ tmp3586 ], eax
  lea  rcx, [ tmp3585 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ tmp3585 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3584 ]
  lea  rdx , [ tmp3586 ]
  lea  r8 , [ tmp3585 ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp3584 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal369 ]
  lea  r8 , [ tmp3584 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3586 ], 1
  mov [ tmp3595 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3586 ]
  mov [ tmp3595 + Variant_t.value], rax
  lea  rcx , [ tmp3584 ]
  lea  rdx , [ tmp3595 ]
  lea  r8 , [ tmp3585 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal369 ]
  lea  r8 , [ tmp3585 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  call  __MIRCode__resolveJmps$0
l3594:
l3589:

  ; clean frame
  ; -----------
  lea  rcx, [ targetId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3584 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3585 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3595 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore labelId
  restore targetId
  restore tmp3584
  restore tmp3585
  restore tmp3586
  restore tmp3587
  restore tmp3590
  restore tmp3591
  restore tmp3592
  restore tmp3595
; -----------------------------------------------
; function __MIRCode_createAndEmitLabel$0
; -----------------------------------------------
__MIRCode_createAndEmitLabel$0:
  ; init frame
  ; ----------
  tmp3596 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3596 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp3596 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_createLabel$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp3596 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __MIRCode_emitLabel$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3596 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3596
; -----------------------------------------------
; function __MIRCode_createMethod$0
; -----------------------------------------------
__MIRCode_createMethod$0:
  ; init frame
  ; ----------
  tmp3600 EQU rbp - 12 ; 4 bytes
  tmp3599 EQU rbp - 28 ; 16 bytes
  tmp3598 EQU rbp - 32 ; 4 bytes
  tmp3597 EQU rbp - 48 ; 16 bytes
  methodsList EQU rbp - 64 ; 16 bytes
  methodsMap EQU rbp - 80 ; 16 bytes
  id EQU rdi
  name EQU rbp - 96 ; 16 bytes
  this EQU rbp - 112 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [methodsMap + Variant_t.type], VARIANT_UNDEFINED
  mov [methodsList + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3597 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3599 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodsMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ methodsMap ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodsList ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ methodsList ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3599 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodsMap ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp3599 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3599 ]
  lea  rdi , [ tmp3597 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3600 ], 0
  mov [ tmp3599 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3600 ]
  mov [ tmp3599 + Variant_t.value], rax
  lea rcx, [ tmp3597 ]
  lea rdx, [ tmp3599 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3601
  lea  rcx , [ methodsMap ]
  lea  rdx , [ name ]
  lea  r8 , [ id ]
  call  __MOLD_VariantStoreAtKey
  cmp [ id + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ id + Variant_t.value]
  mov dword [ tmp3600 ], eax
  lea  rcx , [ methodsList ]
  lea  rdx , [ tmp3600 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3600 ], 1
  mov [ tmp3597 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3600 ]
  mov [ tmp3597 + Variant_t.value], rax
  lea  rcx , [ id ]
  lea  rdx , [ tmp3597 ]
  lea  r8 , [ tmp3599 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal380 ]
  lea  r8 , [ tmp3599 ]
  call  __MOLD_VariantStoreAtKey
l3601:
l3602:

  ; clean frame
  ; -----------
  lea  rcx, [ methodsMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodsList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3597 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3599 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore id
  restore methodsMap
  restore methodsList
  restore tmp3597
  restore tmp3598
  restore tmp3599
  restore tmp3600
; -----------------------------------------------
; function __MIRCode_createClass$0
; -----------------------------------------------
__MIRCode_createClass$0:
  ; init frame
  ; ----------
  tmp3605 EQU rbp - 24 ; 16 bytes
  tmp3604 EQU rbp - 28 ; 4 bytes
  tmp3603 EQU rbp - 44 ; 16 bytes
  classList EQU rbp - 60 ; 16 bytes
  classMap EQU rbp - 76 ; 16 bytes
  className EQU rbp - 92 ; 16 bytes
  id EQU rdi
  proto EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ proto ], xmm0
  mov [className + Variant_t.type], VARIANT_UNDEFINED
  mov [classMap + Variant_t.type], VARIANT_UNDEFINED
  mov [classList + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3603 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3605 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal377 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal375 ]
  lea  r8 , [ classMap ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal376 ]
  lea  r8 , [ classList ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ classMap ]
  lea  rdx , [ className ]
  lea  r8 , [ id ]
  call  __MOLD_VariantStoreAtKey
  cmp [ id + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ id + Variant_t.value]
  mov dword [ tmp3604 ], eax
  lea  rcx , [ classList ]
  lea  rdx , [ tmp3604 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp3604 ], 1
  mov [ tmp3605 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3604 ]
  mov [ tmp3605 + Variant_t.value], rax
  lea  rcx , [ id ]
  lea  rdx , [ tmp3605 ]
  lea  r8 , [ tmp3603 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal377 ]
  lea  r8 , [ tmp3603 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ classMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3603 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3605 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore proto
  restore id
  restore className
  restore classMap
  restore classList
  restore tmp3603
  restore tmp3604
  restore tmp3605
; -----------------------------------------------
; function __MIRCode_getClassProtoById$0
; -----------------------------------------------
__MIRCode_getClassProtoById$0:
  ; init frame
  ; ----------
  tmp3607 EQU rbp - 12 ; 4 bytes
  tmp3606 EQU rbp - 28 ; 16 bytes
  proto EQU rdi
  classList EQU rbp - 44 ; 16 bytes
  classId EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ classId ], xmm0
  mov [classList + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3606 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal376 ]
  lea  r8 , [ classList ]
  call  __MOLD_VariantLoadFromKey
  cmp [ classId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ classId + Variant_t.value]
  mov dword [ tmp3607 ], eax
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classList ]
  lea  rdx , [ tmp3607 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; clean frame
  ; -----------
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3606 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore classId
  restore classList
  restore proto
  restore tmp3606
  restore tmp3607
; -----------------------------------------------
; function __MIRCode_retValGuard$0
; -----------------------------------------------
__MIRCode_retValGuard$0:
  ; init frame
  ; ----------
  tmp3609 EQU rbp - 24 ; 16 bytes
  tmp3608 EQU rbp - 28 ; 4 bytes
  funcName EQU rbp - 44 ; 16 bytes
  rvName EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rvName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcName ], xmm0
  mov [tmp3609 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3608 ], 45
  mov [ tmp3609 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3608 ]
  mov [ tmp3609 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3609 ]
  lea  r8 , [ rvName ]
  lea  r9 , [ funcName ]
  call  __MIRCode_push2$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3609 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rvName
  restore funcName
  restore tmp3608
  restore tmp3609
; -----------------------------------------------
; function __MIRCode_forEachIndexes$0
; -----------------------------------------------
__MIRCode_forEachIndexes$0:
  ; init frame
  ; ----------
  tmp3611 EQU rbp - 24 ; 16 bytes
  tmp3610 EQU rbp - 28 ; 4 bytes
  cb EQU rbp - 44 ; 16 bytes
  valueId EQU rbp - 60 ; 16 bytes
  idxId EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ idxId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ valueId ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ cb ], xmm0
  mov [tmp3611 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3610 ], 101
  mov [ tmp3611 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3610 ]
  mov [ tmp3611 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3611 ]
  lea  r8 , [ idxId ]
  lea  r9 , [ valueId ]
  lea  rax , [ cb ]
  push rax
  call  __MIRCode_push3$0
  add rsp, 8

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3611 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore idxId
  restore valueId
  restore cb
  restore tmp3610
  restore tmp3611
; -----------------------------------------------
; function __MIRCode_forEachKeys$0
; -----------------------------------------------
__MIRCode_forEachKeys$0:
  ; init frame
  ; ----------
  tmp3613 EQU rbp - 24 ; 16 bytes
  tmp3612 EQU rbp - 28 ; 4 bytes
  cb EQU rbp - 44 ; 16 bytes
  valueId EQU rbp - 60 ; 16 bytes
  keyId EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ keyId ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ valueId ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ cb ], xmm0
  mov [tmp3613 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3612 ], 100
  mov [ tmp3613 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3612 ]
  mov [ tmp3613 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3613 ]
  lea  r8 , [ keyId ]
  lea  r9 , [ valueId ]
  lea  rax , [ cb ]
  push rax
  call  __MIRCode_push3$0
  add rsp, 8

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3613 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore keyId
  restore valueId
  restore cb
  restore tmp3612
  restore tmp3613
; -----------------------------------------------
; function __MIRCode_syscall$0
; -----------------------------------------------
__MIRCode_syscall$0:
  ; init frame
  ; ----------
  tmp3615 EQU rbp - 24 ; 16 bytes
  tmp3614 EQU rbp - 28 ; 4 bytes
  paramsCnt EQU rbp - 44 ; 16 bytes
  id EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ id ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp3615 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp3614 ], 48
  mov [ tmp3615 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3614 ]
  mov [ tmp3615 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp3615 ]
  lea  r8 , [ id ]
  lea  r9 , [ paramsCnt ]
  call  __MIRCode_push2$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3615 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore id
  restore paramsCnt
  restore tmp3614
  restore tmp3615
; -----------------------------------------------
; function __AppMold_constructor$0
; -----------------------------------------------
__AppMold_constructor$0:
  ; init frame
  ; ----------
  tmp3617 EQU rbp - 24 ; 16 bytes
  tmp3616 EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3616 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3617 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal147 ]
  call  __AppMold_logDebug$0
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_SymbolTable]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __SymbolTable_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_ASTOptimizerConstantFolding]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerConstantFolding_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal394 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_ASTSymbolsCollector]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTSymbolsCollector_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal395 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_ASTEvaluator]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTEvaluator_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal396 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_ASTPreprocessor]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTPreprocessor_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal397 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_ASTOptimizerCSE]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerCSE_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal398 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_ASTOptimizerDeadCodeRemove]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerDeadCodeRemove_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal399 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_ASTOptimizerVCall]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerVCall_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal400 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_ASTOptimizerIf]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerIf_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal401 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_ASTOptimizerInline]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTOptimizerInline_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal402 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_ASTTypeCast]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTypeCast_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal403 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_ASTModuleResolver]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdx , [ this ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTModuleResolver_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal404 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  call  __AppMold_clearLogContext$0
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3616 ]
  lea  rdx, [vtable_MIRCode]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp3616 ]
  lea  rdi , [ tmp3617 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp3616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal405 ]
  call  __AppMold_logDebug$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3617 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3616
  restore tmp3617
; -----------------------------------------------
; function __AppMold_clearLogContext$0
; -----------------------------------------------
__AppMold_clearLogContext$0:
  ; init frame
  ; ----------
  tmp3621 EQU rbp - 12 ; 4 bytes
  tmp3620 EQU rbp - 16 ; 4 bytes
  tmp3619 EQU rbp - 32 ; 16 bytes
  tmp3618 EQU rbp - 48 ; 16 bytes
  this EQU rbp - 64 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3618 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3619 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3618 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3618 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp3619 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3619 ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3618 ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp3619 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3621 ], 1
  mov eax, dword [ tmp3621 ]
  neg eax
  mov dword [ tmp3620 ], eax
  mov [ tmp3619 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3620 ]
  mov [ tmp3619 + Variant_t.value], rax
  lea  rcx , [ tmp3618 ]
  lea  rdx , [ __literal31 ]
  lea  r8 , [ tmp3619 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp3621 ], 1
  mov eax, dword [ tmp3621 ]
  neg eax
  mov dword [ tmp3620 ], eax
  mov [ tmp3619 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3620 ]
  mov [ tmp3619 + Variant_t.value], rax
  lea  rcx , [ tmp3618 ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp3619 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal406 ]
  lea  r8 , [ tmp3618 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3618 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3619 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp3618
  restore tmp3619
  restore tmp3620
  restore tmp3621
; -----------------------------------------------
; function __AppMold_setLogContext$0
; -----------------------------------------------
__AppMold_setLogContext$0:
  ; init frame
  ; ----------
  ctx EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ctx ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal406 ]
  lea  r8 , [ ctx ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore ctx
; -----------------------------------------------
; function __AppMold_logDebug$0
; -----------------------------------------------
__AppMold_logDebug$0:
  ; init frame
  ; ----------
  tmp3623 EQU rbp - 12 ; 4 bytes
  tmp3622 EQU rbp - 16 ; 4 bytes
  msg EQU rbp - 32 ; 16 bytes
  this EQU rbp - 48 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----
  mov dword [ tmp3623 ], 1
  xor  eax, eax
  or   dword [ DEBUG_MOLD ], eax
  setz cl
  or   dword [ tmp3623 ], eax
  setz al
  xor  al, cl
  jnz l3624
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal407 ]
  lea  r8 , [ msg ]
  call  __MOLD_PrintArrayOfVariantsLn
l3624:
l3625:

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3622
  restore tmp3623
; -----------------------------------------------
; function __AppMold_logError$0
; -----------------------------------------------
__AppMold_logError$0:
  ; init frame
  ; ----------
  tmp3634 EQU rbp - 24 ; 16 bytes
  tmp3633 EQU rbp - 40 ; 16 bytes
  tmp3632 EQU rbp - 56 ; 16 bytes
  tmp3631 EQU rbp - 72 ; 16 bytes
  tmp3630 EQU rbp - 88 ; 16 bytes
  tmp3629 EQU rbp - 104 ; 16 bytes
  tmp3628 EQU rbp - 120 ; 16 bytes
  tmp3627 EQU rbp - 136 ; 16 bytes
  tmp3626 EQU rbp - 152 ; 16 bytes
  msgPrefix EQU rbp - 168 ; 16 bytes
  logCtx EQU rbp - 184 ; 16 bytes
  msg EQU rbp - 200 ; 16 bytes
  this EQU rbp - 216 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [logCtx + Variant_t.type], VARIANT_UNDEFINED
  mov [msgPrefix + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3626 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3627 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3628 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3629 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3630 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3631 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3632 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3633 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3634 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ logCtx ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal406 ]
  lea  r8 , [ logCtx ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3628 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ logCtx ]
  lea  rdx , [ __literal12 ]
  lea  r8 , [ tmp3628 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3628 ]
  lea  rdi , [ tmp3626 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3631 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ logCtx ]
  lea  rdx , [ __literal30 ]
  lea  r8 , [ tmp3631 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3631 ]
  lea  rdi , [ tmp3628 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3634 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ logCtx ]
  lea  rdx , [ __literal31 ]
  lea  r8 , [ tmp3634 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3634 ]
  lea  rdi , [ tmp3631 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3633 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3631 ]
  lea  rdx , [ __literal14 ]
  lea  r8 , [ tmp3633 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3632 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal13 ]
  lea  rdx , [ tmp3633 ]
  lea  r8 , [ tmp3632 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3630 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3628 ]
  lea  rdx , [ tmp3632 ]
  lea  r8 , [ tmp3630 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3629 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal13 ]
  lea  rdx , [ tmp3630 ]
  lea  r8 , [ tmp3629 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ msgPrefix ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3626 ]
  lea  rdx , [ tmp3629 ]
  lea  r8 , [ msgPrefix ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3627 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ msgPrefix ]
  lea  rdx , [ msg ]
  lea  r8 , [ tmp3627 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3627 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------
  lea  rcx, [ logCtx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3626 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3628 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3631 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3634 ]
  call __MOLD_VariantDestroy

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore msg
  restore logCtx
  restore msgPrefix
  restore tmp3626
  restore tmp3627
  restore tmp3628
  restore tmp3629
  restore tmp3630
  restore tmp3631
  restore tmp3632
  restore tmp3633
  restore tmp3634
; -----------------------------------------------
; function __AppMold_getMir1Code$0
; -----------------------------------------------
__AppMold_getMir1Code$0:
  ; init frame
  ; ----------
  tmp3635 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3635 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3635 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3635
; -----------------------------------------------
; function __AppMold_getSymbolTable$0
; -----------------------------------------------
__AppMold_getSymbolTable$0:
  ; init frame
  ; ----------
  tmp3636 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3636 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3636 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3636
; -----------------------------------------------
; function __AppMold_getAstSymbolsCollector$0
; -----------------------------------------------
__AppMold_getAstSymbolsCollector$0:
  ; init frame
  ; ----------
  tmp3637 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3637 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal395 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3637 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3637
; -----------------------------------------------
; function __AppMold_getAstOptimizerConstantFolding$0
; -----------------------------------------------
__AppMold_getAstOptimizerConstantFolding$0:
  ; init frame
  ; ----------
  tmp3638 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3638 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal394 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3638 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3638
; -----------------------------------------------
; function __AppMold_getAstPreprocessor$0
; -----------------------------------------------
__AppMold_getAstPreprocessor$0:
  ; init frame
  ; ----------
  tmp3639 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3639 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal397 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3639 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3639
; -----------------------------------------------
; function __AppMold_getAstEvaluator$0
; -----------------------------------------------
__AppMold_getAstEvaluator$0:
  ; init frame
  ; ----------
  tmp3640 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3640 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal396 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3640 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3640
; -----------------------------------------------
; function __AppMold_getAstOptimizerCSE$0
; -----------------------------------------------
__AppMold_getAstOptimizerCSE$0:
  ; init frame
  ; ----------
  tmp3641 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3641 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal398 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3641 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3641
; -----------------------------------------------
; function __AppMold_getAstOptimizerDeadCodeRemove$0
; -----------------------------------------------
__AppMold_getAstOptimizerDeadCodeRemove$0:
  ; init frame
  ; ----------
  tmp3642 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3642 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal399 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3642 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3642
; -----------------------------------------------
; function __AppMold_getAstOptimizerVCall$0
; -----------------------------------------------
__AppMold_getAstOptimizerVCall$0:
  ; init frame
  ; ----------
  tmp3643 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3643 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal400 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3643 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3643
; -----------------------------------------------
; function __AppMold_getAstOptimizerIf$0
; -----------------------------------------------
__AppMold_getAstOptimizerIf$0:
  ; init frame
  ; ----------
  tmp3644 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3644 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal401 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3644 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3644
; -----------------------------------------------
; function __AppMold_getAstOptimizerInline$0
; -----------------------------------------------
__AppMold_getAstOptimizerInline$0:
  ; init frame
  ; ----------
  tmp3645 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3645 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal402 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3645 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3645
; -----------------------------------------------
; function __AppMold_getAstModuleResolver$0
; -----------------------------------------------
__AppMold_getAstModuleResolver$0:
  ; init frame
  ; ----------
  tmp3646 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3646 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal404 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3646 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3646
; -----------------------------------------------
; function __AppMold_getAstTypeCast$0
; -----------------------------------------------
__AppMold_getAstTypeCast$0:
  ; init frame
  ; ----------
  tmp3647 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp3647 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal403 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3647 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp3647
; -----------------------------------------------
; function __ASTPrinterText__printNode_twoArgsOp$0
; -----------------------------------------------
__ASTPrinterText__printNode_twoArgsOp$0:
  ; init frame
  ; ----------
  tmp3665 EQU rbp - 24 ; 16 bytes
  tmp3664 EQU rbp - 40 ; 16 bytes
  tmp3659 EQU rbp - 44 ; 4 bytes
  tmp3657 EQU rbp - 48 ; 4 bytes
  tmp3655 EQU rbp - 52 ; 4 bytes
  tmp3653 EQU rbp - 68 ; 16 bytes
  tmp3652 EQU rbp - 72 ; 4 bytes
  tmp3650 EQU rbp - 76 ; 4 bytes
  tmp3649 EQU rbp - 80 ; 4 bytes
  tmp3648 EQU rbp - 96 ; 16 bytes
  useParentForY EQU rbp - 100 ; 4 bytes
  useParentForX EQU rbp - 104 ; 4 bytes
  y EQU rbp - 120 ; 16 bytes
  x EQU rbp - 136 ; 16 bytes
  children EQU rbp - 152 ; 16 bytes
  op EQU rbp - 168 ; 16 bytes
  node EQU rbp - 184 ; 16 bytes
  this EQU rbp - 200 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ op ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3648 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3653 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3664 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3665 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3649 ], 0
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3649 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3649 ], 1
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3649 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ useParentForX ], 0
  mov dword [ useParentForY ], 0
  mov dword [ tmp3650 ], 1
  lea  rcx, [ tmp3648 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3648 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3649 ], 60
  mov [ tmp3653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3649 ]
  mov [ tmp3653 + Variant_t.value], rax
  lea rcx, [ tmp3648 ]
  lea rdx, [ tmp3653 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3651
  mov dword [ tmp3652 ], 1
  lea  rcx, [ tmp3653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3653 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3649 ], 61
  mov [ tmp3648 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3649 ]
  mov [ tmp3648 + Variant_t.value], rax
  lea rcx, [ tmp3653 ]
  lea rdx, [ tmp3648 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3654
  mov dword [ tmp3655 ], 1
  lea  rcx, [ tmp3648 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3648 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3649 ], 64
  mov [ tmp3653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3649 ]
  mov [ tmp3653 + Variant_t.value], rax
  lea rcx, [ tmp3648 ]
  lea rdx, [ tmp3653 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3656
  mov dword [ tmp3657 ], 1
  lea  rcx, [ tmp3653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3653 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3649 ], 72
  mov [ tmp3648 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3649 ]
  mov [ tmp3648 + Variant_t.value], rax
  lea rcx, [ tmp3653 ]
  lea rdx, [ tmp3648 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3658
  lea  rcx, [ tmp3648 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3648 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3649 ], 73
  mov [ tmp3653 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3649 ]
  mov [ tmp3653 + Variant_t.value], rax
  lea  rcx , [ tmp3648 ]
  lea  rdx , [ tmp3653 ]
  lea  r8 , [ tmp3657 ]
  call  __MOLD_VariantCompareEQ
l3658:
  mov eax, dword [ tmp3657 ]
  mov dword [ tmp3655 ], eax
l3656:
  mov eax, dword [ tmp3655 ]
  mov dword [ tmp3652 ], eax
l3654:
  mov eax, dword [ tmp3652 ]
  mov dword [ tmp3650 ], eax
l3651:
  cmp dword [ tmp3650 ], 0
  jz l3660
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp3655 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmOrVar
  pop rdi
  mov dword [ tmp3657 ], 1
  xor  eax, eax
  or   dword [ tmp3655 ], eax
  setz cl
  or   dword [ tmp3657 ], eax
  setz al
  xor  al, cl
  mov  dword [ useParentForX ], eax
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp3657 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmOrVar
  pop rdi
  mov dword [ tmp3655 ], 1
  xor  eax, eax
  or   dword [ tmp3657 ], eax
  setz cl
  or   dword [ tmp3655 ], eax
  setz al
  xor  al, cl
  mov  dword [ useParentForY ], eax
l3660:
l3661:
  mov dword [ tmp3652 ], 1
  xor  eax, eax
  or   dword [ useParentForX ], eax
  setz cl
  or   dword [ tmp3652 ], eax
  setz al
  xor  al, cl
  jnz l3662
  lea  rcx , [ __literal408 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ x ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal176 ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3663
l3662:
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ x ]
  call  __ASTPrinterText__printNode$0
l3663:
  lea  rcx, [ tmp3665 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ op ]
  lea  rdx , [ __literal315 ]
  lea  r8 , [ tmp3665 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3664 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal315 ]
  lea  rdx , [ tmp3665 ]
  lea  r8 , [ tmp3664 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3664 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3652 ], 1
  xor  eax, eax
  or   dword [ useParentForY ], eax
  setz cl
  or   dword [ tmp3652 ], eax
  setz al
  xor  al, cl
  jnz l3666
  lea  rcx , [ __literal408 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ y ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal176 ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3667
l3666:
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ y ]
  call  __ASTPrinterText__printNode$0
l3667:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3648 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3653 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore node
  restore op
  restore children
  restore x
  restore y
  restore useParentForX
  restore useParentForY
  restore tmp3648
  restore tmp3649
  restore tmp3650
  restore tmp3652
  restore tmp3653
  restore tmp3655
  restore tmp3657
  restore tmp3659
  restore tmp3664
  restore tmp3665
; -----------------------------------------------
; function __ASTPrinterText__printNode_codeBlock$0
; -----------------------------------------------
__ASTPrinterText__printNode_codeBlock$0:
  ; init frame
  ; ----------
  childNode EQU rbp - 24 ; 16 bytes
  tmp3686 EQU rbp - 28 ; 4 bytes
  tmp3681 EQU rbp - 44 ; 16 bytes
  tmp3678 EQU rbp - 60 ; 16 bytes
  tmp3675 EQU rbp - 64 ; 4 bytes
  tmp3673 EQU rbp - 80 ; 16 bytes
  tmp3672 EQU rbp - 84 ; 4 bytes
  tmp3671 EQU rbp - 100 ; 16 bytes
  tmp3670 EQU rbp - 104 ; 4 bytes
  tmp3668 EQU rbp - 108 ; 4 bytes
  node EQU rbp - 124 ; 16 bytes
  prefix EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ prefix ], xmm0
  or [ prefix  + Variant_t.flags ], VARIANT_FLAG_DUPLICATE_ON_FIRST_WRITE
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [tmp3671 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3673 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3678 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3681 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  mov dword [ tmp3668 ], 0
  lea  rcx, [ tmp3671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3671 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3672 ], 33
  mov [ tmp3673 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3672 ]
  mov [ tmp3673 + Variant_t.value], rax
  lea rcx, [ tmp3671 ]
  lea rdx, [ tmp3673 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3669
  mov dword [ tmp3670 ], 0
  lea  rcx, [ tmp3673 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3673 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3672 ], 32
  mov [ tmp3671 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3672 ]
  mov [ tmp3671 + Variant_t.value], rax
  lea rcx, [ tmp3673 ]
  lea rdx, [ tmp3671 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3674
  lea  rcx, [ tmp3671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3671 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3672 ], 34
  mov [ tmp3673 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3672 ]
  mov [ tmp3673 + Variant_t.value], rax
  lea  rcx , [ tmp3671 ]
  lea  rdx , [ tmp3673 ]
  lea  r8 , [ tmp3670 ]
  call  __MOLD_VariantCompareNE
l3674:
  mov eax, dword [ tmp3670 ]
  mov dword [ tmp3668 ], eax
l3669:
  cmp dword [ tmp3668 ], 0
  jz l3676
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal409 ]
  lea  r8 , [ prefix ]
  call  __MOLD_VariantStringJoin
l3676:
l3677:
  lea  rcx, [ tmp3673 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3673 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l3680
l3679:
  lea  rcx, [ tmp3671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3671 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3672 ], 76
  mov [ tmp3681 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3672 ]
  mov [ tmp3681 + Variant_t.value], rax
  lea rcx, [ tmp3671 ]
  lea rdx, [ tmp3681 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3682
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ childNode ]
  call  __ASTPrinterText__printNode$0
  mov dword [ tmp3670 ], 0
  lea  rcx, [ tmp3681 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3681 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3672 ], 31
  mov [ tmp3671 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3672 ]
  mov [ tmp3671 + Variant_t.value], rax
  lea rcx, [ tmp3681 ]
  lea rdx, [ tmp3671 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3684
  mov dword [ tmp3675 ], 0
  lea  rcx, [ tmp3671 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childNode ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3671 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3672 ], 40
  mov [ tmp3681 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3672 ]
  mov [ tmp3681 + Variant_t.value], rax
  lea rcx, [ tmp3671 ]
  lea rdx, [ tmp3681 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3685
  lea  rcx, [ tmp3681 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3681 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3672 ], 33
  mov [ tmp3671 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3672 ]
  mov [ tmp3671 + Variant_t.value], rax
  lea  rcx , [ tmp3681 ]
  lea  rdx , [ tmp3671 ]
  lea  r8 , [ tmp3675 ]
  call  __MOLD_VariantCompareNE
l3685:
  mov eax, dword [ tmp3675 ]
  mov dword [ tmp3670 ], eax
l3684:
  cmp dword [ tmp3670 ], 0
  jz l3687
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
l3687:
l3688:
l3682:
l3683:
  ret
l3680:
  lea  rcx , [ tmp3673 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3679 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3671 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3673 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3681 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore prefix
  restore node
  restore tmp3668
  restore tmp3670
  restore tmp3671
  restore tmp3672
  restore tmp3673
  restore tmp3675
  restore tmp3678
  restore tmp3681
  restore tmp3686
  restore childNode
; -----------------------------------------------
; function __ASTPrinterText__printNode_paramsList$0
; -----------------------------------------------
__ASTPrinterText__printNode_paramsList$0:
  ; init frame
  ; ----------
  idx EQU rbp - 12 ; 4 bytes
  tmp3696 EQU rbp - 16 ; 4 bytes
  tmp3695 EQU rbp - 20 ; 4 bytes
  tmp3694 EQU rbp - 24 ; 4 bytes
  tmp3691 EQU rbp - 28 ; 4 bytes
  tmp3690 EQU rbp - 32 ; 4 bytes
  tmp3689 EQU rbp - 48 ; 16 bytes
  sep EQU rbp - 64 ; 16 bytes
  childrenCnt EQU rbp - 80 ; 16 bytes
  children EQU rbp - 96 ; 16 bytes
  parenthesis EQU rbp - 112 ; 16 bytes
  beginIdx EQU rbp - 128 ; 16 bytes
  node EQU rbp - 144 ; 16 bytes
  this EQU rbp - 160 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ beginIdx ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ parenthesis ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [sep + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3689 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
  mov dword [ tmp3691 ], 1
  mov eax, dword [ tmp3691 ]
  mov [ tmp3689 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3689 + Variant_t.value], rax
  lea rcx, [ parenthesis ]
  lea rdx, [ tmp3689 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3692
  lea  rcx , [ __literal408 ]
  mov eax,  45
  call  __MOLD_SysCall
l3692:
l3693:
  mov dword [ tmp3694 ], 1
  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp3695 ], eax
  cmp [ beginIdx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ beginIdx + Variant_t.value]
  mov dword [ idx ], eax
;
; -----------------------------
; BEGIN: for idx in tmp3696 .. tmp3695
;
l3697:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp3695 ]
  jge l3698
  lea  rcx , [ sep ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ tmp3689 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3689 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3689 ]
  call  __ASTPrinterText__printNode$0
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal410 ]
  call __MOLD_VariantMove
  mov eax, dword [ idx ]
  add eax, dword [ tmp3694 ]
  mov dword [ idx ], eax
  jmp l3697
l3698:
;
; END: for idx in tmp3696 .. tmp3695 step tmp3694
; -----------------------------
;
  mov dword [ tmp3691 ], 1
  mov eax, dword [ tmp3691 ]
  mov [ tmp3689 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3689 + Variant_t.value], rax
  lea rcx, [ parenthesis ]
  lea rdx, [ tmp3689 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3699
  lea  rcx , [ __literal176 ]
  mov eax,  45
  call  __MOLD_SysCall
l3699:
l3700:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3689 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore node
  restore beginIdx
  restore parenthesis
  restore children
  restore childrenCnt
  restore sep
  restore tmp3689
  restore tmp3690
  restore tmp3691
  restore tmp3694
  restore tmp3695
  restore tmp3696
  restore idx
; -----------------------------------------------
; function __ASTPrinterText__printNode$0
; -----------------------------------------------
__ASTPrinterText__printNode$0:
  ; init frame
  ; ----------
  tmp3871 EQU rbp - 12 ; 4 bytes
  tmp3868 EQU rbp - 16 ; 4 bytes
  tmp3865 EQU rbp - 20 ; 4 bytes
  tmp3862 EQU rbp - 24 ; 4 bytes
  tmp3859 EQU rbp - 28 ; 4 bytes
  tmp3856 EQU rbp - 32 ; 4 bytes
  tmp3853 EQU rbp - 36 ; 4 bytes
  tmp3850 EQU rbp - 40 ; 4 bytes
  tmp3847 EQU rbp - 44 ; 4 bytes
  tmp3844 EQU rbp - 48 ; 4 bytes
  tmp3841 EQU rbp - 52 ; 4 bytes
  tmp3838 EQU rbp - 56 ; 4 bytes
  tmp3831 EQU rbp - 60 ; 4 bytes
  tmp3829 EQU rbp - 64 ; 4 bytes
  tmp3826 EQU rbp - 68 ; 4 bytes
  symbolInfo EQU rbp - 84 ; 16 bytes
  tmp3819 EQU rbp - 100 ; 16 bytes
  tmp3816 EQU rbp - 104 ; 4 bytes
  tmp3814 EQU rbp - 108 ; 4 bytes
  tmp3812 EQU rbp - 112 ; 4 bytes
  tmp3809 EQU rbp - 116 ; 4 bytes
  tmp3804 EQU rbp - 120 ; 4 bytes
  tmp3799 EQU rbp - 124 ; 4 bytes
  tmp3796 EQU rbp - 128 ; 4 bytes
  tmp3793 EQU rbp - 132 ; 4 bytes
  oneValue EQU rbp - 148 ; 16 bytes
  arrayOfValues EQU rbp - 164 ; 16 bytes
  idx EQU rbp - 168 ; 4 bytes
  tmp3784 EQU rbp - 172 ; 4 bytes
  tmp3781 EQU rbp - 176 ; 4 bytes
  tmp3776 EQU rbp - 180 ; 4 bytes
  tmp3771 EQU rbp - 184 ; 4 bytes
  tmp3768 EQU rbp - 188 ; 4 bytes
  oneParam EQU rbp - 204 ; 16 bytes
  item EQU rbp - 220 ; 16 bytes
  symbols EQU rbp - 236 ; 16 bytes
  symbolTable EQU rbp - 252 ; 16 bytes
  tmp3744 EQU rbp - 268 ; 16 bytes
  tmp3743 EQU rbp - 272 ; 4 bytes
  tmp3739 EQU rbp - 276 ; 4 bytes
  tmp3737 EQU rbp - 280 ; 4 bytes
  tmp3732 EQU rbp - 284 ; 4 bytes
  tmp3729 EQU rbp - 288 ; 4 bytes
  tmp3720 EQU rbp - 292 ; 4 bytes
  tmp3717 EQU rbp - 296 ; 4 bytes
  childNode EQU rbp - 312 ; 16 bytes
  sep EQU rbp - 328 ; 16 bytes
  tmp3710 EQU rbp - 344 ; 16 bytes
  tmp3709 EQU rbp - 348 ; 4 bytes
  tmp3706 EQU rbp - 352 ; 4 bytes
  tmp3703 EQU rbp - 356 ; 4 bytes
  tmp3702 EQU rbp - 360 ; 4 bytes
  tmp3701 EQU rbp - 376 ; 16 bytes
  x EQU rbp - 392 ; 16 bytes
  rval EQU rbp - 408 ; 16 bytes
  lval EQU rbp - 424 ; 16 bytes
  childrenCnt EQU rbp - 428 ; 4 bytes
  children EQU rbp - 444 ; 16 bytes
  value EQU rbp - 460 ; 16 bytes
  opcode EQU rbp - 464 ; 4 bytes
  node EQU rbp - 480 ; 16 bytes
  prefix EQU rbp - 496 ; 16 bytes
  this EQU rbp - 512 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 544

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ prefix ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ node ], xmm0
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [lval + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3701 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3710 + Variant_t.type], VARIANT_UNDEFINED
  mov [sep + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp3744 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [symbols + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [arrayOfValues + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp3819 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3701 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp3701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3701 + Variant_t.value]
  mov dword [ childrenCnt ], eax
  mov dword [ tmp3702 ], 0
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3702 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp3702 ], 1
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3702 ]
  lea  r8 , [ rval ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ lval ]
  call __MOLD_VariantMove
  mov dword [ tmp3702 ], 4
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3704
  lea  rcx , [ __literal22 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ value ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ __literal22 ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3705
l3704:
  mov dword [ tmp3702 ], 9
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3707
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3710 ]
  lea  rdi , [ tmp3701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp3701 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3711
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3701 ]
  call  __MOLD_PrintVariantLn
  jmp l3712
l3711:
  lea  rcx , [ __literal411 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l3714
l3713:
  lea  rcx , [ sep ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ childNode ]
  call  __ASTPrinterText__printNode$0
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal410 ]
  call __MOLD_VariantMove
  ret
l3714:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3713 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
  lea  rcx , [ __literal77 ]
  mov eax,  45
  call  __MOLD_SysCall
l3712:
  jmp l3708
l3707:
  mov dword [ tmp3702 ], 10
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3715
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3710 ]
  lea  rdi , [ tmp3701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp3701 ]
  lea rdx, [ __literal121 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3718
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3701 ]
  call  __MOLD_PrintVariantLn
  jmp l3719
l3718:
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3710 ]
  lea  rdi , [ tmp3701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3702 ], 0
  mov [ tmp3710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3702 ]
  mov [ tmp3710 + Variant_t.value], rax
  lea rcx, [ tmp3701 ]
  lea rdx, [ tmp3710 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3721
  lea  rcx , [ __literal412 ]
  call  __MOLD_PrintVariantLn
  jmp l3722
l3721:
  lea  rcx , [ __literal413 ]
  call  __MOLD_PrintVariantLn
l3722:
l3719:
  jmp l3716
l3715:
  mov dword [ tmp3702 ], 30
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jge l3723
  lea  rcx , [ value ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3724
l3723:
  mov dword [ tmp3702 ], 30
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3725
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l3728
l3727:
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ childNode ]
  call  __ASTPrinterText__printNode$0
  ret
l3728:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3727 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
  jmp l3726
l3725:
  mov dword [ tmp3702 ], 31
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3730
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi , [ tmp3710 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3702 ], 0
  mov [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3702 ]
  mov [ tmp3701 + Variant_t.value], rax
  lea rcx, [ tmp3710 ]
  lea rdx, [ tmp3701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3733
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp3701 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 32
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols ]
  lea rdx, [ tmp3701 ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l3736
l3735:
  mov dword [ tmp3737 ], 0
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3702 ], 5
  mov [ tmp3710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3702 ]
  mov [ tmp3710 + Variant_t.value], rax
  lea rcx, [ tmp3701 ]
  lea rdx, [ tmp3710 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3738
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3702 ], 0
  mov [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3702 ]
  mov [ tmp3701 + Variant_t.value], rax
  lea  rcx , [ tmp3701 ]
  lea  rdx , [ tmp3710 ]
  lea  r8 , [ tmp3737 ]
  call  __MOLD_VariantCompareLT
l3738:
  cmp dword [ tmp3737 ], 0
  jz l3740
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3739 ], 1
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3744 ]
  lea rdx, [ __const3745 ]
  call __MOLD_VariantMove
  lea rcx, [ tmp3744 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3742
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3744 ]
  lea rdx, [ __const3746 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp3744 ]
  lea  rdx , [ __literal121 ]
  lea  r8 , [ tmp3739 ]
  call  __MOLD_VariantCompareEQ
l3742:
  cmp dword [ tmp3739 ], 0
  jz l3747
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 5 ]
  lea  rdx , [ prefix ]
  lea  r8 , [ __literal414 ]
  lea  r9 , [ tmp3701 ]
  lea  rax , [ __literal106 ]
  push rax
  lea  rax , [ value ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16
l3747:
l3748:
l3740:
l3741:
  ret
l3736:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l3735 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
l3733:
l3734:
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ node ]
  call  __ASTPrinterText__printNode_codeBlock$0
  jmp l3731
l3730:
  mov dword [ tmp3702 ], 33
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3749
  lea  rcx , [ __literal415 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3701 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ node ]
  call  __ASTPrinterText__printNode_codeBlock$0
  lea  rcx , [ __literal416 ]
  call  __MOLD_PrintVariantLn
  jmp l3750
l3749:
  mov dword [ tmp3737 ], 1
  mov dword [ tmp3702 ], 34
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jz l3751
  mov dword [ tmp3702 ], 32
  mov dword [ tmp3737 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3702 ]
  setz byte [ tmp3737 ]
l3751:
  cmp dword [ tmp3737 ], 0
  jz l3752
  mov dword [ tmp3702 ], 34
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3754
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal417 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3744 ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3755
l3754:
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal418 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3744 ]
  mov eax,  45
  call  __MOLD_SysCall
l3755:
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp3701 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ __literal408 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values oneParam
;
  jmp l3757
l3756:
  lea  rcx , [ sep ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ oneParam ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal410 ]
  call __MOLD_VariantMove
  ret
l3757:
  lea  rcx , [ tmp3701 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l3756 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneParam
; -----------------------------
;
  lea  rcx , [ __literal176 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3710 ]
  lea  rdi , [ tmp3701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3702 ], 0
  mov [ tmp3710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3702 ]
  mov [ tmp3710 + Variant_t.value], rax
  lea rcx, [ tmp3701 ]
  lea rdx, [ tmp3710 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3758
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal419 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l3759
l3758:
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
l3759:
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ node ]
  call  __ASTPrinterText__printNode_codeBlock$0
  mov dword [ tmp3702 ], 34
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3760
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal420 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3744 ]
  call  __MOLD_PrintVariantLn
  jmp l3761
l3760:
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal421 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3744 ]
  call  __MOLD_PrintVariantLn
l3761:
  jmp l3753
l3752:
  mov dword [ tmp3702 ], 36
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3762
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3701 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3702 ], 31
  mov [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3702 ]
  mov [ tmp3701 + Variant_t.value], rax
  lea rcx, [ tmp3710 ]
  lea rdx, [ tmp3701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3764
  lea  rcx , [ prefix ]
  mov eax,  45
  call  __MOLD_SysCall
l3764:
l3765:
  mov dword [ tmp3702 ], 0
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3702 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal257 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ value ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3702 ], 1
  mov [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3702 ]
  mov [ tmp3701 + Variant_t.value], rax
  mov dword [ tmp3743 ], 1
  mov eax, dword [ tmp3743 ]
  mov [ tmp3710 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3710 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ tmp3701 ]
  lea  r9 , [ tmp3710 ]
  call  __ASTPrinterText__printNode_paramsList$0
  jmp l3763
l3762:
  mov dword [ tmp3702 ], 37
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3766
  lea  rcx , [ __literal422 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ value ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3702 ], 1
  mov [ tmp3710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3702 ]
  mov [ tmp3710 + Variant_t.value], rax
  mov dword [ tmp3768 ], 1
  mov eax, dword [ tmp3768 ]
  mov [ tmp3701 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3701 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ tmp3710 ]
  lea  r9 , [ tmp3701 ]
  call  __ASTPrinterText__printNode_paramsList$0
  jmp l3767
l3766:
  mov dword [ tmp3702 ], 40
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3769
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal423 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3744 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3702 ], 0
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3702 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3702 ], 1
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3702 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3710 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3702 ], 40
  mov [ tmp3710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3702 ]
  mov [ tmp3710 + Variant_t.value], rax
  lea rcx, [ tmp3701 ]
  lea rdx, [ tmp3710 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3772
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal409 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  mov dword [ tmp3702 ], 1
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3702 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp3744 ]
  lea  r8 , [ tmp3710 ]
  call  __ASTPrinterText__printNode$0
  jmp l3773
l3772:
  mov dword [ tmp3702 ], 1
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3702 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3710 ]
  call  __ASTPrinterText__printNode$0
l3773:
  mov dword [ tmp3702 ], 3
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp3702 ]
  jnz l3774
  lea  rcx , [ prefix ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ __literal424 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3702 ], 2
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3702 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3701 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3702 ], 40
  mov [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3702 ]
  mov [ tmp3701 + Variant_t.value], rax
  lea rcx, [ tmp3710 ]
  lea rdx, [ tmp3701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3777
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal409 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  mov dword [ tmp3702 ], 2
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3702 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp3744 ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
  jmp l3778
l3777:
  mov dword [ tmp3702 ], 2
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3702 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
l3778:
l3774:
l3775:
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal425 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3744 ]
  call  __MOLD_PrintVariantLn
  jmp l3770
l3769:
  mov dword [ tmp3702 ], 50
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3702 ]
  jnz l3779
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal426 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3744 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3702 ], 0
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3702 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3702 ], 1
  mov dword [ idx ], 1
;
; -----------------------------
; BEGIN: for idx in tmp3781 .. childrenCnt
;
l3782:
  mov eax, dword [ idx ]
  cmp eax, dword [ childrenCnt ]
  jge l3783
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3710 ]
  lea  rdx , [ __literal352 ]
  lea  r8 , [ arrayOfValues ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ arrayOfValues ]
  lea  rdi , [ tmp3701 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3784 ], 0
  mov [ tmp3710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3784 ]
  mov [ tmp3710 + Variant_t.value], rax
  lea rcx, [ tmp3701 ]
  lea rdx, [ tmp3710 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3785
  lea  rcx , [ prefix ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ __literal427 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys undefined values oneValue
;
  jmp l3788
l3787:
  lea  rcx , [ sep ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ oneValue ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal410 ]
  call __MOLD_VariantMove
  ret
l3788:
  lea  rcx , [ arrayOfValues ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneValue ]
  lea  r9 , [ l3787 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneValue
; -----------------------------
;
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  jmp l3786
l3785:
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal428 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3744 ]
  call  __MOLD_PrintVariantLn
l3786:
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3701 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3784 ], 31
  mov [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3784 ]
  mov [ tmp3701 + Variant_t.value], rax
  lea rcx, [ tmp3710 ]
  lea rdx, [ tmp3701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3789
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal409 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp3744 ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
  jmp l3790
l3789:
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal429 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp3744 ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
l3790:
  mov eax, dword [ idx ]
  add eax, dword [ tmp3702 ]
  mov dword [ idx ], eax
  jmp l3782
l3783:
;
; END: for idx in tmp3781 .. childrenCnt step tmp3702
; -----------------------------
;
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ prefix ]
  lea  rdx , [ __literal430 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3744 ]
  call  __MOLD_PrintVariantLn
  jmp l3780
l3779:
  mov dword [ tmp3781 ], 75
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3791
  mov dword [ tmp3781 ], 0
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
  jmp l3792
l3791:
  mov dword [ tmp3781 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3794
  lea  rcx , [ prefix ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ value ]
  mov eax,  45
  call  __MOLD_SysCall
  lea rcx, [ value ]
  lea rdx, [ __literal16 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3797
  lea  rcx , [ __literal315 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3781 ], 0
  mov [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3781 ]
  mov [ tmp3701 + Variant_t.value], rax
  mov dword [ tmp3799 ], 0
  mov eax, dword [ tmp3799 ]
  mov [ tmp3710 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3710 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ tmp3701 ]
  lea  r9 , [ tmp3710 ]
  call  __ASTPrinterText__printNode_paramsList$0
  jmp l3798
l3797:
  mov dword [ tmp3781 ], 0
  mov [ tmp3710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3781 ]
  mov [ tmp3710 + Variant_t.value], rax
  mov dword [ tmp3799 ], 1
  mov eax, dword [ tmp3799 ]
  mov [ tmp3701 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3701 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ tmp3710 ]
  lea  r9 , [ tmp3701 ]
  call  __ASTPrinterText__printNode_paramsList$0
l3798:
  jmp l3795
l3794:
  mov dword [ tmp3781 ], 43
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3800
  lea  rcx , [ prefix ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ __literal433 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3781 ], 0
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3781 ], 1
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode_codeBlock$0
  lea  rcx , [ prefix ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ __literal434 ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3801
l3800:
  mov dword [ tmp3781 ], 44
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3802
  lea  rcx , [ prefix ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ __literal435 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3781 ], 0
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal436 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3781 ], 1
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal437 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3781 ], 2
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3701 ]
  call  __ASTPrinterText__printNode$0
  mov dword [ tmp3781 ], 3
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3710 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3781 ], 1
  mov [ tmp3710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3781 ]
  mov [ tmp3710 + Variant_t.value], rax
  lea rcx, [ tmp3701 ]
  lea rdx, [ tmp3710 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3805
  lea  rcx , [ __literal438 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3781 ], 3
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3710 ]
  call  __ASTPrinterText__printNode$0
l3805:
l3806:
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3781 ], 4
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3710 ]
  call  __ASTPrinterText__printNode_codeBlock$0
  lea  rcx , [ prefix ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ __literal439 ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3803
l3802:
  mov dword [ tmp3781 ], 45
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3807
  lea  rcx , [ prefix ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ __literal440 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3781 ], 0
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3710 ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal436 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3781 ], 1
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ tmp3710 ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp3781 ], 2
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp3781 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ tmp3710 ]
  call  __ASTPrinterText__printNode_codeBlock$0
  lea  rcx , [ prefix ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ __literal439 ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3808
l3807:
  mov dword [ tmp3781 ], 52
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3810
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal132 ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3812 ], 0
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp3710 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3781 ], 0
  mov [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3781 ]
  mov [ tmp3701 + Variant_t.value], rax
  lea rcx, [ tmp3710 ]
  lea rdx, [ tmp3701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3813
  mov dword [ tmp3814 ], 0
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3781 ], 5
  mov [ tmp3710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3781 ]
  mov [ tmp3710 + Variant_t.value], rax
  lea rcx, [ tmp3701 ]
  lea rdx, [ tmp3710 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3815
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3701 ]
  lea  rdi , [ tmp3710 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp3710 ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp3814 ]
  call  __MOLD_VariantCompareEQ
l3815:
  mov eax, dword [ tmp3814 ]
  mov dword [ tmp3812 ], eax
l3813:
  cmp dword [ tmp3812 ], 0
  jz l3817
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3701 ]
  lea  rdi , [ tmp3710 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3819 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3710 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp3819 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp3819 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStringJoin
l3817:
l3818:
  lea  rcx , [ value ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3811
l3810:
  mov dword [ tmp3781 ], 54
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3820
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ lval ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal411 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ rval ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal77 ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3821
l3820:
  mov dword [ tmp3781 ], 55
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3822
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ lval ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal441 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ rval ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal442 ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3823
l3822:
  mov dword [ tmp3781 ], 56
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3824
  lea  rcx , [ prefix ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ lval ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal443 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ rval ]
  call  __ASTPrinterText__printNode$0
  jmp l3825
l3824:
  mov dword [ tmp3781 ], 57
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3827
  lea  rcx , [ __literal444 ]
  mov eax,  45
  call  __MOLD_SysCall
  mov dword [ tmp3829 ], 1
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3710 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3781 ], 58
  mov [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3781 ]
  mov [ tmp3701 + Variant_t.value], rax
  lea rcx, [ tmp3710 ]
  lea rdx, [ tmp3701 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3830
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ x ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3701 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3781 ], 59
  mov [ tmp3710 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3781 ]
  mov [ tmp3710 + Variant_t.value], rax
  lea  rcx , [ tmp3701 ]
  lea  rdx , [ tmp3710 ]
  lea  r8 , [ tmp3829 ]
  call  __MOLD_VariantCompareEQ
l3830:
  cmp dword [ tmp3829 ], 0
  jz l3832
  lea  rcx , [ __literal408 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ x ]
  call  __ASTPrinterText__printNode$0
  lea  rcx , [ __literal176 ]
  mov eax,  45
  call  __MOLD_SysCall
  jmp l3833
l3832:
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  lea  r8 , [ x ]
  call  __ASTPrinterText__printNode$0
l3833:
  jmp l3828
l3827:
  mov dword [ tmp3781 ], 58
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3834
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal90 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3835
l3834:
  mov dword [ tmp3781 ], 59
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3836
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal89 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3837
l3836:
  mov dword [ tmp3781 ], 60
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3839
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal92 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3840
l3839:
  mov dword [ tmp3781 ], 61
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3842
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal93 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3843
l3842:
  mov dword [ tmp3781 ], 64
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3845
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal94 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3846
l3845:
  mov dword [ tmp3781 ], 66
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3848
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal445 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3849
l3848:
  mov dword [ tmp3781 ], 67
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3851
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal446 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3852
l3851:
  mov dword [ tmp3781 ], 68
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3854
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal447 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3855
l3854:
  mov dword [ tmp3781 ], 69
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3857
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal448 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3858
l3857:
  mov dword [ tmp3781 ], 70
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3860
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal449 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3861
l3860:
  mov dword [ tmp3781 ], 71
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3863
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal450 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3864
l3863:
  mov dword [ tmp3781 ], 72
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3866
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal87 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3867
l3866:
  mov dword [ tmp3781 ], 73
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jnz l3869
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  lea  r8 , [ __literal88 ]
  call  __ASTPrinterText__printNode_twoArgsOp$0
  jmp l3870
l3869:
  mov dword [ tmp3781 ], 76
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3781 ]
  jz l3872
  mov [ tmp3701 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp3701 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp3701 ]
  lea  rdi , [ tmp3710 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3744 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal118 ]
  lea  rdx , [ tmp3710 ]
  lea  r8 , [ tmp3744 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3744 ]
  mov eax,  41
  call  __MOLD_SysCall
l3872:
l3873:
l3870:
l3867:
l3864:
l3861:
l3858:
l3855:
l3852:
l3849:
l3846:
l3843:
l3840:
l3837:
l3835:
l3828:
l3825:
l3823:
l3821:
l3811:
l3808:
l3803:
l3801:
l3795:
l3792:
l3780:
l3770:
l3767:
l3763:
l3753:
l3750:
l3731:
l3726:
l3724:
l3716:
l3708:
l3705:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3701 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3710 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  ; Skipped loop iterator oneParam
  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneValue
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 544
  pop  rbp
  ret

  restore this
  restore prefix
  restore node
  restore opcode
  restore value
  restore children
  restore childrenCnt
  restore lval
  restore rval
  restore x
  restore tmp3701
  restore tmp3702
  restore tmp3703
  restore tmp3706
  restore tmp3709
  restore tmp3710
  restore sep
  restore childNode
  restore tmp3717
  restore tmp3720
  restore tmp3729
  restore tmp3732
  restore tmp3737
  restore tmp3739
  restore tmp3743
  restore tmp3744
  restore symbolTable
  restore symbols
  restore item
  restore oneParam
  restore tmp3768
  restore tmp3771
  restore tmp3776
  restore tmp3781
  restore tmp3784
  restore idx
  restore arrayOfValues
  restore oneValue
  restore tmp3793
  restore tmp3796
  restore tmp3799
  restore tmp3804
  restore tmp3809
  restore tmp3812
  restore tmp3814
  restore tmp3816
  restore tmp3819
  restore symbolInfo
  restore tmp3826
  restore tmp3829
  restore tmp3831
  restore tmp3838
  restore tmp3841
  restore tmp3844
  restore tmp3847
  restore tmp3850
  restore tmp3853
  restore tmp3856
  restore tmp3859
  restore tmp3862
  restore tmp3865
  restore tmp3868
  restore tmp3871
; -----------------------------------------------
; function __ASTPrinterText_printNode$0
; -----------------------------------------------
__ASTPrinterText_printNode$0:
  ; init frame
  ; ----------
  prefix EQU rbp - 24 ; 16 bytes
  node EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [prefix + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ prefix ]
  call __MOLD_VariantDestroy
  lea rcx, [ prefix ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ prefix ]
  lea  r8 , [ node ]
  call  __ASTPrinterText__printNode$0

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore node
  restore prefix
; -----------------------------------------------
; function __ASTPrinterHtml__printSymbolTable$0
; -----------------------------------------------
__ASTPrinterHtml__printSymbolTable$0:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  symbolInfo EQU rbp - 40 ; 16 bytes
  symbolId EQU rbp - 56 ; 16 bytes
  tmp3887 EQU rbp - 72 ; 16 bytes
  tmp3883 EQU rbp - 88 ; 16 bytes
  tmp3882 EQU rbp - 92 ; 4 bytes
  tmp3879 EQU rbp - 96 ; 4 bytes
  tmp3878 EQU rbp - 112 ; 16 bytes
  tmp3877 EQU rbp - 116 ; 4 bytes
  tmp3874 EQU rbp - 132 ; 16 bytes
  symbols EQU rbp - 148 ; 16 bytes
  symbolTable EQU rbp - 164 ; 16 bytes
  this EQU rbp - 180 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolTable ], xmm0
  mov [symbols + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3874 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3878 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3883 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3887 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [value + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdi, [ tmp3874 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 32
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols ]
  lea rdx, [ tmp3874 ]
  call __MOLD_VariantMove
  lea  rcx , [ __literal451 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal452 ]
  call  __MOLD_PrintVariantLn
;
; -----------------------------
; BEGIN: for keys symbolId values symbolInfo
;
  jmp l3876
l3875:
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea rcx, [ value ]
  lea rdx, [ __literal89 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3878 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp3878 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3878 ]
  lea  rdi , [ tmp3874 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3879 ], 0
  mov [ tmp3878 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3879 ]
  mov [ tmp3878 + Variant_t.value], rax
  lea rcx, [ tmp3874 ]
  lea rdx, [ tmp3878 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3880
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3883 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3883 ]
  lea rdx, [ __const3884 ]
  call __MOLD_VariantMove
  lea rcx, [ tmp3883 ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3885
  lea  rcx, [ tmp3887 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ __literal453 ]
  lea  r8 , [ tmp3887 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal453 ]
  lea  rdx , [ tmp3887 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStringJoin
l3885:
l3886:
l3880:
l3881:
  lea  rcx , [ __literal454 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3878 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3878 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal455 ]
  lea  r8 , [ tmp3878 ]
  lea  r9 , [ __literal456 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3878 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp3878 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal455 ]
  lea  r8 , [ tmp3878 ]
  lea  r9 , [ __literal456 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3878 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp3878 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal455 ]
  lea  r8 , [ tmp3878 ]
  lea  r9 , [ __literal456 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal455 ]
  lea  r8 , [ value ]
  lea  r9 , [ __literal456 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3874 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3874 + Variant_t.value]
  mov dword [ tmp3879 ], eax
  lea  rcx, [ tmp3878 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ SYMBOL_KIND_AS_TEXT ]
  lea  rdx , [ tmp3879 ]
  lea  r8 , [ tmp3878 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal455 ]
  lea  r8 , [ tmp3878 ]
  lea  r9 , [ __literal456 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3874 ]
  lea  rdi , [ tmp3878 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal455 ]
  lea  r8 , [ tmp3878 ]
  lea  r9 , [ __literal456 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3878 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal151 ]
  lea  r8 , [ tmp3878 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal455 ]
  lea  r8 , [ tmp3878 ]
  lea  r9 , [ __literal456 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3874 ]
  lea  rdi , [ tmp3878 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3879 ], 0
  mov [ tmp3874 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3879 ]
  mov [ tmp3874 + Variant_t.value], rax
  lea rcx, [ tmp3878 ]
  lea rdx, [ tmp3874 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3888
  lea  rcx, [ tmp3878 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ tmp3878 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3878 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3874 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3887 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3874 ]
  lea  rdx , [ __literal456 ]
  lea  r8 , [ tmp3887 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3883 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal455 ]
  lea  rdx , [ tmp3887 ]
  lea  r8 , [ tmp3883 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3883 ]
  call  __MOLD_PrintVariantLn
  jmp l3889
l3888:
  lea  rcx , [ __literal457 ]
  call  __MOLD_PrintVariantLn
l3889:
  lea  rcx , [ __literal458 ]
  call  __MOLD_PrintVariantLn
  ret
l3876:
  lea  rcx , [ symbols ]
  lea  rdx , [ symbolId ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l3875 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys symbolId values symbolInfo
; -----------------------------
;
  lea  rcx , [ __literal459 ]
  call  __MOLD_PrintVariantLn

  ; clean frame
  ; -----------
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3874 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3878 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore symbolTable
  restore symbols
  restore tmp3874
  restore tmp3877
  restore tmp3878
  restore tmp3879
  restore tmp3882
  restore tmp3883
  restore tmp3887
  restore symbolId
  restore symbolInfo
  restore value
; -----------------------------------------------
; function __ASTPrinterHtml__printNode$0
; -----------------------------------------------
__ASTPrinterHtml__printNode$0:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp3940 EQU rbp - 40 ; 16 bytes
  value EQU rbp - 56 ; 16 bytes
  tmp3929 EQU rbp - 72 ; 16 bytes
  tmp3928 EQU rbp - 88 ; 16 bytes
  tmp3922 EQU rbp - 92 ; 4 bytes
  tmp3920 EQU rbp - 96 ; 4 bytes
  tmp3918 EQU rbp - 100 ; 4 bytes
  childNode EQU rbp - 116 ; 16 bytes
  tmp3900 EQU rbp - 120 ; 4 bytes
  tmp3899 EQU rbp - 124 ; 4 bytes
  tmp3895 EQU rbp - 128 ; 4 bytes
  tmp3894 EQU rbp - 144 ; 16 bytes
  tmp3893 EQU rbp - 160 ; 16 bytes
  tmp3892 EQU rbp - 176 ; 16 bytes
  tmp3891 EQU rbp - 180 ; 4 bytes
  tmp3890 EQU rbp - 196 ; 16 bytes
  children EQU rbp - 212 ; 16 bytes
  opcode EQU rbp - 216 ; 4 bytes
  node EQU rbp - 232 ; 16 bytes
  this EQU rbp - 248 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3890 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3892 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3893 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3894 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp3928 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3929 + Variant_t.type], VARIANT_UNDEFINED
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3940 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp3890 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp3890 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3890 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3890 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ __literal460 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3893 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3893 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3893 ]
  lea  rdi , [ tmp3890 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3892 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal461 ]
  lea  rdx , [ tmp3890 ]
  lea  r8 , [ tmp3892 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp3894 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetOpcodeAsText
  pop rdi
  lea  rcx , [ 4 ]
  lea  rdx , [ tmp3892 ]
  lea  r8 , [ __literal462 ]
  lea  r9 , [ tmp3894 ]
  lea  rax , [ __literal463 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  lea  rcx, [ tmp3893 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp3893 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3893 ]
  lea  rdi , [ tmp3890 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3891 ], 0
  mov [ tmp3893 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3891 ]
  mov [ tmp3893 + Variant_t.value], rax
  lea rcx, [ tmp3890 ]
  lea rdx, [ tmp3893 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3896
  lea  rcx, [ tmp3893 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal124 ]
  lea  r8 , [ tmp3893 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal464 ]
  lea  r8 , [ tmp3893 ]
  lea  r9 , [ __literal465 ]
  call  __MOLD_PrintArrayOfVariantsLn
l3896:
l3897:
  mov dword [ tmp3895 ], 0
  lea  rcx, [ tmp3890 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal342 ]
  lea  r8 , [ tmp3890 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3890 ]
  lea  rdi , [ tmp3893 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3891 ], 0
  mov [ tmp3890 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3891 ]
  mov [ tmp3890 + Variant_t.value], rax
  lea rcx, [ tmp3893 ]
  lea rdx, [ tmp3890 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3898
  lea  rcx, [ tmp3890 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal342 ]
  lea  r8 , [ tmp3890 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp3900 ], 1
  mov eax, dword [ tmp3900 ]
  mov [ tmp3893 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp3893 + Variant_t.value], rax
  lea  rcx , [ tmp3890 ]
  lea  rdx , [ tmp3893 ]
  lea  r8 , [ tmp3895 ]
  call  __MOLD_VariantCompareEQ
l3898:
  cmp dword [ tmp3895 ], 0
  jz l3901
  lea  rcx , [ __literal466 ]
  call  __MOLD_PrintVariantLn
l3901:
l3902:
  mov dword [ tmp3895 ], 1
  mov dword [ tmp3891 ], 32
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3891 ]
  jz l3903
  mov dword [ tmp3891 ], 34
  mov dword [ tmp3895 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3891 ]
  setz byte [ tmp3895 ]
l3903:
  cmp dword [ tmp3895 ], 0
  jz l3904
  lea  rcx, [ tmp3893 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp3893 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal467 ]
  lea  r8 , [ tmp3893 ]
  lea  r9 , [ __literal468 ]
  call  __MOLD_PrintArrayOfVariantsLn
l3904:
l3905:
  mov dword [ tmp3895 ], 1
  mov dword [ tmp3891 ], 31
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3891 ]
  jz l3906
  mov dword [ tmp3891 ], 30
  mov dword [ tmp3895 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3891 ]
  setz byte [ tmp3895 ]
l3906:
  cmp dword [ tmp3895 ], 0
  jz l3907
  lea  rcx, [ tmp3890 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3890 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3890 ]
  lea  rdi , [ tmp3893 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3891 ], 0
  mov [ tmp3890 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3891 ]
  mov [ tmp3890 + Variant_t.value], rax
  lea rcx, [ tmp3893 ]
  lea rdx, [ tmp3890 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3909
  lea  rcx , [ __literal467 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3890 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3890 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp3890 ]
  call  __ASTPrinterHtml__printSymbolTable$0
  lea  rcx , [ __literal468 ]
  call  __MOLD_PrintVariantLn
l3909:
l3910:
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l3912
l3911:
  lea  rcx , [ __literal467 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  call  __ASTPrinterHtml__printNode$0
  lea  rcx , [ __literal468 ]
  call  __MOLD_PrintVariantLn
  ret
l3912:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3911 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
  jmp l3908
l3907:
  mov dword [ tmp3891 ], 33
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3891 ]
  jnz l3913
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l3916
l3915:
  lea  rcx , [ __literal467 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  call  __ASTPrinterHtml__printNode$0
  lea  rcx , [ __literal468 ]
  call  __MOLD_PrintVariantLn
  ret
l3916:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3915 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
  jmp l3914
l3913:
  mov dword [ tmp3900 ], 1
  mov dword [ tmp3891 ], 30
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3891 ]
  jl l3917
  mov dword [ tmp3918 ], 1
  mov dword [ tmp3891 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3891 ]
  jz l3919
  mov dword [ tmp3920 ], 1
  mov dword [ tmp3891 ], 36
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3891 ]
  jz l3921
  mov dword [ tmp3891 ], 52
  mov dword [ tmp3920 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp3891 ]
  setz byte [ tmp3920 ]
l3921:
  mov eax, dword [ tmp3920 ]
  mov dword [ tmp3918 ], eax
l3919:
  mov eax, dword [ tmp3918 ]
  mov dword [ tmp3900 ], eax
l3917:
  cmp dword [ tmp3900 ], 0
  jz l3923
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3894 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp3894 ]
  lea rdx, [ __const3925 ]
  call __MOLD_VariantMove
  lea rcx, [ tmp3894 ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3926
  push rdi
  lea  rcx , [ node ]
  lea  rdi , [ tmp3891 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov [ tmp3893 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3891 ]
  mov [ tmp3893 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp3893 ]
  lea  rdi , [ tmp3890 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ tmp3929 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3890 ]
  lea  rdx , [ __literal470 ]
  lea  r8 , [ tmp3929 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3928 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal469 ]
  lea  rdx , [ tmp3929 ]
  lea  r8 , [ tmp3928 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3892 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ value ]
  lea  rdx , [ tmp3928 ]
  lea  r8 , [ tmp3892 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp3892 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantStringJoin
l3926:
l3927:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal467 ]
  lea  r8 , [ value ]
  lea  r9 , [ __literal468 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l3924
l3923:
  mov dword [ tmp3891 ], 75
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3891 ]
  jnz l3930
  lea  rcx, [ tmp3893 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal129 ]
  lea  r8 , [ tmp3893 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3893 ]
  lea  rdi , [ tmp3890 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ tmp3892 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3890 ]
  lea  rdx , [ __literal472 ]
  lea  r8 , [ tmp3892 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3894 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal471 ]
  lea  rdx , [ tmp3892 ]
  lea  r8 , [ tmp3894 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3894 ]
  call  __MOLD_PrintVariantLn
l3930:
l3931:
l3924:
  lea  rcx , [ __literal454 ]
  call  __MOLD_PrintVariantLn
;
; -----------------------------
; BEGIN: for keys undefined values childNode
;
  jmp l3933
l3932:
  lea  rcx , [ __literal455 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  call  __ASTPrinterHtml__printNode$0
  lea  rcx , [ __literal456 ]
  call  __MOLD_PrintVariantLn
  ret
l3933:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l3932 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values childNode
; -----------------------------
;
  lea  rcx , [ __literal458 ]
  call  __MOLD_PrintVariantLn
l3914:
l3908:
  mov dword [ tmp3891 ], 52
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp3891 ]
  jnz l3934
  lea  rcx , [ __literal473 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp3893 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp3893 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3893 ]
  lea  rdi , [ tmp3890 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp3890 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3936
  lea  rcx, [ tmp3890 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp3890 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l3939
l3938:
  lea  rcx, [ tmp3940 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3940 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3940 ]
  lea  rdi , [ tmp3893 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3894 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal125 ]
  lea  rdx , [ tmp3893 ]
  lea  r8 , [ tmp3894 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp3894 ]
  lea  r8 , [ __literal474 ]
  call  __MOLD_PrintArrayOfVariantsLn
  ret
l3939:
  lea  rcx , [ tmp3890 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l3938 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  jmp l3937
l3936:
  lea  rcx, [ tmp3893 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp3893 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3893 ]
  lea  rdi , [ tmp3890 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3891 ], 0
  mov [ tmp3893 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3891 ]
  mov [ tmp3893 + Variant_t.value], rax
  lea rcx, [ tmp3890 ]
  lea rdx, [ tmp3893 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3941
  lea  rcx , [ __literal475 ]
  call  __MOLD_PrintVariantLn
  jmp l3942
l3941:
  lea  rcx, [ tmp3940 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal126 ]
  lea  r8 , [ tmp3940 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3890 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3940 ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp3890 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3890 ]
  lea  rdi , [ tmp3893 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3894 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal125 ]
  lea  rdx , [ tmp3893 ]
  lea  r8 , [ tmp3894 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp3894 ]
  call  __MOLD_PrintVariantLn
l3942:
l3937:
  lea  rcx , [ __literal468 ]
  call  __MOLD_PrintVariantLn
l3934:
l3935:
  lea  rcx , [ __literal459 ]
  call  __MOLD_PrintVariantLn

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3890 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3893 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ tmp3940 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 288
  pop  rbp
  ret

  restore this
  restore node
  restore opcode
  restore children
  restore tmp3890
  restore tmp3891
  restore tmp3892
  restore tmp3893
  restore tmp3894
  restore tmp3895
  restore tmp3899
  restore tmp3900
  restore childNode
  restore tmp3918
  restore tmp3920
  restore tmp3922
  restore tmp3928
  restore tmp3929
  restore value
  restore tmp3940
  restore item
; -----------------------------------------------
; function __ASTPrinterHtml_printNode$0
; -----------------------------------------------
__ASTPrinterHtml_printNode$0:
  ; init frame
  ; ----------
  node EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0

  ; code
  ; ----
  lea  rcx , [ __literal476 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ this ]
  lea  rdx , [ node ]
  call  __ASTPrinterHtml__printNode$0
  lea  rcx , [ __literal477 ]
  call  __MOLD_PrintVariantLn

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore node
; -----------------------------------------------
; function __ASTTranslator_constructor$0
; -----------------------------------------------
__ASTTranslator_constructor$0:
  ; init frame
  ; ----------
  tmp3943 EQU rbp - 24 ; 16 bytes
  app EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp3943 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3943 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal478 ]
  lea  r8 , [ tmp3943 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3943 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal479 ]
  lea  r8 , [ tmp3943 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3943 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal480 ]
  lea  r8 , [ tmp3943 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3943 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore app
  restore tmp3943
; -----------------------------------------------
; function __ASTTranslator__debug$0
; -----------------------------------------------
__ASTTranslator__debug$0:
  ; init frame
  ; ----------
  msg EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore msg
; -----------------------------------------------
; function __ASTTranslator__error$0
; -----------------------------------------------
__ASTTranslator__error$0:
  ; init frame
  ; ----------
  tmp3945 EQU rbp - 24 ; 16 bytes
  tmp3944 EQU rbp - 40 ; 16 bytes
  msg EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ msg ], xmm0
  mov [tmp3944 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3945 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3945 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp3945 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3945 ]
  lea  rdx , [ msg ]
  lea  rdi, [ tmp3944 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3944 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3945 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore msg
  restore tmp3944
  restore tmp3945
; -----------------------------------------------
; function __ASTTranslator__loadArgsVector$0
; -----------------------------------------------
__ASTTranslator__loadArgsVector$0:
  ; init frame
  ; ----------
  rv EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]

  ; code
  ; ----
  lea  rcx , [ __literal482 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
; -----------------------------------------------
; function __ASTTranslator__loadArgsCount$0
; -----------------------------------------------
__ASTTranslator__loadArgsCount$0:
  ; init frame
  ; ----------
  rv EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]

  ; code
  ; ----
  lea  rcx , [ __literal483 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
; -----------------------------------------------
; function __ASTTranslator__syscall$0
; -----------------------------------------------
__ASTTranslator__syscall$0:
  ; init frame
  ; ----------
  paramsCnt EQU rbp - 24 ; 16 bytes
  params EQU rbp - 40 ; 16 bytes
  id EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ id ]
  ; skipped unused param [ params ]
  ; skipped unused param [ paramsCnt ]

  ; code
  ; ----
  lea  rcx , [ __literal484 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore id
  restore params
  restore paramsCnt
; -----------------------------------------------
; function __ASTTranslator__loadArray$0
; -----------------------------------------------
__ASTTranslator__loadArray$0:
  ; init frame
  ; ----------
  rv EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]

  ; code
  ; ----
  lea  rcx , [ __literal485 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
; -----------------------------------------------
; function __ASTTranslator__loadMap$0
; -----------------------------------------------
__ASTTranslator__loadMap$0:
  ; init frame
  ; ----------
  rv EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]

  ; code
  ; ----
  lea  rcx , [ __literal486 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
; -----------------------------------------------
; function __ASTTranslator__loadNull$0
; -----------------------------------------------
__ASTTranslator__loadNull$0:
  ; init frame
  ; ----------
  rv EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]

  ; code
  ; ----
  lea  rcx , [ __literal487 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
; -----------------------------------------------
; function __ASTTranslator__loadImm$0
; -----------------------------------------------
__ASTTranslator__loadImm$0:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ value ]

  ; code
  ; ----
  lea  rcx , [ __literal488 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore value
; -----------------------------------------------
; function __ASTTranslator__loadImmAsVariant$0
; -----------------------------------------------
__ASTTranslator__loadImmAsVariant$0:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ value ]

  ; code
  ; ----
  lea  rcx , [ __literal489 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore value
; -----------------------------------------------
; function __ASTTranslator__loadVariable$0
; -----------------------------------------------
__ASTTranslator__loadVariable$0:
  ; init frame
  ; ----------
  name EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  ; skipped unused param [ name ]

  ; code
  ; ----
  lea  rcx , [ __literal490 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore name
; -----------------------------------------------
; function __ASTTranslator__call$0
; -----------------------------------------------
__ASTTranslator__call$0:
  ; init frame
  ; ----------
  paramsCnt EQU rbp - 24 ; 16 bytes
  params EQU rbp - 40 ; 16 bytes
  funcProto EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ funcProto ]
  ; skipped unused param [ params ]
  ; skipped unused param [ paramsCnt ]

  ; code
  ; ----
  lea  rcx , [ __literal491 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore funcProto
  restore params
  restore paramsCnt
; -----------------------------------------------
; function __ASTTranslator__invokeMethod$0
; -----------------------------------------------
__ASTTranslator__invokeMethod$0:
  ; init frame
  ; ----------
  paramsCnt EQU rbp - 24 ; 16 bytes
  params EQU rbp - 40 ; 16 bytes
  methodName EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ methodName ]
  ; skipped unused param [ params ]
  ; skipped unused param [ paramsCnt ]

  ; code
  ; ----
  lea  rcx , [ __literal492 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore methodName
  restore params
  restore paramsCnt
; -----------------------------------------------
; function __ASTTranslator__callPrint$0
; -----------------------------------------------
__ASTTranslator__callPrint$0:
  ; init frame
  ; ----------
  paramsCnt EQU rbp - 24 ; 16 bytes
  params EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ params ]
  ; skipped unused param [ paramsCnt ]

  ; code
  ; ----
  lea  rcx , [ __literal493 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore params
  restore paramsCnt
; -----------------------------------------------
; function __ASTTranslator__neg$0
; -----------------------------------------------
__ASTTranslator__neg$0:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ value ]

  ; code
  ; ----
  lea  rcx , [ __literal494 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore value
; -----------------------------------------------
; function __ASTTranslator__add$0
; -----------------------------------------------
__ASTTranslator__add$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal495 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__stringJoin$0
; -----------------------------------------------
__ASTTranslator__stringJoin$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal496 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__sub$0
; -----------------------------------------------
__ASTTranslator__sub$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal497 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__mul$0
; -----------------------------------------------
__ASTTranslator__mul$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal498 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__div$0
; -----------------------------------------------
__ASTTranslator__div$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal499 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__idiv$0
; -----------------------------------------------
__ASTTranslator__idiv$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal500 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__compareEQ$0
; -----------------------------------------------
__ASTTranslator__compareEQ$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal501 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__compareNEQ$0
; -----------------------------------------------
__ASTTranslator__compareNEQ$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal502 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__compareLT$0
; -----------------------------------------------
__ASTTranslator__compareLT$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal503 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__compareLE$0
; -----------------------------------------------
__ASTTranslator__compareLE$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal504 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__compareGT$0
; -----------------------------------------------
__ASTTranslator__compareGT$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal505 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__compareGE$0
; -----------------------------------------------
__ASTTranslator__compareGE$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal506 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__boolAnd$0
; -----------------------------------------------
__ASTTranslator__boolAnd$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal507 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__boolOr$0
; -----------------------------------------------
__ASTTranslator__boolOr$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ __literal508 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslator__loadFromIndex$0
; -----------------------------------------------
__ASTTranslator__loadFromIndex$0:
  ; init frame
  ; ----------
  idx EQU rbp - 24 ; 16 bytes
  box EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ box ]
  ; skipped unused param [ idx ]

  ; code
  ; ----
  lea  rcx , [ __literal509 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore box
  restore idx
; -----------------------------------------------
; function __ASTTranslator__loadFromKey$0
; -----------------------------------------------
__ASTTranslator__loadFromKey$0:
  ; init frame
  ; ----------
  key EQU rbp - 24 ; 16 bytes
  box EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ box ]
  ; skipped unused param [ key ]

  ; code
  ; ----
  lea  rcx , [ __literal510 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore box
  restore key
; -----------------------------------------------
; function __ASTTranslator__storeAtIndex$0
; -----------------------------------------------
__ASTTranslator__storeAtIndex$0:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  idx EQU rbp - 40 ; 16 bytes
  box EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ box ]
  ; skipped unused param [ idx ]
  ; skipped unused param [ value ]

  ; code
  ; ----
  lea  rcx , [ __literal511 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore box
  restore idx
  restore value
; -----------------------------------------------
; function __ASTTranslator__storeAtKey$0
; -----------------------------------------------
__ASTTranslator__storeAtKey$0:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  key EQU rbp - 40 ; 16 bytes
  box EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ box ]
  ; skipped unused param [ key ]
  ; skipped unused param [ value ]

  ; code
  ; ----
  lea  rcx , [ __literal512 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore box
  restore key
  restore value
; -----------------------------------------------
; function __ASTTranslator__storeAtIndexAndDrop$0
; -----------------------------------------------
__ASTTranslator__storeAtIndexAndDrop$0:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  idx EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ idx ]
  ; skipped unused param [ value ]

  ; code
  ; ----
  lea  rcx , [ __literal513 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore idx
  restore value
; -----------------------------------------------
; function __ASTTranslator__storeAtKeyAndDrop$0
; -----------------------------------------------
__ASTTranslator__storeAtKeyAndDrop$0:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  key EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ key ]
  ; skipped unused param [ value ]

  ; code
  ; ----
  lea  rcx , [ __literal514 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore key
  restore value
; -----------------------------------------------
; function __ASTTranslator__createObject$0
; -----------------------------------------------
__ASTTranslator__createObject$0:
  ; init frame
  ; ----------
  classProto EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ classProto ]

  ; code
  ; ----
  lea  rcx , [ __literal515 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore classProto
; -----------------------------------------------
; function __ASTTranslator__convert$0
; -----------------------------------------------
__ASTTranslator__convert$0:
  ; init frame
  ; ----------
  dstType EQU rbp - 24 ; 16 bytes
  srcType EQU rbp - 40 ; 16 bytes
  src EQU rbp - 56 ; 16 bytes
  dst EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  ; skipped unused param [ this ]
  ; skipped unused param [ dst ]
  ; skipped unused param [ src ]
  ; skipped unused param [ srcType ]
  ; skipped unused param [ dstType ]

  ; code
  ; ----
  lea  rcx , [ __literal516 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore dst
  restore src
  restore srcType
  restore dstType
; -----------------------------------------------
; function __ASTTranslator__emitFunctionBody$0
; -----------------------------------------------
__ASTTranslator__emitFunctionBody$0:
  ; init frame
  ; ----------
  funcProto EQU rbp - 24 ; 16 bytes
  funcName EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ funcName ]
  ; skipped unused param [ funcProto ]

  ; code
  ; ----
  lea  rcx , [ __literal517 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
; -----------------------------------------------
; function __ASTTranslator__dropRetVal$0
; -----------------------------------------------
__ASTTranslator__dropRetVal$0:
  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  ; skipped unused param [ this ]

  ; code
  ; ----
  lea  rcx , [ __literal518 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret

  restore this
; -----------------------------------------------
; function __ASTTranslator__declareFunction$0
; -----------------------------------------------
__ASTTranslator__declareFunction$0:
  ; init frame
  ; ----------
  funcProto EQU rbp - 24 ; 16 bytes
  funcName EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ funcName ]
  ; skipped unused param [ funcProto ]

  ; code
  ; ----
  lea  rcx , [ __literal519 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
; -----------------------------------------------
; function __ASTTranslator__declareClass$0
; -----------------------------------------------
__ASTTranslator__declareClass$0:
  ; init frame
  ; ----------
  classProto EQU rbp - 24 ; 16 bytes
  className EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ className ]
  ; skipped unused param [ classProto ]

  ; code
  ; ----
  lea  rcx , [ __literal520 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore className
  restore classProto
; -----------------------------------------------
; function __ASTTranslator__declareVariable$0
; -----------------------------------------------
__ASTTranslator__declareVariable$0:
  ; init frame
  ; ----------
  name EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  ; skipped unused param [ name ]

  ; code
  ; ----
  lea  rcx , [ __literal521 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore name
; -----------------------------------------------
; function __ASTTranslator__assign$0
; -----------------------------------------------
__ASTTranslator__assign$0:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  name EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ name ]
  ; skipped unused param [ value ]

  ; code
  ; ----
  lea  rcx , [ __literal522 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore value
; -----------------------------------------------
; function __ASTTranslator__evaluateNodeLazyBoolAnd$0
; -----------------------------------------------
__ASTTranslator__evaluateNodeLazyBoolAnd$0:
  ; init frame
  ; ----------
  rightAst EQU rbp - 24 ; 16 bytes
  leftAst EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ leftAst ]
  ; skipped unused param [ rightAst ]

  ; code
  ; ----
  lea  rcx , [ __literal523 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
; -----------------------------------------------
; function __ASTTranslator__evaluateNodeLazyBoolOr$0
; -----------------------------------------------
__ASTTranslator__evaluateNodeLazyBoolOr$0:
  ; init frame
  ; ----------
  rightAst EQU rbp - 24 ; 16 bytes
  leftAst EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ rv ]
  ; skipped unused param [ leftAst ]
  ; skipped unused param [ rightAst ]

  ; code
  ; ----
  lea  rcx , [ __literal524 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
; -----------------------------------------------
; function __ASTTranslator__executeNodeFor$0
; -----------------------------------------------
__ASTTranslator__executeNodeFor$0:
  ; init frame
  ; ----------
  bodyAst EQU rbp - 24 ; 16 bytes
  valueStep EQU rbp - 40 ; 16 bytes
  valueEnd EQU rbp - 56 ; 16 bytes
  valueStart EQU rbp - 72 ; 16 bytes
  iteratorName EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  ; skipped unused param [ this ]
  ; skipped unused param [ iteratorName ]
  ; skipped unused param [ valueStart ]
  ; skipped unused param [ valueEnd ]
  ; skipped unused param [ valueStep ]
  ; skipped unused param [ bodyAst ]

  ; code
  ; ----
  lea  rcx , [ __literal525 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore iteratorName
  restore valueStart
  restore valueEnd
  restore valueStep
  restore bodyAst
; -----------------------------------------------
; function __ASTTranslator__executeNodeWhile$0
; -----------------------------------------------
__ASTTranslator__executeNodeWhile$0:
  ; init frame
  ; ----------
  bodyAst EQU rbp - 24 ; 16 bytes
  condAst EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ condAst ]
  ; skipped unused param [ bodyAst ]

  ; code
  ; ----
  lea  rcx , [ __literal526 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore condAst
  restore bodyAst
; -----------------------------------------------
; function __ASTTranslator__executeNodeIf$0
; -----------------------------------------------
__ASTTranslator__executeNodeIf$0:
  ; init frame
  ; ----------
  codeIfFalse EQU rbp - 24 ; 16 bytes
  codeIfTrue EQU rbp - 40 ; 16 bytes
  cond EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  ; skipped unused param [ this ]
  ; skipped unused param [ cond ]
  ; skipped unused param [ codeIfTrue ]
  ; skipped unused param [ codeIfFalse ]

  ; code
  ; ----
  lea  rcx , [ __literal527 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore cond
  restore codeIfTrue
  restore codeIfFalse
; -----------------------------------------------
; function __ASTTranslator__executeNodeSwitch$0
; -----------------------------------------------
__ASTTranslator__executeNodeSwitch$0:
  ; init frame
  ; ----------
  node EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  ; skipped unused param [ node ]

  ; code
  ; ----
  lea  rcx , [ __literal528 ]
  mov eax,  41
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore node
; -----------------------------------------------
; function __ASTTranslator__declareExternalFunction$0
; -----------------------------------------------
__ASTTranslator__declareExternalFunction$0:
  ; init frame
  ; ----------
  tmp3947 EQU rbp - 24 ; 16 bytes
  tmp3946 EQU rbp - 40 ; 16 bytes
  funcProto EQU rbp - 56 ; 16 bytes
  funcName EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ funcName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  mov [tmp3946 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3947 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3947 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3947 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3947 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ funcProto ]
  lea  rdi, [ tmp3946 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 11
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3946 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3947 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
  restore tmp3946
  restore tmp3947
; -----------------------------------------------
; function __ASTTranslator__getTempVar$0
; -----------------------------------------------
__ASTTranslator__getTempVar$0:
  ; init frame
  ; ----------
  tmp3949 EQU rbp - 24 ; 16 bytes
  tmp3948 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  wantedType EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ wantedType ], xmm0
  mov [tmp3948 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3949 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3949 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal480 ]
  lea  r8 , [ tmp3949 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3949 ]
  lea  rdx , [ wantedType ]
  lea  rdi, [ tmp3948 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 47
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp3948 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3948 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3949 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore wantedType
  restore rv
  restore tmp3948
  restore tmp3949
; -----------------------------------------------
; function __ASTTranslator__releaseTempVar$0
; -----------------------------------------------
__ASTTranslator__releaseTempVar$0:
  ; init frame
  ; ----------
  tmp3951 EQU rbp - 24 ; 16 bytes
  tmp3950 EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp3950 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3951 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3951 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal480 ]
  lea  r8 , [ tmp3951 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3951 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp3950 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 48
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3950 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3951 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore tmp3950
  restore tmp3951
; -----------------------------------------------
; function __ASTTranslator__enterScope$0
; -----------------------------------------------
__ASTTranslator__enterScope$0:
  ; init frame
  ; ----------
  tmp3952 EQU rbp - 24 ; 16 bytes
  ast EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [tmp3952 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp3952 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3952 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3952 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3952 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore ast
  restore tmp3952
; -----------------------------------------------
; function __ASTTranslator__leaveScope$0
; -----------------------------------------------
__ASTTranslator__leaveScope$0:
  ; init frame
  ; ----------
  typeName2 EQU rbp - 24 ; 16 bytes
  typeName1 EQU rbp - 40 ; 16 bytes
  astType2 EQU rbp - 44 ; 4 bytes
  astType1 EQU rbp - 48 ; 4 bytes
  id EQU rbp - 64 ; 16 bytes
  item EQU rbp - 80 ; 16 bytes
  tmp3986 EQU rbp - 96 ; 16 bytes
  tmp3985 EQU rbp - 112 ; 16 bytes
  tmp3984 EQU rbp - 128 ; 16 bytes
  tmp3983 EQU rbp - 144 ; 16 bytes
  tmp3982 EQU rbp - 160 ; 16 bytes
  tmp3981 EQU rbp - 176 ; 16 bytes
  tmp3978 EQU rbp - 180 ; 4 bytes
  tmp3973 EQU rbp - 184 ; 4 bytes
  tmp3971 EQU rbp - 188 ; 4 bytes
  tmp3969 EQU rbp - 192 ; 4 bytes
  tmp3962 EQU rbp - 208 ; 16 bytes
  tmp3961 EQU rbp - 212 ; 4 bytes
  tmp3958 EQU rbp - 216 ; 4 bytes
  tmp3957 EQU rbp - 220 ; 4 bytes
  tmp3954 EQU rbp - 236 ; 16 bytes
  tmp3953 EQU rbp - 252 ; 16 bytes
  symbolsChild EQU rbp - 268 ; 16 bytes
  symbolsCurrent EQU rbp - 284 ; 16 bytes
  childTable EQU rbp - 300 ; 16 bytes
  this EQU rbp - 316 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 352

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [childTable + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolsCurrent + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolsChild + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3953 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3954 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3962 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3981 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3982 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3983 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3984 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3985 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3986 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [id + Variant_t.type], VARIANT_UNDEFINED
  mov [typeName1 + Variant_t.type], VARIANT_UNDEFINED
  mov [typeName2 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ childTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ childTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3953 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childTable ]
  lea  rdx , [ __literal4 ]
  lea  r8 , [ tmp3953 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3953 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp3954 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp3954 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ symbolsCurrent ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3954 ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ symbolsCurrent ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ symbolsChild ]
  call __MOLD_VariantDestroy
  lea  rcx , [ childTable ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ symbolsChild ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l3956
l3955:
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3954 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolsCurrent ]
  lea  rdx , [ id ]
  lea  r8 , [ tmp3954 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3954 ]
  lea  rdi , [ tmp3953 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3958 ], 0
  mov [ tmp3954 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3958 ]
  mov [ tmp3954 + Variant_t.value], rax
  lea rcx, [ tmp3953 ]
  lea rdx, [ tmp3954 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l3959
  lea  rcx , [ symbolsCurrent ]
  lea  rdx , [ id ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtKey
  jmp l3960
l3959:
  mov dword [ astType1 ], -1
  mov dword [ astType2 ], -1
  lea  rcx, [ tmp3962 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolsCurrent ]
  lea  rdx , [ id ]
  lea  r8 , [ tmp3962 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3953 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3962 ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp3953 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3953 ]
  lea  rdi , [ tmp3954 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3958 ], 0
  mov [ tmp3953 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3958 ]
  mov [ tmp3953 + Variant_t.value], rax
  lea rcx, [ tmp3954 ]
  lea rdx, [ tmp3953 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3963
  lea  rcx, [ tmp3954 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolsCurrent ]
  lea  rdx , [ id ]
  lea  r8 , [ tmp3954 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3953 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3954 ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp3953 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3953 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3953 + Variant_t.value]
  mov dword [ astType1 ], eax
l3963:
l3964:
  lea  rcx, [ tmp3954 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp3954 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp3954 ]
  lea  rdi , [ tmp3953 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp3958 ], 0
  mov [ tmp3954 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp3958 ]
  mov [ tmp3954 + Variant_t.value], rax
  lea rcx, [ tmp3953 ]
  lea rdx, [ tmp3954 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3965
  lea  rcx, [ tmp3954 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp3954 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp3954 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp3954 + Variant_t.value]
  mov dword [ astType2 ], eax
l3965:
l3966:
  mov eax, dword [ astType1 ]
  cmp eax, dword [ astType2 ]
  jz l3967
  mov dword [ tmp3969 ], 1
  mov dword [ tmp3958 ], -1
  mov eax, dword [ astType1 ]
  cmp eax, dword [ tmp3958 ]
  jnz l3970
  mov dword [ tmp3971 ], 0
  mov dword [ tmp3958 ], 4
  mov eax, dword [ astType2 ]
  cmp eax, dword [ tmp3958 ]
  jz l3972
  mov dword [ tmp3958 ], 6
  mov dword [ tmp3971 ], 0
  mov ecx, dword [ astType2 ]
  cmp ecx, dword [ tmp3958 ]
  setl byte [ tmp3971 ]
l3972:
  mov eax, dword [ tmp3971 ]
  mov dword [ tmp3969 ], eax
l3970:
  cmp dword [ tmp3969 ], 0
  jz l3974
  mov dword [ tmp3971 ], 1
  mov dword [ tmp3958 ], -1
  mov eax, dword [ astType2 ]
  cmp eax, dword [ tmp3958 ]
  jnz l3976
  mov dword [ tmp3973 ], 0
  mov dword [ tmp3958 ], 4
  mov eax, dword [ astType1 ]
  cmp eax, dword [ tmp3958 ]
  jz l3977
  mov dword [ tmp3958 ], 6
  mov dword [ tmp3973 ], 0
  mov ecx, dword [ astType1 ]
  cmp ecx, dword [ tmp3958 ]
  setl byte [ tmp3973 ]
l3977:
  mov eax, dword [ tmp3973 ]
  mov dword [ tmp3971 ], eax
l3976:
  cmp dword [ tmp3971 ], 0
  jz l3979
  mov [ tmp3953 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astType1 ]
  mov [ tmp3953 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp3953 ]
  lea  rdi , [ tmp3954 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ typeName1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ typeName1 ]
  lea rdx, [ tmp3954 ]
  call __MOLD_VariantMove
  mov [ tmp3953 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astType2 ]
  mov [ tmp3953 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp3953 ]
  lea  rdi , [ tmp3954 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToText
  pop rdi
  lea  rcx, [ typeName2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ typeName2 ]
  lea rdx, [ tmp3954 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp3953 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp3953 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp3986 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ typeName1 ]
  lea  rdx , [ __literal244 ]
  lea  r8 , [ tmp3986 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3985 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal243 ]
  lea  rdx , [ tmp3986 ]
  lea  r8 , [ tmp3985 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3984 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ typeName2 ]
  lea  rdx , [ tmp3985 ]
  lea  r8 , [ tmp3984 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3983 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal242 ]
  lea  rdx , [ tmp3984 ]
  lea  r8 , [ tmp3983 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3982 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ id ]
  lea  rdx , [ tmp3983 ]
  lea  r8 , [ tmp3982 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3981 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal241 ]
  lea  rdx , [ tmp3982 ]
  lea  r8 , [ tmp3981 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp3953 ]
  lea  rdx , [ tmp3981 ]
  lea  rdi, [ tmp3954 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l3979:
l3980:
l3974:
l3975:
l3967:
l3968:
l3960:
  ret
l3956:
  lea  rcx , [ symbolsChild ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l3955 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ childTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolsCurrent ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolsChild ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3953 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3954 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3962 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ typeName1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ typeName2 ]
  call __MOLD_VariantDestroy

  add  rsp, 352
  pop  rbp
  ret

  restore this
  restore childTable
  restore symbolsCurrent
  restore symbolsChild
  restore tmp3953
  restore tmp3954
  restore tmp3957
  restore tmp3958
  restore tmp3961
  restore tmp3962
  restore tmp3969
  restore tmp3971
  restore tmp3973
  restore tmp3978
  restore tmp3981
  restore tmp3982
  restore tmp3983
  restore tmp3984
  restore tmp3985
  restore tmp3986
  restore item
  restore id
  restore astType1
  restore astType2
  restore typeName1
  restore typeName2
; -----------------------------------------------
; function __ASTTranslator__verifyNumberOfParameters$0
; -----------------------------------------------
__ASTTranslator__verifyNumberOfParameters$0:
  ; init frame
  ; ----------
  tmp3999 EQU rbp - 24 ; 16 bytes
  tmp3998 EQU rbp - 40 ; 16 bytes
  tmp3997 EQU rbp - 56 ; 16 bytes
  tmp3996 EQU rbp - 72 ; 16 bytes
  tmp3995 EQU rbp - 88 ; 16 bytes
  tmp3994 EQU rbp - 104 ; 16 bytes
  tmp3993 EQU rbp - 120 ; 16 bytes
  tmp3992 EQU rbp - 136 ; 16 bytes
  tmp3991 EQU rbp - 152 ; 16 bytes
  tmp3990 EQU rbp - 168 ; 16 bytes
  tmp3987 EQU rbp - 172 ; 4 bytes
  paramsPassedCnt EQU rbp - 188 ; 16 bytes
  paramsExpectedCnt EQU rbp - 204 ; 16 bytes
  name EQU rbp - 220 ; 16 bytes
  this EQU rbp - 236 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsExpectedCnt ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ paramsPassedCnt ], xmm0
  mov [tmp3990 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3991 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3992 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3993 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3994 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3995 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3996 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3997 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3998 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp3999 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea rcx, [ paramsPassedCnt ]
  lea rdx, [ paramsExpectedCnt ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l3988
  lea  rcx, [ tmp3991 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp3991 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ paramsExpectedCnt ]
  lea  rdi , [ tmp3996 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ paramsPassedCnt ]
  lea  rdi , [ tmp3999 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp3998 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3999 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp3998 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3997 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal304 ]
  lea  rdx , [ tmp3998 ]
  lea  r8 , [ tmp3997 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3995 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp3996 ]
  lea  rdx , [ tmp3997 ]
  lea  r8 , [ tmp3995 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3994 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal184 ]
  lea  rdx , [ tmp3995 ]
  lea  r8 , [ tmp3994 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3993 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp3994 ]
  lea  r8 , [ tmp3993 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp3992 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal183 ]
  lea  rdx , [ tmp3993 ]
  lea  r8 , [ tmp3992 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp3991 ]
  lea  rdx , [ tmp3992 ]
  lea  rdi, [ tmp3990 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l3988:
l3989:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp3990 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3991 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3996 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp3999 ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore name
  restore paramsExpectedCnt
  restore paramsPassedCnt
  restore tmp3987
  restore tmp3990
  restore tmp3991
  restore tmp3992
  restore tmp3993
  restore tmp3994
  restore tmp3995
  restore tmp3996
  restore tmp3997
  restore tmp3998
  restore tmp3999
; -----------------------------------------------
; function __ASTTranslator__emitFunction$0
; -----------------------------------------------
__ASTTranslator__emitFunction$0:
  ; init frame
  ; ----------
  oldSymbolTable EQU rbp - 24 ; 16 bytes
  tmp4009 EQU rbp - 28 ; 4 bytes
  tmp4008 EQU rbp - 44 ; 16 bytes
  tmp4007 EQU rbp - 60 ; 16 bytes
  tmp4006 EQU rbp - 76 ; 16 bytes
  tmp4003 EQU rbp - 92 ; 16 bytes
  tmp4002 EQU rbp - 96 ; 4 bytes
  tmp4001 EQU rbp - 100 ; 4 bytes
  tmp4000 EQU rbp - 116 ; 16 bytes
  children EQU rbp - 132 ; 16 bytes
  funcName EQU rbp - 148 ; 16 bytes
  funcProto EQU rbp - 164 ; 16 bytes
  ast EQU rbp - 180 ; 16 bytes
  this EQU rbp - 196 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [funcProto + Variant_t.type], VARIANT_UNDEFINED
  mov [funcName + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4000 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4003 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4006 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4007 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4008 + Variant_t.type], VARIANT_UNDEFINED
  mov [oldSymbolTable + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcProto ]
  lea rdx, [ ast ]
  call __MOLD_VariantMove
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp4000 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4002 ], 0
  mov [ tmp4003 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4002 ]
  mov [ tmp4003 + Variant_t.value], rax
  lea rcx, [ tmp4000 ]
  lea rdx, [ tmp4003 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4004
  lea  rcx, [ tmp4000 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4000 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4007 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcName ]
  lea  rdx , [ __literal530 ]
  lea  r8 , [ tmp4007 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4006 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal529 ]
  lea  rdx , [ tmp4007 ]
  lea  r8 , [ tmp4006 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp4000 ]
  lea  rdx , [ tmp4006 ]
  lea  rdi, [ tmp4003 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 5
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4008 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4008 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4002 ], 0
  lea  rcx, [ tmp4000 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4008 ]
  lea  rdx , [ tmp4002 ]
  lea  r8 , [ tmp4000 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4000 ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4003 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4003 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4003 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal480 ]
  lea  r8 , [ tmp4003 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4000 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal228 ]
  lea  r8 , [ tmp4000 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4000 ]
  lea  rdi , [ tmp4003 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4002 ], 0
  mov [ tmp4000 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4002 ]
  mov [ tmp4000 + Variant_t.value], rax
  lea rcx, [ tmp4003 ]
  lea rdx, [ tmp4000 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4010
  lea  rcx, [ tmp4008 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal228 ]
  lea  r8 , [ tmp4008 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ oldSymbolTable ]
  lea  rdx , [ tmp4008 ]
  lea  rdi, [ tmp4003 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 9
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp4000 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4003 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp4000 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal478 ]
  lea  r8 , [ tmp4000 ]
  call  __MOLD_VariantStoreAtKey
l4010:
l4011:
  lea  rcx , [ this ]
  lea  rdx , [ __literal479 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ funcName ]
  lea  r8 , [ funcProto ]
  lea  rdi, [ tmp4000 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 49
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ funcName ]
  lea  r8 , [ funcProto ]
  lea  rdi, [ tmp4000 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 50
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp4000 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal479 ]
  lea  r8 , [ tmp4000 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4000 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal478 ]
  lea  r8 , [ tmp4000 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4000 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal480 ]
  lea  r8 , [ tmp4000 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4003 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4003 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4006 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal531 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp4006 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp4003 ]
  lea  rdx , [ tmp4006 ]
  lea  rdi, [ tmp4000 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 5
  call __MOLD_VCall
  pop rdi
l4004:
l4005:

  ; clean frame
  ; -----------
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4000 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4003 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4008 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore ast
  restore funcProto
  restore funcName
  restore children
  restore tmp4000
  restore tmp4001
  restore tmp4002
  restore tmp4003
  restore tmp4006
  restore tmp4007
  restore tmp4008
  restore tmp4009
  restore oldSymbolTable
; -----------------------------------------------
; function __ASTTranslator__emitGlobals$0
; -----------------------------------------------
__ASTTranslator__emitGlobals$0:
  ; init frame
  ; ----------
  symbolKind EQU rbp - 12 ; 4 bytes
  symbolInfo EQU rbp - 28 ; 16 bytes
  tmp4025 EQU rbp - 44 ; 16 bytes
  tmp4022 EQU rbp - 48 ; 4 bytes
  tmp4019 EQU rbp - 52 ; 4 bytes
  tmp4018 EQU rbp - 56 ; 4 bytes
  oneSymbol EQU rbp - 72 ; 16 bytes
  tmp4013 EQU rbp - 88 ; 16 bytes
  tmp4012 EQU rbp - 104 ; 16 bytes
  arrayOfSymbols EQU rbp - 120 ; 16 bytes
  symbols EQU rbp - 136 ; 16 bytes
  this EQU rbp - 152 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [symbols + Variant_t.type], VARIANT_UNDEFINED
  mov [arrayOfSymbols + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4012 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4013 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp4025 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp4013 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4013 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4013 ]
  lea  rdi, [ tmp4012 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 32
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols ]
  lea rdx, [ tmp4012 ]
  call __MOLD_VariantMove
  lea  rcx, [ arrayOfSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arrayOfSymbols ]
  call  __MOLD_VariantArrayCreate
;
; -----------------------------
; BEGIN: for keys undefined values oneSymbol
;
  jmp l4015
l4014:
  lea  rcx , [ arrayOfSymbols ]
  lea  rdx , [ oneSymbol ]
  mov eax,  50
  call  __MOLD_SysCall
  ret
l4015:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneSymbol ]
  lea  r9 , [ l4014 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneSymbol
; -----------------------------
;
;
; -----------------------------
; BEGIN: for keys undefined values symbolInfo
;
  jmp l4017
l4016:
  lea  rcx, [ tmp4012 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4012 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp4012 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4012 + Variant_t.value]
  mov dword [ symbolKind ], eax
  mov dword [ tmp4018 ], 7
  mov eax, dword [ symbolKind ]
  cmp eax, dword [ tmp4018 ]
  jnz l4020
  lea  rcx, [ tmp4012 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp4012 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp4012 ]
  call  __ASTTranslator__emitFunction$0
  jmp l4021
l4020:
  mov dword [ tmp4018 ], 8
  mov eax, dword [ symbolKind ]
  cmp eax, dword [ tmp4018 ]
  jnz l4023
  lea  rcx, [ tmp4013 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4013 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4025 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ tmp4025 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4013 ]
  lea  r8 , [ tmp4025 ]
  lea  rdi, [ tmp4012 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 51
  call __MOLD_VCall
  pop rdi
l4023:
l4024:
l4021:
  ret
l4017:
  lea  rcx , [ arrayOfSymbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l4016 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values symbolInfo
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4012 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4013 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneSymbol
  lea  rcx, [ tmp4025 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore symbols
  restore arrayOfSymbols
  restore tmp4012
  restore tmp4013
  restore oneSymbol
  restore tmp4018
  restore tmp4019
  restore tmp4022
  restore tmp4025
  restore symbolInfo
  restore symbolKind
; -----------------------------------------------
; function __ASTTranslator__callSuper$0
; -----------------------------------------------
__ASTTranslator__callSuper$0:
  ; init frame
  ; ----------
  oneParam EQU rbp - 24 ; 16 bytes
  paramIdx EQU rbp - 28 ; 4 bytes
  newParams EQU rbp - 44 ; 16 bytes
  tmp4056 EQU rbp - 48 ; 4 bytes
  tmp4055 EQU rbp - 52 ; 4 bytes
  tmp4052 EQU rbp - 68 ; 16 bytes
  tmp4051 EQU rbp - 84 ; 16 bytes
  tmp4050 EQU rbp - 100 ; 16 bytes
  tmp4047 EQU rbp - 104 ; 4 bytes
  tmp4044 EQU rbp - 108 ; 4 bytes
  tmp4043 EQU rbp - 124 ; 16 bytes
  tmp4042 EQU rbp - 140 ; 16 bytes
  tmp4039 EQU rbp - 144 ; 4 bytes
  tmp4036 EQU rbp - 148 ; 4 bytes
  tmp4031 EQU rbp - 164 ; 16 bytes
  tmp4030 EQU rbp - 168 ; 4 bytes
  tmp4029 EQU rbp - 172 ; 4 bytes
  tmp4027 EQU rbp - 176 ; 4 bytes
  tmp4026 EQU rbp - 192 ; 16 bytes
  classProto EQU rbp - 208 ; 16 bytes
  methodProto EQU rbp - 224 ; 16 bytes
  unusedParamsCnt EQU rbp - 240 ; 16 bytes
  params EQU rbp - 256 ; 16 bytes
  rv EQU rbp - 272 ; 16 bytes
  this EQU rbp - 288 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 320

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ params ], xmm0
  ; skipped unused param [ unusedParamsCnt ]
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4026 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4031 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4042 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4043 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4050 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4051 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4052 + Variant_t.type], VARIANT_UNDEFINED
  mov [newParams + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal479 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal478 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4027 ], 1
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp4026 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4030 ], 0
  mov [ tmp4031 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4030 ]
  mov [ tmp4031 + Variant_t.value], rax
  lea rcx, [ tmp4026 ]
  lea rdx, [ tmp4031 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4028
  lea  rcx, [ tmp4026 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ tmp4026 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4026 ]
  lea  rdi , [ tmp4031 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4030 ], 0
  mov [ tmp4026 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4030 ]
  mov [ tmp4026 + Variant_t.value], rax
  lea  rcx , [ tmp4031 ]
  lea  rdx , [ tmp4026 ]
  lea  r8 , [ tmp4027 ]
  call  __MOLD_VariantCompareEQ
l4028:
  cmp dword [ tmp4027 ], 0
  jz l4032
  lea  rcx , [ this ]
  lea  rdx , [ __literal534 ]
  call  __ASTTranslator__error$0
  jmp l4033
l4032:
  lea  rcx, [ tmp4026 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4026 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp4026 ]
  lea rdx, [ __literal535 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4034
  lea  rcx , [ this ]
  lea  rdx , [ __literal536 ]
  call  __ASTTranslator__error$0
  jmp l4035
l4034:
  lea  rcx, [ tmp4026 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4026 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp4026 ]
  lea rdx, [ __literal535 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4037
  lea  rcx , [ this ]
  lea  rdx , [ __literal536 ]
  call  __ASTTranslator__error$0
  jmp l4038
l4037:
  lea  rcx, [ tmp4031 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ tmp4031 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4031 ]
  lea  rdi , [ tmp4026 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4030 ], 0
  mov [ tmp4031 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4030 ]
  mov [ tmp4031 + Variant_t.value], rax
  lea rcx, [ tmp4026 ]
  lea rdx, [ tmp4031 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4040
  lea  rcx, [ tmp4031 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4031 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4043 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4031 ]
  lea  rdx , [ __literal537 ]
  lea  r8 , [ tmp4043 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4042 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal415 ]
  lea  rdx , [ tmp4043 ]
  lea  r8 , [ tmp4042 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4042 ]
  call  __ASTTranslator__error$0
  jmp l4041
l4040:
  lea  rcx, [ tmp4026 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ tmp4026 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4026 ]
  lea  rdi , [ tmp4031 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4030 ], 0
  mov [ tmp4026 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4030 ]
  mov [ tmp4026 + Variant_t.value], rax
  lea rcx, [ tmp4031 ]
  lea rdx, [ tmp4026 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4045
  lea  rcx, [ tmp4026 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal26 ]
  lea  r8 , [ tmp4026 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4043 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4026 ]
  lea  rdx , [ __literal538 ]
  lea  r8 , [ tmp4043 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4042 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal415 ]
  lea  rdx , [ tmp4043 ]
  lea  r8 , [ tmp4042 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4042 ]
  call  __ASTTranslator__error$0
  jmp l4046
l4045:
  lea  rcx, [ tmp4031 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp4031 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4031 ]
  lea  rdi , [ tmp4026 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ tmp4031 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4026 ]
  lea rdx, [ tmp4031 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4048
  lea  rcx, [ tmp4050 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp4050 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4050 ]
  lea  rdi , [ tmp4026 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ tmp4026 ]
  lea  rdi , [ tmp4031 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ tmp4050 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ tmp4050 ]
  lea  rdi , [ tmp4026 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4052 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4026 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp4052 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4051 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal185 ]
  lea  rdx , [ tmp4052 ]
  lea  r8 , [ tmp4051 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4043 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4031 ]
  lea  rdx , [ tmp4051 ]
  lea  r8 , [ tmp4043 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4042 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal539 ]
  lea  rdx , [ tmp4043 ]
  lea  r8 , [ tmp4042 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4042 ]
  call  __ASTTranslator__error$0
  jmp l4049
l4048:
  lea  rcx, [ tmp4031 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4031 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4026 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4026 + Variant_t.value], 0
  lea  rcx, [ tmp4050 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4050 ]
  lea rdx, [ __literal540 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4031 ]
  lea  rdx , [ tmp4026 ]
  lea  r8 , [ tmp4050 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  lea rcx, [ newParams ]
  lea rdx, [ tmp4031 ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys paramIdx values oneParam
;
  jmp l4054
l4053:
  mov dword [ tmp4055 ], 1
  mov eax, dword [ paramIdx ]
  add eax, dword [ tmp4055 ]
  mov dword [ tmp4030 ], eax
  lea  rcx , [ newParams ]
  lea  rdx , [ tmp4030 ]
  lea  r8 , [ oneParam ]
  call  __MOLD_VariantStoreAtIndex_int32
  ret
l4054:
  lea  rcx , [ params ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4053 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys paramIdx values oneParam
; -----------------------------
;
  mov dword [ tmp4056 ], 1
  mov eax, dword [ tmp4056 ]
  mov [ tmp4031 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4031 + Variant_t.value], rax
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal541 ]
  lea  r8 , [ tmp4031 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4050 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal230 ]
  lea  r8 , [ tmp4050 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ newParams ]
  lea  rdi , [ tmp4026 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4050 ]
  lea  r9 , [ newParams ]
  lea  rax , [ tmp4026 ]
  push rax
  lea  rdi, [ tmp4031 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 52
  call __MOLD_VCall
  add rsp, 8
  pop rdi
l4049:
l4046:
l4041:
l4038:
l4035:
l4033:

  ; clean frame
  ; -----------
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4026 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4031 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4050 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParam

  add  rsp, 320
  pop  rbp
  ret

  restore this
  restore rv
  restore params
  restore unusedParamsCnt
  restore methodProto
  restore classProto
  restore tmp4026
  restore tmp4027
  restore tmp4029
  restore tmp4030
  restore tmp4031
  restore tmp4036
  restore tmp4039
  restore tmp4042
  restore tmp4043
  restore tmp4044
  restore tmp4047
  restore tmp4050
  restore tmp4051
  restore tmp4052
  restore tmp4055
  restore tmp4056
  restore newParams
  restore paramIdx
  restore oneParam
; -----------------------------------------------
; function __ASTTranslator__getClassProto$0
; -----------------------------------------------
__ASTTranslator__getClassProto$0:
  ; init frame
  ; ----------
  tmp4059 EQU rbp - 24 ; 16 bytes
  tmp4058 EQU rbp - 40 ; 16 bytes
  tmp4057 EQU rbp - 56 ; 16 bytes
  rv EQU rdi
  className EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ className ], xmm0
  mov [tmp4057 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4058 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4059 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4059 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4059 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4059 ]
  lea  rdx , [ className ]
  lea  rdi, [ tmp4058 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 9
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4058 ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4057 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4058 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4059 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore className
  restore rv
  restore tmp4057
  restore tmp4058
  restore tmp4059
; -----------------------------------------------
; function __ASTTranslator__isset$0
; -----------------------------------------------
__ASTTranslator__isset$0:
  ; init frame
  ; ----------
  tmp4061 EQU rbp - 24 ; 16 bytes
  tmp4060 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp4060 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4061 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4061 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4061 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4061 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp4060 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 16
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp4060 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4060 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4061 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore rv
  restore tmp4060
  restore tmp4061
; -----------------------------------------------
; function __ASTTranslator__importGlobal$0
; -----------------------------------------------
__ASTTranslator__importGlobal$0:
  ; init frame
  ; ----------
  tmp4063 EQU rbp - 24 ; 16 bytes
  tmp4062 EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp4062 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4063 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4063 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4063 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4063 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp4062 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 39
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4062 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4063 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore tmp4062
  restore tmp4063
; -----------------------------------------------
; function __ASTTranslator__declareVariableIfNotSet$0
; -----------------------------------------------
__ASTTranslator__declareVariableIfNotSet$0:
  ; init frame
  ; ----------
  tmp4067 EQU rbp - 24 ; 16 bytes
  tmp4066 EQU rbp - 28 ; 4 bytes
  tmp4065 EQU rbp - 44 ; 16 bytes
  tmp4064 EQU rbp - 48 ; 4 bytes
  name EQU rbp - 64 ; 16 bytes
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [tmp4065 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4067 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  rdi , [ tmp4065 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__isset$0
  pop rdi
  mov dword [ tmp4066 ], 0
  mov eax, dword [ tmp4066 ]
  mov [ tmp4067 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4067 + Variant_t.value], rax
  lea rcx, [ tmp4065 ]
  lea rdx, [ tmp4067 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4068
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __ASTTranslator__declareVariable$0
l4068:
l4069:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4065 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4067 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore tmp4064
  restore tmp4065
  restore tmp4066
  restore tmp4067
; -----------------------------------------------
; function __ASTTranslator__declareAndAssign$0
; -----------------------------------------------
__ASTTranslator__declareAndAssign$0:
  ; init frame
  ; ----------
  tmp4070 EQU rbp - 24 ; 16 bytes
  value EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [tmp4070 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ value ]
  lea  rdi, [ tmp4070 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 53
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4070 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore tmp4070
; -----------------------------------------------
; function __ASTTranslator__evaluateNode$0
; -----------------------------------------------
__ASTTranslator__evaluateNode$0:
  ; init frame
  ; ----------
  right EQU rbp - 24 ; 16 bytes
  left EQU rbp - 40 ; 16 bytes
  unusedRv EQU rbp - 56 ; 16 bytes
  paramsCnt EQU rbp - 72 ; 16 bytes
  params EQU rbp - 88 ; 16 bytes
  methodProto EQU rbp - 104 ; 16 bytes
  classProto EQU rbp - 120 ; 16 bytes
  x EQU rbp - 136 ; 16 bytes
  __cse35 EQU rbp - 152 ; 16 bytes
  idx EQU rbp - 156 ; 4 bytes
  childNode EQU rbp - 172 ; 16 bytes
  childIdx EQU rbp - 176 ; 4 bytes
  valueAsVariant EQU rbp - 192 ; 16 bytes
  key EQU rbp - 208 ; 16 bytes
  mirDataType EQU rbp - 224 ; 16 bytes
  astDataType EQU rbp - 228 ; 4 bytes
  tmp4192 EQU rbp - 244 ; 16 bytes
  tmp4189 EQU rbp - 248 ; 4 bytes
  tmp4186 EQU rbp - 252 ; 4 bytes
  tmp4183 EQU rbp - 256 ; 4 bytes
  tmp4180 EQU rbp - 260 ; 4 bytes
  tmp4177 EQU rbp - 264 ; 4 bytes
  tmp4174 EQU rbp - 268 ; 4 bytes
  tmp4171 EQU rbp - 272 ; 4 bytes
  tmp4168 EQU rbp - 276 ; 4 bytes
  tmp4165 EQU rbp - 280 ; 4 bytes
  tmp4162 EQU rbp - 284 ; 4 bytes
  tmp4159 EQU rbp - 288 ; 4 bytes
  tmp4156 EQU rbp - 292 ; 4 bytes
  tmp4153 EQU rbp - 296 ; 4 bytes
  tmp4148 EQU rbp - 300 ; 4 bytes
  tmp4143 EQU rbp - 304 ; 4 bytes
  tmp4140 EQU rbp - 308 ; 4 bytes
  tmp4137 EQU rbp - 312 ; 4 bytes
  tmp4134 EQU rbp - 316 ; 4 bytes
  tmp4131 EQU rbp - 320 ; 4 bytes
  tmp4128 EQU rbp - 324 ; 4 bytes
  tmp4125 EQU rbp - 328 ; 4 bytes
  tmp4122 EQU rbp - 332 ; 4 bytes
  tmp4121 EQU rbp - 336 ; 4 bytes
  tmp4118 EQU rbp - 340 ; 4 bytes
  tmp4109 EQU rbp - 344 ; 4 bytes
  tmp4105 EQU rbp - 348 ; 4 bytes
  srcTypeMir EQU rbp - 364 ; 16 bytes
  dstTypeMir EQU rbp - 380 ; 16 bytes
  src EQU rbp - 396 ; 16 bytes
  dstType EQU rbp - 400 ; 4 bytes
  srcType EQU rbp - 404 ; 4 bytes
  srcNode EQU rbp - 420 ; 16 bytes
  tmp4084 EQU rbp - 436 ; 16 bytes
  tmp4083 EQU rbp - 452 ; 16 bytes
  tmp4082 EQU rbp - 468 ; 16 bytes
  tmp4081 EQU rbp - 484 ; 16 bytes
  tmp4078 EQU rbp - 488 ; 4 bytes
  tmp4077 EQU rbp - 492 ; 4 bytes
  tmp4076 EQU rbp - 496 ; 4 bytes
  tmp4074 EQU rbp - 500 ; 4 bytes
  tmp4073 EQU rbp - 516 ; 16 bytes
  tmp4072 EQU rbp - 520 ; 4 bytes
  tmp4071 EQU rbp - 536 ; 16 bytes
  rv EQU rdi
  childrenCnt EQU rbp - 540 ; 4 bytes
  children EQU rbp - 556 ; 16 bytes
  value EQU rbp - 572 ; 16 bytes
  opcode EQU rbp - 576 ; 4 bytes
  ast EQU rbp - 592 ; 16 bytes
  this EQU rbp - 608 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 640

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4071 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4073 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4081 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4082 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4083 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4084 + Variant_t.type], VARIANT_UNDEFINED
  mov [srcNode + Variant_t.type], VARIANT_UNDEFINED
  mov [src + Variant_t.type], VARIANT_UNDEFINED
  mov [dstTypeMir + Variant_t.type], VARIANT_UNDEFINED
  mov [srcTypeMir + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4192 + Variant_t.type], VARIANT_UNDEFINED
  mov [mirDataType + Variant_t.type], VARIANT_UNDEFINED
  mov [key + Variant_t.type], VARIANT_UNDEFINED
  mov [valueAsVariant + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [__cse35 + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [unusedRv + Variant_t.type], VARIANT_UNDEFINED
  mov [left + Variant_t.type], VARIANT_UNDEFINED
  mov [right + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4071 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp4071 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4071 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ tmp4071 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4071 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4071 + Variant_t.value]
  mov dword [ childrenCnt ], eax
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4073 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp4071 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 7
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp4074 ], 0
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal543 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4073 ]
  lea  rdi , [ tmp4071 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4072 ], 0
  mov [ tmp4073 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4072 ]
  mov [ tmp4073 + Variant_t.value], rax
  lea rcx, [ tmp4071 ]
  lea rdx, [ tmp4073 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4075
  push rdi
  lea  rcx , [ ast ]
  lea  rdi , [ tmp4077 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsImmOrVar
  pop rdi
  mov dword [ tmp4078 ], 0
  xor   eax, eax
  or    dword [ tmp4077 ], eax
  setnz cl
  or    dword [ tmp4078 ], eax
  setz  al
  xor   al, cl
  mov   dword [ tmp4074 ], eax
l4075:
  cmp dword [ tmp4074 ], 0
  jz l4079
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4071 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4084 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4084 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4084 ]
  lea  rdi , [ tmp4083 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4082 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4083 ]
  lea  rdx , [ __literal545 ]
  lea  r8 , [ tmp4082 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4081 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal544 ]
  lea  rdx , [ tmp4082 ]
  lea  r8 , [ tmp4081 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp4071 ]
  lea  rdx , [ tmp4081 ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l4079:
l4080:
  mov dword [ tmp4074 ], 1
  mov eax, dword [ tmp4074 ]
  mov [ tmp4073 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4073 + Variant_t.value], rax
  lea  rcx , [ ast ]
  lea  rdx , [ __literal543 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4072 ], 52
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4085
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ value ]
  call __MOLD_VariantMove
  lea rcx, [ value ]
  lea rdx, [ __literal237 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4087
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 54
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4071 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4071 ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4072 ], 0
  mov [ tmp4071 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4072 ]
  mov [ tmp4071 + Variant_t.value], rax
  lea rcx, [ tmp4073 ]
  lea rdx, [ tmp4071 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l4089
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4073 ]
  lea  rdx , [ __literal237 ]
  lea  rdi, [ tmp4071 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 39
  call __MOLD_VCall
  pop rdi
l4089:
l4090:
  jmp l4088
l4087:
  lea rcx, [ value ]
  lea rdx, [ __literal238 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4091
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4071 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 55
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4073 ]
  lea  rdx , [ __literal152 ]
  lea  r8 , [ tmp4071 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4072 ], 0
  mov [ tmp4073 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4072 ]
  mov [ tmp4073 + Variant_t.value], rax
  lea rcx, [ tmp4071 ]
  lea rdx, [ tmp4073 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l4093
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4071 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4071 ]
  lea  rdx , [ __literal238 ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 39
  call __MOLD_VCall
  pop rdi
l4093:
l4094:
  jmp l4092
l4091:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 56
  call __MOLD_VCall
  pop rdi
l4092:
l4088:
  jmp l4086
l4085:
  mov dword [ tmp4072 ], 75
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4095
  mov dword [ tmp4072 ], 0
  lea  rcx, [ srcNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4072 ]
  lea  r8 , [ srcNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ srcNode ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp4072 ]
  mov dword [ srcType ], eax
  push rdi
  lea  rcx , [ ast ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp4072 ]
  mov dword [ dstType ], eax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ srcNode ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea rcx, [ src ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  mov eax, dword [ srcType ]
  cmp eax, dword [ dstType ]
  jnz l4097
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ src ]
  call __MOLD_VariantMove
  jmp l4098
l4097:
  mov [ tmp4071 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dstType ]
  mov [ tmp4071 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp4071 ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ dstTypeMir ]
  call __MOLD_VariantDestroy
  lea rcx, [ dstTypeMir ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  mov [ tmp4071 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ srcType ]
  mov [ tmp4071 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp4071 ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ srcTypeMir ]
  call __MOLD_VariantDestroy
  lea rcx, [ srcTypeMir ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  lea rcx, [ dstTypeMir ]
  lea rdx, [ srcTypeMir ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4099
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ src ]
  call __MOLD_VariantMove
  jmp l4100
l4099:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dstTypeMir ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4071 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4071 ]
  lea  rdx , [ rv ]
  lea  r8 , [ dstTypeMir ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 57
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ src ]
  call  __ASTTranslator__releaseTempVar$0
  mov [ tmp4071 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ srcType ]
  mov [ tmp4071 + Variant_t.value], rax
  mov [ tmp4083 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ dstType ]
  mov [ tmp4083 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ src ]
  lea  r9 , [ tmp4071 ]
  lea  rax , [ tmp4083 ]
  push rax
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 58
  call __MOLD_VCall
  add rsp, 8
  pop rdi
l4100:
l4098:
  jmp l4096
l4095:
  push rdi
  lea  rcx , [ ast ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp4072 ]
  mov dword [ astDataType ], eax
  mov [ tmp4083 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astDataType ]
  mov [ tmp4083 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp4083 ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ mirDataType ]
  call __MOLD_VariantDestroy
  lea rcx, [ mirDataType ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ mirDataType ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$0
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4083 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4083 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4083 ]
  lea  rdx , [ rv ]
  lea  r8 , [ mirDataType ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 57
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ ast ]
  lea  rdx , [ __literal546 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4072 ], 8
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4101
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 59
  call __MOLD_VCall
  pop rdi
  jmp l4102
l4101:
  mov dword [ tmp4072 ], 9
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4103
  lea  rcx, [ tmp4081 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4081 ]
  lea rdx, [ __const4106 ]
  call __MOLD_VariantMove
  lea rcx, [ tmp4081 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4107
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ value ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 60
  call __MOLD_VCall
  pop rdi
  jmp l4108
l4107:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 61
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp4072 ], 0
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp4072 ]
  jle l4110
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal130 ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$0
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal130 ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$0
  pop rdi
  lea  rcx, [ valueAsVariant ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueAsVariant ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys childIdx values childNode
;
  jmp l4113
l4112:
  mov [ tmp4083 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ childIdx ]
  mov [ tmp4083 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ key ]
  lea  r8 , [ tmp4083 ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 62
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ childNode ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea rcx, [ value ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ childNode ]
  lea  rdi , [ tmp4072 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov [ tmp4083 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4072 ]
  mov [ tmp4083 + Variant_t.value], rax
  mov dword [ tmp4072 ], -1
  mov [ tmp4071 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4072 ]
  mov [ tmp4071 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valueAsVariant ]
  lea  r8 , [ value ]
  lea  r9 , [ tmp4083 ]
  lea  rax , [ tmp4071 ]
  push rax
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 58
  call __MOLD_VCall
  add rsp, 8
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ key ]
  lea  r9 , [ valueAsVariant ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 63
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ value ]
  call  __ASTTranslator__releaseTempVar$0
  ret
l4113:
  lea  rcx , [ children ]
  lea  rdx , [ childIdx ]
  lea  r8 , [ childNode ]
  lea  r9 , [ l4112 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys childIdx values childNode
; -----------------------------
;
  lea  rcx , [ this ]
  lea  rdx , [ key ]
  call  __ASTTranslator__releaseTempVar$0
  lea  rcx , [ this ]
  lea  rdx , [ valueAsVariant ]
  call  __ASTTranslator__releaseTempVar$0
l4110:
l4111:
l4108:
  jmp l4104
l4103:
  mov dword [ tmp4072 ], 10
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4114
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 64
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp4072 ], 0
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp4072 ]
  jle l4116
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal130 ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$0
  pop rdi
  lea  rcx, [ valueAsVariant ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueAsVariant ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  mov dword [ tmp4072 ], 2
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp4118 .. childrenCnt
;
l4119:
  mov eax, dword [ idx ]
  cmp eax, dword [ childrenCnt ]
  jge l4120
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4071 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4071 ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  mov dword [ tmp4122 ], 1
  mov eax, dword [ idx ]
  add eax, dword [ tmp4122 ]
  mov dword [ tmp4121 ], eax
  lea  rcx, [ __cse35 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4121 ]
  lea  r8 , [ __cse35 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __cse35 ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea rcx, [ value ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ __cse35 ]
  lea  rdi , [ tmp4121 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov [ tmp4071 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4121 ]
  mov [ tmp4071 + Variant_t.value], rax
  mov dword [ tmp4121 ], -1
  mov [ tmp4083 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4121 ]
  mov [ tmp4083 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valueAsVariant ]
  lea  r8 , [ value ]
  lea  r9 , [ tmp4071 ]
  lea  rax , [ tmp4083 ]
  push rax
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 58
  call __MOLD_VCall
  add rsp, 8
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ key ]
  lea  r9 , [ valueAsVariant ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 65
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ key ]
  call  __ASTTranslator__releaseTempVar$0
  lea  rcx , [ this ]
  lea  rdx , [ value ]
  call  __ASTTranslator__releaseTempVar$0
  mov eax, dword [ idx ]
  add eax, dword [ tmp4072 ]
  mov dword [ idx ], eax
  jmp l4119
l4120:
;
; END: for idx in tmp4118 .. childrenCnt step tmp4072
; -----------------------------
;
  lea  rcx , [ this ]
  lea  rdx , [ valueAsVariant ]
  call  __ASTTranslator__releaseTempVar$0
l4116:
l4117:
  jmp l4115
l4114:
  mov dword [ tmp4118 ], 30
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4118 ]
  jge l4123
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ value ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 60
  call __MOLD_VCall
  pop rdi
  jmp l4124
l4123:
  mov dword [ tmp4118 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4118 ]
  jnz l4126
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ ast ]
  call  __ASTTranslator__evaluateNodeCall$0
  jmp l4127
l4126:
  mov dword [ tmp4118 ], 36
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4118 ]
  jnz l4129
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ ast ]
  call  __ASTTranslator__evaluateNodeInvokeMethod$0
  jmp l4130
l4129:
  mov dword [ tmp4118 ], 57
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4118 ]
  jnz l4132
  mov dword [ tmp4118 ], 0
  lea  rcx, [ tmp4083 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4118 ]
  lea  r8 , [ tmp4083 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4083 ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ x ]
  call  __ASTTranslator__releaseTempVar$0
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ x ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 66
  call __MOLD_VCall
  pop rdi
  jmp l4133
l4132:
  mov dword [ tmp4118 ], 72
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4118 ]
  jnz l4135
  mov dword [ tmp4118 ], 0
  lea  rcx, [ tmp4083 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4118 ]
  lea  r8 , [ tmp4083 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4118 ], 1
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4118 ]
  lea  r8 , [ tmp4071 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4083 ]
  lea  r9 , [ tmp4071 ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 67
  call __MOLD_VCall
  pop rdi
  jmp l4136
l4135:
  mov dword [ tmp4118 ], 73
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4118 ]
  jnz l4138
  mov dword [ tmp4118 ], 0
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4118 ]
  lea  r8 , [ tmp4071 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4118 ], 1
  lea  rcx, [ tmp4083 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4118 ]
  lea  r8 , [ tmp4083 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4071 ]
  lea  r9 , [ tmp4083 ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 68
  call __MOLD_VCall
  pop rdi
  jmp l4139
l4138:
  mov dword [ tmp4118 ], 37
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4118 ]
  jnz l4141
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ value ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getClassProto$0
  pop rdi
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea rcx, [ classProto ]
  lea rdx, [ tmp4073 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ classProto ]
  lea  rdi, [ tmp4073 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 69
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp4083 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal223 ]
  lea  r8 , [ tmp4083 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4083 ]
  lea  rdx , [ __literal535 ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp4073 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4118 ], 0
  mov [ tmp4083 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4118 ]
  mov [ tmp4083 + Variant_t.value], rax
  lea rcx, [ tmp4073 ]
  lea rdx, [ tmp4083 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4144
  lea  rcx, [ tmp4083 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4083 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4073 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4073 + Variant_t.value], 0
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4071 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4083 ]
  lea  rdx , [ tmp4073 ]
  lea  r8 , [ tmp4071 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4083 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4073 ]
  lea  rdi , [ tmp4071 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4118 ], 1
  mov [ tmp4073 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4118 ]
  mov [ tmp4073 + Variant_t.value], rax
  lea  rcx , [ tmp4071 ]
  lea  rdx , [ tmp4073 ]
  lea  r8 , [ paramsCnt ]
  call  __MOLD_VariantAdd
  mov [ tmp4083 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ childrenCnt ]
  mov [ tmp4083 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal535 ]
  lea  r8 , [ paramsCnt ]
  lea  r9 , [ tmp4083 ]
  call  __ASTTranslator__verifyNumberOfParameters$0
  mov dword [ tmp4118 ], 1
  mov dword [ idx ], 1
;
; -----------------------------
; BEGIN: for idx in tmp4072 .. childrenCnt
;
l4146:
  mov eax, dword [ idx ]
  cmp eax, dword [ childrenCnt ]
  jge l4147
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4073 ]
  lea  rdi , [ tmp4083 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4083 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp4118 ]
  mov dword [ idx ], eax
  jmp l4146
l4147:
;
; END: for idx in tmp4072 .. childrenCnt step tmp4118
; -----------------------------
;
  mov dword [ tmp4148 ], 1
  mov eax, dword [ tmp4148 ]
  mov [ tmp4083 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4083 + Variant_t.value], rax
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal541 ]
  lea  r8 , [ tmp4083 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal130 ]
  lea  rdi , [ tmp4083 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$0
  pop rdi
  lea  rcx, [ unusedRv ]
  call __MOLD_VariantDestroy
  lea rcx, [ unusedRv ]
  lea rdx, [ tmp4083 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ unusedRv ]
  lea  r8 , [ methodProto ]
  lea  r9 , [ params ]
  lea  rax , [ paramsCnt ]
  push rax
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 52
  call __MOLD_VCall
  add rsp, 8
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ unusedRv ]
  call  __ASTTranslator__releaseTempVar$0
l4144:
l4145:
  jmp l4142
l4141:
  mov dword [ tmp4072 ], 2
  mov eax, dword [ childrenCnt ]
  cmp eax, dword [ tmp4072 ]
  jnz l4149
  mov dword [ tmp4072 ], 0
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4072 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4073 ]
  lea  rdi , [ tmp4083 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ left ]
  call __MOLD_VariantDestroy
  lea rcx, [ left ]
  lea rdx, [ tmp4083 ]
  call __MOLD_VariantMove
  mov dword [ tmp4072 ], 1
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4072 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4073 ]
  lea  rdi , [ tmp4083 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ right ]
  call __MOLD_VariantDestroy
  lea rcx, [ right ]
  lea rdx, [ tmp4083 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ left ]
  call  __ASTTranslator__releaseTempVar$0
  lea  rcx , [ this ]
  lea  rdx , [ right ]
  call  __ASTTranslator__releaseTempVar$0
  mov dword [ tmp4072 ], 54
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4151
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 70
  call __MOLD_VCall
  pop rdi
  jmp l4152
l4151:
  mov dword [ tmp4072 ], 55
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4154
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 71
  call __MOLD_VCall
  pop rdi
  jmp l4155
l4154:
  mov dword [ tmp4072 ], 66
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4157
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 72
  call __MOLD_VCall
  pop rdi
  jmp l4158
l4157:
  mov dword [ tmp4072 ], 67
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4160
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 73
  call __MOLD_VCall
  pop rdi
  jmp l4161
l4160:
  mov dword [ tmp4072 ], 68
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4163
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 74
  call __MOLD_VCall
  pop rdi
  jmp l4164
l4163:
  mov dword [ tmp4072 ], 69
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4166
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 75
  call __MOLD_VCall
  pop rdi
  jmp l4167
l4166:
  mov dword [ tmp4072 ], 70
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4169
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 76
  call __MOLD_VCall
  pop rdi
  jmp l4170
l4169:
  mov dword [ tmp4072 ], 71
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4172
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 77
  call __MOLD_VCall
  pop rdi
  jmp l4173
l4172:
  mov dword [ tmp4072 ], 58
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4175
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 78
  call __MOLD_VCall
  pop rdi
  jmp l4176
l4175:
  mov dword [ tmp4072 ], 59
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4178
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 79
  call __MOLD_VCall
  pop rdi
  jmp l4179
l4178:
  mov dword [ tmp4072 ], 60
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4181
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 80
  call __MOLD_VCall
  pop rdi
  jmp l4182
l4181:
  mov dword [ tmp4072 ], 61
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4184
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 81
  call __MOLD_VCall
  pop rdi
  jmp l4185
l4184:
  mov dword [ tmp4072 ], 64
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4187
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 82
  call __MOLD_VCall
  pop rdi
  jmp l4188
l4187:
  mov dword [ tmp4072 ], 65
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4072 ]
  jnz l4190
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ left ]
  lea  r9 , [ right ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 83
  call __MOLD_VCall
  pop rdi
l4190:
l4191:
l4188:
l4185:
l4182:
l4179:
l4176:
l4173:
l4170:
l4167:
l4164:
l4161:
l4158:
l4155:
l4152:
  jmp l4150
l4149:
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4073 ]
  call  __MOLD_VariantLoadFromKey
  mov [ tmp4084 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp4084 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp4084 ]
  lea  rdi , [ tmp4071 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp4084 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4192 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal315 ]
  lea  rdx , [ tmp4084 ]
  lea  r8 , [ tmp4192 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4082 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4071 ]
  lea  rdx , [ tmp4192 ]
  lea  r8 , [ tmp4082 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4081 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal547 ]
  lea  rdx , [ tmp4082 ]
  lea  r8 , [ tmp4081 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp4073 ]
  lea  rdx , [ tmp4081 ]
  lea  rdi, [ tmp4083 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l4150:
l4142:
l4139:
l4136:
l4133:
l4130:
l4127:
l4124:
l4115:
l4104:
l4102:
l4096:
l4086:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4071 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4073 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4083 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4084 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ srcNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dstTypeMir ]
  call __MOLD_VariantDestroy
  lea  rcx, [ srcTypeMir ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirDataType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueAsVariant ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator childNode
  lea  rcx, [ __cse35 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ unusedRv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ left ]
  call __MOLD_VariantDestroy
  lea  rcx, [ right ]
  call __MOLD_VariantDestroy

  add  rsp, 640
  pop  rbp
  ret

  restore this
  restore ast
  restore opcode
  restore value
  restore children
  restore childrenCnt
  restore rv
  restore tmp4071
  restore tmp4072
  restore tmp4073
  restore tmp4074
  restore tmp4076
  restore tmp4077
  restore tmp4078
  restore tmp4081
  restore tmp4082
  restore tmp4083
  restore tmp4084
  restore srcNode
  restore srcType
  restore dstType
  restore src
  restore dstTypeMir
  restore srcTypeMir
  restore tmp4105
  restore tmp4109
  restore tmp4118
  restore tmp4121
  restore tmp4122
  restore tmp4125
  restore tmp4128
  restore tmp4131
  restore tmp4134
  restore tmp4137
  restore tmp4140
  restore tmp4143
  restore tmp4148
  restore tmp4153
  restore tmp4156
  restore tmp4159
  restore tmp4162
  restore tmp4165
  restore tmp4168
  restore tmp4171
  restore tmp4174
  restore tmp4177
  restore tmp4180
  restore tmp4183
  restore tmp4186
  restore tmp4189
  restore tmp4192
  restore astDataType
  restore mirDataType
  restore key
  restore valueAsVariant
  restore childIdx
  restore childNode
  restore idx
  restore __cse35
  restore x
  restore classProto
  restore methodProto
  restore params
  restore paramsCnt
  restore unusedRv
  restore left
  restore right
; -----------------------------------------------
; function __ASTTranslator__evaluateNodeCall$0
; -----------------------------------------------
__ASTTranslator__evaluateNodeCall$0:
  ; init frame
  ; ----------
  funcProto EQU rbp - 24 ; 16 bytes
  funcEntry EQU rbp - 40 ; 16 bytes
  isRetValUsed EQU rbp - 44 ; 4 bytes
  tmp4212 EQU rbp - 60 ; 16 bytes
  tmp4211 EQU rbp - 64 ; 4 bytes
  tmp4210 EQU rbp - 68 ; 4 bytes
  tmp4209 EQU rbp - 84 ; 16 bytes
  tmp4206 EQU rbp - 88 ; 4 bytes
  tmp4203 EQU rbp - 92 ; 4 bytes
  oneParam EQU rbp - 108 ; 16 bytes
  oneChild EQU rbp - 124 ; 16 bytes
  idx EQU rbp - 128 ; 4 bytes
  tmp4194 EQU rbp - 132 ; 4 bytes
  tmp4193 EQU rbp - 148 ; 16 bytes
  paramsCnt EQU rbp - 164 ; 16 bytes
  params EQU rbp - 180 ; 16 bytes
  childrenCnt EQU rbp - 196 ; 16 bytes
  children EQU rbp - 212 ; 16 bytes
  funcName EQU rbp - 228 ; 16 bytes
  ast EQU rbp - 244 ; 16 bytes
  rv EQU rbp - 260 ; 16 bytes
  this EQU rbp - 276 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ ast ], xmm0
  mov [funcName + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4193 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [tmp4209 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4212 + Variant_t.type], VARIANT_UNDEFINED
  mov [funcEntry + Variant_t.type], VARIANT_UNDEFINED
  mov [funcProto + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ funcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ funcName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ funcName ]
  lea rdx, [ __literal248 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4195
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal233 ]
  lea  rdi, [ tmp4193 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 56
  call __MOLD_VCall
  pop rdi
l4195:
l4196:
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea rcx, [ paramsCnt ]
  lea rdx, [ childrenCnt ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys idx values oneChild
;
  jmp l4198
l4197:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  lea  rdi , [ tmp4193 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4193 ]
  call  __MOLD_VariantStoreAtIndex_int32
  ret
l4198:
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l4197 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys idx values oneChild
; -----------------------------
;
;
; -----------------------------
; BEGIN: for keys undefined values oneParam
;
  jmp l4200
l4199:
  lea  rcx , [ this ]
  lea  rdx , [ oneParam ]
  call  __ASTTranslator__releaseTempVar$0
  ret
l4200:
  lea  rcx , [ params ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4199 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneParam
; -----------------------------
;
  lea rcx, [ funcName ]
  lea rdx, [ __literal16 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4201
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ params ]
  lea  r8 , [ paramsCnt ]
  lea  rdi, [ tmp4193 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 84
  call __MOLD_VCall
  pop rdi
  jmp l4202
l4201:
  lea rcx, [ funcName ]
  lea rdx, [ __literal248 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4204
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ params ]
  lea  r9 , [ paramsCnt ]
  call  __ASTTranslator__callSuper$0
  jmp l4205
l4204:
  lea rcx, [ funcName ]
  lea rdx, [ __literal122 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4207
  lea  rcx, [ tmp4209 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal123 ]
  lea  r8 , [ tmp4209 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4209 ]
  lea  r9 , [ params ]
  lea  rax , [ paramsCnt ]
  push rax
  lea  rdi, [ tmp4193 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 85
  call __MOLD_VCall
  add rsp, 8
  pop rdi
  jmp l4208
l4207:
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp4193 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4211 ], 0
  mov [ tmp4209 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4211 ]
  mov [ tmp4209 + Variant_t.value], rax
  lea  rcx , [ tmp4193 ]
  lea  rdx , [ tmp4209 ]
  lea  r8 , [ isRetValUsed ]
  call  __MOLD_VariantCompareNE
  lea  rcx, [ tmp4193 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4193 ]
  call  __MOLD_VariantLoadFromKey
  mov eax, dword [ isRetValUsed ]
  mov [ tmp4212 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4212 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp4193 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ childrenCnt ]
  lea  r9 , [ tmp4212 ]
  lea  rdi, [ tmp4209 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 86
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ funcEntry ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcEntry ]
  lea rdx, [ tmp4209 ]
  call __MOLD_VariantMove
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcEntry ]
  lea  rdx , [ __literal135 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ funcProto ]
  lea  r9 , [ params ]
  lea  rax , [ paramsCnt ]
  push rax
  lea  rdi, [ tmp4209 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 52
  call __MOLD_VCall
  add rsp, 8
  pop rdi
l4208:
l4205:
l4202:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4193 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  ; Skipped loop iterator oneParam
  lea  rcx, [ tmp4209 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4212 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcEntry ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy

  add  rsp, 304
  pop  rbp
  ret

  restore this
  restore rv
  restore ast
  restore funcName
  restore children
  restore childrenCnt
  restore params
  restore paramsCnt
  restore tmp4193
  restore tmp4194
  restore idx
  restore oneChild
  restore oneParam
  restore tmp4203
  restore tmp4206
  restore tmp4209
  restore tmp4210
  restore tmp4211
  restore tmp4212
  restore isRetValUsed
  restore funcEntry
  restore funcProto
; -----------------------------------------------
; function __ASTTranslator__evaluateNodeInvokeMethod$0
; -----------------------------------------------
__ASTTranslator__evaluateNodeInvokeMethod$0:
  ; init frame
  ; ----------
  oneParam EQU rbp - 24 ; 16 bytes
  idx EQU rbp - 28 ; 4 bytes
  tmp4217 EQU rbp - 32 ; 4 bytes
  tmp4216 EQU rbp - 36 ; 4 bytes
  tmp4215 EQU rbp - 40 ; 4 bytes
  tmp4214 EQU rbp - 56 ; 16 bytes
  tmp4213 EQU rbp - 72 ; 16 bytes
  paramsCnt EQU rbp - 88 ; 16 bytes
  params EQU rbp - 104 ; 16 bytes
  thiz EQU rbp - 120 ; 16 bytes
  childrenCnt EQU rbp - 136 ; 16 bytes
  children EQU rbp - 152 ; 16 bytes
  methodName EQU rbp - 168 ; 16 bytes
  ast EQU rbp - 184 ; 16 bytes
  rv EQU rbp - 200 ; 16 bytes
  this EQU rbp - 216 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 256

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ ast ], xmm0
  mov [methodName + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [thiz + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [paramsCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4213 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4214 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4215 ], 0
  lea  rcx, [ tmp4214 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4215 ]
  lea  r8 , [ tmp4214 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4214 ]
  lea  rdi , [ tmp4213 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea rcx, [ thiz ]
  lea rdx, [ tmp4213 ]
  call __MOLD_VariantMove
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate
  mov dword [ tmp4215 ], 0
  lea  rcx , [ params ]
  lea  rdx , [ tmp4215 ]
  lea  r8 , [ thiz ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea rcx, [ paramsCnt ]
  lea rdx, [ childrenCnt ]
  call __MOLD_VariantMove
  mov dword [ tmp4215 ], 1
  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp4216 ], eax
  mov dword [ idx ], 1
;
; -----------------------------
; BEGIN: for idx in tmp4217 .. tmp4216
;
l4218:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4216 ]
  jge l4219
  lea  rcx, [ tmp4214 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4214 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4214 ]
  lea  rdi , [ tmp4213 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4213 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp4215 ]
  mov dword [ idx ], eax
  jmp l4218
l4219:
;
; END: for idx in tmp4217 .. tmp4216 step tmp4215
; -----------------------------
;
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ methodName ]
  lea  r9 , [ params ]
  lea  rax , [ paramsCnt ]
  push rax
  lea  rdi, [ tmp4213 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 87
  call __MOLD_VCall
  add rsp, 8
  pop rdi
;
; -----------------------------
; BEGIN: for keys undefined values oneParam
;
  jmp l4221
l4220:
  lea  rcx , [ this ]
  lea  rdx , [ oneParam ]
  call  __ASTTranslator__releaseTempVar$0
  ret
l4221:
  lea  rcx , [ params ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneParam ]
  lea  r9 , [ l4220 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneParam
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramsCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4213 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4214 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneParam

  add  rsp, 256
  pop  rbp
  ret

  restore this
  restore rv
  restore ast
  restore methodName
  restore children
  restore childrenCnt
  restore thiz
  restore params
  restore paramsCnt
  restore tmp4213
  restore tmp4214
  restore tmp4215
  restore tmp4216
  restore tmp4217
  restore idx
  restore oneParam
; -----------------------------------------------
; function __ASTTranslator__executeNode$0
; -----------------------------------------------
__ASTTranslator__executeNode$0:
  ; init frame
  ; ----------
  tmp4295 EQU rbp - 12 ; 4 bytes
  unusedRv EQU rbp - 28 ; 16 bytes
  tmp4292 EQU rbp - 32 ; 4 bytes
  paramName EQU rbp - 48 ; 16 bytes
  tmp4285 EQU rbp - 52 ; 4 bytes
  tmp4280 EQU rbp - 56 ; 4 bytes
  tmp4277 EQU rbp - 60 ; 4 bytes
  tmp4274 EQU rbp - 64 ; 4 bytes
  codeIfFalse EQU rbp - 80 ; 16 bytes
  codeIfTrue EQU rbp - 96 ; 16 bytes
  cond EQU rbp - 112 ; 16 bytes
  tmp4271 EQU rbp - 116 ; 4 bytes
  condAst EQU rbp - 132 ; 16 bytes
  tmp4266 EQU rbp - 136 ; 4 bytes
  iteratorKey EQU rbp - 152 ; 16 bytes
  tmp4262 EQU rbp - 156 ; 4 bytes
  loopBodyNode EQU rbp - 172 ; 16 bytes
  iteratorValue EQU rbp - 188 ; 16 bytes
  __cse37 EQU rbp - 204 ; 16 bytes
  mirDataType EQU rbp - 220 ; 16 bytes
  astDataType EQU rbp - 224 ; 4 bytes
  bodyAst EQU rbp - 240 ; 16 bytes
  valueStart EQU rbp - 256 ; 16 bytes
  valueEnd EQU rbp - 272 ; 16 bytes
  valueStep EQU rbp - 288 ; 16 bytes
  iteratorName EQU rbp - 304 ; 16 bytes
  __cse36 EQU rbp - 320 ; 16 bytes
  idxOrKey EQU rbp - 336 ; 16 bytes
  box EQU rbp - 352 ; 16 bytes
  valueNode EQU rbp - 368 ; 16 bytes
  indexNode EQU rbp - 384 ; 16 bytes
  boxNode EQU rbp - 400 ; 16 bytes
  symbolInfo EQU rbp - 416 ; 16 bytes
  rval EQU rbp - 432 ; 16 bytes
  lval EQU rbp - 448 ; 16 bytes
  tmp4256 EQU rbp - 464 ; 16 bytes
  tmp4255 EQU rbp - 480 ; 16 bytes
  tmp4247 EQU rbp - 484 ; 4 bytes
  tmp4245 EQU rbp - 488 ; 4 bytes
  tmp4242 EQU rbp - 492 ; 4 bytes
  tmp4239 EQU rbp - 496 ; 4 bytes
  oneChild EQU rbp - 512 ; 16 bytes
  oldSymbolTable EQU rbp - 528 ; 16 bytes
  tmp4234 EQU rbp - 532 ; 4 bytes
  funcProto EQU rbp - 548 ; 16 bytes
  tmp4231 EQU rbp - 564 ; 16 bytes
  tmp4230 EQU rbp - 580 ; 16 bytes
  tmp4229 EQU rbp - 596 ; 16 bytes
  tmp4228 EQU rbp - 612 ; 16 bytes
  tmp4225 EQU rbp - 616 ; 4 bytes
  tmp4224 EQU rbp - 620 ; 4 bytes
  tmp4223 EQU rbp - 636 ; 16 bytes
  tmp4222 EQU rbp - 652 ; 16 bytes
  children EQU rbp - 668 ; 16 bytes
  value EQU rbp - 684 ; 16 bytes
  opcode EQU rbp - 688 ; 4 bytes
  ast EQU rbp - 704 ; 16 bytes
  this EQU rbp - 720 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 752

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4222 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4223 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4228 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4229 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4230 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4231 + Variant_t.type], VARIANT_UNDEFINED
  mov [funcProto + Variant_t.type], VARIANT_UNDEFINED
  mov [oldSymbolTable + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp4255 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4256 + Variant_t.type], VARIANT_UNDEFINED
  mov [lval + Variant_t.type], VARIANT_UNDEFINED
  mov [rval + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [boxNode + Variant_t.type], VARIANT_UNDEFINED
  mov [indexNode + Variant_t.type], VARIANT_UNDEFINED
  mov [valueNode + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [idxOrKey + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse36 + Variant_t.type], VARIANT_UNDEFINED
  mov [iteratorName + Variant_t.type], VARIANT_UNDEFINED
  mov [valueStep + Variant_t.type], VARIANT_UNDEFINED
  mov [valueEnd + Variant_t.type], VARIANT_UNDEFINED
  mov [valueStart + Variant_t.type], VARIANT_UNDEFINED
  mov [bodyAst + Variant_t.type], VARIANT_UNDEFINED
  mov [mirDataType + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse37 + Variant_t.type], VARIANT_UNDEFINED
  mov [iteratorValue + Variant_t.type], VARIANT_UNDEFINED
  mov [loopBodyNode + Variant_t.type], VARIANT_UNDEFINED
  mov [iteratorKey + Variant_t.type], VARIANT_UNDEFINED
  mov [condAst + Variant_t.type], VARIANT_UNDEFINED
  mov [cond + Variant_t.type], VARIANT_UNDEFINED
  mov [codeIfTrue + Variant_t.type], VARIANT_UNDEFINED
  mov [codeIfFalse + Variant_t.type], VARIANT_UNDEFINED
  mov [paramName + Variant_t.type], VARIANT_UNDEFINED
  mov [unusedRv + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4223 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 7
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp4222 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4222 + Variant_t.value]
  mov dword [ opcode ], eax
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal543 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4223 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4224 ], 0
  mov [ tmp4223 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4224 ]
  mov [ tmp4223 + Variant_t.value], rax
  lea rcx, [ tmp4222 ]
  lea rdx, [ tmp4223 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4226
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4231 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4231 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4231 ]
  lea  rdi , [ tmp4230 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4229 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4230 ]
  lea  rdx , [ __literal549 ]
  lea  r8 , [ tmp4229 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4228 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal544 ]
  lea  rdx , [ tmp4229 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp4222 ]
  lea  rdx , [ tmp4228 ]
  lea  rdi, [ tmp4223 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l4226:
l4227:
  mov dword [ tmp4225 ], 1
  mov eax, dword [ tmp4225 ]
  mov [ tmp4223 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4223 + Variant_t.value], rax
  lea  rcx , [ ast ]
  lea  rdx , [ __literal543 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4224 ], 30
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jnz l4232
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4223 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4222 ]
  lea rdx, [ __literal550 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4223 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4222 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp4223 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4223 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea rcx, [ funcProto ]
  lea rdx, [ tmp4223 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal479 ]
  lea  r8 , [ funcProto ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 0
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4230 ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4222 ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal480 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal550 ]
  lea  r8 , [ funcProto ]
  lea  rdi, [ tmp4223 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 50
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal479 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantStoreAtKey
  jmp l4233
l4232:
  mov dword [ tmp4224 ], 31
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jnz l4235
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ ast ]
  call  __ASTTranslator__enterScope$0
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l4238
l4237:
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  call  __ASTTranslator__executeNode$0
  ret
l4238:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l4237 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  lea  rcx , [ this ]
  call  __ASTTranslator__leaveScope$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey
  jmp l4236
l4235:
  mov dword [ tmp4224 ], 56
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jnz l4240
  mov dword [ tmp4224 ], 0
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 52
  mov [ tmp4222 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4224 ]
  mov [ tmp4222 + Variant_t.value], rax
  lea rcx, [ tmp4223 ]
  lea rdx, [ tmp4222 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4243
  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ lval ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 1
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4223 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea rcx, [ rval ]
  lea rdx, [ tmp4222 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ lval ]
  lea  r8 , [ rval ]
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 53
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp4245 ], 0
  mov dword [ tmp4224 ], 1
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4223 ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 65
  mov [ tmp4223 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4224 ]
  mov [ tmp4223 + Variant_t.value], rax
  lea rcx, [ tmp4222 ]
  lea rdx, [ tmp4223 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4246
  mov dword [ tmp4224 ], 1
  lea  rcx, [ tmp4231 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4231 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4231 ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4230 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 0
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4230 ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4222 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ lval ]
  lea  rdx , [ tmp4223 ]
  lea  r8 , [ tmp4245 ]
  call  __MOLD_VariantCompareEQ
l4246:
  cmp dword [ tmp4245 ], 0
  jz l4248
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4222 ]
  lea  rdx , [ lval ]
  lea  rdi, [ tmp4223 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp4223 ]
  call __MOLD_VariantMove
  mov dword [ tmp4247 ], 1
  mov eax, dword [ tmp4247 ]
  mov [ tmp4223 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4223 + Variant_t.value], rax
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal551 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantStoreAtKey
l4248:
l4249:
  lea  rcx , [ this ]
  lea  rdx , [ rval ]
  call  __ASTTranslator__releaseTempVar$0
  jmp l4244
l4243:
  mov dword [ tmp4245 ], 1
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 54
  mov [ tmp4222 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4224 ]
  mov [ tmp4222 + Variant_t.value], rax
  lea rcx, [ tmp4223 ]
  lea rdx, [ tmp4222 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4250
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 55
  mov [ tmp4223 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4224 ]
  mov [ tmp4223 + Variant_t.value], rax
  lea  rcx , [ tmp4222 ]
  lea  rdx , [ tmp4223 ]
  lea  r8 , [ tmp4245 ]
  call  __MOLD_VariantCompareEQ
l4250:
  cmp dword [ tmp4245 ], 0
  jz l4251
  lea  rcx, [ __cse36 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ __cse36 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 0
  lea  rcx, [ boxNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse36 ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ boxNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4224 ], 1
  lea  rcx, [ indexNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse36 ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ indexNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4224 ], 1
  lea  rcx, [ valueNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ valueNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ boxNode ]
  lea  rdi , [ tmp4223 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4223 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ indexNode ]
  lea  rdi , [ tmp4223 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ idxOrKey ]
  call __MOLD_VariantDestroy
  lea rcx, [ idxOrKey ]
  lea rdx, [ tmp4223 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ valueNode ]
  lea  rdi , [ tmp4223 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea rcx, [ rval ]
  lea rdx, [ tmp4223 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 54
  mov [ tmp4222 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4224 ]
  mov [ tmp4222 + Variant_t.value], rax
  lea rcx, [ tmp4223 ]
  lea rdx, [ tmp4222 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4253
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  lea  r8 , [ idxOrKey ]
  lea  r9 , [ rval ]
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 88
  call __MOLD_VCall
  pop rdi
  jmp l4254
l4253:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  lea  r8 , [ idxOrKey ]
  lea  r9 , [ rval ]
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 89
  call __MOLD_VCall
  pop rdi
l4254:
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  call  __ASTTranslator__releaseTempVar$0
  lea  rcx , [ this ]
  lea  rdx , [ idxOrKey ]
  call  __ASTTranslator__releaseTempVar$0
  lea  rcx , [ this ]
  lea  rdx , [ rval ]
  call  __ASTTranslator__releaseTempVar$0
  jmp l4252
l4251:
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4231 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal0 ]
  lea  r8 , [ tmp4231 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4231 ]
  lea  rdi , [ tmp4230 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4256 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ lval ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp4256 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4256 ]
  lea  rdi , [ tmp4231 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4255 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal315 ]
  lea  rdx , [ tmp4231 ]
  lea  r8 , [ tmp4255 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4229 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4230 ]
  lea  rdx , [ tmp4255 ]
  lea  r8 , [ tmp4229 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4228 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal552 ]
  lea  rdx , [ tmp4229 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp4223 ]
  lea  rdx , [ tmp4228 ]
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l4252:
l4244:
  jmp l4241
l4240:
  mov dword [ tmp4224 ], 44
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jnz l4257
  mov dword [ tmp4224 ], 0
  lea  rcx, [ __cse37 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ __cse37 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ iteratorName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse37 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ iteratorName ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 3
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4223 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ valueStep ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueStep ]
  lea rdx, [ tmp4222 ]
  call __MOLD_VariantMove
  mov dword [ tmp4224 ], 2
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4223 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ valueEnd ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueEnd ]
  lea rdx, [ tmp4222 ]
  call __MOLD_VariantMove
  mov dword [ tmp4224 ], 1
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4223 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ valueStart ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueStart ]
  lea rdx, [ tmp4222 ]
  call __MOLD_VariantMove
  mov dword [ tmp4224 ], 4
  lea  rcx, [ bodyAst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ bodyAst ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  call  __ASTTranslator__enterScope$0
  push rdi
  lea  rcx , [ __cse37 ]
  lea  rdi , [ tmp4224 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_GetDataType
  pop rdi
  mov eax, dword [ tmp4224 ]
  mov dword [ astDataType ], eax
  mov [ tmp4223 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ astDataType ]
  mov [ tmp4223 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp4223 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ mirDataType ]
  call __MOLD_VariantDestroy
  lea rcx, [ mirDataType ]
  lea rdx, [ tmp4222 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4223 ]
  lea  rdx , [ iteratorName ]
  lea  r8 , [ mirDataType ]
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 57
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ iteratorName ]
  lea  r8 , [ valueStart ]
  lea  r9 , [ valueEnd ]
  lea  rax , [ valueStep ]
  push rax
  lea  rax , [ bodyAst ]
  push rax
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 90
  call __MOLD_VCall
  add rsp, 16
  pop rdi
  lea  rcx , [ this ]
  call  __ASTTranslator__leaveScope$0
  lea  rcx , [ this ]
  lea  rdx , [ valueStep ]
  call  __ASTTranslator__releaseTempVar$0
  lea  rcx , [ this ]
  lea  rdx , [ valueEnd ]
  call  __ASTTranslator__releaseTempVar$0
  lea  rcx , [ this ]
  lea  rdx , [ valueStart ]
  call  __ASTTranslator__releaseTempVar$0
  jmp l4258
l4257:
  mov dword [ tmp4224 ], 45
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jnz l4259
  mov dword [ tmp4224 ], 0
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ iteratorValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4223 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ iteratorValue ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 1
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4223 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4222 ]
  call __MOLD_VariantMove
  mov dword [ tmp4224 ], 2
  lea  rcx, [ loopBodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ loopBodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ loopBodyNode ]
  call  __ASTTranslator__enterScope$0
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4223 ]
  lea  r8 , [ iteratorValue ]
  lea  r9 , [ box ]
  lea  rax , [ loopBodyNode ]
  push rax
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 91
  call __MOLD_VCall
  add rsp, 8
  pop rdi
  lea  rcx , [ this ]
  call  __ASTTranslator__leaveScope$0
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  call  __ASTTranslator__releaseTempVar$0
  jmp l4260
l4259:
  mov dword [ tmp4247 ], 1
  mov dword [ tmp4224 ], 46
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jz l4261
  mov dword [ tmp4224 ], 48
  mov dword [ tmp4247 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp4224 ]
  setz byte [ tmp4247 ]
l4261:
  cmp dword [ tmp4247 ], 0
  jz l4263
  mov dword [ tmp4224 ], 0
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ iteratorKey ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4223 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ iteratorKey ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 1
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4223 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4222 ]
  call __MOLD_VariantMove
  mov dword [ tmp4224 ], 2
  lea  rcx, [ loopBodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ loopBodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ loopBodyNode ]
  call  __ASTTranslator__enterScope$0
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ iteratorKey ]
  lea  r8 , [ tmp4223 ]
  lea  r9 , [ box ]
  lea  rax , [ loopBodyNode ]
  push rax
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 91
  call __MOLD_VCall
  add rsp, 8
  pop rdi
  lea  rcx , [ this ]
  call  __ASTTranslator__leaveScope$0
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  call  __ASTTranslator__releaseTempVar$0
  jmp l4264
l4263:
  mov dword [ tmp4262 ], 1
  mov dword [ tmp4224 ], 47
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jz l4265
  mov dword [ tmp4224 ], 49
  mov dword [ tmp4262 ], 0
  mov ecx, dword [ opcode ]
  cmp ecx, dword [ tmp4224 ]
  setz byte [ tmp4262 ]
l4265:
  cmp dword [ tmp4262 ], 0
  jz l4267
  mov dword [ tmp4224 ], 0
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ iteratorKey ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4223 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ iteratorKey ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 1
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ iteratorValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4223 ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ iteratorValue ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4224 ], 2
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4223 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4222 ]
  call __MOLD_VariantMove
  mov dword [ tmp4224 ], 3
  lea  rcx, [ loopBodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ loopBodyNode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ loopBodyNode ]
  call  __ASTTranslator__enterScope$0
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ iteratorKey ]
  lea  r8 , [ iteratorValue ]
  lea  r9 , [ box ]
  lea  rax , [ loopBodyNode ]
  push rax
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 91
  call __MOLD_VCall
  add rsp, 8
  pop rdi
  lea  rcx , [ this ]
  call  __ASTTranslator__leaveScope$0
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  call  __ASTTranslator__releaseTempVar$0
  jmp l4268
l4267:
  mov dword [ tmp4224 ], 43
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jnz l4269
  mov dword [ tmp4224 ], 0
  lea  rcx, [ condAst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ condAst ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4224 ], 1
  lea  rcx, [ bodyAst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ bodyAst ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyAst ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4222 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ condAst ]
  lea  r8 , [ bodyAst ]
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 92
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey
  jmp l4270
l4269:
  mov dword [ tmp4224 ], 40
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jnz l4272
  mov dword [ tmp4224 ], 0
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ tmp4223 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4223 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea rcx, [ cond ]
  lea rdx, [ tmp4222 ]
  call __MOLD_VariantMove
  mov dword [ tmp4224 ], 1
  lea  rcx, [ codeIfTrue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ codeIfTrue ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4224 ], 2
  lea  rcx, [ codeIfFalse ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4224 ]
  lea  r8 , [ codeIfFalse ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ cond ]
  lea  r8 , [ codeIfTrue ]
  lea  r9 , [ codeIfFalse ]
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 93
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ cond ]
  call  __ASTTranslator__releaseTempVar$0
  jmp l4273
l4272:
  mov dword [ tmp4224 ], 32
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jz l4275
  mov dword [ tmp4224 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jnz l4278
  lea rcx, [ value ]
  lea rdx, [ __literal17 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4281
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l4284
l4283:
  lea  rcx, [ paramName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneChild ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ paramName ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ paramName ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4222 ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4286
  push rdi
  lea  rcx , [ paramName ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4229 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4222 ]
  lea  rdx , [ __literal554 ]
  lea  r8 , [ tmp4229 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4228 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal553 ]
  lea  rdx , [ tmp4229 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4228 ]
  call  __ASTTranslator__error$0
  jmp l4287
l4286:
  lea  rcx , [ this ]
  lea  rdx , [ paramName ]
  call  __ASTTranslator__importGlobal$0
l4287:
  ret
l4284:
  lea  rcx , [ children ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l4283 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  jmp l4282
l4281:
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ tmp4222 ]
  lea  r8 , [ ast ]
  call  __ASTTranslator__evaluateNodeCall$0
l4282:
  jmp l4279
l4278:
  mov dword [ tmp4224 ], 50
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jnz l4288
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 94
  call __MOLD_VCall
  pop rdi
  jmp l4289
l4288:
  mov dword [ tmp4224 ], 33
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jz l4290
  mov dword [ tmp4224 ], 36
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jnz l4293
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal130 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__getTempVar$0
  pop rdi
  lea  rcx, [ unusedRv ]
  call __MOLD_VariantDestroy
  lea rcx, [ unusedRv ]
  lea rdx, [ tmp4222 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ unusedRv ]
  lea  r8 , [ ast ]
  call  __ASTTranslator__evaluateNodeInvokeMethod$0
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4222 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 95
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ unusedRv ]
  call  __ASTTranslator__releaseTempVar$0
  jmp l4294
l4293:
  mov dword [ tmp4224 ], 76
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp4224 ]
  jz l4296
  mov [ tmp4223 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp4223 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp4223 ]
  lea  rdi , [ tmp4222 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4228 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal555 ]
  lea  rdx , [ tmp4222 ]
  lea  r8 , [ tmp4228 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4228 ]
  call  __ASTTranslator__error$0
l4296:
l4297:
l4294:
l4290:
l4291:
l4289:
l4279:
l4275:
l4276:
l4273:
l4270:
l4268:
l4264:
l4260:
l4258:
l4241:
l4236:
l4233:

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4222 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4223 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4230 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4231 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ funcProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ tmp4256 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rval ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ boxNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ indexNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idxOrKey ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse36 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iteratorName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueStep ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueEnd ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueStart ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirDataType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse37 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iteratorValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopBodyNode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iteratorKey ]
  call __MOLD_VariantDestroy
  lea  rcx, [ condAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeIfTrue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeIfFalse ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ unusedRv ]
  call __MOLD_VariantDestroy

  add  rsp, 752
  pop  rbp
  ret

  restore this
  restore ast
  restore opcode
  restore value
  restore children
  restore tmp4222
  restore tmp4223
  restore tmp4224
  restore tmp4225
  restore tmp4228
  restore tmp4229
  restore tmp4230
  restore tmp4231
  restore funcProto
  restore tmp4234
  restore oldSymbolTable
  restore oneChild
  restore tmp4239
  restore tmp4242
  restore tmp4245
  restore tmp4247
  restore tmp4255
  restore tmp4256
  restore lval
  restore rval
  restore symbolInfo
  restore boxNode
  restore indexNode
  restore valueNode
  restore box
  restore idxOrKey
  restore __cse36
  restore iteratorName
  restore valueStep
  restore valueEnd
  restore valueStart
  restore bodyAst
  restore astDataType
  restore mirDataType
  restore __cse37
  restore iteratorValue
  restore loopBodyNode
  restore tmp4262
  restore iteratorKey
  restore tmp4266
  restore condAst
  restore tmp4271
  restore cond
  restore codeIfTrue
  restore codeIfFalse
  restore tmp4274
  restore tmp4277
  restore tmp4280
  restore tmp4285
  restore paramName
  restore tmp4292
  restore unusedRv
  restore tmp4295
; -----------------------------------------------
; function __ASTTranslator_run$0
; -----------------------------------------------
__ASTTranslator_run$0:
  ; init frame
  ; ----------
  ast EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ ast ]
  call  __ASTTranslator__executeNode$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore ast
; -----------------------------------------------
; function __ASTTranslatorMIR0_constructor$0
; -----------------------------------------------
__ASTTranslatorMIR0_constructor$0:
  ; init frame
  ; ----------
  tmp4299 EQU rbp - 24 ; 16 bytes
  tmp4298 EQU rbp - 40 ; 16 bytes
  app EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp4298 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4299 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ app ]
  call  __ASTTranslator_constructor$0
  lea  rcx, [ tmp4298 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4298 ]
  lea  rdx, [vtable_MIRCode]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp4298 ]
  lea  rdi , [ tmp4299 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRCode_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4298 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4298 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4299 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore app
  restore tmp4298
  restore tmp4299
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadArgsVector$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadArgsVector$0:
  ; init frame
  ; ----------
  tmp4301 EQU rbp - 24 ; 16 bytes
  tmp4300 EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4300 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4301 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4301 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4301 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4301 ]
  lea  rdi, [ tmp4300 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 96
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4300 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4301 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp4300
  restore tmp4301
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadArgsCount$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadArgsCount$0:
  ; init frame
  ; ----------
  tmp4303 EQU rbp - 24 ; 16 bytes
  tmp4302 EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4302 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4303 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4303 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4303 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4303 ]
  lea  rdi, [ tmp4302 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 97
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4302 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4303 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp4302
  restore tmp4303
; -----------------------------------------------
; function __ASTTranslatorMIR0__neg$0
; -----------------------------------------------
__ASTTranslatorMIR0__neg$0:
  ; init frame
  ; ----------
  tmp4305 EQU rbp - 24 ; 16 bytes
  tmp4304 EQU rbp - 40 ; 16 bytes
  value EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ value ]
  mov [tmp4304 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4305 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4305 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4305 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4305 ]
  lea  rdi, [ tmp4304 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 98
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4304 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4305 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore tmp4304
  restore tmp4305
; -----------------------------------------------
; function __ASTTranslatorMIR0__add$0
; -----------------------------------------------
__ASTTranslatorMIR0__add$0:
  ; init frame
  ; ----------
  tmp4307 EQU rbp - 24 ; 16 bytes
  tmp4306 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4306 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4307 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4307 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4307 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4307 ]
  lea  rdi, [ tmp4306 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 99
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4306 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4307 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4306
  restore tmp4307
; -----------------------------------------------
; function __ASTTranslatorMIR0__stringJoin$0
; -----------------------------------------------
__ASTTranslatorMIR0__stringJoin$0:
  ; init frame
  ; ----------
  tmp4309 EQU rbp - 24 ; 16 bytes
  tmp4308 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4308 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4309 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4309 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4309 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4309 ]
  lea  rdi, [ tmp4308 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 100
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4308 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4309 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4308
  restore tmp4309
; -----------------------------------------------
; function __ASTTranslatorMIR0__sub$0
; -----------------------------------------------
__ASTTranslatorMIR0__sub$0:
  ; init frame
  ; ----------
  tmp4311 EQU rbp - 24 ; 16 bytes
  tmp4310 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4310 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4311 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4311 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4311 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4311 ]
  lea  rdi, [ tmp4310 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 101
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4310 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4311 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4310
  restore tmp4311
; -----------------------------------------------
; function __ASTTranslatorMIR0__mul$0
; -----------------------------------------------
__ASTTranslatorMIR0__mul$0:
  ; init frame
  ; ----------
  tmp4313 EQU rbp - 24 ; 16 bytes
  tmp4312 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4312 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4313 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4313 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4313 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4313 ]
  lea  rdi, [ tmp4312 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 102
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4312 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4313 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4312
  restore tmp4313
; -----------------------------------------------
; function __ASTTranslatorMIR0__div$0
; -----------------------------------------------
__ASTTranslatorMIR0__div$0:
  ; init frame
  ; ----------
  tmp4315 EQU rbp - 24 ; 16 bytes
  tmp4314 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4314 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4315 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4315 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4315 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4315 ]
  lea  rdi, [ tmp4314 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 103
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4314 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4315 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4314
  restore tmp4315
; -----------------------------------------------
; function __ASTTranslatorMIR0__idiv$0
; -----------------------------------------------
__ASTTranslatorMIR0__idiv$0:
  ; init frame
  ; ----------
  tmp4317 EQU rbp - 24 ; 16 bytes
  tmp4316 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4316 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4317 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4317 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4317 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4317 ]
  lea  rdi, [ tmp4316 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 104
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4316 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4317 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4316
  restore tmp4317
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadArray$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadArray$0:
  ; init frame
  ; ----------
  tmp4319 EQU rbp - 24 ; 16 bytes
  tmp4318 EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  mov [tmp4318 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4319 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4319 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4319 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4319 ]
  lea  rdi, [ tmp4318 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 105
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4318 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4319 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4318
  restore tmp4319
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadMap$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadMap$0:
  ; init frame
  ; ----------
  tmp4321 EQU rbp - 24 ; 16 bytes
  tmp4320 EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  mov [tmp4320 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4321 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4321 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4321 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4321 ]
  lea  rdi, [ tmp4320 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 106
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4320 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4321 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4320
  restore tmp4321
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadNull$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadNull$0:
  ; init frame
  ; ----------
  tmp4323 EQU rbp - 24 ; 16 bytes
  tmp4322 EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  mov [tmp4322 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4323 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4323 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4323 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4323 ]
  lea  rdi, [ tmp4322 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 107
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4322 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4323 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4322
  restore tmp4323
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadImm$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadImm$0:
  ; init frame
  ; ----------
  tmp4325 EQU rbp - 24 ; 16 bytes
  tmp4324 EQU rbp - 40 ; 16 bytes
  value EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [tmp4324 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4325 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4325 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4325 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4325 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp4324 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 108
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4324 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4325 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore tmp4324
  restore tmp4325
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadImmAsVariant$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadImmAsVariant$0:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ value ]
  call  __ASTTranslatorMIR0__loadImm$0

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore value
; -----------------------------------------------
; function __ASTTranslatorMIR0__convert$0
; -----------------------------------------------
__ASTTranslatorMIR0__convert$0:
  ; init frame
  ; ----------
  dstType EQU rbp - 24 ; 16 bytes
  srcType EQU rbp - 40 ; 16 bytes
  src EQU rbp - 56 ; 16 bytes
  dst EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  ; skipped unused param [ this ]
  ; skipped unused param [ dst ]
  ; skipped unused param [ src ]
  ; skipped unused param [ srcType ]
  ; skipped unused param [ dstType ]

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore dst
  restore src
  restore srcType
  restore dstType
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareEQ$0
; -----------------------------------------------
__ASTTranslatorMIR0__compareEQ$0:
  ; init frame
  ; ----------
  tmp4327 EQU rbp - 24 ; 16 bytes
  tmp4326 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4326 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4327 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4327 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4327 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4327 ]
  lea  rdi, [ tmp4326 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 109
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4326 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4327 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4326
  restore tmp4327
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareNEQ$0
; -----------------------------------------------
__ASTTranslatorMIR0__compareNEQ$0:
  ; init frame
  ; ----------
  tmp4329 EQU rbp - 24 ; 16 bytes
  tmp4328 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4328 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4329 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4329 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4329 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4329 ]
  lea  rdi, [ tmp4328 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 110
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4328 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4329 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4328
  restore tmp4329
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareLT$0
; -----------------------------------------------
__ASTTranslatorMIR0__compareLT$0:
  ; init frame
  ; ----------
  tmp4331 EQU rbp - 24 ; 16 bytes
  tmp4330 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4330 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4331 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4331 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4331 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4331 ]
  lea  rdi, [ tmp4330 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 111
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4330 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4331 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4330
  restore tmp4331
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareLE$0
; -----------------------------------------------
__ASTTranslatorMIR0__compareLE$0:
  ; init frame
  ; ----------
  tmp4333 EQU rbp - 24 ; 16 bytes
  tmp4332 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4332 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4333 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4333 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4333 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4333 ]
  lea  rdi, [ tmp4332 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 112
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4332 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4333 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4332
  restore tmp4333
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareGT$0
; -----------------------------------------------
__ASTTranslatorMIR0__compareGT$0:
  ; init frame
  ; ----------
  tmp4335 EQU rbp - 24 ; 16 bytes
  tmp4334 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4334 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4335 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4335 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4335 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4335 ]
  lea  rdi, [ tmp4334 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 113
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4334 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4335 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4334
  restore tmp4335
; -----------------------------------------------
; function __ASTTranslatorMIR0__compareGE$0
; -----------------------------------------------
__ASTTranslatorMIR0__compareGE$0:
  ; init frame
  ; ----------
  tmp4337 EQU rbp - 24 ; 16 bytes
  tmp4336 EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]
  mov [tmp4336 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4337 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4337 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4337 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4337 ]
  lea  rdi, [ tmp4336 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 114
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4336 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4337 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
  restore tmp4336
  restore tmp4337
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadVariable$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadVariable$0:
  ; init frame
  ; ----------
  tmp4360 EQU rbp - 24 ; 16 bytes
  tmp4359 EQU rbp - 40 ; 16 bytes
  tmp4358 EQU rbp - 56 ; 16 bytes
  tmp4357 EQU rbp - 72 ; 16 bytes
  tmp4356 EQU rbp - 88 ; 16 bytes
  tmp4353 EQU rbp - 92 ; 4 bytes
  tmp4350 EQU rbp - 96 ; 4 bytes
  tmp4347 EQU rbp - 100 ; 4 bytes
  tmp4344 EQU rbp - 104 ; 4 bytes
  tmp4341 EQU rbp - 108 ; 4 bytes
  tmp4340 EQU rbp - 112 ; 4 bytes
  tmp4339 EQU rbp - 128 ; 16 bytes
  tmp4338 EQU rbp - 144 ; 16 bytes
  id EQU rbp - 160 ; 16 bytes
  kind EQU rbp - 164 ; 4 bytes
  symbolInfo EQU rbp - 180 ; 16 bytes
  name EQU rbp - 196 ; 16 bytes
  this EQU rbp - 212 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [id + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4338 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4339 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4356 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4357 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4358 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4359 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4360 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4339 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4339 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4339 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp4338 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp4338 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4338 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4338 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp4338 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4338 + Variant_t.value]
  mov dword [ kind ], eax
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4340 ], 1
  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4340 ]
  jnz l4342
  lea  rcx, [ tmp4339 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4339 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4339 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4338 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 115
  call __MOLD_VCall
  pop rdi
  jmp l4343
l4342:
  mov dword [ tmp4340 ], 2
  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4340 ]
  jnz l4345
  lea  rcx, [ tmp4339 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4339 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4339 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4338 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 116
  call __MOLD_VCall
  pop rdi
  jmp l4346
l4345:
  mov dword [ tmp4340 ], 3
  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4340 ]
  jnz l4348
  lea  rcx, [ tmp4339 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4339 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4339 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4338 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 117
  call __MOLD_VCall
  pop rdi
  jmp l4349
l4348:
  mov dword [ tmp4340 ], 4
  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4340 ]
  jnz l4351
  lea  rcx, [ tmp4339 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4339 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4339 ]
  lea  rdi, [ tmp4338 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 118
  call __MOLD_VCall
  pop rdi
  jmp l4352
l4351:
  mov dword [ tmp4340 ], 5
  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4340 ]
  jnz l4354
  lea  rcx, [ tmp4339 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4339 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4356 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ tmp4356 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4339 ]
  lea  rdx , [ tmp4356 ]
  lea  rdi, [ tmp4338 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 108
  call __MOLD_VCall
  pop rdi
  jmp l4355
l4354:
  mov [ tmp4356 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ kind ]
  mov [ tmp4356 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp4356 ]
  lea  rdi , [ tmp4338 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4360 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4338 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp4360 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4359 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal557 ]
  lea  rdx , [ tmp4360 ]
  lea  r8 , [ tmp4359 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4358 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp4359 ]
  lea  r8 , [ tmp4358 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4357 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal556 ]
  lea  rdx , [ tmp4358 ]
  lea  r8 , [ tmp4357 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4357 ]
  call  __ASTTranslator__error$0
l4355:
l4352:
l4349:
l4346:
l4343:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4338 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4339 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4356 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore name
  restore symbolInfo
  restore kind
  restore id
  restore tmp4338
  restore tmp4339
  restore tmp4340
  restore tmp4341
  restore tmp4344
  restore tmp4347
  restore tmp4350
  restore tmp4353
  restore tmp4356
  restore tmp4357
  restore tmp4358
  restore tmp4359
  restore tmp4360
; -----------------------------------------------
; function __ASTTranslatorMIR0__assign$0
; -----------------------------------------------
__ASTTranslatorMIR0__assign$0:
  ; init frame
  ; ----------
  tmp4379 EQU rbp - 24 ; 16 bytes
  tmp4378 EQU rbp - 40 ; 16 bytes
  tmp4377 EQU rbp - 56 ; 16 bytes
  tmp4376 EQU rbp - 72 ; 16 bytes
  tmp4373 EQU rbp - 76 ; 4 bytes
  tmp4370 EQU rbp - 80 ; 4 bytes
  tmp4367 EQU rbp - 84 ; 4 bytes
  tmp4364 EQU rbp - 88 ; 4 bytes
  tmp4363 EQU rbp - 92 ; 4 bytes
  tmp4362 EQU rbp - 108 ; 16 bytes
  tmp4361 EQU rbp - 124 ; 16 bytes
  id EQU rbp - 140 ; 16 bytes
  kind EQU rbp - 144 ; 4 bytes
  symbolInfo EQU rbp - 160 ; 16 bytes
  unusedValue EQU rbp - 176 ; 16 bytes
  name EQU rbp - 192 ; 16 bytes
  this EQU rbp - 208 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  ; skipped unused param [ unusedValue ]
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [id + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4361 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4362 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4376 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4377 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4378 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4379 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4362 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4362 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4362 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp4361 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp4361 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4361 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4361 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp4361 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4361 + Variant_t.value]
  mov dword [ kind ], eax
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4363 ], 1
  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4363 ]
  jnz l4365
  lea  rcx, [ tmp4362 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4362 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4362 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4361 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 119
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4361 ]
  call  __MOLD_VariantStoreAtKey
  jmp l4366
l4365:
  mov dword [ tmp4363 ], 2
  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4363 ]
  jnz l4368
  lea  rcx, [ tmp4362 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4362 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4362 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4361 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 120
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4361 ]
  call  __MOLD_VariantStoreAtKey
  jmp l4369
l4368:
  mov dword [ tmp4363 ], 3
  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4363 ]
  jnz l4371
  lea  rcx, [ tmp4362 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4362 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4362 ]
  lea  rdx , [ id ]
  lea  rdi, [ tmp4361 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 121
  call __MOLD_VCall
  pop rdi
  jmp l4372
l4371:
  mov dword [ tmp4363 ], 4
  mov eax, dword [ kind ]
  cmp eax, dword [ tmp4363 ]
  jnz l4374
  lea  rcx, [ tmp4362 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4362 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4362 ]
  lea  rdi, [ tmp4361 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 122
  call __MOLD_VCall
  pop rdi
  jmp l4375
l4374:
  mov [ tmp4362 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ kind ]
  mov [ tmp4362 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp4362 ]
  lea  rdi , [ tmp4361 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4379 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4361 ]
  lea  rdx , [ __literal176 ]
  lea  r8 , [ tmp4379 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4378 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal557 ]
  lea  rdx , [ tmp4379 ]
  lea  r8 , [ tmp4378 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4377 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp4378 ]
  lea  r8 , [ tmp4377 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4376 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal556 ]
  lea  rdx , [ tmp4377 ]
  lea  r8 , [ tmp4376 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4376 ]
  call  __ASTTranslator__error$0
l4375:
l4372:
l4369:
l4366:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4361 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4362 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore name
  restore unusedValue
  restore symbolInfo
  restore kind
  restore id
  restore tmp4361
  restore tmp4362
  restore tmp4363
  restore tmp4364
  restore tmp4367
  restore tmp4370
  restore tmp4373
  restore tmp4376
  restore tmp4377
  restore tmp4378
  restore tmp4379
; -----------------------------------------------
; function __ASTTranslatorMIR0__syscall$0
; -----------------------------------------------
__ASTTranslatorMIR0__syscall$0:
  ; init frame
  ; ----------
  tmp4383 EQU rbp - 12 ; 4 bytes
  tmp4382 EQU rbp - 16 ; 4 bytes
  tmp4381 EQU rbp - 32 ; 16 bytes
  tmp4380 EQU rbp - 48 ; 16 bytes
  paramsCnt EQU rbp - 64 ; 16 bytes
  params EQU rbp - 80 ; 16 bytes
  id EQU rbp - 96 ; 16 bytes
  rv EQU rbp - 112 ; 16 bytes
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ id ], xmm0
  ; skipped unused param [ params ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp4380 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4381 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4381 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4381 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4381 ]
  lea  rdx , [ id ]
  lea  r8 , [ paramsCnt ]
  lea  rdi, [ tmp4380 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 123
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp4380 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4383 ], 0
  mov [ tmp4381 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4383 ]
  mov [ tmp4381 + Variant_t.value], rax
  lea rcx, [ tmp4380 ]
  lea rdx, [ tmp4381 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4384
  lea  rcx, [ tmp4380 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4380 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4380 ]
  lea  rdi, [ tmp4381 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 124
  call __MOLD_VCall
  pop rdi
l4384:
l4385:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4380 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4381 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore rv
  restore id
  restore params
  restore paramsCnt
  restore tmp4380
  restore tmp4381
  restore tmp4382
  restore tmp4383
; -----------------------------------------------
; function __ASTTranslatorMIR0__call$0
; -----------------------------------------------
__ASTTranslatorMIR0__call$0:
  ; init frame
  ; ----------
  tmp4389 EQU rbp - 12 ; 4 bytes
  tmp4388 EQU rbp - 16 ; 4 bytes
  tmp4387 EQU rbp - 32 ; 16 bytes
  tmp4386 EQU rbp - 48 ; 16 bytes
  paramsCnt EQU rbp - 64 ; 16 bytes
  params EQU rbp - 80 ; 16 bytes
  proto EQU rbp - 96 ; 16 bytes
  rv EQU rbp - 112 ; 16 bytes
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  ; skipped unused param [ params ]
  ; skipped unused param [ paramsCnt ]
  mov [tmp4386 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4387 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4387 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4387 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4387 ]
  lea  rdx , [ proto ]
  lea  rdi, [ tmp4386 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 125
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp4386 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4389 ], 0
  mov [ tmp4387 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4389 ]
  mov [ tmp4387 + Variant_t.value], rax
  lea rcx, [ tmp4386 ]
  lea rdx, [ tmp4387 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4390
  lea  rcx, [ tmp4386 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4386 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4386 ]
  lea  rdi, [ tmp4387 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 124
  call __MOLD_VCall
  pop rdi
l4390:
l4391:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4386 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4387 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore rv
  restore proto
  restore params
  restore paramsCnt
  restore tmp4386
  restore tmp4387
  restore tmp4388
  restore tmp4389
; -----------------------------------------------
; function __ASTTranslatorMIR0__callPrint$0
; -----------------------------------------------
__ASTTranslatorMIR0__callPrint$0:
  ; init frame
  ; ----------
  tmp4393 EQU rbp - 24 ; 16 bytes
  tmp4392 EQU rbp - 40 ; 16 bytes
  paramsCnt EQU rbp - 56 ; 16 bytes
  params EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ params ]
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp4392 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4393 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4393 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4393 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4393 ]
  lea  rdx , [ paramsCnt ]
  lea  rdi, [ tmp4392 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 126
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4392 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4393 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore params
  restore paramsCnt
  restore tmp4392
  restore tmp4393
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadFromIndex$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadFromIndex$0:
  ; init frame
  ; ----------
  tmp4395 EQU rbp - 24 ; 16 bytes
  tmp4394 EQU rbp - 40 ; 16 bytes
  unusedIdx EQU rbp - 56 ; 16 bytes
  unusedBox EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  mov [tmp4394 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4395 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4395 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4395 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4395 ]
  lea  rdi, [ tmp4394 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 127
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4394 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4395 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore unusedBox
  restore unusedIdx
  restore tmp4394
  restore tmp4395
; -----------------------------------------------
; function __ASTTranslatorMIR0__loadFromKey$0
; -----------------------------------------------
__ASTTranslatorMIR0__loadFromKey$0:
  ; init frame
  ; ----------
  tmp4397 EQU rbp - 24 ; 16 bytes
  tmp4396 EQU rbp - 40 ; 16 bytes
  unusedKey EQU rbp - 56 ; 16 bytes
  unusedBox EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  mov [tmp4396 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4397 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4397 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4397 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4397 ]
  lea  rdi, [ tmp4396 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 128
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4396 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4397 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore unusedBox
  restore unusedKey
  restore tmp4396
  restore tmp4397
; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtIndex$0
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtIndex$0:
  ; init frame
  ; ----------
  tmp4399 EQU rbp - 24 ; 16 bytes
  tmp4398 EQU rbp - 40 ; 16 bytes
  unusedValue EQU rbp - 56 ; 16 bytes
  unusedIdx EQU rbp - 72 ; 16 bytes
  unusedBox EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  mov [tmp4398 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4399 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4399 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4399 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4399 ]
  lea  rdi, [ tmp4398 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 129
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4398 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4399 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedIdx
  restore unusedValue
  restore tmp4398
  restore tmp4399
; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtKey$0
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtKey$0:
  ; init frame
  ; ----------
  tmp4401 EQU rbp - 24 ; 16 bytes
  tmp4400 EQU rbp - 40 ; 16 bytes
  unusedValue EQU rbp - 56 ; 16 bytes
  unusedKey EQU rbp - 72 ; 16 bytes
  unusedBox EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  mov [tmp4400 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4401 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4401 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4401 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4401 ]
  lea  rdi, [ tmp4400 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 130
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4400 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4401 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedKey
  restore unusedValue
  restore tmp4400
  restore tmp4401
; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtIndexAndDrop$0
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtIndexAndDrop$0:
  ; init frame
  ; ----------
  tmp4402 EQU rbp - 24 ; 16 bytes
  __cse38 EQU rbp - 40 ; 16 bytes
  unusedValue EQU rbp - 56 ; 16 bytes
  unusedIdx EQU rbp - 72 ; 16 bytes
  unusedBox EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  mov [__cse38 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4402 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse38 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ __cse38 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse38 ]
  lea  rdi, [ tmp4402 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 129
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ __cse38 ]
  lea  rdi, [ tmp4402 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 124
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ __cse38 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4402 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedIdx
  restore unusedValue
  restore __cse38
  restore tmp4402
; -----------------------------------------------
; function __ASTTranslatorMIR0__storeAtKeyAndDrop$0
; -----------------------------------------------
__ASTTranslatorMIR0__storeAtKeyAndDrop$0:
  ; init frame
  ; ----------
  tmp4403 EQU rbp - 24 ; 16 bytes
  __cse39 EQU rbp - 40 ; 16 bytes
  unusedValue EQU rbp - 56 ; 16 bytes
  unusedKey EQU rbp - 72 ; 16 bytes
  unusedBox EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  mov [__cse39 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4403 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse39 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ __cse39 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse39 ]
  lea  rdi, [ tmp4403 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 130
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ __cse39 ]
  lea  rdi, [ tmp4403 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 124
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ __cse39 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4403 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedKey
  restore unusedValue
  restore __cse39
  restore tmp4403
; -----------------------------------------------
; function __ASTTranslatorMIR0__createObject$0
; -----------------------------------------------
__ASTTranslatorMIR0__createObject$0:
  ; init frame
  ; ----------
  tmp4405 EQU rbp - 24 ; 16 bytes
  tmp4404 EQU rbp - 40 ; 16 bytes
  classProto EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  mov [tmp4404 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4405 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4405 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4405 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4405 ]
  lea  rdx , [ classProto ]
  lea  rdi, [ tmp4404 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 131
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4404 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4405 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore classProto
  restore tmp4404
  restore tmp4405
; -----------------------------------------------
; function __ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$0
; -----------------------------------------------
__ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$0:
  ; init frame
  ; ----------
  tmp4408 EQU rbp - 24 ; 16 bytes
  tmp4407 EQU rbp - 28 ; 4 bytes
  tmp4406 EQU rbp - 44 ; 16 bytes
  __cse41 EQU rbp - 60 ; 16 bytes
  __cse40 EQU rbp - 76 ; 16 bytes
  y EQU rbp - 92 ; 16 bytes
  x EQU rbp - 108 ; 16 bytes
  endLabelId EQU rbp - 124 ; 16 bytes
  rightAst EQU rbp - 140 ; 16 bytes
  leftAst EQU rbp - 156 ; 16 bytes
  rv EQU rbp - 172 ; 16 bytes
  this EQU rbp - 188 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse40 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse41 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4406 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4408 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse40 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ __cse40 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse40 ]
  lea  rdi, [ tmp4406 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4406 ]
  call __MOLD_VariantMove
  mov dword [ tmp4407 ], 0
  mov eax, dword [ tmp4407 ]
  mov [ tmp4408 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4408 + Variant_t.value], rax
  push rdi
  lea  rcx , [ __cse40 ]
  lea  rdx , [ tmp4408 ]
  lea  rdi, [ tmp4406 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 108
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ leftAst ]
  lea  rdi , [ tmp4406 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4406 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4408 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4408 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4408 ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4406 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 133
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rightAst ]
  lea  rdi , [ tmp4406 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea rcx, [ y ]
  lea rdx, [ tmp4406 ]
  call __MOLD_VariantMove
  lea  rcx, [ __cse41 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ __cse41 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse41 ]
  lea  rdi, [ tmp4406 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 134
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ __cse41 ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4406 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 135
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse40 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse41 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4406 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4408 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore endLabelId
  restore x
  restore y
  restore __cse40
  restore __cse41
  restore tmp4406
  restore tmp4407
  restore tmp4408
; -----------------------------------------------
; function __ASTTranslatorMIR0__evaluateNodeLazyBoolOr$0
; -----------------------------------------------
__ASTTranslatorMIR0__evaluateNodeLazyBoolOr$0:
  ; init frame
  ; ----------
  tmp4411 EQU rbp - 24 ; 16 bytes
  tmp4410 EQU rbp - 28 ; 4 bytes
  tmp4409 EQU rbp - 44 ; 16 bytes
  __cse43 EQU rbp - 60 ; 16 bytes
  __cse42 EQU rbp - 76 ; 16 bytes
  y EQU rbp - 92 ; 16 bytes
  x EQU rbp - 108 ; 16 bytes
  endLabelId EQU rbp - 124 ; 16 bytes
  rightAst EQU rbp - 140 ; 16 bytes
  leftAst EQU rbp - 156 ; 16 bytes
  rv EQU rbp - 172 ; 16 bytes
  this EQU rbp - 188 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse42 + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse43 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4409 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4411 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse42 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ __cse42 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse42 ]
  lea  rdi, [ tmp4409 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4409 ]
  call __MOLD_VariantMove
  mov dword [ tmp4410 ], 1
  mov eax, dword [ tmp4410 ]
  mov [ tmp4411 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4411 + Variant_t.value], rax
  push rdi
  lea  rcx , [ __cse42 ]
  lea  rdx , [ tmp4411 ]
  lea  rdi, [ tmp4409 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 108
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ leftAst ]
  lea  rdi , [ tmp4409 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4409 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4411 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4411 ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4409 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 136
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rightAst ]
  lea  rdi , [ tmp4409 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea rcx, [ y ]
  lea rdx, [ tmp4409 ]
  call __MOLD_VariantMove
  lea  rcx, [ __cse43 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ __cse43 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse43 ]
  lea  rdi, [ tmp4409 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 134
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ __cse43 ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4409 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 135
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse42 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse43 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4409 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4411 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore endLabelId
  restore x
  restore y
  restore __cse42
  restore __cse43
  restore tmp4409
  restore tmp4410
  restore tmp4411
; -----------------------------------------------
; function __ASTTranslatorMIR0__invokeMethod$0
; -----------------------------------------------
__ASTTranslatorMIR0__invokeMethod$0:
  ; init frame
  ; ----------
  tmp4413 EQU rbp - 24 ; 16 bytes
  tmp4412 EQU rbp - 40 ; 16 bytes
  paramsCnt EQU rbp - 56 ; 16 bytes
  params EQU rbp - 72 ; 16 bytes
  methodName EQU rbp - 88 ; 16 bytes
  rv EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ rv ]
  movdqu xmm0 , [ r8 ]
  movdqu [ methodName ], xmm0
  ; skipped unused param [ params ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp4412 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4413 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4413 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4413 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4413 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ paramsCnt ]
  lea  rdi, [ tmp4412 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 137
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4412 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4413 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore rv
  restore methodName
  restore params
  restore paramsCnt
  restore tmp4412
  restore tmp4413
; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeFor$0
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeFor$0:
  ; init frame
  ; ----------
  tmp4416 EQU rbp - 12 ; 4 bytes
  tmp4415 EQU rbp - 28 ; 16 bytes
  tmp4414 EQU rbp - 44 ; 16 bytes
  iterId EQU rbp - 60 ; 16 bytes
  iterSymbolInfo EQU rbp - 76 ; 16 bytes
  endLabelId EQU rbp - 92 ; 16 bytes
  loopLabelId EQU rbp - 108 ; 16 bytes
  code EQU rbp - 124 ; 16 bytes
  symbolTable EQU rbp - 140 ; 16 bytes
  bodyAst EQU rbp - 156 ; 16 bytes
  valueStep EQU rbp - 172 ; 16 bytes
  valueEnd EQU rbp - 188 ; 16 bytes
  valueStart EQU rbp - 204 ; 16 bytes
  iterName EQU rbp - 220 ; 16 bytes
  this EQU rbp - 236 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iterName ], xmm0
  ; skipped unused param [ valueStart ]
  ; skipped unused param [ valueEnd ]
  ; skipped unused param [ valueStep ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ bodyAst ], xmm0
  mov [symbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [loopLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [iterSymbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [iterId + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4414 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4415 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ loopLabelId ]
  lea rdx, [ tmp4414 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4414 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ iterName ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ iterSymbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ iterSymbolInfo ]
  lea rdx, [ tmp4414 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4415 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ iterSymbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ tmp4415 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ tmp4415 ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 119
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ iterId ]
  call __MOLD_VariantDestroy
  lea rcx, [ iterId ]
  lea rdx, [ tmp4414 ]
  call __MOLD_VariantMove
  lea  rcx , [ iterSymbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ iterId ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 135
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 138
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ iterId ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 115
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 112
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 136
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  call  __ASTTranslator__executeNode$0
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 139
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ iterId ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 115
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 99
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ iterId ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 119
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 140
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 135
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp4416 ], 2
  mov [ tmp4415 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4416 ]
  mov [ tmp4415 + Variant_t.value], rax
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ tmp4415 ]
  lea  rdi, [ tmp4414 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 141
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterSymbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ iterId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4414 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4415 ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore iterName
  restore valueStart
  restore valueEnd
  restore valueStep
  restore bodyAst
  restore symbolTable
  restore code
  restore loopLabelId
  restore endLabelId
  restore iterSymbolInfo
  restore iterId
  restore tmp4414
  restore tmp4415
  restore tmp4416
; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeForEach$0
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeForEach$0:
  ; init frame
  ; ----------
  valueSymbolInfo EQU rbp - 24 ; 16 bytes
  keySymbolInfo EQU rbp - 40 ; 16 bytes
  tmp4426 EQU rbp - 44 ; 4 bytes
  tmp4423 EQU rbp - 48 ; 4 bytes
  tmp4420 EQU rbp - 64 ; 16 bytes
  tmp4419 EQU rbp - 68 ; 4 bytes
  tmp4418 EQU rbp - 72 ; 4 bytes
  tmp4417 EQU rbp - 88 ; 16 bytes
  isIntegerKey EQU rbp - 92 ; 4 bytes
  valueId EQU rbp - 108 ; 16 bytes
  keyId EQU rbp - 124 ; 16 bytes
  endLabelId EQU rbp - 140 ; 16 bytes
  loopLabelId EQU rbp - 156 ; 16 bytes
  code EQU rbp - 172 ; 16 bytes
  symbolTable EQU rbp - 188 ; 16 bytes
  bodyAst EQU rbp - 204 ; 16 bytes
  box EQU rbp - 220 ; 16 bytes
  iteratorValue EQU rbp - 236 ; 16 bytes
  iteratorKey EQU rbp - 252 ; 16 bytes
  this EQU rbp - 268 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iteratorKey ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ iteratorValue ], xmm0
  ; skipped unused param [ box ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ bodyAst ], xmm0
  mov [symbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [loopLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [keyId + Variant_t.type], VARIANT_UNDEFINED
  mov [valueId + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4417 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4420 + Variant_t.type], VARIANT_UNDEFINED
  mov [keySymbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [valueSymbolInfo + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ symbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4417 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ loopLabelId ]
  lea rdx, [ tmp4417 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4417 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4417 ]
  call __MOLD_VariantMove
  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  mov dword [ isIntegerKey ], 0
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4417 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 140
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ iteratorKey ]
  lea  rdi , [ tmp4417 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4419 ], 0
  mov [ tmp4420 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4419 ]
  mov [ tmp4420 + Variant_t.value], rax
  lea rcx, [ tmp4417 ]
  lea rdx, [ tmp4420 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4421
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ iteratorKey ]
  lea  rdi, [ tmp4420 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ keySymbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ keySymbolInfo ]
  lea rdx, [ tmp4420 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4420 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 142
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy
  lea rcx, [ keyId ]
  lea rdx, [ tmp4420 ]
  call __MOLD_VariantMove
  lea  rcx , [ keySymbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ keyId ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4420 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ keySymbolInfo ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp4420 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4419 ], 1
  mov [ tmp4417 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4419 ]
  mov [ tmp4417 + Variant_t.value], rax
  lea rcx, [ tmp4420 ]
  lea rdx, [ tmp4417 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4424
  mov dword [ isIntegerKey ], 1
l4424:
l4425:
l4421:
l4422:
  push rdi
  lea  rcx , [ iteratorValue ]
  lea  rdi , [ tmp4417 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4419 ], 0
  mov [ tmp4420 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4419 ]
  mov [ tmp4420 + Variant_t.value], rax
  lea rcx, [ tmp4417 ]
  lea rdx, [ tmp4420 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4427
  push rdi
  lea  rcx , [ symbolTable ]
  lea  rdx , [ iteratorValue ]
  lea  rdi, [ tmp4420 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ valueSymbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueSymbolInfo ]
  lea rdx, [ tmp4420 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4420 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 142
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueId ]
  lea rdx, [ tmp4420 ]
  call __MOLD_VariantMove
  lea  rcx , [ valueSymbolInfo ]
  lea  rdx , [ __literal2 ]
  lea  r8 , [ valueId ]
  call  __MOLD_VariantStoreAtKey
l4427:
l4428:
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4420 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 135
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  call  __ASTTranslator__executeNode$0
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4420 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 143
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4420 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 135
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp4423 ], 1
  xor  eax, eax
  or   dword [ isIntegerKey ], eax
  setz cl
  or   dword [ tmp4423 ], eax
  setz al
  xor  al, cl
  jnz l4429
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4417 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 144
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ keyId ]
  lea  r8 , [ valueId ]
  lea  r9 , [ tmp4417 ]
  lea  rdi, [ tmp4420 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 145
  call __MOLD_VCall
  pop rdi
  jmp l4430
l4429:
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4417 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 144
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ keyId ]
  lea  r8 , [ valueId ]
  lea  r9 , [ tmp4417 ]
  lea  rdi, [ tmp4420 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 146
  call __MOLD_VCall
  pop rdi
l4430:

  ; clean frame
  ; -----------
  lea  rcx, [ symbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4417 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4420 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ keySymbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueSymbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 304
  pop  rbp
  ret

  restore this
  restore iteratorKey
  restore iteratorValue
  restore box
  restore bodyAst
  restore symbolTable
  restore code
  restore loopLabelId
  restore endLabelId
  restore keyId
  restore valueId
  restore isIntegerKey
  restore tmp4417
  restore tmp4418
  restore tmp4419
  restore tmp4420
  restore tmp4423
  restore tmp4426
  restore keySymbolInfo
  restore valueSymbolInfo
; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeWhile$0
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeWhile$0:
  ; init frame
  ; ----------
  tmp4431 EQU rbp - 24 ; 16 bytes
  cond EQU rbp - 40 ; 16 bytes
  endLabelId EQU rbp - 56 ; 16 bytes
  loopLabelId EQU rbp - 72 ; 16 bytes
  code EQU rbp - 88 ; 16 bytes
  bodyAst EQU rbp - 104 ; 16 bytes
  condAst EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ condAst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ bodyAst ], xmm0
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [loopLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [cond + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4431 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4431 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ loopLabelId ]
  lea rdx, [ tmp4431 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4431 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4431 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4431 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 135
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ condAst ]
  lea  rdi , [ tmp4431 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea rcx, [ cond ]
  lea rdx, [ tmp4431 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4431 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 133
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  call  __ASTTranslator__executeNode$0
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ loopLabelId ]
  lea  rdi, [ tmp4431 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 140
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4431 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 135
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ loopLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4431 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore condAst
  restore bodyAst
  restore code
  restore loopLabelId
  restore endLabelId
  restore cond
  restore tmp4431
; -----------------------------------------------
; function __ASTTranslatorMIR0__executeNodeIf$0
; -----------------------------------------------
__ASTTranslatorMIR0__executeNodeIf$0:
  ; init frame
  ; ----------
  tmp4435 EQU rbp - 24 ; 16 bytes
  tmp4434 EQU rbp - 28 ; 4 bytes
  tmp4433 EQU rbp - 32 ; 4 bytes
  tmp4432 EQU rbp - 48 ; 16 bytes
  endLabelId EQU rbp - 64 ; 16 bytes
  falseLabelId EQU rbp - 80 ; 16 bytes
  code EQU rbp - 96 ; 16 bytes
  codeIfFalse EQU rbp - 112 ; 16 bytes
  codeIfTrue EQU rbp - 128 ; 16 bytes
  cond EQU rbp - 144 ; 16 bytes
  this EQU rbp - 160 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ cond ]
  movdqu xmm0 , [ r8 ]
  movdqu [ codeIfTrue ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ codeIfFalse ], xmm0
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [falseLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabelId + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4432 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4435 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ falseLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ falseLabelId ]
  lea rdx, [ tmp4432 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabelId ]
  lea rdx, [ tmp4432 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ falseLabelId ]
  lea  rdi, [ tmp4432 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 133
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ codeIfTrue ]
  call  __ASTTranslator__executeNode$0
  push rdi
  lea  rcx , [ codeIfFalse ]
  lea  rdi , [ tmp4432 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4434 ], 0
  mov [ tmp4435 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4434 ]
  mov [ tmp4435 + Variant_t.value], rax
  lea rcx, [ tmp4432 ]
  lea rdx, [ tmp4435 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4436
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4435 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 140
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ falseLabelId ]
  lea  rdi, [ tmp4435 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 135
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ codeIfFalse ]
  call  __ASTTranslator__executeNode$0
  jmp l4437
l4436:
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ falseLabelId ]
  lea  rdi, [ tmp4435 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 135
  call __MOLD_VCall
  pop rdi
l4437:
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ endLabelId ]
  lea  rdi, [ tmp4435 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 135
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ falseLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4432 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4435 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore cond
  restore codeIfTrue
  restore codeIfFalse
  restore code
  restore falseLabelId
  restore endLabelId
  restore tmp4432
  restore tmp4433
  restore tmp4434
  restore tmp4435
; -----------------------------------------------
; function __ASTTranslatorMIR0__declareFunction$0
; -----------------------------------------------
__ASTTranslatorMIR0__declareFunction$0:
  ; init frame
  ; ----------
  tmp4439 EQU rbp - 24 ; 16 bytes
  tmp4438 EQU rbp - 40 ; 16 bytes
  funcProto EQU rbp - 56 ; 16 bytes
  funcName EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ funcName ]
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  mov [tmp4438 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4439 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4439 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4439 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4439 ]
  lea  rdi, [ tmp4438 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal558 ]
  lea  r8 , [ tmp4438 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4438 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4439 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
  restore tmp4438
  restore tmp4439
; -----------------------------------------------
; function __ASTTranslatorMIR0__declareClass$0
; -----------------------------------------------
__ASTTranslatorMIR0__declareClass$0:
  ; init frame
  ; ----------
  tmp4441 EQU rbp - 24 ; 16 bytes
  tmp4440 EQU rbp - 40 ; 16 bytes
  classProto EQU rbp - 56 ; 16 bytes
  className EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ className ]
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  mov [tmp4440 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4441 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4441 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4441 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4441 ]
  lea  rdx , [ classProto ]
  lea  rdi, [ tmp4440 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 147
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4440 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4441 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore className
  restore classProto
  restore tmp4440
  restore tmp4441
; -----------------------------------------------
; function __ASTTranslatorMIR0__emitFunctionBody$0
; -----------------------------------------------
__ASTTranslatorMIR0__emitFunctionBody$0:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp4449 EQU rbp - 28 ; 4 bytes
  tmp4446 EQU rbp - 32 ; 4 bytes
  tmp4445 EQU rbp - 48 ; 16 bytes
  tmp4444 EQU rbp - 64 ; 16 bytes
  tmp4443 EQU rbp - 68 ; 4 bytes
  tmp4442 EQU rbp - 84 ; 16 bytes
  labelId EQU rbp - 100 ; 16 bytes
  oldSymbolTable EQU rbp - 116 ; 16 bytes
  code EQU rbp - 132 ; 16 bytes
  rvName EQU rbp - 148 ; 16 bytes
  codeAst EQU rbp - 164 ; 16 bytes
  children EQU rbp - 180 ; 16 bytes
  paramsCnt EQU rbp - 184 ; 4 bytes
  params EQU rbp - 200 ; 16 bytes
  funcProto EQU rbp - 216 ; 16 bytes
  funcName EQU rbp - 232 ; 16 bytes
  this EQU rbp - 248 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ funcName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [codeAst + Variant_t.type], VARIANT_UNDEFINED
  mov [rvName + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [oldSymbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [labelId + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4442 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4444 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4445 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ tmp4442 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4442 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4442 + Variant_t.value]
  mov dword [ paramsCnt ], eax
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4443 ], 0
  lea  rcx, [ codeAst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4443 ]
  lea  r8 , [ codeAst ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ rvName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4442 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4442 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4442 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4442 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 148
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ labelId ]
  call __MOLD_VariantDestroy
  lea rcx, [ labelId ]
  lea rdx, [ tmp4442 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ labelId ]
  lea  rdi, [ tmp4442 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 144
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal560 ]
  lea  r8 , [ tmp4442 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ __literal561 ]
  lea  rdi, [ tmp4442 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 149
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp4444 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal418 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp4444 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ tmp4444 ]
  lea  rdi, [ tmp4442 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 149
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ __literal561 ]
  lea  rdi, [ tmp4442 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 149
  call __MOLD_VCall
  pop rdi
  mov [ tmp4445 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp4445 + Variant_t.value], rax
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ funcName ]
  lea  r8 , [ params ]
  lea  r9 , [ tmp4445 ]
  lea  rax , [ rvName ]
  push rax
  lea  rdi, [ tmp4442 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 150
  call __MOLD_VCall
  add rsp, 8
  pop rdi
  lea  rcx, [ tmp4445 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal228 ]
  lea  r8 , [ tmp4445 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4445 ]
  lea  rdi , [ tmp4442 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4443 ], 0
  mov [ tmp4445 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4443 ]
  mov [ tmp4445 + Variant_t.value], rax
  lea rcx, [ tmp4442 ]
  lea rdx, [ tmp4445 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4447
  mov dword [ tmp4449 ], 1
  mov eax, dword [ paramsCnt ]
  add eax, dword [ tmp4449 ]
  mov dword [ paramsCnt ], eax
l4447:
l4448:
  mov [ tmp4442 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp4442 + Variant_t.value], rax
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ tmp4442 ]
  lea  rdi, [ tmp4445 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 151
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp4445 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4445 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l4451
l4450:
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  call  __ASTTranslator__executeNode$0
  ret
l4451:
  lea  rcx , [ tmp4445 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4450 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  mov [ tmp4442 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp4442 + Variant_t.value], rax
  push rdi
  lea  rcx , [ code ]
  lea  rdx , [ tmp4442 ]
  lea  rdi, [ tmp4445 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 152
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ code ]
  lea  rdi, [ tmp4445 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 153
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4442 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4445 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 288
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
  restore params
  restore paramsCnt
  restore children
  restore codeAst
  restore rvName
  restore code
  restore oldSymbolTable
  restore labelId
  restore tmp4442
  restore tmp4443
  restore tmp4444
  restore tmp4445
  restore tmp4446
  restore tmp4449
  restore item
; -----------------------------------------------
; function __ASTTranslatorMIR0__dropRetVal$0
; -----------------------------------------------
__ASTTranslatorMIR0__dropRetVal$0:
  ; init frame
  ; ----------
  tmp4453 EQU rbp - 24 ; 16 bytes
  tmp4452 EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4452 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4453 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4453 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4453 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4453 ]
  lea  rdi, [ tmp4452 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 124
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4452 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4453 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp4452
  restore tmp4453
; -----------------------------------------------
; function __ASTTranslatorMIR0_run$0
; -----------------------------------------------
__ASTTranslatorMIR0_run$0:
  ; init frame
  ; ----------
  tmp4454 EQU rbp - 24 ; 16 bytes
  ast EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [tmp4454 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ ast ]
  call  __ASTTranslator__executeNode$0
  lea  rcx, [ tmp4454 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4454 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4454 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  call  __ASTTranslator__emitGlobals$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4454 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore ast
  restore tmp4454
; -----------------------------------------------
; function __Stack_constructor$0
; -----------------------------------------------
__Stack_constructor$0:
  ; init frame
  ; ----------
  tmp4456 EQU rbp - 12 ; 4 bytes
  tmp4455 EQU rbp - 28 ; 16 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4455 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4455 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4455 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ tmp4455 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4456 ], 0
  mov [ tmp4455 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4456 ]
  mov [ tmp4455 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4455 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4455 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp4455
  restore tmp4456
; -----------------------------------------------
; function __Stack_getItems$0
; -----------------------------------------------
__Stack_getItems$0:
  ; init frame
  ; ----------
  idx EQU rbp - 12 ; 4 bytes
  tmp4460 EQU rbp - 16 ; 4 bytes
  tmp4459 EQU rbp - 20 ; 4 bytes
  tmp4458 EQU rbp - 24 ; 4 bytes
  tmp4457 EQU rbp - 40 ; 16 bytes
  size EQU rbp - 56 ; 16 bytes
  data EQU rbp - 72 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [data + Variant_t.type], VARIANT_UNDEFINED
  mov [size + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4457 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ rv ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ data ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ data ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ size ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ size ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4458 ], 1
  cmp [ size + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ size + Variant_t.value]
  mov dword [ tmp4459 ], eax
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp4460 .. tmp4459
;
l4461:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4459 ]
  jge l4462
  lea  rcx, [ tmp4457 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ data ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4457 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ rv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4457 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp4458 ]
  mov dword [ idx ], eax
  jmp l4461
l4462:
;
; END: for idx in tmp4460 .. tmp4459 step tmp4458
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ data ]
  call __MOLD_VariantDestroy
  lea  rcx, [ size ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4457 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore data
  restore size
  restore tmp4457
  restore tmp4458
  restore tmp4459
  restore tmp4460
  restore idx
; -----------------------------------------------
; function __Stack_push$0
; -----------------------------------------------
__Stack_push$0:
  ; init frame
  ; ----------
  tmp4466 EQU rbp - 24 ; 16 bytes
  tmp4465 EQU rbp - 28 ; 4 bytes
  tmp4464 EQU rbp - 44 ; 16 bytes
  tmp4463 EQU rbp - 60 ; 16 bytes
  x EQU rbp - 76 ; 16 bytes
  this EQU rbp - 92 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  mov [tmp4463 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4464 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4466 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4463 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ tmp4463 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4464 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4464 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp4464 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4464 + Variant_t.value]
  mov dword [ tmp4465 ], eax
  lea  rcx , [ tmp4463 ]
  lea  rdx , [ tmp4465 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantStoreAtIndex_int32
  lea  rcx, [ tmp4464 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4464 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4465 ], 1
  mov [ tmp4466 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4465 ]
  mov [ tmp4466 + Variant_t.value], rax
  lea  rcx , [ tmp4464 ]
  lea  rdx , [ tmp4466 ]
  lea  r8 , [ tmp4463 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4463 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4463 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4464 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4466 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore x
  restore tmp4463
  restore tmp4464
  restore tmp4465
  restore tmp4466
; -----------------------------------------------
; function __Stack_pop$0
; -----------------------------------------------
__Stack_pop$0:
  ; init frame
  ; ----------
  tmp4473 EQU rbp - 24 ; 16 bytes
  tmp4470 EQU rbp - 40 ; 16 bytes
  tmp4469 EQU rbp - 44 ; 4 bytes
  tmp4468 EQU rbp - 60 ; 16 bytes
  tmp4467 EQU rbp - 64 ; 4 bytes
  rv EQU rdi
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4468 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4470 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4473 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4468 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4468 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4469 ], 0
  mov [ tmp4470 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4469 ]
  mov [ tmp4470 + Variant_t.value], rax
  lea rcx, [ tmp4468 ]
  lea rdx, [ tmp4470 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4471
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal565 ]
  mov eax,  41
  call  __MOLD_SysCall
  jmp l4472
l4471:
  lea  rcx, [ tmp4468 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4468 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4469 ], 1
  mov [ tmp4473 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4469 ]
  mov [ tmp4473 + Variant_t.value], rax
  lea  rcx , [ tmp4468 ]
  lea  rdx , [ tmp4473 ]
  lea  r8 , [ tmp4470 ]
  call  __MOLD_VariantSub
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4470 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4473 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ tmp4473 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4468 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4468 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp4468 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4468 + Variant_t.value]
  mov dword [ tmp4469 ], eax
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4473 ]
  lea  rdx , [ tmp4469 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
l4472:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4468 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4470 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4473 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4467
  restore tmp4468
  restore tmp4469
  restore tmp4470
  restore tmp4473
; -----------------------------------------------
; function __Stack_over$0
; -----------------------------------------------
__Stack_over$0:
  ; init frame
  ; ----------
  tmp4479 EQU rbp - 24 ; 16 bytes
  tmp4478 EQU rbp - 28 ; 4 bytes
  tmp4477 EQU rbp - 44 ; 16 bytes
  tmp4476 EQU rbp - 60 ; 16 bytes
  tmp4475 EQU rbp - 76 ; 16 bytes
  tmp4474 EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4474 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4475 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4476 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4477 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4479 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4475 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ tmp4475 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4477 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4477 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4478 ], 2
  mov [ tmp4479 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4478 ]
  mov [ tmp4479 + Variant_t.value], rax
  lea  rcx , [ tmp4477 ]
  lea  rdx , [ tmp4479 ]
  lea  r8 , [ tmp4476 ]
  call  __MOLD_VariantSub
  cmp [ tmp4476 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4476 + Variant_t.value]
  mov dword [ tmp4478 ], eax
  lea  rcx, [ tmp4474 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4475 ]
  lea  rdx , [ tmp4478 ]
  lea  r8 , [ tmp4474 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp4474 ]
  call  __Stack_push$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4474 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4475 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4476 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4477 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4479 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore tmp4474
  restore tmp4475
  restore tmp4476
  restore tmp4477
  restore tmp4478
  restore tmp4479
; -----------------------------------------------
; function __Stack_dup$0
; -----------------------------------------------
__Stack_dup$0:
  ; init frame
  ; ----------
  tmp4485 EQU rbp - 24 ; 16 bytes
  tmp4484 EQU rbp - 28 ; 4 bytes
  tmp4483 EQU rbp - 44 ; 16 bytes
  tmp4482 EQU rbp - 60 ; 16 bytes
  tmp4481 EQU rbp - 76 ; 16 bytes
  tmp4480 EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4480 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4481 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4482 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4483 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4485 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4481 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ tmp4481 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4483 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4483 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4484 ], 1
  mov [ tmp4485 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4484 ]
  mov [ tmp4485 + Variant_t.value], rax
  lea  rcx , [ tmp4483 ]
  lea  rdx , [ tmp4485 ]
  lea  r8 , [ tmp4482 ]
  call  __MOLD_VariantSub
  cmp [ tmp4482 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4482 + Variant_t.value]
  mov dword [ tmp4484 ], eax
  lea  rcx, [ tmp4480 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4481 ]
  lea  rdx , [ tmp4484 ]
  lea  r8 , [ tmp4480 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp4480 ]
  call  __Stack_push$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4480 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4481 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4482 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4483 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4485 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore tmp4480
  restore tmp4481
  restore tmp4482
  restore tmp4483
  restore tmp4484
  restore tmp4485
; -----------------------------------------------
; function __Stack_eat$0
; -----------------------------------------------
__Stack_eat$0:
  ; init frame
  ; ----------
  tmp4489 EQU rbp - 24 ; 16 bytes
  tmp4488 EQU rbp - 28 ; 4 bytes
  tmp4487 EQU rbp - 44 ; 16 bytes
  tmp4486 EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4486 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4487 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4489 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4487 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4487 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4488 ], 1
  mov [ tmp4489 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4488 ]
  mov [ tmp4489 + Variant_t.value], rax
  lea  rcx , [ tmp4487 ]
  lea  rdx , [ tmp4489 ]
  lea  r8 , [ tmp4486 ]
  call  __MOLD_VariantSub
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4486 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4486 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4487 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4489 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore tmp4486
  restore tmp4487
  restore tmp4488
  restore tmp4489
; -----------------------------------------------
; function __Stack_eatN$0
; -----------------------------------------------
__Stack_eatN$0:
  ; init frame
  ; ----------
  tmp4491 EQU rbp - 24 ; 16 bytes
  tmp4490 EQU rbp - 40 ; 16 bytes
  n EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ n ], xmm0
  mov [tmp4490 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4491 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4491 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4491 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4491 ]
  lea  rdx , [ n ]
  lea  r8 , [ tmp4490 ]
  call  __MOLD_VariantSub
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4490 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4490 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4491 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore n
  restore tmp4490
  restore tmp4491
; -----------------------------------------------
; function __Stack_setByAbsoluteIdx$0
; -----------------------------------------------
__Stack_setByAbsoluteIdx$0:
  ; init frame
  ; ----------
  tmp4493 EQU rbp - 12 ; 4 bytes
  tmp4492 EQU rbp - 28 ; 16 bytes
  val EQU rbp - 44 ; 16 bytes
  idx EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ idx ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ val ], xmm0
  mov [tmp4492 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4492 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ tmp4492 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ idx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ idx + Variant_t.value]
  mov dword [ tmp4493 ], eax
  lea  rcx , [ tmp4492 ]
  lea  rdx , [ tmp4493 ]
  lea  r8 , [ val ]
  call  __MOLD_VariantStoreAtIndex_int32

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4492 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore idx
  restore val
  restore tmp4492
  restore tmp4493
; -----------------------------------------------
; function __Stack_getByAbsoluteIdx$0
; -----------------------------------------------
__Stack_getByAbsoluteIdx$0:
  ; init frame
  ; ----------
  tmp4496 EQU rbp - 12 ; 4 bytes
  tmp4495 EQU rbp - 28 ; 16 bytes
  tmp4494 EQU rbp - 44 ; 16 bytes
  rv EQU rdi
  idx EQU rbp - 60 ; 16 bytes
  this EQU rbp - 76 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ idx ], xmm0
  mov [tmp4494 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4495 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4495 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ tmp4495 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ idx + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ idx + Variant_t.value]
  mov dword [ tmp4496 ], eax
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4495 ]
  lea  rdx , [ tmp4496 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4494 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4495 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore idx
  restore rv
  restore tmp4494
  restore tmp4495
  restore tmp4496
; -----------------------------------------------
; function __Stack_peek$0
; -----------------------------------------------
__Stack_peek$0:
  ; init frame
  ; ----------
  tmp4505 EQU rbp - 24 ; 16 bytes
  tmp4504 EQU rbp - 40 ; 16 bytes
  tmp4503 EQU rbp - 56 ; 16 bytes
  tmp4500 EQU rbp - 72 ; 16 bytes
  tmp4499 EQU rbp - 76 ; 4 bytes
  tmp4498 EQU rbp - 92 ; 16 bytes
  tmp4497 EQU rbp - 96 ; 4 bytes
  rv EQU rdi
  this EQU rbp - 112 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4498 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4500 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4503 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4504 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4505 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4498 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4498 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4499 ], 0
  mov [ tmp4500 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4499 ]
  mov [ tmp4500 + Variant_t.value], rax
  lea rcx, [ tmp4498 ]
  lea rdx, [ tmp4500 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l4501
  lea  rcx, [ tmp4498 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ tmp4498 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4504 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4504 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4499 ], 1
  mov [ tmp4505 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4499 ]
  mov [ tmp4505 + Variant_t.value], rax
  lea  rcx , [ tmp4504 ]
  lea  rdx , [ tmp4505 ]
  lea  r8 , [ tmp4503 ]
  call  __MOLD_VariantSub
  cmp [ tmp4503 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4503 + Variant_t.value]
  mov dword [ tmp4499 ], eax
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4498 ]
  lea  rdx , [ tmp4499 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l4502
l4501:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal566 ]
  mov eax,  41
  call  __MOLD_SysCall
l4502:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4498 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4500 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4503 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4504 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4505 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4497
  restore tmp4498
  restore tmp4499
  restore tmp4500
  restore tmp4503
  restore tmp4504
  restore tmp4505
; -----------------------------------------------
; function __Stack_peekN$0
; -----------------------------------------------
__Stack_peekN$0:
  ; init frame
  ; ----------
  tmp4517 EQU rbp - 24 ; 16 bytes
  tmp4516 EQU rbp - 40 ; 16 bytes
  tmp4515 EQU rbp - 56 ; 16 bytes
  tmp4514 EQU rbp - 72 ; 16 bytes
  tmp4513 EQU rbp - 76 ; 4 bytes
  tmp4512 EQU rbp - 92 ; 16 bytes
  tmp4511 EQU rbp - 108 ; 16 bytes
  tmp4510 EQU rbp - 124 ; 16 bytes
  tmp4507 EQU rbp - 140 ; 16 bytes
  tmp4506 EQU rbp - 144 ; 4 bytes
  rv EQU rdi
  idx EQU rbp - 160 ; 16 bytes
  this EQU rbp - 176 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ idx ], xmm0
  mov [tmp4507 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4510 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4511 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4512 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4514 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4515 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4516 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4517 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4507 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4507 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp4507 ]
  lea rdx, [ idx ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l4508
  lea  rcx, [ tmp4510 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal563 ]
  lea  r8 , [ tmp4510 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4512 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4512 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4512 ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4511 ]
  call  __MOLD_VariantSub
  cmp [ tmp4511 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4511 + Variant_t.value]
  mov dword [ tmp4513 ], eax
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4510 ]
  lea  rdx , [ tmp4513 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l4509
l4508:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ idx ]
  lea  rdi , [ tmp4507 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4511 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp4511 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4511 ]
  lea  rdi , [ tmp4510 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4517 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4510 ]
  lea  rdx , [ __literal569 ]
  lea  r8 , [ tmp4517 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4516 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal568 ]
  lea  rdx , [ tmp4517 ]
  lea  r8 , [ tmp4516 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4515 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4507 ]
  lea  rdx , [ tmp4516 ]
  lea  r8 , [ tmp4515 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4514 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal567 ]
  lea  rdx , [ tmp4515 ]
  lea  r8 , [ tmp4514 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp4514 ]
  mov eax,  41
  call  __MOLD_SysCall
l4509:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4507 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4510 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4511 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4512 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore idx
  restore rv
  restore tmp4506
  restore tmp4507
  restore tmp4510
  restore tmp4511
  restore tmp4512
  restore tmp4513
  restore tmp4514
  restore tmp4515
  restore tmp4516
  restore tmp4517
; -----------------------------------------------
; function __ASTTranslatorMIR1_constructor$0
; -----------------------------------------------
__ASTTranslatorMIR1_constructor$0:
  ; init frame
  ; ----------
  tmp4519 EQU rbp - 24 ; 16 bytes
  tmp4518 EQU rbp - 40 ; 16 bytes
  app EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ app ], xmm0
  mov [tmp4518 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4519 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ app ]
  call  __ASTTranslator_constructor$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ app ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp4518 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 154
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4518 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4518 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4518 ]
  lea  rdx, [vtable_Stack]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp4518 ]
  lea  rdi , [ tmp4519 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Stack_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal570 ]
  lea  r8 , [ tmp4518 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4518 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4518 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4518 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4518 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4518 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4518 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4518 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal573 ]
  lea  r8 , [ tmp4518 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4518 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4518 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal574 ]
  lea  r8 , [ tmp4518 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4518 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4519 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore app
  restore tmp4518
  restore tmp4519
; -----------------------------------------------
; function __ASTTranslatorMIR1__emitOneItem$0
; -----------------------------------------------
__ASTTranslatorMIR1__emitOneItem$0:
  ; init frame
  ; ----------
  tmp4521 EQU rbp - 24 ; 16 bytes
  tmp4520 EQU rbp - 40 ; 16 bytes
  item EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  mov [tmp4520 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4521 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4521 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4521 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4521 ]
  lea  rdx , [ item ]
  lea  rdi, [ tmp4520 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 155
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4520 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4521 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore item
  restore tmp4520
  restore tmp4521
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitZeroArgsOpcode$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitZeroArgsOpcode$0:
  ; init frame
  ; ----------
  tmp4524 EQU rbp - 24 ; 16 bytes
  tmp4523 EQU rbp - 40 ; 16 bytes
  tmp4522 EQU rbp - 56 ; 16 bytes
  newQuad EQU rbp - 72 ; 16 bytes
  opcode EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  mov [newQuad + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4522 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4523 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4524 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4522 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4522 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4523 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4523 + Variant_t.value], 0
  lea  rcx, [ tmp4524 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4524 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4522 ]
  lea  rdx , [ tmp4523 ]
  lea  r8 , [ tmp4524 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea rcx, [ newQuad ]
  lea rdx, [ tmp4522 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ newQuad ]
  call  __ASTTranslatorMIR1__emitOneItem$0

  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4522 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4523 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4524 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore opcode
  restore newQuad
  restore tmp4522
  restore tmp4523
  restore tmp4524
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitTargetOnlyOpcode$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitTargetOnlyOpcode$0:
  ; init frame
  ; ----------
  tmp4527 EQU rbp - 24 ; 16 bytes
  tmp4526 EQU rbp - 40 ; 16 bytes
  tmp4525 EQU rbp - 56 ; 16 bytes
  newQuad EQU rbp - 72 ; 16 bytes
  rv EQU rbp - 88 ; 16 bytes
  opcode EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  mov [newQuad + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4525 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4526 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4527 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4525 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4525 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4526 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4526 + Variant_t.value], 0
  lea  rcx, [ tmp4527 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4527 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4525 ]
  lea  rdx , [ tmp4526 ]
  lea  r8 , [ tmp4527 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4526 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4526 + Variant_t.value], 1
  lea  rcx, [ tmp4527 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4527 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4525 ]
  lea  rdx , [ tmp4526 ]
  lea  r8 , [ tmp4527 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea rcx, [ newQuad ]
  lea rdx, [ tmp4525 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ newQuad ]
  call  __ASTTranslatorMIR1__emitOneItem$0

  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4525 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4526 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4527 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore opcode
  restore rv
  restore newQuad
  restore tmp4525
  restore tmp4526
  restore tmp4527
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitOneArgOpcode$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitOneArgOpcode$0:
  ; init frame
  ; ----------
  tmp4530 EQU rbp - 24 ; 16 bytes
  tmp4529 EQU rbp - 40 ; 16 bytes
  tmp4528 EQU rbp - 56 ; 16 bytes
  newQuad EQU rbp - 72 ; 16 bytes
  x EQU rbp - 88 ; 16 bytes
  rv EQU rbp - 104 ; 16 bytes
  opcode EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ x ], xmm0
  mov [newQuad + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4528 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4529 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4530 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4528 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4528 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4529 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4529 + Variant_t.value], 0
  lea  rcx, [ tmp4530 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4530 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4528 ]
  lea  rdx , [ tmp4529 ]
  lea  r8 , [ tmp4530 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4529 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4529 + Variant_t.value], 1
  lea  rcx, [ tmp4530 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4530 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4528 ]
  lea  rdx , [ tmp4529 ]
  lea  r8 , [ tmp4530 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4529 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4529 + Variant_t.value], 2
  lea  rcx, [ tmp4530 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4530 ]
  lea rdx, [ x ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4528 ]
  lea  rdx , [ tmp4529 ]
  lea  r8 , [ tmp4530 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea rcx, [ newQuad ]
  lea rdx, [ tmp4528 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ newQuad ]
  call  __ASTTranslatorMIR1__emitOneItem$0

  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4528 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4529 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4530 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore opcode
  restore rv
  restore x
  restore newQuad
  restore tmp4528
  restore tmp4529
  restore tmp4530
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitTwoArgsOpcode$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitTwoArgsOpcode$0:
  ; init frame
  ; ----------
  tmp4533 EQU rbp - 24 ; 16 bytes
  tmp4532 EQU rbp - 40 ; 16 bytes
  tmp4531 EQU rbp - 56 ; 16 bytes
  newQuad EQU rbp - 72 ; 16 bytes
  y EQU rbp - 88 ; 16 bytes
  x EQU rbp - 104 ; 16 bytes
  rv EQU rbp - 120 ; 16 bytes
  opcode EQU rbp - 136 ; 16 bytes
  this EQU rbp - 152 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ x ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ y ], xmm0
  mov [newQuad + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4531 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4532 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4533 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4531 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4531 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4532 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4532 + Variant_t.value], 0
  lea  rcx, [ tmp4533 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4533 ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4531 ]
  lea  rdx , [ tmp4532 ]
  lea  r8 , [ tmp4533 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4532 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4532 + Variant_t.value], 1
  lea  rcx, [ tmp4533 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4533 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4531 ]
  lea  rdx , [ tmp4532 ]
  lea  r8 , [ tmp4533 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4532 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4532 + Variant_t.value], 2
  lea  rcx, [ tmp4533 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4533 ]
  lea rdx, [ x ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4531 ]
  lea  rdx , [ tmp4532 ]
  lea  r8 , [ tmp4533 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4532 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4532 + Variant_t.value], 3
  lea  rcx, [ tmp4533 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4533 ]
  lea rdx, [ y ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4531 ]
  lea  rdx , [ tmp4532 ]
  lea  r8 , [ tmp4533 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea rcx, [ newQuad ]
  lea rdx, [ tmp4531 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ newQuad ]
  call  __ASTTranslatorMIR1__emitOneItem$0

  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4531 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4532 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4533 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore opcode
  restore rv
  restore x
  restore y
  restore newQuad
  restore tmp4531
  restore tmp4532
  restore tmp4533
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitComment$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitComment$0:
  ; init frame
  ; ----------
  comment EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ comment ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal575 ]
  lea  r8 , [ comment ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore comment
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitLabel$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitLabel$0:
  ; init frame
  ; ----------
  label EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ label ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal143 ]
  lea  r8 , [ label ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore label
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitJmp$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitJmp$0:
  ; init frame
  ; ----------
  label EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ label ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ label ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore label
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitJmpByTable$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitJmpByTable$0:
  ; init frame
  ; ----------
  tmp4536 EQU rbp - 24 ; 16 bytes
  tmp4535 EQU rbp - 40 ; 16 bytes
  tmp4534 EQU rbp - 56 ; 16 bytes
  newQuad EQU rbp - 72 ; 16 bytes
  labelIdx EQU rbp - 88 ; 16 bytes
  jmpTable EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ jmpTable ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ labelIdx ], xmm0
  mov [newQuad + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4534 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4535 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4536 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4534 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4534 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4535 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4535 + Variant_t.value], 0
  lea  rcx, [ tmp4536 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4536 ]
  lea rdx, [ __literal577 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4534 ]
  lea  rdx , [ tmp4535 ]
  lea  r8 , [ tmp4536 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4535 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4535 + Variant_t.value], 1
  lea  rcx, [ tmp4536 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4536 ]
  lea rdx, [ jmpTable ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4534 ]
  lea  rdx , [ tmp4535 ]
  lea  r8 , [ tmp4536 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4535 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4535 + Variant_t.value], 2
  lea  rcx, [ tmp4536 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4536 ]
  lea rdx, [ labelIdx ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4534 ]
  lea  rdx , [ tmp4535 ]
  lea  r8 , [ tmp4536 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea rcx, [ newQuad ]
  lea rdx, [ tmp4534 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ newQuad ]
  call  __ASTTranslatorMIR1__emitOneItem$0

  ; clean frame
  ; -----------
  lea  rcx, [ newQuad ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4534 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4535 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4536 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore jmpTable
  restore labelIdx
  restore newQuad
  restore tmp4534
  restore tmp4535
  restore tmp4536
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitMoveVariantOpcode$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitMoveVariantOpcode$0:
  ; init frame
  ; ----------
  src EQU rbp - 24 ; 16 bytes
  dst EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal578 ]
  lea  r8 , [ dst ]
  lea  r9 , [ src ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore dst
  restore src
; -----------------------------------------------
; function __ASTTranslatorMIR1_popForRead$0
; -----------------------------------------------
__ASTTranslatorMIR1_popForRead$0:
  ; init frame
  ; ----------
  tmp4538 EQU rbp - 24 ; 16 bytes
  tmp4537 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4537 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4538 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4538 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal570 ]
  lea  r8 , [ tmp4538 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4538 ]
  lea  rdi, [ tmp4537 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp4537 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4537 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4538 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4537
  restore tmp4538
; -----------------------------------------------
; function __ASTTranslatorMIR1_popForWrite$0
; -----------------------------------------------
__ASTTranslatorMIR1_popForWrite$0:
  ; init frame
  ; ----------
  tmp4540 EQU rbp - 24 ; 16 bytes
  tmp4539 EQU rbp - 40 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4539 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4540 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4540 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal570 ]
  lea  r8 , [ tmp4540 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4540 ]
  lea  rdi, [ tmp4539 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ tmp4539 ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4539 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4540 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4539
  restore tmp4540
; -----------------------------------------------
; function __ASTTranslatorMIR1_push$0
; -----------------------------------------------
__ASTTranslatorMIR1_push$0:
  ; init frame
  ; ----------
  tmp4542 EQU rbp - 24 ; 16 bytes
  tmp4541 EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  mov [tmp4541 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4542 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4542 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal570 ]
  lea  r8 , [ tmp4542 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4542 ]
  lea  rdx , [ x ]
  lea  rdi, [ tmp4541 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4541 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4542 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore x
  restore tmp4541
  restore tmp4542
; -----------------------------------------------
; function __ASTTranslatorMIR1_popOneArgAndEmitOpcode$0
; -----------------------------------------------
__ASTTranslatorMIR1_popOneArgAndEmitOpcode$0:
  ; init frame
  ; ----------
  tmp4543 EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  opcode EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4543 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4543 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4543 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$0
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ rv ]
  lea  r9 , [ x ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0

  ; clean frame
  ; -----------
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4543 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore opcode
  restore rv
  restore x
  restore tmp4543
; -----------------------------------------------
; function __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0
; -----------------------------------------------
__ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0:
  ; init frame
  ; ----------
  tmp4544 EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  rv EQU rbp - 72 ; 16 bytes
  opcode EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ opcode ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ rv ], xmm0
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4544 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4544 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea rcx, [ y ]
  lea rdx, [ tmp4544 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4544 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4544 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$0
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ rv ]
  lea  r9 , [ x ]
  lea  rax , [ y ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$0
  add rsp, 8

  ; clean frame
  ; -----------
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4544 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore opcode
  restore rv
  restore y
  restore x
  restore tmp4544
; -----------------------------------------------
; function __ASTTranslatorMIR1_popParametersBeforeCall$0
; -----------------------------------------------
__ASTTranslatorMIR1_popParametersBeforeCall$0:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  idx EQU rbp - 28 ; 4 bytes
  tmp4553 EQU rbp - 44 ; 16 bytes
  tmp4552 EQU rbp - 60 ; 16 bytes
  tmp4551 EQU rbp - 76 ; 16 bytes
  tmp4548 EQU rbp - 80 ; 4 bytes
  tmp4547 EQU rbp - 84 ; 4 bytes
  tmp4546 EQU rbp - 88 ; 4 bytes
  tmp4545 EQU rbp - 104 ; 16 bytes
  params EQU rdi
  paramsCnt EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ paramsCnt ], xmm0
  mov [tmp4545 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4551 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4552 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4553 + Variant_t.type], VARIANT_UNDEFINED
  mov [item + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  call  __MOLD_VariantArrayCreate
  mov dword [ tmp4546 ], 1
  cmp [ paramsCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ paramsCnt + Variant_t.value]
  mov dword [ tmp4547 ], eax
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp4548 .. tmp4547
;
l4549:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4547 ]
  jge l4550
  lea  rcx, [ tmp4551 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal570 ]
  lea  r8 , [ tmp4551 ]
  call  __MOLD_VariantLoadFromKey
  mov [ tmp4553 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ idx ]
  mov [ tmp4553 + Variant_t.value], rax
  lea  rcx , [ paramsCnt ]
  lea  rdx , [ tmp4553 ]
  lea  r8 , [ tmp4552 ]
  call  __MOLD_VariantSub
  push rdi
  lea  rcx , [ tmp4551 ]
  lea  rdx , [ tmp4552 ]
  lea  rdi, [ tmp4545 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 158
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea rcx, [ item ]
  lea rdx, [ tmp4545 ]
  call __MOLD_VariantMove
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp4546 ]
  mov dword [ idx ], eax
  jmp l4549
l4550:
;
; END: for idx in tmp4548 .. tmp4547 step tmp4546
; -----------------------------
;
  lea  rcx, [ tmp4552 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal570 ]
  lea  r8 , [ tmp4552 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4552 ]
  lea  rdx , [ paramsCnt ]
  lea  rdi, [ tmp4545 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 159
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4545 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4551 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4552 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4553 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore paramsCnt
  restore params
  restore tmp4545
  restore tmp4546
  restore tmp4547
  restore tmp4548
  restore tmp4551
  restore tmp4552
  restore tmp4553
  restore idx
  restore item
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitProcBegin$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitProcBegin$0:
  ; init frame
  ; ----------
  procMeta EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ procMeta ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal579 ]
  lea  r8 , [ procMeta ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore procMeta
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitInitFrame$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitInitFrame$0:
  ; init frame
  ; ----------
  procMeta EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ procMeta ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal580 ]
  lea  r8 , [ procMeta ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore procMeta
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitProcEnd$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitProcEnd$0:
  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal581 ]
  call  __ASTTranslatorMIR1_emitZeroArgsOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret

  restore this
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitRet$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitRet$0:
  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal582 ]
  call  __ASTTranslatorMIR1_emitZeroArgsOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret

  restore this
; -----------------------------------------------
; function __ASTTranslatorMIR1_emitMoveBackVariant$0
; -----------------------------------------------
__ASTTranslatorMIR1_emitMoveBackVariant$0:
  ; init frame
  ; ----------
  tmp4554 EQU rbp - 24 ; 16 bytes
  dst EQU rbp - 40 ; 16 bytes
  src EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [src + Variant_t.type], VARIANT_UNDEFINED
  mov [dst + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4554 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4554 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea rcx, [ src ]
  lea rdx, [ tmp4554 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4554 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForWrite$0
  pop rdi
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea rcx, [ dst ]
  lea rdx, [ tmp4554 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ src ]
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4554 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore src
  restore dst
  restore tmp4554
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadArgsVector$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadArgsVector$0:
  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal237 ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret

  restore this
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadArgsCount$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadArgsCount$0:
  ; init frame
  ; ----------
  this EQU rbp - 24 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 64

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal238 ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------

  add  rsp, 64
  pop  rbp
  ret

  restore this
; -----------------------------------------------
; function __ASTTranslatorMIR1__neg$0
; -----------------------------------------------
__ASTTranslatorMIR1__neg$0:
  ; init frame
  ; ----------
  value EQU rbp - 24 ; 16 bytes
  rv EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ value ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal583 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore rv
  restore value
; -----------------------------------------------
; function __ASTTranslatorMIR1__add$0
; -----------------------------------------------
__ASTTranslatorMIR1__add$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__stringJoin$0
; -----------------------------------------------
__ASTTranslatorMIR1__stringJoin$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal585 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__sub$0
; -----------------------------------------------
__ASTTranslatorMIR1__sub$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal586 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__mul$0
; -----------------------------------------------
__ASTTranslatorMIR1__mul$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal587 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__div$0
; -----------------------------------------------
__ASTTranslatorMIR1__div$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal588 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__idiv$0
; -----------------------------------------------
__ASTTranslatorMIR1__idiv$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal589 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadArray$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadArray$0:
  ; init frame
  ; ----------
  rv EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal590 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadMap$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadMap$0:
  ; init frame
  ; ----------
  rv EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal591 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadNull$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadNull$0:
  ; init frame
  ; ----------
  rv EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal592 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadImm$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadImm$0:
  ; init frame
  ; ----------
  tmp4576 EQU rbp - 24 ; 16 bytes
  tmp4575 EQU rbp - 40 ; 16 bytes
  newConst EQU rbp - 56 ; 16 bytes
  tmp4574 EQU rbp - 72 ; 16 bytes
  tmp4571 EQU rbp - 76 ; 4 bytes
  tmp4569 EQU rbp - 80 ; 4 bytes
  tmp4562 EQU rbp - 84 ; 4 bytes
  tmp4561 EQU rbp - 88 ; 4 bytes
  tmp4559 EQU rbp - 92 ; 4 bytes
  tmp4556 EQU rbp - 96 ; 4 bytes
  tmp4555 EQU rbp - 112 ; 16 bytes
  type EQU rbp - 128 ; 16 bytes
  value EQU rbp - 144 ; 16 bytes
  rv EQU rbp - 160 ; 16 bytes
  this EQU rbp - 176 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [type + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4555 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4574 + Variant_t.type], VARIANT_UNDEFINED
  mov [newConst + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4575 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4576 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ type ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ type ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4557
  mov dword [ tmp4559 ], 0
  mov dword [ tmp4562 ], -2147483648
  mov [ tmp4555 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4562 ]
  mov [ tmp4555 + Variant_t.value], rax
  lea rcx, [ value ]
  lea rdx, [ tmp4555 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l4560
  mov dword [ tmp4562 ], 2147483647
  mov [ tmp4555 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4562 ]
  mov [ tmp4555 + Variant_t.value], rax
  lea  rcx , [ value ]
  lea  rdx , [ tmp4555 ]
  lea  r8 , [ tmp4559 ]
  call  __MOLD_VariantCompareLE
l4560:
  cmp dword [ tmp4559 ], 0
  jz l4563
  lea  rcx , [ this ]
  lea  rdx , [ __literal593 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
  jmp l4564
l4563:
  lea  rcx , [ this ]
  lea  rdx , [ __literal594 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
l4564:
  jmp l4558
l4557:
  lea rcx, [ type ]
  lea rdx, [ __literal34 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4565
  lea  rcx , [ this ]
  lea  rdx , [ __literal595 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
  jmp l4566
l4565:
  lea rcx, [ type ]
  lea rdx, [ __literal35 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4567
  lea  rcx , [ this ]
  lea  rdx , [ __literal596 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
  jmp l4568
l4567:
  mov dword [ tmp4569 ], 1
  lea rcx, [ type ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4570
  lea  rcx , [ type ]
  lea  rdx , [ __literal120 ]
  lea  r8 , [ tmp4569 ]
  call  __MOLD_VariantCompareEQ
l4570:
  cmp dword [ tmp4569 ], 0
  jz l4572
  lea  rcx, [ tmp4574 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4574 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4574 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp4555 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 160
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ newConst ]
  call __MOLD_VariantDestroy
  lea rcx, [ newConst ]
  lea rdx, [ tmp4555 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ newConst ]
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$0
  jmp l4573
l4572:
  lea  rcx, [ tmp4574 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4574 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ type ]
  lea  rdi , [ tmp4576 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4575 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal597 ]
  lea  rdx , [ tmp4576 ]
  lea  r8 , [ tmp4575 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp4574 ]
  lea  rdx , [ tmp4575 ]
  lea  rdi, [ tmp4555 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l4573:
l4568:
l4566:
l4558:
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4555 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4574 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newConst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4576 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore type
  restore tmp4555
  restore tmp4556
  restore tmp4559
  restore tmp4561
  restore tmp4562
  restore tmp4569
  restore tmp4571
  restore tmp4574
  restore newConst
  restore tmp4575
  restore tmp4576
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadImmAsVariant$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadImmAsVariant$0:
  ; init frame
  ; ----------
  tmp4598 EQU rbp - 24 ; 16 bytes
  tmp4597 EQU rbp - 40 ; 16 bytes
  newConst EQU rbp - 56 ; 16 bytes
  tmp4596 EQU rbp - 72 ; 16 bytes
  tmp4593 EQU rbp - 76 ; 4 bytes
  tmp4591 EQU rbp - 80 ; 4 bytes
  tmp4584 EQU rbp - 84 ; 4 bytes
  tmp4583 EQU rbp - 88 ; 4 bytes
  tmp4581 EQU rbp - 92 ; 4 bytes
  tmp4578 EQU rbp - 96 ; 4 bytes
  tmp4577 EQU rbp - 112 ; 16 bytes
  type EQU rbp - 128 ; 16 bytes
  value EQU rbp - 144 ; 16 bytes
  rv EQU rbp - 160 ; 16 bytes
  this EQU rbp - 176 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  mov [type + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4577 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4596 + Variant_t.type], VARIANT_UNDEFINED
  mov [newConst + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4597 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4598 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ type ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ type ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4579
  mov dword [ tmp4581 ], 0
  mov dword [ tmp4584 ], -2147483648
  mov [ tmp4577 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4584 ]
  mov [ tmp4577 + Variant_t.value], rax
  lea rcx, [ value ]
  lea rdx, [ tmp4577 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l4582
  mov dword [ tmp4584 ], 2147483647
  mov [ tmp4577 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4584 ]
  mov [ tmp4577 + Variant_t.value], rax
  lea  rcx , [ value ]
  lea  rdx , [ tmp4577 ]
  lea  r8 , [ tmp4581 ]
  call  __MOLD_VariantCompareLE
l4582:
  cmp dword [ tmp4581 ], 0
  jz l4585
  lea  rcx , [ this ]
  lea  rdx , [ __literal598 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
  jmp l4586
l4585:
  lea  rcx , [ this ]
  lea  rdx , [ __literal594 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
l4586:
  jmp l4580
l4579:
  lea rcx, [ type ]
  lea rdx, [ __literal34 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4587
  lea  rcx , [ this ]
  lea  rdx , [ __literal599 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
  jmp l4588
l4587:
  lea rcx, [ type ]
  lea rdx, [ __literal35 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4589
  lea  rcx , [ this ]
  lea  rdx , [ __literal600 ]
  lea  r8 , [ rv ]
  lea  r9 , [ value ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
  jmp l4590
l4589:
  mov dword [ tmp4591 ], 1
  lea rcx, [ type ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4592
  lea  rcx , [ type ]
  lea  rdx , [ __literal120 ]
  lea  r8 , [ tmp4591 ]
  call  __MOLD_VariantCompareEQ
l4592:
  cmp dword [ tmp4591 ], 0
  jz l4594
  lea  rcx, [ tmp4596 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4596 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4596 ]
  lea  rdx , [ value ]
  lea  rdi, [ tmp4577 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 160
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ newConst ]
  call __MOLD_VariantDestroy
  lea rcx, [ newConst ]
  lea rdx, [ tmp4577 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ newConst ]
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$0
  jmp l4595
l4594:
  lea  rcx, [ tmp4596 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal148 ]
  lea  r8 , [ tmp4596 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ type ]
  lea  rdi , [ tmp4598 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4597 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal597 ]
  lea  rdx , [ tmp4598 ]
  lea  r8 , [ tmp4597 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ tmp4596 ]
  lea  rdx , [ tmp4597 ]
  lea  rdi, [ tmp4577 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 0
  call __MOLD_VCall
  pop rdi
l4595:
l4590:
l4588:
l4580:
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4577 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4596 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newConst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4598 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore rv
  restore value
  restore type
  restore tmp4577
  restore tmp4578
  restore tmp4581
  restore tmp4583
  restore tmp4584
  restore tmp4591
  restore tmp4593
  restore tmp4596
  restore newConst
  restore tmp4597
  restore tmp4598
; -----------------------------------------------
; function __ASTTranslatorMIR1__convert$0
; -----------------------------------------------
__ASTTranslatorMIR1__convert$0:
  ; init frame
  ; ----------
  opcode EQU rbp - 24 ; 16 bytes
  tmp4605 EQU rbp - 40 ; 16 bytes
  tmp4604 EQU rbp - 56 ; 16 bytes
  tmp4603 EQU rbp - 72 ; 16 bytes
  tmp4600 EQU rbp - 76 ; 4 bytes
  tmp4599 EQU rbp - 92 ; 16 bytes
  dstTypeMIR EQU rbp - 108 ; 16 bytes
  srcTypeMIR EQU rbp - 124 ; 16 bytes
  dstType EQU rbp - 140 ; 16 bytes
  srcType EQU rbp - 156 ; 16 bytes
  unusedSrc EQU rbp - 172 ; 16 bytes
  rv EQU rbp - 188 ; 16 bytes
  this EQU rbp - 204 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ unusedSrc ]
  movdqu xmm0 , [ r9 ]
  movdqu [ srcType ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dstType ], xmm0
  mov [srcTypeMIR + Variant_t.type], VARIANT_UNDEFINED
  mov [dstTypeMIR + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4599 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4603 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4604 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4605 + Variant_t.type], VARIANT_UNDEFINED
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ srcType ]
  lea  rdi , [ tmp4599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ srcTypeMIR ]
  call __MOLD_VariantDestroy
  lea rcx, [ srcTypeMIR ]
  lea rdx, [ tmp4599 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ dstType ]
  lea  rdi , [ tmp4599 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx, [ dstTypeMIR ]
  call __MOLD_VariantDestroy
  lea rcx, [ dstTypeMIR ]
  lea rdx, [ tmp4599 ]
  call __MOLD_VariantMove
  lea rcx, [ srcTypeMIR ]
  lea rdx, [ dstTypeMIR ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4601
  lea  rcx , [ this ]
  lea  rdx , [ __literal578 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$0
  jmp l4602
l4601:
  lea  rcx, [ tmp4605 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal432 ]
  lea  rdx , [ dstTypeMIR ]
  lea  r8 , [ tmp4605 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4604 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ srcTypeMIR ]
  lea  rdx , [ tmp4605 ]
  lea  r8 , [ tmp4604 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal431 ]
  lea  rdx , [ tmp4604 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$0
l4602:

  ; clean frame
  ; -----------
  lea  rcx, [ srcTypeMIR ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dstTypeMIR ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4599 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore rv
  restore unusedSrc
  restore srcType
  restore dstType
  restore srcTypeMIR
  restore dstTypeMIR
  restore tmp4599
  restore tmp4600
  restore tmp4603
  restore tmp4604
  restore tmp4605
  restore opcode
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareEQ$0
; -----------------------------------------------
__ASTTranslatorMIR1__compareEQ$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal601 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareNEQ$0
; -----------------------------------------------
__ASTTranslatorMIR1__compareNEQ$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal602 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareLT$0
; -----------------------------------------------
__ASTTranslatorMIR1__compareLT$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal603 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareLE$0
; -----------------------------------------------
__ASTTranslatorMIR1__compareLE$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal604 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareGT$0
; -----------------------------------------------
__ASTTranslatorMIR1__compareGT$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal605 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__compareGE$0
; -----------------------------------------------
__ASTTranslatorMIR1__compareGE$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ x ]
  ; skipped unused param [ y ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal606 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore x
  restore y
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadVariable$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadVariable$0:
  ; init frame
  ; ----------
  name EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore name
; -----------------------------------------------
; function __ASTTranslatorMIR1__assign$0
; -----------------------------------------------
__ASTTranslatorMIR1__assign$0:
  ; init frame
  ; ----------
  tmp4607 EQU rbp - 24 ; 16 bytes
  tmp4606 EQU rbp - 40 ; 16 bytes
  symbolInfo EQU rbp - 56 ; 16 bytes
  unusedValue EQU rbp - 72 ; 16 bytes
  name EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  ; skipped unused param [ unusedValue ]
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4606 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4607 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4607 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4607 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4607 ]
  lea  rdx , [ name ]
  lea  rdi, [ tmp4606 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 4
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp4606 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4607 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal133 ]
  lea  r8 , [ tmp4607 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4607 ]
  lea  rdi , [ tmp4606 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_ConvertDataTypeToMIR
  pop rdi
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4606 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4606 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 161
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp4606 ]
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$0

  ; clean frame
  ; -----------
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4606 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4607 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore name
  restore unusedValue
  restore symbolInfo
  restore tmp4606
  restore tmp4607
; -----------------------------------------------
; function __ASTTranslatorMIR1__call$0
; -----------------------------------------------
__ASTTranslatorMIR1__call$0:
  ; init frame
  ; ----------
  tmp4617 EQU rbp - 12 ; 4 bytes
  tmp4616 EQU rbp - 16 ; 4 bytes
  tmp4614 EQU rbp - 32 ; 16 bytes
  tmp4611 EQU rbp - 48 ; 16 bytes
  tmp4610 EQU rbp - 52 ; 4 bytes
  tmp4609 EQU rbp - 56 ; 4 bytes
  tmp4608 EQU rbp - 72 ; 16 bytes
  name EQU rbp - 88 ; 16 bytes
  params EQU rbp - 104 ; 16 bytes
  paramsCnt EQU rbp - 120 ; 16 bytes
  unusedParams EQU rbp - 136 ; 16 bytes
  proto EQU rbp - 152 ; 16 bytes
  rv EQU rbp - 168 ; 16 bytes
  this EQU rbp - 184 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ proto ], xmm0
  ; skipped unused param [ unusedParams ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ paramsCnt ], xmm0
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4608 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4611 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4614 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ paramsCnt ]
  lea  rdi , [ tmp4608 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popParametersBeforeCall$0
  pop rdi
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4608 ]
  call __MOLD_VariantMove
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ name ]
  lea  rdi , [ tmp4608 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4610 ], 0
  mov [ tmp4611 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4610 ]
  mov [ tmp4611 + Variant_t.value], rax
  lea rcx, [ tmp4608 ]
  lea rdx, [ tmp4611 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4612
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
l4612:
l4613:
  lea  rcx, [ tmp4611 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4611 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4608 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4608 + Variant_t.value], 0
  lea  rcx, [ tmp4614 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4614 ]
  lea rdx, [ __literal102 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4611 ]
  lea  rdx , [ tmp4608 ]
  lea  r8 , [ tmp4614 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4608 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4608 + Variant_t.value], 1
  lea  rcx, [ tmp4614 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4614 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4611 ]
  lea  rdx , [ tmp4608 ]
  lea  r8 , [ tmp4614 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4608 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4608 + Variant_t.value], 2
  lea  rcx, [ tmp4614 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4614 ]
  lea rdx, [ name ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4611 ]
  lea  rdx , [ tmp4608 ]
  lea  r8 , [ tmp4614 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4608 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4608 + Variant_t.value], 3
  lea  rcx, [ tmp4614 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4614 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4611 ]
  lea  rdx , [ tmp4608 ]
  lea  r8 , [ tmp4614 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ this ]
  lea  rdx , [ tmp4611 ]
  call  __ASTTranslatorMIR1__emitOneItem$0
  mov dword [ tmp4609 ], 0
  lea  rcx, [ tmp4614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal541 ]
  lea  r8 , [ tmp4614 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4614 ]
  lea  rdi , [ tmp4611 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4610 ], 0
  mov [ tmp4614 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4610 ]
  mov [ tmp4614 + Variant_t.value], rax
  lea rcx, [ tmp4611 ]
  lea rdx, [ tmp4614 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4615
  lea  rcx, [ tmp4614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal541 ]
  lea  r8 , [ tmp4614 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4617 ], 1
  mov eax, dword [ tmp4617 ]
  mov [ tmp4611 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4611 + Variant_t.value], rax
  lea  rcx , [ tmp4614 ]
  lea  rdx , [ tmp4611 ]
  lea  r8 , [ tmp4609 ]
  call  __MOLD_VariantCompareEQ
l4615:
  cmp dword [ tmp4609 ], 0
  jz l4618
  mov dword [ tmp4610 ], 0
  lea  rcx, [ tmp4611 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  lea  rdx , [ tmp4610 ]
  lea  r8 , [ tmp4611 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp4611 ]
  call  __ASTTranslatorMIR1_push$0
  jmp l4619
l4618:
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$0
l4619:

  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4608 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4611 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4614 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore rv
  restore proto
  restore unusedParams
  restore paramsCnt
  restore params
  restore name
  restore tmp4608
  restore tmp4609
  restore tmp4610
  restore tmp4611
  restore tmp4614
  restore tmp4616
  restore tmp4617
; -----------------------------------------------
; function __ASTTranslatorMIR1__syscall$0
; -----------------------------------------------
__ASTTranslatorMIR1__syscall$0:
  ; init frame
  ; ----------
  tmp4622 EQU rbp - 24 ; 16 bytes
  tmp4621 EQU rbp - 40 ; 16 bytes
  tmp4620 EQU rbp - 56 ; 16 bytes
  params EQU rbp - 72 ; 16 bytes
  paramsCnt EQU rbp - 88 ; 16 bytes
  unusedParams EQU rbp - 104 ; 16 bytes
  id EQU rbp - 120 ; 16 bytes
  rv EQU rbp - 136 ; 16 bytes
  this EQU rbp - 152 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ id ], xmm0
  ; skipped unused param [ unusedParams ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ paramsCnt ], xmm0
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4620 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4621 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4622 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ paramsCnt ]
  lea  rdi , [ tmp4620 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popParametersBeforeCall$0
  pop rdi
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4620 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4620 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4621 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4621 + Variant_t.value], 0
  lea  rcx, [ tmp4622 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4622 ]
  lea rdx, [ __literal607 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4620 ]
  lea  rdx , [ tmp4621 ]
  lea  r8 , [ tmp4622 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4621 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4621 + Variant_t.value], 1
  lea  rcx, [ tmp4622 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4622 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4620 ]
  lea  rdx , [ tmp4621 ]
  lea  r8 , [ tmp4622 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4621 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4621 + Variant_t.value], 2
  lea  rcx, [ tmp4622 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4622 ]
  lea rdx, [ id ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4620 ]
  lea  rdx , [ tmp4621 ]
  lea  r8 , [ tmp4622 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4621 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4621 + Variant_t.value], 3
  lea  rcx, [ tmp4622 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4622 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4620 ]
  lea  rdx , [ tmp4621 ]
  lea  r8 , [ tmp4622 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ this ]
  lea  rdx , [ tmp4620 ]
  call  __ASTTranslatorMIR1__emitOneItem$0
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4620 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4621 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4622 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore rv
  restore id
  restore unusedParams
  restore paramsCnt
  restore params
  restore tmp4620
  restore tmp4621
  restore tmp4622
; -----------------------------------------------
; function __ASTTranslatorMIR1__callPrint$0
; -----------------------------------------------
__ASTTranslatorMIR1__callPrint$0:
  ; init frame
  ; ----------
  tmp4623 EQU rbp - 24 ; 16 bytes
  params EQU rbp - 40 ; 16 bytes
  paramsCnt EQU rbp - 56 ; 16 bytes
  unusedParams EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedParams ]
  movdqu xmm0 , [ r8 ]
  movdqu [ paramsCnt ], xmm0
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4623 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ paramsCnt ]
  lea  rdi , [ tmp4623 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popParametersBeforeCall$0
  pop rdi
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4623 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ __literal608 ]
  lea  r8 , [ params ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0

  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4623 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore unusedParams
  restore paramsCnt
  restore params
  restore tmp4623
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadFromIndex$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadFromIndex$0:
  ; init frame
  ; ----------
  unusedIdx EQU rbp - 24 ; 16 bytes
  unusedBox EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal609 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore unusedBox
  restore unusedIdx
; -----------------------------------------------
; function __ASTTranslatorMIR1__loadFromKey$0
; -----------------------------------------------
__ASTTranslatorMIR1__loadFromKey$0:
  ; init frame
  ; ----------
  unusedKey EQU rbp - 24 ; 16 bytes
  unusedBox EQU rbp - 40 ; 16 bytes
  rv EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal610 ]
  lea  r8 , [ rv ]
  call  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore rv
  restore unusedBox
  restore unusedKey
; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtIndex$0
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtIndex$0:
  ; init frame
  ; ----------
  tmp4624 EQU rbp - 24 ; 16 bytes
  box EQU rbp - 40 ; 16 bytes
  idx EQU rbp - 56 ; 16 bytes
  val EQU rbp - 72 ; 16 bytes
  unusedValue EQU rbp - 88 ; 16 bytes
  unusedIdx EQU rbp - 104 ; 16 bytes
  unusedBox EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  mov [val + Variant_t.type], VARIANT_UNDEFINED
  mov [idx + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4624 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4624 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp4624 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4624 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea rcx, [ idx ]
  lea rdx, [ tmp4624 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4624 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4624 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ __literal611 ]
  lea  r8 , [ box ]
  lea  r9 , [ idx ]
  lea  rax , [ val ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$0
  add rsp, 8
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4624 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedIdx
  restore unusedValue
  restore val
  restore idx
  restore box
  restore tmp4624
; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtKey$0
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtKey$0:
  ; init frame
  ; ----------
  tmp4625 EQU rbp - 24 ; 16 bytes
  box EQU rbp - 40 ; 16 bytes
  key EQU rbp - 56 ; 16 bytes
  val EQU rbp - 72 ; 16 bytes
  unusedValue EQU rbp - 88 ; 16 bytes
  unusedKey EQU rbp - 104 ; 16 bytes
  unusedBox EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  mov [val + Variant_t.type], VARIANT_UNDEFINED
  mov [key + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4625 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4625 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp4625 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4625 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp4625 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4625 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4625 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ __literal612 ]
  lea  r8 , [ box ]
  lea  r9 , [ key ]
  lea  rax , [ val ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$0
  add rsp, 8
  lea  rcx , [ this ]
  lea  rdx , [ box ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4625 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedKey
  restore unusedValue
  restore val
  restore key
  restore box
  restore tmp4625
; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtIndexAndDrop$0
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtIndexAndDrop$0:
  ; init frame
  ; ----------
  tmp4626 EQU rbp - 24 ; 16 bytes
  box EQU rbp - 40 ; 16 bytes
  idx EQU rbp - 56 ; 16 bytes
  val EQU rbp - 72 ; 16 bytes
  unusedValue EQU rbp - 88 ; 16 bytes
  unusedIdx EQU rbp - 104 ; 16 bytes
  unusedBox EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedIdx ]
  ; skipped unused param [ unusedValue ]
  mov [val + Variant_t.type], VARIANT_UNDEFINED
  mov [idx + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4626 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4626 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp4626 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4626 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea rcx, [ idx ]
  lea rdx, [ tmp4626 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4626 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4626 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ __literal611 ]
  lea  r8 , [ box ]
  lea  r9 , [ idx ]
  lea  rax , [ val ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$0
  add rsp, 8

  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ idx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4626 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedIdx
  restore unusedValue
  restore val
  restore idx
  restore box
  restore tmp4626
; -----------------------------------------------
; function __ASTTranslatorMIR1__storeAtKeyAndDrop$0
; -----------------------------------------------
__ASTTranslatorMIR1__storeAtKeyAndDrop$0:
  ; init frame
  ; ----------
  tmp4627 EQU rbp - 24 ; 16 bytes
  box EQU rbp - 40 ; 16 bytes
  key EQU rbp - 56 ; 16 bytes
  val EQU rbp - 72 ; 16 bytes
  unusedValue EQU rbp - 88 ; 16 bytes
  unusedKey EQU rbp - 104 ; 16 bytes
  unusedBox EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ unusedBox ]
  ; skipped unused param [ unusedKey ]
  ; skipped unused param [ unusedValue ]
  mov [val + Variant_t.type], VARIANT_UNDEFINED
  mov [key + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4627 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4627 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp4627 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4627 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp4627 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi , [ tmp4627 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popForRead$0
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp4627 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ __literal612 ]
  lea  r8 , [ box ]
  lea  r9 , [ key ]
  lea  rax , [ val ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$0
  add rsp, 8

  ; clean frame
  ; -----------
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4627 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore unusedBox
  restore unusedKey
  restore unusedValue
  restore val
  restore key
  restore box
  restore tmp4627
; -----------------------------------------------
; function __ASTTranslatorMIR1__createObject$0
; -----------------------------------------------
__ASTTranslatorMIR1__createObject$0:
  ; init frame
  ; ----------
  tmp4631 EQU rbp - 24 ; 16 bytes
  tmp4630 EQU rbp - 28 ; 4 bytes
  tmp4629 EQU rbp - 44 ; 16 bytes
  tmp4628 EQU rbp - 48 ; 4 bytes
  classProto EQU rbp - 64 ; 16 bytes
  rv EQU rbp - 80 ; 16 bytes
  this EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  mov [tmp4629 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4631 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ classProto ]
  lea  rdi , [ tmp4629 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4630 ], 0
  mov [ tmp4631 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4630 ]
  mov [ tmp4631 + Variant_t.value], rax
  lea rcx, [ tmp4629 ]
  lea rdx, [ tmp4631 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4632
  lea  rcx , [ this ]
  lea  rdx , [ __literal613 ]
  call  __ASTTranslator__error$0
  jmp l4633
l4632:
  lea  rcx, [ tmp4631 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4631 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal614 ]
  lea  r8 , [ rv ]
  lea  r9 , [ tmp4631 ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$0
l4633:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4629 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4631 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore rv
  restore classProto
  restore tmp4628
  restore tmp4629
  restore tmp4630
  restore tmp4631
; -----------------------------------------------
; function __ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$0
; -----------------------------------------------
__ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$0:
  ; init frame
  ; ----------
  tmp4636 EQU rbp - 12 ; 4 bytes
  tmp4635 EQU rbp - 28 ; 16 bytes
  tmp4634 EQU rbp - 44 ; 16 bytes
  y EQU rbp - 60 ; 16 bytes
  x EQU rbp - 76 ; 16 bytes
  endLabel EQU rbp - 92 ; 16 bytes
  rightAst EQU rbp - 108 ; 16 bytes
  leftAst EQU rbp - 124 ; 16 bytes
  rv EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  mov [endLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4634 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4635 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4635 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4635 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4635 ]
  lea  rdi, [ tmp4634 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabel ]
  lea rdx, [ tmp4634 ]
  call __MOLD_VariantMove
  mov dword [ tmp4636 ], 0
  mov eax, dword [ tmp4636 ]
  mov [ tmp4634 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4634 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4634 ]
  call  __ASTTranslatorMIR1__loadImm$0
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ leftAst ]
  lea  rdi , [ tmp4634 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4634 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4634 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 161
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal615 ]
  lea  r8 , [ endLabel ]
  lea  r9 , [ tmp4634 ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ x ]
  call  __ASTTranslator__releaseTempVar$0
  lea  rcx, [ tmp4635 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4635 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4635 ]
  lea  rdx , [ rv ]
  lea  r8 , [ __literal160 ]
  lea  rdi, [ tmp4634 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 57
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rightAst ]
  lea  rdi , [ tmp4634 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea rcx, [ y ]
  lea rdx, [ tmp4634 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  call  __ASTTranslatorMIR1_emitMoveBackVariant$0
  lea  rcx , [ this ]
  lea  rdx , [ endLabel ]
  call  __ASTTranslatorMIR1_emitLabel$0
  lea  rcx , [ this ]
  lea  rdx , [ y ]
  call  __ASTTranslator__releaseTempVar$0

  ; clean frame
  ; -----------
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4634 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4635 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore endLabel
  restore x
  restore y
  restore tmp4634
  restore tmp4635
  restore tmp4636
; -----------------------------------------------
; function __ASTTranslatorMIR1__evaluateNodeLazyBoolOr$0
; -----------------------------------------------
__ASTTranslatorMIR1__evaluateNodeLazyBoolOr$0:
  ; init frame
  ; ----------
  tmp4639 EQU rbp - 12 ; 4 bytes
  tmp4638 EQU rbp - 28 ; 16 bytes
  tmp4637 EQU rbp - 44 ; 16 bytes
  y EQU rbp - 60 ; 16 bytes
  x EQU rbp - 76 ; 16 bytes
  endLabel EQU rbp - 92 ; 16 bytes
  rightAst EQU rbp - 108 ; 16 bytes
  leftAst EQU rbp - 124 ; 16 bytes
  rv EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ leftAst ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ rightAst ], xmm0
  mov [endLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4637 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4638 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4638 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4638 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4638 ]
  lea  rdi, [ tmp4637 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabel ]
  lea rdx, [ tmp4637 ]
  call __MOLD_VariantMove
  mov dword [ tmp4639 ], 1
  mov eax, dword [ tmp4639 ]
  mov [ tmp4637 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4637 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  lea  r8 , [ tmp4637 ]
  call  __ASTTranslatorMIR1__loadImm$0
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ leftAst ]
  lea  rdi , [ tmp4637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea rcx, [ x ]
  lea rdx, [ tmp4637 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4637 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 161
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal616 ]
  lea  r8 , [ endLabel ]
  lea  r9 , [ tmp4637 ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ x ]
  call  __ASTTranslator__releaseTempVar$0
  lea  rcx, [ tmp4638 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4638 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4638 ]
  lea  rdx , [ rv ]
  lea  r8 , [ __literal160 ]
  lea  rdi, [ tmp4637 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 57
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ rightAst ]
  lea  rdi , [ tmp4637 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea rcx, [ y ]
  lea rdx, [ tmp4637 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  call  __ASTTranslatorMIR1_emitMoveBackVariant$0
  lea  rcx , [ this ]
  lea  rdx , [ endLabel ]
  call  __ASTTranslatorMIR1_emitLabel$0
  lea  rcx , [ this ]
  lea  rdx , [ y ]
  call  __ASTTranslator__releaseTempVar$0

  ; clean frame
  ; -----------
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4637 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4638 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore rv
  restore leftAst
  restore rightAst
  restore endLabel
  restore x
  restore y
  restore tmp4637
  restore tmp4638
  restore tmp4639
; -----------------------------------------------
; function __ASTTranslatorMIR1__invokeMethod$0
; -----------------------------------------------
__ASTTranslatorMIR1__invokeMethod$0:
  ; init frame
  ; ----------
  tmp4644 EQU rbp - 12 ; 4 bytes
  tmp4643 EQU rbp - 16 ; 4 bytes
  tmp4642 EQU rbp - 32 ; 16 bytes
  tmp4641 EQU rbp - 48 ; 16 bytes
  tmp4640 EQU rbp - 64 ; 16 bytes
  params EQU rbp - 80 ; 16 bytes
  methodId EQU rbp - 96 ; 16 bytes
  paramsCnt EQU rbp - 112 ; 16 bytes
  unusedParams EQU rbp - 128 ; 16 bytes
  methodName EQU rbp - 144 ; 16 bytes
  rv EQU rbp - 160 ; 16 bytes
  this EQU rbp - 176 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ rv ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ methodName ], xmm0
  ; skipped unused param [ unusedParams ]
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ paramsCnt ], xmm0
  mov [methodId + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4640 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4641 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4642 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4642 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4642 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4641 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4642 ]
  lea  rdx , [ __literal378 ]
  lea  r8 , [ tmp4641 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4641 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ methodId ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ methodId ]
  lea  rdi , [ tmp4640 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4644 ], 0
  mov [ tmp4641 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4644 ]
  mov [ tmp4641 + Variant_t.value], rax
  lea rcx, [ tmp4640 ]
  lea rdx, [ tmp4641 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4645
  lea  rcx, [ tmp4640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4640 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4640 ]
  lea  rdx , [ methodName ]
  lea  rdi, [ tmp4641 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 162
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  lea rcx, [ methodId ]
  lea rdx, [ tmp4641 ]
  call __MOLD_VariantMove
l4645:
l4646:
  lea  rcx, [ tmp4642 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal573 ]
  lea  r8 , [ tmp4642 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4642 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp4640 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4640 ]
  lea  rdi , [ tmp4641 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4644 ], 0
  mov [ tmp4640 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4644 ]
  mov [ tmp4640 + Variant_t.value], rax
  lea rcx, [ tmp4641 ]
  lea rdx, [ tmp4640 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4647
  lea  rcx, [ tmp4640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4640 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4640 ]
  lea  rdx , [ methodName ]
  mov eax,  50
  call  __MOLD_SysCall
l4647:
l4648:
  lea  rcx, [ tmp4640 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal573 ]
  lea  r8 , [ tmp4640 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4643 ], 1
  mov eax, dword [ tmp4643 ]
  mov [ tmp4641 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4641 + Variant_t.value], rax
  lea  rcx , [ tmp4640 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp4641 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ paramsCnt ]
  lea  rdi , [ tmp4641 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_popParametersBeforeCall$0
  pop rdi
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4641 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4641 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4641 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4640 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4640 + Variant_t.value], 0
  lea  rcx, [ tmp4642 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4642 ]
  lea rdx, [ __literal104 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4641 ]
  lea  rdx , [ tmp4640 ]
  lea  r8 , [ tmp4642 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4640 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4640 + Variant_t.value], 1
  lea  rcx, [ tmp4642 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4642 ]
  lea rdx, [ rv ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4641 ]
  lea  rdx , [ tmp4640 ]
  lea  r8 , [ tmp4642 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4640 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4640 + Variant_t.value], 2
  lea  rcx, [ tmp4642 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4642 ]
  lea rdx, [ methodId ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4641 ]
  lea  rdx , [ tmp4640 ]
  lea  r8 , [ tmp4642 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4640 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4640 + Variant_t.value], 3
  lea  rcx, [ tmp4642 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4642 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4641 ]
  lea  rdx , [ tmp4640 ]
  lea  r8 , [ tmp4642 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ this ]
  lea  rdx , [ tmp4641 ]
  call  __ASTTranslatorMIR1__emitOneItem$0
  lea  rcx , [ this ]
  lea  rdx , [ rv ]
  call  __ASTTranslatorMIR1_push$0

  ; clean frame
  ; -----------
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4640 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4641 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4642 ]
  call __MOLD_VariantDestroy

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore rv
  restore methodName
  restore unusedParams
  restore paramsCnt
  restore methodId
  restore params
  restore tmp4640
  restore tmp4641
  restore tmp4642
  restore tmp4643
  restore tmp4644
; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeFor$0
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeFor$0:
  ; init frame
  ; ----------
  tmp4661 EQU rbp - 24 ; 16 bytes
  tmp4660 EQU rbp - 40 ; 16 bytes
  tmp4659 EQU rbp - 56 ; 16 bytes
  oneChild EQU rbp - 72 ; 16 bytes
  tmp4656 EQU rbp - 88 ; 16 bytes
  tmp4655 EQU rbp - 104 ; 16 bytes
  tmp4654 EQU rbp - 120 ; 16 bytes
  tmp4653 EQU rbp - 136 ; 16 bytes
  tmp4652 EQU rbp - 152 ; 16 bytes
  tmp4651 EQU rbp - 168 ; 16 bytes
  tmp4650 EQU rbp - 184 ; 16 bytes
  tmp4649 EQU rbp - 200 ; 16 bytes
  __cse44 EQU rbp - 216 ; 16 bytes
  labelForEnd EQU rbp - 232 ; 16 bytes
  labelForBegin EQU rbp - 248 ; 16 bytes
  bodyAst EQU rbp - 264 ; 16 bytes
  idxStep EQU rbp - 280 ; 16 bytes
  idxEnd EQU rbp - 296 ; 16 bytes
  idxStart EQU rbp - 312 ; 16 bytes
  iterName EQU rbp - 328 ; 16 bytes
  this EQU rbp - 344 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 384

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iterName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ idxStart ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ idxEnd ], xmm0
  mov    rax, [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ idxStep ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ bodyAst ], xmm0
  mov [labelForBegin + Variant_t.type], VARIANT_UNDEFINED
  mov [labelForEnd + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse44 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4649 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4650 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4651 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4652 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4653 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4654 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4655 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4656 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [tmp4659 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4660 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4661 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse44 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ __cse44 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse44 ]
  lea  rdi, [ tmp4649 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ labelForBegin ]
  call __MOLD_VariantDestroy
  lea rcx, [ labelForBegin ]
  lea rdx, [ tmp4649 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ __cse44 ]
  lea  rdi, [ tmp4649 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ labelForEnd ]
  call __MOLD_VariantDestroy
  lea rcx, [ labelForEnd ]
  lea rdx, [ tmp4649 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ iterName ]
  lea  r8 , [ idxStart ]
  call  __ASTTranslatorMIR1_emitMoveVariantOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal617 ]
  call  __ASTTranslatorMIR1_emitComment$0
  push rdi
  lea  rcx , [ iterName ]
  lea  rdi , [ tmp4649 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ idxStart ]
  lea  rdi , [ tmp4654 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ idxEnd ]
  lea  rdi , [ tmp4656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4655 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal437 ]
  lea  rdx , [ tmp4656 ]
  lea  r8 , [ tmp4655 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4654 ]
  lea  rdx , [ tmp4655 ]
  lea  r8 , [ tmp4653 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4652 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal436 ]
  lea  rdx , [ tmp4653 ]
  lea  r8 , [ tmp4652 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4651 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4649 ]
  lea  rdx , [ tmp4652 ]
  lea  r8 , [ tmp4651 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4650 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal618 ]
  lea  rdx , [ tmp4651 ]
  lea  r8 , [ tmp4650 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4650 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ labelForBegin ]
  call  __ASTTranslatorMIR1_emitLabel$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal619 ]
  lea  r8 , [ labelForEnd ]
  lea  r9 , [ iterName ]
  lea  rax , [ idxEnd ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$0
  add rsp, 8
  lea  rcx, [ tmp4649 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ bodyAst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4649 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values oneChild
;
  jmp l4658
l4657:
  lea  rcx , [ this ]
  lea  rdx , [ oneChild ]
  call  __ASTTranslator__executeNode$0
  ret
l4658:
  lea  rcx , [ tmp4649 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneChild ]
  lea  r9 , [ l4657 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneChild
; -----------------------------
;
  lea  rcx , [ this ]
  lea  rdx , [ __literal584 ]
  lea  r8 , [ iterName ]
  lea  r9 , [ iterName ]
  lea  rax , [ idxStep ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$0
  add rsp, 8
  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ labelForBegin ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ labelForEnd ]
  call  __ASTTranslatorMIR1_emitLabel$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0
  push rdi
  lea  rcx , [ iterName ]
  lea  rdi , [ tmp4649 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ idxStart ]
  lea  rdi , [ tmp4654 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ idxEnd ]
  lea  rdi , [ tmp4656 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ idxStep ]
  lea  rdi , [ tmp4661 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4660 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal621 ]
  lea  rdx , [ tmp4661 ]
  lea  r8 , [ tmp4660 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4659 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4656 ]
  lea  rdx , [ tmp4660 ]
  lea  r8 , [ tmp4659 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4655 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal437 ]
  lea  rdx , [ tmp4659 ]
  lea  r8 , [ tmp4655 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4653 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4654 ]
  lea  rdx , [ tmp4655 ]
  lea  r8 , [ tmp4653 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4652 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal436 ]
  lea  rdx , [ tmp4653 ]
  lea  r8 , [ tmp4652 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4651 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4649 ]
  lea  rdx , [ tmp4652 ]
  lea  r8 , [ tmp4651 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4650 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal620 ]
  lea  rdx , [ tmp4651 ]
  lea  r8 , [ tmp4650 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4650 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal617 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0

  ; clean frame
  ; -----------
  lea  rcx, [ labelForBegin ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelForEnd ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse44 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4649 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4654 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4656 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneChild
  lea  rcx, [ tmp4661 ]
  call __MOLD_VariantDestroy

  add  rsp, 384
  pop  rbp
  ret

  restore this
  restore iterName
  restore idxStart
  restore idxEnd
  restore idxStep
  restore bodyAst
  restore labelForBegin
  restore labelForEnd
  restore __cse44
  restore tmp4649
  restore tmp4650
  restore tmp4651
  restore tmp4652
  restore tmp4653
  restore tmp4654
  restore tmp4655
  restore tmp4656
  restore oneChild
  restore tmp4659
  restore tmp4660
  restore tmp4661
; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeForEach$0
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeForEach$0:
  ; init frame
  ; ----------
  tmp4674 EQU rbp - 24 ; 16 bytes
  tmp4673 EQU rbp - 40 ; 16 bytes
  tmp4668 EQU rbp - 44 ; 4 bytes
  tmp4667 EQU rbp - 48 ; 4 bytes
  tmp4666 EQU rbp - 64 ; 16 bytes
  tmp4665 EQU rbp - 80 ; 16 bytes
  tmp4664 EQU rbp - 96 ; 16 bytes
  tmp4663 EQU rbp - 112 ; 16 bytes
  tmp4662 EQU rbp - 128 ; 16 bytes
  __cse45 EQU rbp - 144 ; 16 bytes
  params EQU rbp - 160 ; 16 bytes
  labelForEnd EQU rbp - 176 ; 16 bytes
  labelForBegin EQU rbp - 192 ; 16 bytes
  bodyAst EQU rbp - 208 ; 16 bytes
  box EQU rbp - 224 ; 16 bytes
  iteratorValue EQU rbp - 240 ; 16 bytes
  iteratorKey EQU rbp - 256 ; 16 bytes
  this EQU rbp - 272 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 304

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ iteratorKey ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ iteratorValue ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ box ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ bodyAst ], xmm0
  mov [labelForBegin + Variant_t.type], VARIANT_UNDEFINED
  mov [labelForEnd + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse45 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4662 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4663 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4664 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4665 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4666 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4673 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4674 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse45 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ __cse45 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse45 ]
  lea  rdi, [ tmp4662 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ labelForBegin ]
  call __MOLD_VariantDestroy
  lea rcx, [ labelForBegin ]
  lea rdx, [ tmp4662 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ __cse45 ]
  lea  rdi, [ tmp4662 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ labelForEnd ]
  call __MOLD_VariantDestroy
  lea rcx, [ labelForEnd ]
  lea rdx, [ tmp4662 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal617 ]
  call  __ASTTranslatorMIR1_emitComment$0
  push rdi
  lea  rcx , [ iteratorKey ]
  lea  rdi , [ tmp4662 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ iteratorValue ]
  lea  rdi , [ tmp4666 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4665 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal623 ]
  lea  rdx , [ tmp4666 ]
  lea  r8 , [ tmp4665 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4664 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4662 ]
  lea  rdx , [ tmp4665 ]
  lea  r8 , [ tmp4664 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4663 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal622 ]
  lea  rdx , [ tmp4664 ]
  lea  r8 , [ tmp4663 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4663 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal576 ]
  lea  r8 , [ labelForEnd ]
  call  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ labelForBegin ]
  call  __ASTTranslatorMIR1_emitLabel$0
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  call  __ASTTranslator__executeNode$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal624 ]
  call  __ASTTranslatorMIR1_emitZeroArgsOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ labelForEnd ]
  call  __ASTTranslatorMIR1_emitLabel$0
  push rdi
  lea  rcx , [ iteratorKey ]
  lea  rdi , [ tmp4662 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4668 ], 0
  mov [ tmp4666 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4668 ]
  mov [ tmp4666 + Variant_t.value], rax
  lea rcx, [ tmp4662 ]
  lea rdx, [ tmp4666 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4669
  lea rcx, [ iteratorKey ]
  lea rdx, [ __literal625 ]
  call __MOLD_VariantMove
l4669:
l4670:
  push rdi
  lea  rcx , [ iteratorValue ]
  lea  rdi , [ tmp4666 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4668 ], 0
  mov [ tmp4662 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4668 ]
  mov [ tmp4662 + Variant_t.value], rax
  lea rcx, [ tmp4666 ]
  lea rdx, [ tmp4662 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4671
  lea rcx, [ iteratorValue ]
  lea rdx, [ __literal625 ]
  call __MOLD_VariantMove
l4671:
l4672:
  lea  rcx, [ tmp4662 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4662 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4666 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4666 + Variant_t.value], 0
  lea  rcx, [ tmp4673 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4673 ]
  lea rdx, [ box ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4662 ]
  lea  rdx , [ tmp4666 ]
  lea  r8 , [ tmp4673 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4666 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4666 + Variant_t.value], 1
  lea  rcx, [ tmp4673 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4673 ]
  lea rdx, [ iteratorKey ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4662 ]
  lea  rdx , [ tmp4666 ]
  lea  r8 , [ tmp4673 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4666 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4666 + Variant_t.value], 2
  lea  rcx, [ tmp4673 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4673 ]
  lea rdx, [ iteratorValue ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4662 ]
  lea  rdx , [ tmp4666 ]
  lea  r8 , [ tmp4673 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4666 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4666 + Variant_t.value], 3
  lea  rcx, [ tmp4673 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4673 ]
  lea rdx, [ labelForBegin ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4662 ]
  lea  rdx , [ tmp4666 ]
  lea  r8 , [ tmp4673 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ tmp4662 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4662 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4662 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4673 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4673 + Variant_t.value], 0
  lea  rcx, [ tmp4666 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4666 ]
  lea rdx, [ __literal102 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4662 ]
  lea  rdx , [ tmp4673 ]
  lea  r8 , [ tmp4666 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4673 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4673 + Variant_t.value], 1
  lea  rcx, [ tmp4666 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4662 ]
  lea  rdx , [ tmp4673 ]
  lea  r8 , [ tmp4666 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4673 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4673 + Variant_t.value], 2
  lea  rcx, [ tmp4666 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4666 ]
  lea rdx, [ __literal626 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4662 ]
  lea  rdx , [ tmp4673 ]
  lea  r8 , [ tmp4666 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4673 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4673 + Variant_t.value], 3
  lea  rcx, [ tmp4666 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4666 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4662 ]
  lea  rdx , [ tmp4673 ]
  lea  r8 , [ tmp4666 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ this ]
  lea  rdx , [ tmp4662 ]
  call  __ASTTranslatorMIR1__emitOneItem$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0
  push rdi
  lea  rcx , [ iteratorKey ]
  lea  rdi , [ tmp4662 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ iteratorValue ]
  lea  rdi , [ tmp4666 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4665 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal623 ]
  lea  rdx , [ tmp4666 ]
  lea  r8 , [ tmp4665 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4664 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4662 ]
  lea  rdx , [ tmp4665 ]
  lea  r8 , [ tmp4664 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4663 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal627 ]
  lea  rdx , [ tmp4664 ]
  lea  r8 , [ tmp4663 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4663 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal617 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0

  ; clean frame
  ; -----------
  lea  rcx, [ labelForBegin ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labelForEnd ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse45 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4662 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4666 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4673 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4674 ]
  call __MOLD_VariantDestroy

  add  rsp, 304
  pop  rbp
  ret

  restore this
  restore iteratorKey
  restore iteratorValue
  restore box
  restore bodyAst
  restore labelForBegin
  restore labelForEnd
  restore params
  restore __cse45
  restore tmp4662
  restore tmp4663
  restore tmp4664
  restore tmp4665
  restore tmp4666
  restore tmp4667
  restore tmp4668
  restore tmp4673
  restore tmp4674
; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeWhile$0
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeWhile$0:
  ; init frame
  ; ----------
  tmp4675 EQU rbp - 24 ; 16 bytes
  __cse46 EQU rbp - 40 ; 16 bytes
  cond EQU rbp - 56 ; 16 bytes
  endLabel EQU rbp - 72 ; 16 bytes
  loopLabel EQU rbp - 88 ; 16 bytes
  bodyAst EQU rbp - 104 ; 16 bytes
  condAst EQU rbp - 120 ; 16 bytes
  this EQU rbp - 136 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ condAst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ bodyAst ], xmm0
  mov [loopLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [cond + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse46 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4675 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse46 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ __cse46 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse46 ]
  lea  rdi, [ tmp4675 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ loopLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ loopLabel ]
  lea rdx, [ tmp4675 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ __cse46 ]
  lea  rdi, [ tmp4675 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabel ]
  lea rdx, [ tmp4675 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal617 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal628 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ loopLabel ]
  call  __ASTTranslatorMIR1_emitLabel$0
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ condAst ]
  lea  rdi , [ tmp4675 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea rcx, [ cond ]
  lea rdx, [ tmp4675 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4675 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 161
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal615 ]
  lea  r8 , [ endLabel ]
  lea  r9 , [ tmp4675 ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ bodyAst ]
  call  __ASTTranslator__executeNode$0
  lea  rcx , [ this ]
  lea  rdx , [ loopLabel ]
  call  __ASTTranslatorMIR1_emitJmp$0
  lea  rcx , [ this ]
  lea  rdx , [ endLabel ]
  call  __ASTTranslatorMIR1_emitLabel$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal629 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal617 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal6 ]
  call  __ASTTranslatorMIR1_emitComment$0

  ; clean frame
  ; -----------
  lea  rcx, [ loopLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ cond ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse46 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4675 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore condAst
  restore bodyAst
  restore loopLabel
  restore endLabel
  restore cond
  restore __cse46
  restore tmp4675
; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeIf$0
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeIf$0:
  ; init frame
  ; ----------
  tmp4679 EQU rbp - 24 ; 16 bytes
  tmp4678 EQU rbp - 28 ; 4 bytes
  tmp4677 EQU rbp - 32 ; 4 bytes
  tmp4676 EQU rbp - 48 ; 16 bytes
  __cse47 EQU rbp - 64 ; 16 bytes
  endLabel EQU rbp - 80 ; 16 bytes
  falseLabel EQU rbp - 96 ; 16 bytes
  codeIfFalse EQU rbp - 112 ; 16 bytes
  codeIfTrue EQU rbp - 128 ; 16 bytes
  cond EQU rbp - 144 ; 16 bytes
  this EQU rbp - 160 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ cond ]
  movdqu xmm0 , [ r8 ]
  movdqu [ codeIfTrue ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ codeIfFalse ], xmm0
  mov [falseLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [endLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse47 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4676 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4679 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ __cse47 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ __cse47 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse47 ]
  lea  rdi, [ tmp4676 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ falseLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ falseLabel ]
  lea rdx, [ tmp4676 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ __cse47 ]
  lea  rdi, [ tmp4676 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ endLabel ]
  lea rdx, [ tmp4676 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdi, [ tmp4676 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 161
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal615 ]
  lea  r8 , [ falseLabel ]
  lea  r9 , [ tmp4676 ]
  call  __ASTTranslatorMIR1_emitOneArgOpcode$0
  lea  rcx , [ this ]
  lea  rdx , [ codeIfTrue ]
  call  __ASTTranslator__executeNode$0
  push rdi
  lea  rcx , [ codeIfFalse ]
  lea  rdi , [ tmp4676 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4678 ], 0
  mov [ tmp4679 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4678 ]
  mov [ tmp4679 + Variant_t.value], rax
  lea rcx, [ tmp4676 ]
  lea rdx, [ tmp4679 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4680
  lea  rcx , [ this ]
  lea  rdx , [ endLabel ]
  call  __ASTTranslatorMIR1_emitJmp$0
  lea  rcx , [ this ]
  lea  rdx , [ falseLabel ]
  call  __ASTTranslatorMIR1_emitLabel$0
  lea  rcx , [ this ]
  lea  rdx , [ codeIfFalse ]
  call  __ASTTranslator__executeNode$0
  jmp l4681
l4680:
  lea  rcx , [ this ]
  lea  rdx , [ falseLabel ]
  call  __ASTTranslatorMIR1_emitLabel$0
l4681:
  lea  rcx , [ this ]
  lea  rdx , [ endLabel ]
  call  __ASTTranslatorMIR1_emitLabel$0

  ; clean frame
  ; -----------
  lea  rcx, [ falseLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ endLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse47 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4676 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4679 ]
  call __MOLD_VariantDestroy

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore cond
  restore codeIfTrue
  restore codeIfFalse
  restore falseLabel
  restore endLabel
  restore __cse47
  restore tmp4676
  restore tmp4677
  restore tmp4678
  restore tmp4679
; -----------------------------------------------
; function __ASTTranslatorMIR1__executeNodeSwitch$0
; -----------------------------------------------
__ASTTranslatorMIR1__executeNodeSwitch$0:
  ; init frame
  ; ----------
  oneValue EQU rbp - 24 ; 16 bytes
  caseLabel EQU rbp - 40 ; 16 bytes
  arrayOfValues EQU rbp - 56 ; 16 bytes
  idx EQU rbp - 60 ; 4 bytes
  tmp4695 EQU rbp - 64 ; 4 bytes
  tmp4694 EQU rbp - 68 ; 4 bytes
  tmp4693 EQU rbp - 72 ; 4 bytes
  tmp4690 EQU rbp - 76 ; 4 bytes
  tmp4689 EQU rbp - 80 ; 4 bytes
  tmp4686 EQU rbp - 84 ; 4 bytes
  tmp4685 EQU rbp - 88 ; 4 bytes
  tmp4684 EQU rbp - 92 ; 4 bytes
  tmp4683 EQU rbp - 108 ; 16 bytes
  tmp4682 EQU rbp - 124 ; 16 bytes
  __cse48 EQU rbp - 140 ; 16 bytes
  caseDefaultIdx EQU rbp - 144 ; 4 bytes
  symbolInfo EQU rbp - 160 ; 16 bytes
  jmpTable EQU rbp - 176 ; 16 bytes
  defaultLabel EQU rbp - 192 ; 16 bytes
  doneLabel EQU rbp - 208 ; 16 bytes
  varName EQU rbp - 224 ; 16 bytes
  childrenCnt EQU rbp - 240 ; 16 bytes
  children EQU rbp - 256 ; 16 bytes
  node EQU rbp - 272 ; 16 bytes
  this EQU rbp - 288 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 320

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ node ], xmm0
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [childrenCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [varName + Variant_t.type], VARIANT_UNDEFINED
  mov [doneLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [defaultLabel + Variant_t.type], VARIANT_UNDEFINED
  mov [jmpTable + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse48 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4682 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4683 + Variant_t.type], VARIANT_UNDEFINED
  mov [arrayOfValues + Variant_t.type], VARIANT_UNDEFINED
  mov [caseLabel + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ children ]
  lea  rdi , [ childrenCnt ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4684 ], 0
  lea  rcx, [ tmp4683 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4684 ]
  lea  r8 , [ tmp4683 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4683 ]
  lea  rdi , [ tmp4682 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslator__evaluateNode$0
  pop rdi
  lea  rcx, [ varName ]
  call __MOLD_VariantDestroy
  lea rcx, [ varName ]
  lea rdx, [ tmp4682 ]
  call __MOLD_VariantMove
  lea  rcx, [ __cse48 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ __cse48 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ __cse48 ]
  lea  rdi, [ tmp4682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ doneLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ doneLabel ]
  lea rdx, [ tmp4682 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ __cse48 ]
  lea  rdi, [ tmp4682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ defaultLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ defaultLabel ]
  lea rdx, [ tmp4682 ]
  call __MOLD_VariantMove
  lea  rcx, [ jmpTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ jmpTable ]
  call  __MOLD_VariantArrayCreate
  push rdi
  lea  rcx , [ __cse48 ]
  lea  rdx , [ jmpTable ]
  lea  rdi, [ tmp4682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 163
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbolInfo ]
  lea rdx, [ tmp4682 ]
  call __MOLD_VariantMove
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal630 ]
  lea  r8 , [ defaultLabel ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal353 ]
  lea  r8 , [ tmp4682 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal631 ]
  lea  r8 , [ defaultLabel ]
  lea  r9 , [ varName ]
  lea  rax , [ tmp4682 ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$0
  add rsp, 8
  lea  rcx, [ tmp4682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ node ]
  lea  rdx , [ __literal354 ]
  lea  r8 , [ tmp4682 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal632 ]
  lea  r8 , [ defaultLabel ]
  lea  r9 , [ varName ]
  lea  rax , [ tmp4682 ]
  push rax
  call  __ASTTranslatorMIR1_emitTwoArgsOpcode$0
  add rsp, 8
  lea  rcx, [ tmp4682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4682 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp4682 ]
  lea  r8 , [ varName ]
  call  __ASTTranslatorMIR1_emitJmpByTable$0
  mov dword [ caseDefaultIdx ], -1
  mov dword [ tmp4684 ], 1
  cmp [ childrenCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ childrenCnt + Variant_t.value]
  mov dword [ tmp4685 ], eax
  mov dword [ idx ], 1
;
; -----------------------------
; BEGIN: for idx in tmp4686 .. tmp4685
;
l4687:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4685 ]
  jge l4688
  lea  rcx, [ tmp4683 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4683 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4683 ]
  lea  rdx , [ __literal352 ]
  lea  r8 , [ arrayOfValues ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ arrayOfValues ]
  lea  rdi , [ tmp4682 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4690 ], 0
  mov [ tmp4683 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4690 ]
  mov [ tmp4683 + Variant_t.value], rax
  lea rcx, [ tmp4682 ]
  lea rdx, [ tmp4683 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4691
  lea  rcx, [ tmp4683 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4683 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp4683 ]
  lea  rdi , [ tmp4694 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  AST_IsEmpty
  pop rdi
  mov dword [ tmp4695 ], 1
  xor  eax, eax
  or   dword [ tmp4694 ], eax
  setz cl
  or   dword [ tmp4695 ], eax
  setz al
  xor  al, cl
  jnz l4696
  lea  rcx, [ caseLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ caseLabel ]
  lea rdx, [ doneLabel ]
  call __MOLD_VariantMove
  jmp l4697
l4696:
  lea  rcx, [ tmp4682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4682 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4682 ]
  lea  rdi, [ tmp4683 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 132
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ caseLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ caseLabel ]
  lea rdx, [ tmp4683 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ caseLabel ]
  call  __ASTTranslatorMIR1_emitLabel$0
  lea  rcx, [ tmp4683 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4683 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp4683 ]
  call  __ASTTranslator__executeNode$0
  lea  rcx , [ this ]
  lea  rdx , [ doneLabel ]
  call  __ASTTranslatorMIR1_emitJmp$0
l4697:
;
; -----------------------------
; BEGIN: for keys undefined values oneValue
;
  jmp l4699
l4698:
  cmp [ oneValue + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ oneValue + Variant_t.value]
  mov dword [ tmp4690 ], eax
  lea  rcx , [ jmpTable ]
  lea  rdx , [ tmp4690 ]
  lea  r8 , [ caseLabel ]
  call  __MOLD_VariantStoreAtIndex_int32
  ret
l4699:
  lea  rcx , [ arrayOfValues ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneValue ]
  lea  r9 , [ l4698 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneValue
; -----------------------------
;
  jmp l4692
l4691:
  mov eax, dword [ idx ]
  mov dword [ caseDefaultIdx ], eax
l4692:
  mov eax, dword [ idx ]
  add eax, dword [ tmp4684 ]
  mov dword [ idx ], eax
  jmp l4687
l4688:
;
; END: for idx in tmp4686 .. tmp4685 step tmp4684
; -----------------------------
;
  lea  rcx , [ this ]
  lea  rdx , [ defaultLabel ]
  call  __ASTTranslatorMIR1_emitLabel$0
  mov dword [ tmp4686 ], -1
  mov eax, dword [ caseDefaultIdx ]
  cmp eax, dword [ tmp4686 ]
  jz l4700
  lea  rcx, [ tmp4683 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ caseDefaultIdx ]
  lea  r8 , [ tmp4683 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp4683 ]
  call  __ASTTranslator__executeNode$0
l4700:
l4701:
  lea  rcx , [ this ]
  lea  rdx , [ doneLabel ]
  call  __ASTTranslatorMIR1_emitLabel$0

  ; clean frame
  ; -----------
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ childrenCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ varName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ doneLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ defaultLabel ]
  call __MOLD_VariantDestroy
  lea  rcx, [ jmpTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ __cse48 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4682 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4683 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfValues ]
  call __MOLD_VariantDestroy
  lea  rcx, [ caseLabel ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneValue

  add  rsp, 320
  pop  rbp
  ret

  restore this
  restore node
  restore children
  restore childrenCnt
  restore varName
  restore doneLabel
  restore defaultLabel
  restore jmpTable
  restore symbolInfo
  restore caseDefaultIdx
  restore __cse48
  restore tmp4682
  restore tmp4683
  restore tmp4684
  restore tmp4685
  restore tmp4686
  restore tmp4689
  restore tmp4690
  restore tmp4693
  restore tmp4694
  restore tmp4695
  restore idx
  restore arrayOfValues
  restore caseLabel
  restore oneValue
; -----------------------------------------------
; function __ASTTranslatorMIR1__declareFunction$0
; -----------------------------------------------
__ASTTranslatorMIR1__declareFunction$0:
  ; init frame
  ; ----------
  funcProto EQU rbp - 24 ; 16 bytes
  funcName EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  ; skipped unused param [ funcName ]
  ; skipped unused param [ funcProto ]

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
; -----------------------------------------------
; function __ASTTranslatorMIR1__declareClass$0
; -----------------------------------------------
__ASTTranslatorMIR1__declareClass$0:
  ; init frame
  ; ----------
  tmp4703 EQU rbp - 24 ; 16 bytes
  tmp4702 EQU rbp - 40 ; 16 bytes
  classProto EQU rbp - 56 ; 16 bytes
  className EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  ; skipped unused param [ className ]
  movdqu xmm0 , [ r8 ]
  movdqu [ classProto ], xmm0
  mov [tmp4702 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4703 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4703 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4703 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4703 ]
  lea  rdx , [ classProto ]
  lea  rdi, [ tmp4702 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 147
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4702 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4703 ]
  call __MOLD_VariantDestroy

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore className
  restore classProto
  restore tmp4702
  restore tmp4703
; -----------------------------------------------
; function __ASTTranslatorMIR1__emitFunctionBody$0
; -----------------------------------------------
__ASTTranslatorMIR1__emitFunctionBody$0:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp4710 EQU rbp - 40 ; 16 bytes
  tmp4709 EQU rbp - 56 ; 16 bytes
  tmp4708 EQU rbp - 72 ; 16 bytes
  tmp4707 EQU rbp - 76 ; 4 bytes
  tmp4706 EQU rbp - 92 ; 16 bytes
  tmp4705 EQU rbp - 96 ; 4 bytes
  tmp4704 EQU rbp - 112 ; 16 bytes
  procMeta EQU rbp - 128 ; 16 bytes
  oldSymbolTable EQU rbp - 144 ; 16 bytes
  rvName EQU rbp - 160 ; 16 bytes
  codeAst EQU rbp - 176 ; 16 bytes
  children EQU rbp - 192 ; 16 bytes
  params EQU rbp - 208 ; 16 bytes
  funcProto EQU rbp - 224 ; 16 bytes
  funcName EQU rbp - 240 ; 16 bytes
  this EQU rbp - 256 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 288

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ funcName ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ funcProto ], xmm0
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [children + Variant_t.type], VARIANT_UNDEFINED
  mov [codeAst + Variant_t.type], VARIANT_UNDEFINED
  mov [rvName + Variant_t.type], VARIANT_UNDEFINED
  mov [oldSymbolTable + Variant_t.type], VARIANT_UNDEFINED
  mov [procMeta + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4704 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4706 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4708 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4709 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4710 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ children ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4705 ], 0
  lea  rcx, [ codeAst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ children ]
  lea  rdx , [ tmp4705 ]
  lea  r8 , [ codeAst ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ rvName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4704 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal574 ]
  lea  r8 , [ tmp4704 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4706 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ funcProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4706 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4707 ], 1
  mov eax, dword [ tmp4707 ]
  mov [ tmp4708 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4708 + Variant_t.value], rax
  lea  rcx , [ tmp4704 ]
  lea  rdx , [ tmp4706 ]
  lea  r8 , [ tmp4708 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal561 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx, [ tmp4709 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal418 ]
  lea  rdx , [ funcName ]
  lea  r8 , [ tmp4709 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ this ]
  lea  rdx , [ tmp4709 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal561 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4708 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4708 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4708 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4708 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4708 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp4706 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4706 ]
  lea rdx, [ funcName ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4708 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4706 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4710 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4710 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4710 ]
  lea  rdi, [ tmp4704 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 32
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp4706 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4706 ]
  lea rdx, [ tmp4704 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4708 ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp4706 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4706 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4706 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4708 ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4706 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4706 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4706 ]
  lea rdx, [ params ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4708 ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp4706 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4706 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4706 ]
  lea rdx, [ rvName ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4708 ]
  lea  rdx , [ __literal141 ]
  lea  r8 , [ tmp4706 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ procMeta ]
  call __MOLD_VariantDestroy
  lea rcx, [ procMeta ]
  lea rdx, [ tmp4708 ]
  call __MOLD_VariantMove
  lea  rcx , [ this ]
  lea  rdx , [ procMeta ]
  call  __ASTTranslatorMIR1_emitProcBegin$0
  lea  rcx, [ tmp4706 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4706 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4706 ]
  lea  rdi , [ tmp4708 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4705 ], 0
  mov [ tmp4706 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4705 ]
  mov [ tmp4706 + Variant_t.value], rax
  lea rcx, [ tmp4708 ]
  lea rdx, [ tmp4706 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l4711
  lea  rcx , [ this ]
  lea  rdx , [ procMeta ]
  call  __ASTTranslatorMIR1_emitInitFrame$0
  lea  rcx, [ tmp4706 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeAst ]
  lea  rdx , [ __literal3 ]
  lea  r8 , [ tmp4706 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l4714
l4713:
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  call  __ASTTranslator__executeNode$0
  ret
l4714:
  lea  rcx , [ tmp4706 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4713 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  lea  rcx , [ this ]
  call  __ASTTranslatorMIR1_emitRet$0
  jmp l4712
l4711:
  lea  rcx , [ this ]
  lea  rdx , [ __literal624 ]
  call  __ASTTranslatorMIR1_emitZeroArgsOpcode$0
l4712:
  lea  rcx , [ this ]
  call  __ASTTranslatorMIR1_emitProcEnd$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ oldSymbolTable ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ children ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeAst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rvName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ oldSymbolTable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ procMeta ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4704 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4706 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4708 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4710 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 288
  pop  rbp
  ret

  restore this
  restore funcName
  restore funcProto
  restore params
  restore children
  restore codeAst
  restore rvName
  restore oldSymbolTable
  restore procMeta
  restore tmp4704
  restore tmp4705
  restore tmp4706
  restore tmp4707
  restore tmp4708
  restore tmp4709
  restore tmp4710
  restore item
; -----------------------------------------------
; function __ASTTranslatorMIR1__dropRetVal$0
; -----------------------------------------------
__ASTTranslatorMIR1__dropRetVal$0:
  ; init frame
  ; ----------
  tmp4716 EQU rbp - 24 ; 16 bytes
  tmp4715 EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4715 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4716 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4716 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal570 ]
  lea  r8 , [ tmp4716 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4716 ]
  lea  rdi, [ tmp4715 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 164
  call __MOLD_VCall
  pop rdi

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4715 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4716 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp4715
  restore tmp4716
; -----------------------------------------------
; function __ASTTranslatorMIR1_run$0
; -----------------------------------------------
__ASTTranslatorMIR1_run$0:
  ; init frame
  ; ----------
  methodName EQU rbp - 24 ; 16 bytes
  tmp4728 EQU rbp - 40 ; 16 bytes
  tmp4727 EQU rbp - 56 ; 16 bytes
  tmp4724 EQU rbp - 60 ; 4 bytes
  tmp4723 EQU rbp - 76 ; 16 bytes
  tmp4722 EQU rbp - 92 ; 16 bytes
  tmp4721 EQU rbp - 96 ; 4 bytes
  tmp4718 EQU rbp - 112 ; 16 bytes
  tmp4717 EQU rbp - 128 ; 16 bytes
  ast EQU rbp - 144 ; 16 bytes
  this EQU rbp - 160 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ast ], xmm0
  mov [tmp4717 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4718 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4722 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4723 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4727 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4728 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ tmp4717 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ ast ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4717 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4717 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  call  __ASTTranslator__emitGlobals$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal561 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal633 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal561 ]
  call  __ASTTranslatorMIR1_emitComment$0
  lea  rcx , [ this ]
  lea  rdx , [ ast ]
  call  __ASTTranslator__executeNode$0
  lea  rcx, [ tmp4717 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ tmp4717 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4718 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4718 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4717 ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4718 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4718 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal572 ]
  lea  r8 , [ tmp4718 ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values methodName
;
  jmp l4720
l4719:
  lea  rcx, [ tmp4723 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal574 ]
  lea  r8 , [ tmp4723 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4722 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4723 ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp4722 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4722 ]
  lea  rdi , [ tmp4717 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4724 ], 0
  mov [ tmp4722 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4724 ]
  mov [ tmp4722 + Variant_t.value], rax
  lea rcx, [ tmp4717 ]
  lea rdx, [ tmp4722 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4725
  lea  rcx, [ tmp4728 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodName ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp4728 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4727 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal634 ]
  lea  rdx , [ tmp4728 ]
  lea  r8 , [ tmp4727 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp4727 ]
  mov eax,  41
  call  __MOLD_SysCall
l4725:
l4726:
  ret
l4720:
  lea  rcx , [ tmp4718 ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ methodName ]
  lea  r9 , [ l4719 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values methodName
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4717 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4718 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4722 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4723 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator methodName

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore ast
  restore tmp4717
  restore tmp4718
  restore tmp4721
  restore tmp4722
  restore tmp4723
  restore tmp4724
  restore tmp4727
  restore tmp4728
  restore methodName
; -----------------------------------------------
; function __ASTTranslatorMIR1_connectTo$0
; -----------------------------------------------
__ASTTranslatorMIR1_connectTo$0:
  ; init frame
  ; ----------
  rv EQU rdi
  obj EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ obj ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ obj ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ obj ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore obj
  restore rv
; -----------------------------------------------
; function __PipeAbstract_constructor$0
; -----------------------------------------------
__PipeAbstract_constructor$0:
  ; init frame
  ; ----------
  tmp4730 EQU rbp - 12 ; 4 bytes
  tmp4729 EQU rbp - 28 ; 16 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4729 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4729 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ tmp4729 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4729 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4729 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal635 ]
  lea  r8 , [ tmp4729 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4730 ], 0
  mov eax, dword [ tmp4730 ]
  mov [ tmp4729 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4729 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal636 ]
  lea  r8 , [ tmp4729 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4729 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp4729
  restore tmp4730
; -----------------------------------------------
; function __PipeAbstract__emitOneItem$0
; -----------------------------------------------
__PipeAbstract__emitOneItem$0:
  ; init frame
  ; ----------
  outputObject EQU rbp - 24 ; 16 bytes
  cnt EQU rbp - 28 ; 4 bytes
  buffer EQU rbp - 44 ; 16 bytes
  tmp4737 EQU rbp - 48 ; 4 bytes
  tmp4734 EQU rbp - 64 ; 16 bytes
  tmp4733 EQU rbp - 68 ; 4 bytes
  tmp4732 EQU rbp - 84 ; 16 bytes
  tmp4731 EQU rbp - 88 ; 4 bytes
  item EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  mov [tmp4732 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4734 + Variant_t.type], VARIANT_UNDEFINED
  mov [buffer + Variant_t.type], VARIANT_UNDEFINED
  mov [outputObject + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4732 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal636 ]
  lea  r8 , [ tmp4732 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4733 ], 1
  mov eax, dword [ tmp4733 ]
  mov [ tmp4734 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4734 + Variant_t.value], rax
  lea rcx, [ tmp4732 ]
  lea rdx, [ tmp4734 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4735
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal635 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ buffer ]
  lea  rdi , [ tmp4734 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4734 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4734 + Variant_t.value]
  mov dword [ cnt ], eax
  lea  rcx , [ buffer ]
  lea  rdx , [ cnt ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l4736
l4735:
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ outputObject ]
  lea  rdx , [ item ]
  lea  rdi, [ tmp4734 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 155
  call __MOLD_VCall
  pop rdi
l4736:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4732 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4734 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore item
  restore tmp4731
  restore tmp4732
  restore tmp4733
  restore tmp4734
  restore tmp4737
  restore buffer
  restore cnt
  restore outputObject
; -----------------------------------------------
; function __PipeAbstract__replaceLastItem$0
; -----------------------------------------------
__PipeAbstract__replaceLastItem$0:
  ; init frame
  ; ----------
  cnt EQU rbp - 12 ; 4 bytes
  buffer EQU rbp - 28 ; 16 bytes
  tmp4745 EQU rbp - 32 ; 4 bytes
  tmp4744 EQU rbp - 36 ; 4 bytes
  tmp4741 EQU rbp - 52 ; 16 bytes
  tmp4740 EQU rbp - 56 ; 4 bytes
  tmp4739 EQU rbp - 72 ; 16 bytes
  tmp4738 EQU rbp - 76 ; 4 bytes
  item EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  mov [tmp4739 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4741 + Variant_t.type], VARIANT_UNDEFINED
  mov [buffer + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4739 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal636 ]
  lea  r8 , [ tmp4739 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4740 ], 1
  mov eax, dword [ tmp4740 ]
  mov [ tmp4741 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4741 + Variant_t.value], rax
  lea rcx, [ tmp4739 ]
  lea rdx, [ tmp4741 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4742
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal635 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ buffer ]
  lea  rdi , [ tmp4741 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4741 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4741 + Variant_t.value]
  mov dword [ cnt ], eax
  mov dword [ tmp4745 ], 1
  mov eax, dword [ cnt ]
  sub eax, dword [ tmp4745 ]
  mov dword [ tmp4744 ], eax
  lea  rcx , [ buffer ]
  lea  rdx , [ tmp4744 ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l4743
l4742:
  lea  rcx , [ __literal637 ]
  mov eax,  41
  call  __MOLD_SysCall
l4743:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4739 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4741 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore item
  restore tmp4738
  restore tmp4739
  restore tmp4740
  restore tmp4741
  restore tmp4744
  restore tmp4745
  restore buffer
  restore cnt
; -----------------------------------------------
; function __PipeAbstract_connectTo$0
; -----------------------------------------------
__PipeAbstract_connectTo$0:
  ; init frame
  ; ----------
  rv EQU rdi
  outputObject EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ outputObject ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ outputObject ]
  call __MOLD_VariantMove

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore outputObject
  restore rv
; -----------------------------------------------
; function __PipeAbstract_processOneItem$0
; -----------------------------------------------
__PipeAbstract_processOneItem$0:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  ; skipped unused param [ item ]

  ; code
  ; ----

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore item
; -----------------------------------------------
; function __PipeAbstract_processArrayOfItems$0
; -----------------------------------------------
__PipeAbstract_processArrayOfItems$0:
  ; init frame
  ; ----------
  oneItem EQU rbp - 24 ; 16 bytes
  tmp4748 EQU rbp - 40 ; 16 bytes
  arrayOfItems EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ arrayOfItems ], xmm0
  mov [tmp4748 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
;
; -----------------------------
; BEGIN: for keys undefined values oneItem
;
  jmp l4747
l4746:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ oneItem ]
  lea  rdi, [ tmp4748 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 155
  call __MOLD_VCall
  pop rdi
  ret
l4747:
  lea  rcx , [ arrayOfItems ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l4746 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneItem
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4748 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore arrayOfItems
  restore tmp4748
  restore oneItem
; -----------------------------------------------
; function __PipeAbstract_flush$0
; -----------------------------------------------
__PipeAbstract_flush$0:
  ; init frame
  ; ----------
  oneItem EQU rbp - 24 ; 16 bytes
  tmp4749 EQU rbp - 40 ; 16 bytes
  outputObject EQU rbp - 56 ; 16 bytes
  buffer EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [buffer + Variant_t.type], VARIANT_UNDEFINED
  mov [outputObject + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4749 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal635 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal571 ]
  lea  r8 , [ outputObject ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values oneItem
;
  jmp l4751
l4750:
  push rdi
  lea  rcx , [ outputObject ]
  lea  rdx , [ oneItem ]
  lea  rdi, [ tmp4749 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 155
  call __MOLD_VCall
  pop rdi
  ret
l4751:
  lea  rcx , [ buffer ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l4750 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneItem
; -----------------------------
;
  lea  rcx, [ tmp4749 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4749 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal635 ]
  lea  r8 , [ tmp4749 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ outputObject ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4749 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore buffer
  restore outputObject
  restore tmp4749
  restore oneItem
; -----------------------------------------------
; function __MIRQuadCollector_constructor$0
; -----------------------------------------------
__MIRQuadCollector_constructor$0:
  ; init frame
  ; ----------
  tmp4754 EQU rbp - 24 ; 16 bytes
  tmp4753 EQU rbp - 40 ; 16 bytes
  tmp4752 EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4752 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4753 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4754 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4752 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4752 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ tmp4752 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4752 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4752 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp4753 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4753 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ tmp4752 ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp4753 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal639 ]
  lea  r8 , [ tmp4752 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4752 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4753 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4754 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore tmp4752
  restore tmp4753
  restore tmp4754
; -----------------------------------------------
; function __MIRQuadCollector__pad$0
; -----------------------------------------------
__MIRQuadCollector__pad$0:
  ; init frame
  ; ----------
  idx EQU rbp - 12 ; 4 bytes
  padCnt EQU rbp - 28 ; 16 bytes
  tmp4768 EQU rbp - 32 ; 4 bytes
  tmp4767 EQU rbp - 36 ; 4 bytes
  v EQU rbp - 52 ; 16 bytes
  sep EQU rbp - 68 ; 16 bytes
  tmp4766 EQU rbp - 84 ; 16 bytes
  tmp4765 EQU rbp - 100 ; 16 bytes
  tmp4758 EQU rbp - 116 ; 16 bytes
  tmp4757 EQU rbp - 120 ; 4 bytes
  tmp4756 EQU rbp - 136 ; 16 bytes
  tmp4755 EQU rbp - 140 ; 4 bytes
  rv EQU rdi
  desiredLen EQU rbp - 156 ; 16 bytes
  item EQU rbp - 172 ; 16 bytes
  this EQU rbp - 188 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ desiredLen ], xmm0
  mov [tmp4756 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4758 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4765 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4766 + Variant_t.type], VARIANT_UNDEFINED
  mov [sep + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [padCnt + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ item ]
  lea  rdi , [ tmp4756 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4757 ], 0
  mov [ tmp4758 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4757 ]
  mov [ tmp4758 + Variant_t.value], rax
  lea rcx, [ tmp4756 ]
  lea rdx, [ tmp4758 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4759
  lea rcx, [ item ]
  lea rdx, [ __literal89 ]
  call __MOLD_VariantMove
l4759:
l4760:
  push rdi
  lea  rcx , [ item ]
  lea  rdi , [ tmp4758 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4758 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4761
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal411 ]
  call __MOLD_VariantMove
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys undefined values v
;
  jmp l4764
l4763:
  push rdi
  lea  rcx , [ v ]
  lea  rdi , [ tmp4758 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4766 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ sep ]
  lea  rdx , [ tmp4758 ]
  lea  r8 , [ tmp4766 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ rv ]
  lea  rdx , [ tmp4766 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal410 ]
  call __MOLD_VariantMove
  ret
l4764:
  lea  rcx , [ item ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ v ]
  lea  r9 , [ l4763 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values v
; -----------------------------
;
  lea  rcx , [ rv ]
  lea  rdx , [ __literal77 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  jmp l4762
l4761:
  push rdi
  lea  rcx , [ item ]
  lea  rdi , [ rv ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp4756 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ desiredLen ]
  lea  rdx , [ tmp4756 ]
  lea  r8 , [ padCnt ]
  call  __MOLD_VariantSub
  mov dword [ tmp4757 ], 1
  cmp [ padCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ padCnt + Variant_t.value]
  mov dword [ tmp4767 ], eax
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp4768 .. tmp4767
;
l4769:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp4767 ]
  jge l4770
  lea  rcx , [ rv ]
  lea  rdx , [ __literal315 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  mov eax, dword [ idx ]
  add eax, dword [ tmp4757 ]
  mov dword [ idx ], eax
  jmp l4769
l4770:
;
; END: for idx in tmp4768 .. tmp4767 step tmp4757
; -----------------------------
;
l4762:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4756 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4758 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator v
  lea  rcx, [ padCnt ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore item
  restore desiredLen
  restore rv
  restore tmp4755
  restore tmp4756
  restore tmp4757
  restore tmp4758
  restore tmp4765
  restore tmp4766
  restore sep
  restore v
  restore tmp4767
  restore tmp4768
  restore padCnt
  restore idx
; -----------------------------------------------
; function __MIRQuadCollector_processOneItem$0
; -----------------------------------------------
__MIRQuadCollector_processOneItem$0:
  ; init frame
  ; ----------
  tmp4773 EQU rbp - 12 ; 4 bytes
  tmp4772 EQU rbp - 28 ; 16 bytes
  tmp4771 EQU rbp - 44 ; 16 bytes
  cnt EQU rbp - 48 ; 4 bytes
  item EQU rbp - 64 ; 16 bytes
  this EQU rbp - 80 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  mov [tmp4771 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4772 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4772 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ tmp4772 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4772 ]
  lea  rdi , [ tmp4771 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4771 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4771 + Variant_t.value]
  mov dword [ cnt ], eax
  lea  rcx, [ tmp4771 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ tmp4771 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4771 ]
  lea  rdx , [ cnt ]
  lea  r8 , [ item ]
  call  __MOLD_VariantStoreAtIndex_int32

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4771 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4772 ]
  call __MOLD_VariantDestroy

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore item
  restore cnt
  restore tmp4771
  restore tmp4772
  restore tmp4773
; -----------------------------------------------
; function __MIRQuadCollector_getQuads$0
; -----------------------------------------------
__MIRQuadCollector_getQuads$0:
  ; init frame
  ; ----------
  tmp4774 EQU rbp - 24 ; 16 bytes
  rv EQU rdi
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4774 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4774 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore rv
  restore tmp4774
; -----------------------------------------------
; function __MIRQuadCollector__printSymbolInfoRow$0
; -----------------------------------------------
__MIRQuadCollector__printSymbolInfoRow$0:
  ; init frame
  ; ----------
  tmp4777 EQU rbp - 24 ; 16 bytes
  tmp4776 EQU rbp - 28 ; 4 bytes
  tmp4775 EQU rbp - 44 ; 16 bytes
  kind EQU rbp - 60 ; 16 bytes
  type EQU rbp - 76 ; 16 bytes
  writeHits EQU rbp - 92 ; 16 bytes
  readHits EQU rbp - 108 ; 16 bytes
  name EQU rbp - 124 ; 16 bytes
  this EQU rbp - 140 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 176

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ readHits ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ writeHits ], xmm0
  mov    rax, [rbp + 16 + 8 * 1 ]
  movdqu xmm0 , [ rax ]
  movdqu [ type ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ kind ], xmm0
  mov [tmp4775 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4777 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp4776 ], 10
  mov [ tmp4777 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4776 ]
  mov [ tmp4777 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp4777 ]
  lea  rdi , [ tmp4775 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  lea rcx, [ name ]
  lea rdx, [ tmp4775 ]
  call __MOLD_VariantMove
  mov dword [ tmp4776 ], 4
  mov [ tmp4777 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4776 ]
  mov [ tmp4777 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ readHits ]
  lea  r8 , [ tmp4777 ]
  lea  rdi , [ tmp4775 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  lea rcx, [ readHits ]
  lea rdx, [ tmp4775 ]
  call __MOLD_VariantMove
  mov dword [ tmp4776 ], 4
  mov [ tmp4777 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4776 ]
  mov [ tmp4777 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ writeHits ]
  lea  r8 , [ tmp4777 ]
  lea  rdi , [ tmp4775 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  lea rcx, [ writeHits ]
  lea rdx, [ tmp4775 ]
  call __MOLD_VariantMove
  mov dword [ tmp4776 ], 9
  mov [ tmp4777 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4776 ]
  mov [ tmp4777 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ type ]
  lea  r8 , [ tmp4777 ]
  lea  rdi , [ tmp4775 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  lea rcx, [ type ]
  lea rdx, [ tmp4775 ]
  call __MOLD_VariantMove
  mov dword [ tmp4776 ], 8
  mov [ tmp4777 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4776 ]
  mov [ tmp4777 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ kind ]
  lea  r8 , [ tmp4777 ]
  lea  rdi , [ tmp4775 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  lea rcx, [ kind ]
  lea rdx, [ tmp4775 ]
  call __MOLD_VariantMove
  lea  rcx , [ 6 ]
  lea  rdx , [ __literal640 ]
  lea  r8 , [ name ]
  lea  r9 , [ readHits ]
  lea  rax , [ writeHits ]
  push rax
  lea  rax , [ type ]
  push rax
  lea  rax , [ kind ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 24

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4775 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4777 ]
  call __MOLD_VariantDestroy

  add  rsp, 176
  pop  rbp
  ret

  restore this
  restore name
  restore readHits
  restore writeHits
  restore type
  restore kind
  restore tmp4775
  restore tmp4776
  restore tmp4777
; -----------------------------------------------
; function __MIRQuadCollector__dumpFrameInfo$0
; -----------------------------------------------
__MIRQuadCollector__dumpFrameInfo$0:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp4786 EQU rbp - 28 ; 4 bytes
  tmp4785 EQU rbp - 44 ; 16 bytes
  tmp4784 EQU rbp - 60 ; 16 bytes
  tmp4783 EQU rbp - 76 ; 16 bytes
  tmp4782 EQU rbp - 92 ; 16 bytes
  tmp4781 EQU rbp - 108 ; 16 bytes
  tmp4780 EQU rbp - 124 ; 16 bytes
  frameInfo EQU rbp - 140 ; 16 bytes
  this EQU rbp - 156 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 192

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ frameInfo ], xmm0
  mov [tmp4780 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4781 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4782 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4783 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4784 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4785 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal641 ]
  lea  r8 , [ __literal642 ]
  lea  r9 , [ __literal643 ]
  lea  rax , [ __literal644 ]
  push rax
  lea  rax , [ __literal172 ]
  push rax
  call  __MIRQuadCollector__printSymbolInfoRow$0
  add rsp, 16
  lea  rcx , [ this ]
  lea  rdx , [ __literal645 ]
  lea  r8 , [ __literal646 ]
  lea  r9 , [ __literal646 ]
  lea  rax , [ __literal647 ]
  push rax
  lea  rax , [ __literal648 ]
  push rax
  call  __MIRQuadCollector__printSymbolInfoRow$0
  add rsp, 16
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l4779
l4778:
  lea  rcx, [ tmp4780 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4780 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4781 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp4781 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4782 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp4782 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4783 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4783 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4785 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4785 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp4785 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4785 + Variant_t.value]
  mov dword [ tmp4786 ], eax
  lea  rcx, [ tmp4784 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ SYMBOL_KIND_AS_TEXT ]
  lea  rdx , [ tmp4786 ]
  lea  r8 , [ tmp4784 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp4780 ]
  lea  r8 , [ tmp4781 ]
  lea  r9 , [ tmp4782 ]
  lea  rax , [ tmp4783 ]
  push rax
  lea  rax , [ tmp4784 ]
  push rax
  call  __MIRQuadCollector__printSymbolInfoRow$0
  add rsp, 16
  ret
l4779:
  lea  rcx , [ frameInfo ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4778 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4780 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4781 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4782 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4783 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4784 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4785 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 192
  pop  rbp
  ret

  restore this
  restore frameInfo
  restore tmp4780
  restore tmp4781
  restore tmp4782
  restore tmp4783
  restore tmp4784
  restore tmp4785
  restore tmp4786
  restore item
; -----------------------------------------------
; function __MIRQuadCollector_printQuads$0
; -----------------------------------------------
__MIRQuadCollector_printQuads$0:
  ; init frame
  ; ----------
  paddedY EQU rbp - 24 ; 16 bytes
  paddedX EQU rbp - 40 ; 16 bytes
  paddedDst EQU rbp - 56 ; 16 bytes
  paddedOpcode EQU rbp - 72 ; 16 bytes
  y EQU rbp - 88 ; 16 bytes
  x EQU rbp - 104 ; 16 bytes
  dst EQU rbp - 120 ; 16 bytes
  __cse49 EQU rbp - 136 ; 16 bytes
  opcode EQU rbp - 152 ; 16 bytes
  item EQU rbp - 168 ; 16 bytes
  tmp4816 EQU rbp - 184 ; 16 bytes
  tmp4815 EQU rbp - 200 ; 16 bytes
  tmp4814 EQU rbp - 216 ; 16 bytes
  tmp4811 EQU rbp - 220 ; 4 bytes
  tmp4810 EQU rbp - 236 ; 16 bytes
  tmp4807 EQU rbp - 240 ; 4 bytes
  tmp4806 EQU rbp - 256 ; 16 bytes
  tmp4803 EQU rbp - 260 ; 4 bytes
  tmp4800 EQU rbp - 264 ; 4 bytes
  tmp4797 EQU rbp - 268 ; 4 bytes
  tmp4794 EQU rbp - 272 ; 4 bytes
  tmp4791 EQU rbp - 276 ; 4 bytes
  tmp4790 EQU rbp - 280 ; 4 bytes
  tmp4787 EQU rbp - 296 ; 16 bytes
  code EQU rbp - 312 ; 16 bytes
  this EQU rbp - 328 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 368

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4787 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4806 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4810 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4814 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4815 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4816 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [__cse49 + Variant_t.type], VARIANT_UNDEFINED
  mov [dst + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [paddedOpcode + Variant_t.type], VARIANT_UNDEFINED
  mov [paddedDst + Variant_t.type], VARIANT_UNDEFINED
  mov [paddedX + Variant_t.type], VARIANT_UNDEFINED
  mov [paddedY + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l4789
l4788:
  mov dword [ tmp4790 ], 0
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4790 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ opcode ]
  lea rdx, [ __literal579 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4792
  mov dword [ tmp4790 ], 1
  lea  rcx, [ __cse49 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4790 ]
  lea  r8 , [ __cse49 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4787 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse49 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4787 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal579 ]
  lea  r8 , [ tmp4787 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp4787 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __cse49 ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp4787 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp4787 ]
  call  __MIRQuadCollector__dumpFrameInfo$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal639 ]
  lea  r8 , [ __cse49 ]
  call  __MOLD_VariantStoreAtKey
  jmp l4793
l4792:
  lea rcx, [ opcode ]
  lea rdx, [ __literal580 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4795
  lea  rcx , [ __literal649 ]
  call  __MOLD_PrintVariantLn
  jmp l4796
l4795:
  lea rcx, [ opcode ]
  lea rdx, [ __literal581 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4798
  lea  rcx , [ __literal581 ]
  call  __MOLD_PrintVariantLn
  jmp l4799
l4798:
  lea rcx, [ opcode ]
  lea rdx, [ __literal575 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4801
  mov dword [ tmp4790 ], 1
  lea  rcx, [ tmp4787 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4790 ]
  lea  r8 , [ tmp4787 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal650 ]
  lea  r8 , [ tmp4787 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4802
l4801:
  lea rcx, [ opcode ]
  lea rdx, [ __literal143 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4804
  mov dword [ tmp4790 ], 1
  lea  rcx, [ tmp4787 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4790 ]
  lea  r8 , [ tmp4787 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4806 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4787 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp4806 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp4806 ]
  call  __MOLD_PrintVariantLn
  jmp l4805
l4804:
  lea rcx, [ opcode ]
  lea rdx, [ __literal608 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4808
  mov dword [ tmp4790 ], 28
  mov [ tmp4810 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4790 ]
  mov [ tmp4810 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ tmp4810 ]
  lea  rdi , [ tmp4787 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  mov dword [ tmp4790 ], 1
  lea  rcx, [ tmp4810 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4790 ]
  lea  r8 , [ tmp4810 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal651 ]
  lea  r8 , [ tmp4787 ]
  lea  r9 , [ tmp4810 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4809
l4808:
  lea rcx, [ opcode ]
  lea rdx, [ __literal102 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4812
  mov dword [ tmp4790 ], 28
  mov [ tmp4787 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4790 ]
  mov [ tmp4787 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ tmp4787 ]
  lea  rdi , [ tmp4810 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  mov dword [ tmp4790 ], 1
  lea  rcx, [ tmp4814 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4790 ]
  lea  r8 , [ tmp4814 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4790 ], 8
  mov [ tmp4815 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4790 ]
  mov [ tmp4815 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4814 ]
  lea  r8 , [ tmp4815 ]
  lea  rdi , [ tmp4787 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  mov dword [ tmp4790 ], 2
  lea  rcx, [ tmp4814 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4790 ]
  lea  r8 , [ tmp4814 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4790 ], 8
  mov [ tmp4816 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4790 ]
  mov [ tmp4816 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ tmp4814 ]
  lea  r8 , [ tmp4816 ]
  lea  rdi , [ tmp4815 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  mov dword [ tmp4790 ], 3
  lea  rcx, [ tmp4816 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4790 ]
  lea  r8 , [ tmp4816 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ 5 ]
  lea  rdx , [ __literal651 ]
  lea  r8 , [ tmp4810 ]
  lea  r9 , [ tmp4787 ]
  lea  rax , [ tmp4815 ]
  push rax
  lea  rax , [ tmp4816 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16
  jmp l4813
l4812:
  mov dword [ tmp4790 ], 1
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4790 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4790 ], 2
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4790 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4790 ], 3
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4790 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4790 ], 28
  mov [ tmp4815 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4790 ]
  mov [ tmp4815 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ opcode ]
  lea  r8 , [ tmp4815 ]
  lea  rdi , [ tmp4816 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  lea  rcx, [ paddedOpcode ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedOpcode ]
  lea rdx, [ tmp4816 ]
  call __MOLD_VariantMove
  mov dword [ tmp4790 ], 8
  mov [ tmp4815 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4790 ]
  mov [ tmp4815 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ tmp4815 ]
  lea  rdi , [ tmp4816 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  lea  rcx, [ paddedDst ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedDst ]
  lea rdx, [ tmp4816 ]
  call __MOLD_VariantMove
  mov dword [ tmp4790 ], 8
  mov [ tmp4815 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4790 ]
  mov [ tmp4815 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ x ]
  lea  r8 , [ tmp4815 ]
  lea  rdi , [ tmp4816 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  lea  rcx, [ paddedX ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedX ]
  lea rdx, [ tmp4816 ]
  call __MOLD_VariantMove
  mov dword [ tmp4790 ], 8
  mov [ tmp4815 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4790 ]
  mov [ tmp4815 + Variant_t.value], rax
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ y ]
  lea  r8 , [ tmp4815 ]
  lea  rdi , [ tmp4816 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector__pad$0
  pop rdi
  lea  rcx, [ paddedY ]
  call __MOLD_VariantDestroy
  lea rcx, [ paddedY ]
  lea rdx, [ tmp4816 ]
  call __MOLD_VariantMove
  lea  rcx , [ 5 ]
  lea  rdx , [ __literal651 ]
  lea  r8 , [ paddedOpcode ]
  lea  r9 , [ paddedDst ]
  lea  rax , [ paddedX ]
  push rax
  lea  rax , [ paddedY ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16
l4813:
l4809:
l4805:
l4802:
l4799:
l4796:
l4793:
  ret
l4789:
  lea  rcx , [ code ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4788 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4787 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4810 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4814 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4815 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4816 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ __cse49 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedDst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedX ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paddedY ]
  call __MOLD_VariantDestroy

  add  rsp, 368
  pop  rbp
  ret

  restore this
  restore code
  restore tmp4787
  restore tmp4790
  restore tmp4791
  restore tmp4794
  restore tmp4797
  restore tmp4800
  restore tmp4803
  restore tmp4806
  restore tmp4807
  restore tmp4810
  restore tmp4811
  restore tmp4814
  restore tmp4815
  restore tmp4816
  restore item
  restore opcode
  restore __cse49
  restore dst
  restore x
  restore y
  restore paddedOpcode
  restore paddedDst
  restore paddedX
  restore paddedY
; -----------------------------------------------
; function __CodeGeneratorX64_constructor$0
; -----------------------------------------------
__CodeGeneratorX64_constructor$0:
  ; init frame
  ; ----------
  tmp4818 EQU rbp - 12 ; 4 bytes
  tmp4817 EQU rbp - 28 ; 16 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp4817 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4817 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4817 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp4817 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp4818 ], 0
  mov eax, dword [ tmp4818 ]
  mov [ tmp4817 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4817 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal652 ]
  lea  r8 , [ tmp4817 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4817 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4817 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal653 ]
  lea  r8 , [ tmp4817 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4817 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4817 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ tmp4817 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4817 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp4817
  restore tmp4818
; -----------------------------------------------
; function __CodeGeneratorX64_lea$0
; -----------------------------------------------
__CodeGeneratorX64_lea$0:
  ; init frame
  ; ----------
  src EQU rbp - 24 ; 16 bytes
  dst EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----
  lea  rcx , [ 5 ]
  lea  rdx , [ __literal655 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal656 ]
  lea  rax , [ src ]
  push rax
  lea  rax , [ __literal77 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore dst
  restore src
; -----------------------------------------------
; function __CodeGeneratorX64_push$0
; -----------------------------------------------
__CodeGeneratorX64_push$0:
  ; init frame
  ; ----------
  x EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0

  ; code
  ; ----
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal657 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore x
; -----------------------------------------------
; function __CodeGeneratorX64_pop$0
; -----------------------------------------------
__CodeGeneratorX64_pop$0:
  ; init frame
  ; ----------
  x EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0

  ; code
  ; ----
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal658 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore x
; -----------------------------------------------
; function __CodeGeneratorX64_mov$0
; -----------------------------------------------
__CodeGeneratorX64_mov$0:
  ; init frame
  ; ----------
  src EQU rbp - 24 ; 16 bytes
  dst EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal659 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal127 ]
  lea  rax , [ src ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore dst
  restore src
; -----------------------------------------------
; function __CodeGeneratorX64_call$0
; -----------------------------------------------
__CodeGeneratorX64_call$0:
  ; init frame
  ; ----------
  name EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0

  ; code
  ; ----
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal660 ]
  lea  r8 , [ name ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore name
; -----------------------------------------------
; function __CodeGeneratorX64_call1$0
; -----------------------------------------------
__CodeGeneratorX64_call1$0:
  ; init frame
  ; ----------
  x EQU rbp - 24 ; 16 bytes
  name EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal661 ]
  lea  r8 , [ x ]
  call  __CodeGeneratorX64_lea$0
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __CodeGeneratorX64_call$0

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore name
  restore x
; -----------------------------------------------
; function __CodeGeneratorX64_call2$0
; -----------------------------------------------
__CodeGeneratorX64_call2$0:
  ; init frame
  ; ----------
  y EQU rbp - 24 ; 16 bytes
  x EQU rbp - 40 ; 16 bytes
  name EQU rbp - 56 ; 16 bytes
  this EQU rbp - 72 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 112

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal661 ]
  lea  r8 , [ x ]
  call  __CodeGeneratorX64_lea$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal662 ]
  lea  r8 , [ y ]
  call  __CodeGeneratorX64_lea$0
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __CodeGeneratorX64_call$0

  ; clean frame
  ; -----------

  add  rsp, 112
  pop  rbp
  ret

  restore this
  restore name
  restore x
  restore y
; -----------------------------------------------
; function __CodeGeneratorX64_call3$0
; -----------------------------------------------
__CodeGeneratorX64_call3$0:
  ; init frame
  ; ----------
  z EQU rbp - 24 ; 16 bytes
  y EQU rbp - 40 ; 16 bytes
  x EQU rbp - 56 ; 16 bytes
  name EQU rbp - 72 ; 16 bytes
  this EQU rbp - 88 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ z ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal661 ]
  lea  r8 , [ x ]
  call  __CodeGeneratorX64_lea$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal662 ]
  lea  r8 , [ y ]
  call  __CodeGeneratorX64_lea$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal663 ]
  lea  r8 , [ z ]
  call  __CodeGeneratorX64_lea$0
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __CodeGeneratorX64_call$0

  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore x
  restore y
  restore z
; -----------------------------------------------
; function __CodeGeneratorX64_call3AndDestroy$0
; -----------------------------------------------
__CodeGeneratorX64_call3AndDestroy$0:
  ; init frame
  ; ----------
  tmp4821 EQU rbp - 12 ; 4 bytes
  tmp4819 EQU rbp - 16 ; 4 bytes
  dst EQU rbp - 32 ; 16 bytes
  y EQU rbp - 48 ; 16 bytes
  x EQU rbp - 64 ; 16 bytes
  name EQU rbp - 80 ; 16 bytes
  this EQU rbp - 96 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 128

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ dst ], xmm0

  ; code
  ; ----
  mov dword [ tmp4819 ], 1
  lea rcx, [ x ]
  lea rdx, [ dst ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4820
  lea  rcx , [ y ]
  lea  rdx , [ dst ]
  lea  r8 , [ tmp4819 ]
  call  __MOLD_VariantCompareEQ
l4820:
  cmp dword [ tmp4819 ], 0
  jz l4822
  lea  rcx , [ this ]
  lea  rdx , [ __literal661 ]
  lea  r8 , [ x ]
  call  __CodeGeneratorX64_lea$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal662 ]
  lea  r8 , [ y ]
  call  __CodeGeneratorX64_lea$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal663 ]
  lea  r8 , [ dst ]
  call  __CodeGeneratorX64_lea$0
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __CodeGeneratorX64_call$0
  jmp l4823
l4822:
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
l4823:

  ; clean frame
  ; -----------

  add  rsp, 128
  pop  rbp
  ret

  restore this
  restore name
  restore x
  restore y
  restore dst
  restore tmp4819
  restore tmp4821
; -----------------------------------------------
; function __CodeGeneratorX64_variantMove$0
; -----------------------------------------------
__CodeGeneratorX64_variantMove$0:
  ; init frame
  ; ----------
  src EQU rbp - 24 ; 16 bytes
  dst EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ src ], xmm0

  ; code
  ; ----
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal664 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ src ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal666 ]
  call  __MOLD_PrintVariantLn

  ; clean frame
  ; -----------

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore dst
  restore src
; -----------------------------------------------
; function __CodeGeneratorX64_variantDestroy$0
; -----------------------------------------------
__CodeGeneratorX64_variantDestroy$0:
  ; init frame
  ; ----------
  tmp4833 EQU rbp - 12 ; 4 bytes
  tmp4831 EQU rbp - 16 ; 4 bytes
  tmp4829 EQU rbp - 20 ; 4 bytes
  tmp4828 EQU rbp - 24 ; 4 bytes
  tmp4826 EQU rbp - 28 ; 4 bytes
  tmp4825 EQU rbp - 44 ; 16 bytes
  tmp4824 EQU rbp - 60 ; 16 bytes
  xInfo EQU rbp - 76 ; 16 bytes
  x EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  mov [xInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4824 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4825 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4825 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp4825 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ xInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4825 ]
  lea  rdx , [ x ]
  lea  r8 , [ xInfo ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4826 ], 1
  push rdi
  lea  rcx , [ xInfo ]
  lea  rdi , [ tmp4824 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4829 ], 0
  mov [ tmp4825 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4829 ]
  mov [ tmp4825 + Variant_t.value], rax
  lea rcx, [ tmp4824 ]
  lea rdx, [ tmp4825 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4827
  mov dword [ tmp4828 ], 1
  lea  rcx, [ tmp4825 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ xInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4825 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4829 ], 1
  mov [ tmp4824 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4829 ]
  mov [ tmp4824 + Variant_t.value], rax
  lea rcx, [ tmp4825 ]
  lea rdx, [ tmp4824 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4830
  mov dword [ tmp4831 ], 1
  lea  rcx, [ tmp4824 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ xInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4824 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4829 ], 2
  mov [ tmp4825 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4829 ]
  mov [ tmp4825 + Variant_t.value], rax
  lea rcx, [ tmp4824 ]
  lea rdx, [ tmp4825 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4832
  lea  rcx, [ tmp4825 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ xInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4825 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4829 ], 4
  mov [ tmp4824 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4829 ]
  mov [ tmp4824 + Variant_t.value], rax
  lea  rcx , [ tmp4825 ]
  lea  rdx , [ tmp4824 ]
  lea  r8 , [ tmp4831 ]
  call  __MOLD_VariantCompareEQ
l4832:
  mov eax, dword [ tmp4831 ]
  mov dword [ tmp4828 ], eax
l4830:
  mov eax, dword [ tmp4828 ]
  mov dword [ tmp4826 ], eax
l4827:
  cmp dword [ tmp4826 ], 0
  jz l4834
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal667 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal668 ]
  call  __MOLD_PrintVariantLn
l4834:
l4835:

  ; clean frame
  ; -----------
  lea  rcx, [ xInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4824 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4825 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore x
  restore xInfo
  restore tmp4824
  restore tmp4825
  restore tmp4826
  restore tmp4828
  restore tmp4829
  restore tmp4831
  restore tmp4833
; -----------------------------------------------
; function __CodeGeneratorX64_pushParametersBeforeCall$0
; -----------------------------------------------
__CodeGeneratorX64_pushParametersBeforeCall$0:
  ; init frame
  ; ----------
  idx EQU rbp - 12 ; 4 bytes
  tmp4843 EQU rbp - 16 ; 4 bytes
  tmp4840 EQU rbp - 20 ; 4 bytes
  tmp4839 EQU rbp - 36 ; 16 bytes
  tmp4838 EQU rbp - 52 ; 16 bytes
  tmp4837 EQU rbp - 56 ; 4 bytes
  tmp4836 EQU rbp - 72 ; 16 bytes
  regParamsCnt EQU rbp - 76 ; 4 bytes
  regParams EQU rbp - 92 ; 16 bytes
  paramsCnt EQU rbp - 96 ; 4 bytes
  params EQU rbp - 112 ; 16 bytes
  this EQU rbp - 128 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ params ], xmm0
  mov [regParams + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4836 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4838 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4839 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ tmp4836 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4836 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4836 + Variant_t.value]
  mov dword [ paramsCnt ], eax
  lea  rcx, [ tmp4836 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4836 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp4838 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4838 + Variant_t.value], 0
  lea  rcx, [ tmp4839 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4839 ]
  lea rdx, [ __literal661 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4836 ]
  lea  rdx , [ tmp4838 ]
  lea  r8 , [ tmp4839 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4838 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4838 + Variant_t.value], 1
  lea  rcx, [ tmp4839 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4839 ]
  lea rdx, [ __literal662 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4836 ]
  lea  rdx , [ tmp4838 ]
  lea  r8 , [ tmp4839 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4838 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4838 + Variant_t.value], 2
  lea  rcx, [ tmp4839 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4839 ]
  lea rdx, [ __literal663 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4836 ]
  lea  rdx , [ tmp4838 ]
  lea  r8 , [ tmp4839 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp4838 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp4838 + Variant_t.value], 3
  lea  rcx, [ tmp4839 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp4839 ]
  lea rdx, [ __literal669 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4836 ]
  lea  rdx , [ tmp4838 ]
  lea  r8 , [ tmp4839 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ regParams ]
  call __MOLD_VariantDestroy
  lea rcx, [ regParams ]
  lea rdx, [ tmp4836 ]
  call __MOLD_VariantMove
  mov dword [ tmp4837 ], 4
  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp4837 ]
  jg l4841
  mov eax, dword [ paramsCnt ]
  mov dword [ regParamsCnt ], eax
  jmp l4842
l4841:
  mov dword [ regParamsCnt ], 4
l4842:
  mov dword [ tmp4837 ], 1
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp4843 .. regParamsCnt
;
l4844:
  mov eax, dword [ idx ]
  cmp eax, dword [ regParamsCnt ]
  jge l4845
  lea  rcx, [ tmp4836 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ regParams ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4836 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp4839 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4839 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp4836 ]
  lea  r8 , [ tmp4839 ]
  call  __CodeGeneratorX64_lea$0
  mov eax, dword [ idx ]
  add eax, dword [ tmp4837 ]
  mov dword [ idx ], eax
  jmp l4844
l4845:
;
; END: for idx in tmp4843 .. regParamsCnt step tmp4837
; -----------------------------
;
  mov dword [ tmp4843 ], 1
  mov dword [ idx ], 4
;
; -----------------------------
; BEGIN: for idx in tmp4837 .. paramsCnt
;
l4846:
  mov eax, dword [ idx ]
  cmp eax, dword [ paramsCnt ]
  jge l4847
  lea  rcx, [ tmp4839 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4839 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal670 ]
  lea  r8 , [ tmp4839 ]
  call  __CodeGeneratorX64_lea$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal670 ]
  call  __CodeGeneratorX64_push$0
  mov eax, dword [ idx ]
  add eax, dword [ tmp4843 ]
  mov dword [ idx ], eax
  jmp l4846
l4847:
;
; END: for idx in tmp4837 .. paramsCnt step tmp4843
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ regParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4836 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4838 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4839 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore params
  restore paramsCnt
  restore regParams
  restore regParamsCnt
  restore tmp4836
  restore tmp4837
  restore tmp4838
  restore tmp4839
  restore tmp4840
  restore tmp4843
  restore idx
; -----------------------------------------------
; function __CodeGeneratorX64__hash$0
; -----------------------------------------------
__CodeGeneratorX64__hash$0:
  ; init frame
  ; ----------
  item EQU rbp - 24 ; 16 bytes
  tmp4854 EQU rbp - 40 ; 16 bytes
  tmp4853 EQU rbp - 56 ; 16 bytes
  tmp4850 EQU rbp - 60 ; 4 bytes
  tmp4849 EQU rbp - 76 ; 16 bytes
  tmp4848 EQU rbp - 92 ; 16 bytes
  rv EQU rdi
  x EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ x ], xmm0
  mov [tmp4848 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4849 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4853 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4854 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4849 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4849 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4849 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4849 ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4851
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4854 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ tmp4854 ]
  lea  rdi , [ tmp4849 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4853 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4849 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp4853 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ rv ]
  lea  rdx , [ tmp4853 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l4856
l4855:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  lea  rdi , [ tmp4849 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__hash$0
  pop rdi
  lea  rcx , [ rv ]
  lea  rdx , [ tmp4849 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
  ret
l4856:
  lea  rcx , [ x ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4855 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  jmp l4852
l4851:
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4849 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ rv ]
  lea  rdx , [ tmp4849 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin
l4852:
  lea  rcx , [ rv ]
  lea  rdx , [ __literal650 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantStringJoin

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4849 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4854 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore x
  restore rv
  restore tmp4848
  restore tmp4849
  restore tmp4850
  restore tmp4853
  restore tmp4854
  restore item
; -----------------------------------------------
; function __CodeGeneratorX64_emitConstant$0
; -----------------------------------------------
__CodeGeneratorX64_emitConstant$0:
  ; init frame
  ; ----------
  valueAsInteger EQU rbp - 24 ; 16 bytes
  hash EQU rbp - 40 ; 16 bytes
  bufferName EQU rbp - 56 ; 16 bytes
  tmp4885 EQU rbp - 60 ; 4 bytes
  tmp4884 EQU rbp - 64 ; 4 bytes
  tmp4881 EQU rbp - 68 ; 4 bytes
  tmp4878 EQU rbp - 72 ; 4 bytes
  tmp4871 EQU rbp - 88 ; 16 bytes
  tmp4870 EQU rbp - 92 ; 4 bytes
  tmp4867 EQU rbp - 96 ; 4 bytes
  tmp4866 EQU rbp - 112 ; 16 bytes
  tmp4863 EQU rbp - 116 ; 4 bytes
  tmp4861 EQU rbp - 120 ; 4 bytes
  tmp4858 EQU rbp - 124 ; 4 bytes
  tmp4857 EQU rbp - 140 ; 16 bytes
  type EQU rbp - 156 ; 16 bytes
  deepIdx EQU rbp - 172 ; 16 bytes
  wantDeepIdx EQU rbp - 188 ; 16 bytes
  value EQU rbp - 204 ; 16 bytes
  name EQU rbp - 220 ; 16 bytes
  this EQU rbp - 236 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeepIdx ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ deepIdx ], xmm0
  mov [type + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4857 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4866 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4871 + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferName + Variant_t.type], VARIANT_UNDEFINED
  mov [hash + Variant_t.type], VARIANT_UNDEFINED
  mov [valueAsInteger + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ type ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ wantDeepIdx ]
  lea rdx, [ deepIdx ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4859
  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  mov dword [ tmp4861 ], 1
  lea rcx, [ type ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4862
  lea  rcx , [ type ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp4861 ]
  call  __MOLD_VariantCompareEQ
l4862:
  cmp dword [ tmp4861 ], 0
  jz l4864
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ value ]
  lea  rdi , [ tmp4857 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__hash$0
  pop rdi
  lea  rcx, [ hash ]
  call __MOLD_VariantDestroy
  lea rcx, [ hash ]
  lea rdx, [ tmp4857 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp4866 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal653 ]
  lea  r8 , [ tmp4866 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4866 ]
  lea  rdx , [ hash ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ bufferName ]
  lea  rdi , [ tmp4857 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4867 ], 0
  mov [ tmp4866 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4867 ]
  mov [ tmp4866 + Variant_t.value], rax
  lea rcx, [ tmp4857 ]
  lea rdx, [ tmp4866 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4868
  lea  rcx , [ __literal671 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp4866 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ tmp4866 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4870 ], 1
  mov eax, dword [ tmp4870 ]
  mov [ tmp4857 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4857 + Variant_t.value], rax
  lea  rcx , [ tmp4866 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp4857 ]
  call  __MOLD_VariantStoreAtKey
  jmp l4869
l4868:
  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal672 ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4857 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal653 ]
  lea  r8 , [ tmp4857 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4857 ]
  lea  rdx , [ hash ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantStoreAtKey
l4869:
l4864:
l4865:
  lea rcx, [ type ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4872
  lea  rcx , [ 3 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal673 ]
  lea  r9 , [ value ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4873
l4872:
  lea rcx, [ type ]
  lea rdx, [ __literal34 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4874
  lea  rcx , [ 3 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal674 ]
  lea  r9 , [ value ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4875
l4874:
  lea rcx, [ type ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4876
  lea  rcx , [ 3 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal675 ]
  lea  r9 , [ bufferName ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4877
l4876:
  lea rcx, [ type ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4879
  lea  rcx , [ 3 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal676 ]
  lea  r9 , [ bufferName ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4880
l4879:
  lea rcx, [ type ]
  lea rdx, [ __literal35 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4882
  mov dword [ tmp4885 ], 1
  mov eax, dword [ tmp4885 ]
  mov [ tmp4857 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4857 + Variant_t.value], rax
  lea rcx, [ value ]
  lea rdx, [ tmp4857 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4886
  lea  rcx, [ valueAsInteger ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueAsInteger ]
  lea rdx, [ __literal677 ]
  call __MOLD_VariantMove
  jmp l4887
l4886:
  lea  rcx, [ valueAsInteger ]
  call __MOLD_VariantDestroy
  lea rcx, [ valueAsInteger ]
  lea rdx, [ __literal678 ]
  call __MOLD_VariantMove
l4887:
  lea  rcx , [ 3 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal679 ]
  lea  r9 , [ valueAsInteger ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l4883
l4882:
  lea  rcx , [ 2 ]
  lea  rdx , [ name ]
  lea  r8 , [ __literal680 ]
  call  __MOLD_PrintArrayOfVariantsLn
l4883:
l4880:
l4877:
l4875:
l4873:
l4859:
l4860:
  lea rcx, [ type ]
  lea rdx, [ __literal120 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4888
  mov dword [ tmp4867 ], 1
  mov [ tmp4866 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4867 ]
  mov [ tmp4866 + Variant_t.value], rax
  lea  rcx , [ deepIdx ]
  lea  rdx , [ tmp4866 ]
  lea  r8 , [ tmp4857 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ value ]
  lea  r9 , [ wantDeepIdx ]
  lea  rax , [ tmp4857 ]
  push rax
  call  __CodeGeneratorX64_emitArrayBufferHead$0
  add rsp, 8
  jmp l4889
l4888:
  lea rcx, [ type ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4890
  mov dword [ tmp4867 ], 1
  mov [ tmp4866 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4867 ]
  mov [ tmp4866 + Variant_t.value], rax
  lea  rcx , [ deepIdx ]
  lea  rdx , [ tmp4866 ]
  lea  r8 , [ tmp4857 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ value ]
  lea  r9 , [ wantDeepIdx ]
  lea  rax , [ tmp4857 ]
  push rax
  call  __CodeGeneratorX64_emitStringBufferHead$0
  add rsp, 8
l4890:
l4891:
l4889:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4857 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4866 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore wantDeepIdx
  restore deepIdx
  restore type
  restore tmp4857
  restore tmp4858
  restore tmp4861
  restore tmp4863
  restore tmp4866
  restore tmp4867
  restore tmp4870
  restore tmp4871
  restore tmp4878
  restore tmp4881
  restore tmp4884
  restore tmp4885
  restore bufferName
  restore hash
  restore valueAsInteger
; -----------------------------------------------
; function __CodeGeneratorX64_emitStringBufferHead$0
; -----------------------------------------------
__CodeGeneratorX64_emitStringBufferHead$0:
  ; init frame
  ; ----------
  bufferNameBytes EQU rbp - 24 ; 16 bytes
  bufferName EQU rbp - 40 ; 16 bytes
  tmp4902 EQU rbp - 56 ; 16 bytes
  tmp4899 EQU rbp - 60 ; 4 bytes
  tmp4896 EQU rbp - 64 ; 4 bytes
  tmp4895 EQU rbp - 80 ; 16 bytes
  tmp4894 EQU rbp - 96 ; 16 bytes
  tmp4893 EQU rbp - 112 ; 16 bytes
  tmp4892 EQU rbp - 116 ; 4 bytes
  deepIdx EQU rbp - 132 ; 16 bytes
  wantDeep EQU rbp - 148 ; 16 bytes
  value EQU rbp - 164 ; 16 bytes
  name EQU rbp - 180 ; 16 bytes
  this EQU rbp - 196 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 224

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeep ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ deepIdx ], xmm0
  mov [tmp4893 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4894 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4895 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4902 + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferName + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferNameBytes + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4895 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ tmp4895 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4894 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4895 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp4894 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4894 ]
  lea  rdi , [ tmp4893 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4896 ], 0
  mov [ tmp4894 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4896 ]
  mov [ tmp4894 + Variant_t.value], rax
  lea rcx, [ tmp4893 ]
  lea rdx, [ tmp4894 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4897
  lea rcx, [ wantDeep ]
  lea rdx, [ deepIdx ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4900
  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal672 ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal681 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp4893 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4896 ], 1
  mov [ tmp4895 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4896 ]
  mov [ tmp4895 + Variant_t.value], rax
  lea  rcx , [ tmp4893 ]
  lea  rdx , [ tmp4895 ]
  lea  r8 , [ tmp4894 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ 5 ]
  lea  rdx , [ bufferName ]
  lea  r8 , [ __literal682 ]
  lea  r9 , [ tmp4894 ]
  lea  rax , [ __literal683 ]
  push rax
  lea  rax , [ bufferNameBytes ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16
l4900:
l4901:
  mov dword [ tmp4896 ], 1
  mov [ tmp4895 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4896 ]
  mov [ tmp4895 + Variant_t.value], rax
  lea  rcx , [ deepIdx ]
  lea  rdx , [ tmp4895 ]
  lea  r8 , [ tmp4894 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ value ]
  lea  r9 , [ wantDeep ]
  lea  rax , [ tmp4894 ]
  push rax
  call  __CodeGeneratorX64_emitStringBufferContent$0
  add rsp, 8
l4897:
l4898:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4893 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4894 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4895 ]
  call __MOLD_VariantDestroy

  add  rsp, 224
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore wantDeep
  restore deepIdx
  restore tmp4892
  restore tmp4893
  restore tmp4894
  restore tmp4895
  restore tmp4896
  restore tmp4899
  restore tmp4902
  restore bufferName
  restore bufferNameBytes
; -----------------------------------------------
; function __CodeGeneratorX64_emitStringBufferContent$0
; -----------------------------------------------
__CodeGeneratorX64_emitStringBufferContent$0:
  ; init frame
  ; ----------
  character EQU rbp - 24 ; 16 bytes
  bufferData EQU rbp - 40 ; 16 bytes
  bufferNameBytes EQU rbp - 56 ; 16 bytes
  tmp4912 EQU rbp - 72 ; 16 bytes
  tmp4909 EQU rbp - 76 ; 4 bytes
  tmp4906 EQU rbp - 92 ; 16 bytes
  tmp4903 EQU rbp - 96 ; 4 bytes
  deepIdx EQU rbp - 112 ; 16 bytes
  wantDeep EQU rbp - 128 ; 16 bytes
  value EQU rbp - 144 ; 16 bytes
  name EQU rbp - 160 ; 16 bytes
  this EQU rbp - 176 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 208

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ value ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeep ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ deepIdx ], xmm0
  mov [tmp4906 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4912 + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferNameBytes + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferData + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea rcx, [ wantDeep ]
  lea rdx, [ deepIdx ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4904
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal681 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ bufferData ]
  call __MOLD_VariantDestroy
  lea rcx, [ bufferData ]
  lea rdx, [ __literal453 ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys undefined values character
;
  jmp l4908
l4907:
  lea rcx, [ character ]
  lea rdx, [ __literal453 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4910
  lea  rcx , [ bufferData ]
  lea  rdx , [ __literal684 ]
  lea  r8 , [ bufferData ]
  call  __MOLD_VariantStringJoin
  jmp l4911
l4910:
  lea  rcx , [ bufferData ]
  lea  rdx , [ character ]
  lea  r8 , [ bufferData ]
  call  __MOLD_VariantStringJoin
l4911:
  ret
l4908:
  lea  rcx , [ value ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ character ]
  lea  r9 , [ l4907 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values character
; -----------------------------
;
  lea  rcx , [ bufferData ]
  lea  rdx , [ __literal453 ]
  lea  r8 , [ bufferData ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ value ]
  lea  rdi , [ tmp4912 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ 3 ]
  lea  rdx , [ bufferNameBytes ]
  lea  r8 , [ __literal685 ]
  lea  r9 , [ tmp4912 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal686 ]
  lea  r8 , [ bufferData ]
  lea  r9 , [ __literal687 ]
  call  __MOLD_PrintArrayOfVariantsLn
l4904:
l4905:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4912 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator character

  add  rsp, 208
  pop  rbp
  ret

  restore this
  restore name
  restore value
  restore wantDeep
  restore deepIdx
  restore tmp4903
  restore tmp4906
  restore tmp4909
  restore tmp4912
  restore bufferNameBytes
  restore bufferData
  restore character
; -----------------------------------------------
; function __CodeGeneratorX64_emitArrayBufferHead$0
; -----------------------------------------------
__CodeGeneratorX64_emitArrayBufferHead$0:
  ; init frame
  ; ----------
  bufferNameBytes EQU rbp - 24 ; 16 bytes
  bufferName EQU rbp - 40 ; 16 bytes
  itemsCnt EQU rbp - 44 ; 4 bytes
  tmp4924 EQU rbp - 48 ; 4 bytes
  tmp4923 EQU rbp - 64 ; 16 bytes
  tmp4920 EQU rbp - 68 ; 4 bytes
  tmp4917 EQU rbp - 72 ; 4 bytes
  tmp4916 EQU rbp - 88 ; 16 bytes
  tmp4915 EQU rbp - 104 ; 16 bytes
  tmp4914 EQU rbp - 120 ; 16 bytes
  tmp4913 EQU rbp - 124 ; 4 bytes
  deepIdx EQU rbp - 140 ; 16 bytes
  wantDeepIdx EQU rbp - 156 ; 16 bytes
  items EQU rbp - 172 ; 16 bytes
  name EQU rbp - 188 ; 16 bytes
  this EQU rbp - 204 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 240

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ items ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeepIdx ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ deepIdx ], xmm0
  mov [tmp4914 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4915 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4916 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4923 + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferName + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferNameBytes + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp4916 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal654 ]
  lea  r8 , [ tmp4916 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4915 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4916 ]
  lea  rdx , [ name ]
  lea  r8 , [ tmp4915 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4915 ]
  lea  rdi , [ tmp4914 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4917 ], 0
  mov [ tmp4915 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4917 ]
  mov [ tmp4915 + Variant_t.value], rax
  lea rcx, [ tmp4914 ]
  lea rdx, [ tmp4915 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4918
  lea rcx, [ wantDeepIdx ]
  lea rdx, [ deepIdx ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4921
  push rdi
  lea  rcx , [ items ]
  lea  rdi , [ tmp4915 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4915 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4915 + Variant_t.value]
  mov dword [ itemsCnt ], eax
  lea  rcx, [ bufferName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal672 ]
  lea  r8 , [ bufferName ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal681 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin
  mov dword [ tmp4924 ], 16
  mov ecx, dword [ itemsCnt ]
  imul ecx, dword [ tmp4924 ]
  mov dword [ tmp4917 ], ecx
  mov [ tmp4915 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4917 ]
  mov [ tmp4915 + Variant_t.value], rax
  lea  rcx , [ 5 ]
  lea  rdx , [ bufferName ]
  lea  r8 , [ __literal682 ]
  lea  r9 , [ tmp4915 ]
  lea  rax , [ __literal683 ]
  push rax
  lea  rax , [ bufferNameBytes ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 16
l4921:
l4922:
  mov dword [ tmp4917 ], 1
  mov [ tmp4914 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4917 ]
  mov [ tmp4914 + Variant_t.value], rax
  lea  rcx , [ deepIdx ]
  lea  rdx , [ tmp4914 ]
  lea  r8 , [ tmp4915 ]
  call  __MOLD_VariantAdd
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ items ]
  lea  r9 , [ wantDeepIdx ]
  lea  rax , [ tmp4915 ]
  push rax
  call  __CodeGeneratorX64_emitArrayBufferContent$0
  add rsp, 8
l4918:
l4919:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4914 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4915 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4916 ]
  call __MOLD_VariantDestroy

  add  rsp, 240
  pop  rbp
  ret

  restore this
  restore name
  restore items
  restore wantDeepIdx
  restore deepIdx
  restore tmp4913
  restore tmp4914
  restore tmp4915
  restore tmp4916
  restore tmp4917
  restore tmp4920
  restore tmp4923
  restore tmp4924
  restore itemsCnt
  restore bufferName
  restore bufferNameBytes
; -----------------------------------------------
; function __CodeGeneratorX64_emitArrayBufferContent$0
; -----------------------------------------------
__CodeGeneratorX64_emitArrayBufferContent$0:
  ; init frame
  ; ----------
  tmp4966 EQU rbp - 24 ; 16 bytes
  itemIdx EQU rbp - 28 ; 4 bytes
  sep EQU rbp - 44 ; 16 bytes
  itemType EQU rbp - 60 ; 16 bytes
  bufferNameBytes EQU rbp - 76 ; 16 bytes
  goOn EQU rbp - 80 ; 4 bytes
  itemValue EQU rbp - 96 ; 16 bytes
  innerItemIdx EQU rbp - 100 ; 4 bytes
  innerAsmType EQU rbp - 116 ; 16 bytes
  innerTypeForEmit EQU rbp - 132 ; 16 bytes
  innerSize EQU rbp - 136 ; 4 bytes
  innerType EQU rbp - 152 ; 16 bytes
  tmp4959 EQU rbp - 168 ; 16 bytes
  tmp4958 EQU rbp - 172 ; 4 bytes
  tmp4955 EQU rbp - 176 ; 4 bytes
  tmp4950 EQU rbp - 180 ; 4 bytes
  tmp4945 EQU rbp - 184 ; 4 bytes
  tmp4943 EQU rbp - 188 ; 4 bytes
  tmp4941 EQU rbp - 192 ; 4 bytes
  tmp4936 EQU rbp - 196 ; 4 bytes
  tmp4935 EQU rbp - 200 ; 4 bytes
  tmp4931 EQU rbp - 204 ; 4 bytes
  tmp4930 EQU rbp - 220 ; 16 bytes
  tmp4927 EQU rbp - 224 ; 4 bytes
  tmp4926 EQU rbp - 228 ; 4 bytes
  tmp4925 EQU rbp - 244 ; 16 bytes
  itemsCnt EQU rbp - 248 ; 4 bytes
  deepIdx EQU rbp - 264 ; 16 bytes
  wantDeepIdx EQU rbp - 280 ; 16 bytes
  items EQU rbp - 296 ; 16 bytes
  name EQU rbp - 312 ; 16 bytes
  this EQU rbp - 328 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 368

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ name ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ items ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ wantDeepIdx ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ deepIdx ], xmm0
  mov [tmp4925 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4930 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4959 + Variant_t.type], VARIANT_UNDEFINED
  mov [innerType + Variant_t.type], VARIANT_UNDEFINED
  mov [innerTypeForEmit + Variant_t.type], VARIANT_UNDEFINED
  mov [innerAsmType + Variant_t.type], VARIANT_UNDEFINED
  mov [itemValue + Variant_t.type], VARIANT_UNDEFINED
  mov [bufferNameBytes + Variant_t.type], VARIANT_UNDEFINED
  mov [itemType + Variant_t.type], VARIANT_UNDEFINED
  mov [sep + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4966 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ items ]
  lea  rdi , [ tmp4925 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4925 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4925 + Variant_t.value]
  mov dword [ itemsCnt ], eax
  lea rcx, [ wantDeepIdx ]
  lea rdx, [ deepIdx ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4928
  mov dword [ tmp4926 ], 0
  lea  rcx, [ tmp4930 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ items ]
  lea  rdx , [ tmp4926 ]
  lea  r8 , [ tmp4930 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp4930 ]
  lea  rdi , [ innerType ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  mov dword [ innerSize ], 0
  lea  rcx, [ innerTypeForEmit ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerTypeForEmit ]
  lea rdx, [ __literal678 ]
  call __MOLD_VariantMove
  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal688 ]
  call __MOLD_VariantMove
  mov dword [ innerItemIdx ], 1
  lea  rcx, [ itemValue ]
  call __MOLD_VariantDestroy
  mov dword [ goOn ], 1
;
; -----------------------------
; BEGIN: while
;
l4932:
  mov dword [ tmp4931 ], 0
  mov dword [ tmp4936 ], 1
  xor  eax, eax
  or   dword [ goOn ], eax
  setz cl
  or   dword [ tmp4936 ], eax
  setz al
  xor  al, cl
  jnz l4934
  mov dword [ tmp4931 ], 0
  mov ecx, dword [ innerItemIdx ]
  cmp ecx, dword [ itemsCnt ]
  setl byte [ tmp4931 ]
l4934:
  cmp dword [ tmp4931 ], 0
  jz l4933
  lea  rcx, [ itemValue ]
  call __MOLD_VariantDestroy
  lea  rcx , [ items ]
  lea  rdx , [ innerItemIdx ]
  lea  r8 , [ itemValue ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ itemValue ]
  lea  rdi , [ itemType ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ itemType ]
  lea rdx, [ innerType ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4937
  mov dword [ goOn ], 0
  jmp l4938
l4937:
  lea rcx, [ itemType ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4939
  lea  rcx, [ innerTypeForEmit ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerTypeForEmit ]
  lea rdx, [ __literal689 ]
  call __MOLD_VariantMove
  mov dword [ tmp4941 ], 0
  mov dword [ tmp4926 ], 3
  mov eax, dword [ innerSize ]
  cmp eax, dword [ tmp4926 ]
  jge l4942
  mov dword [ tmp4943 ], 1
  mov dword [ tmp4926 ], -2147483648
  mov [ tmp4925 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4926 ]
  mov [ tmp4925 + Variant_t.value], rax
  lea rcx, [ itemValue ]
  lea rdx, [ tmp4925 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l4944
  mov dword [ tmp4926 ], 2147483647
  mov [ tmp4925 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4926 ]
  mov [ tmp4925 + Variant_t.value], rax
  lea  rcx , [ tmp4925 ]
  lea  rdx , [ itemValue ]
  lea  r8 , [ tmp4943 ]
  call  __MOLD_VariantCompareLT
l4944:
  mov eax, dword [ tmp4943 ]
  mov dword [ tmp4941 ], eax
l4942:
  cmp dword [ tmp4941 ], 0
  jz l4946
  mov dword [ innerSize ], 3
  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal690 ]
  call __MOLD_VariantMove
  jmp l4947
l4946:
  mov dword [ tmp4943 ], 0
  mov dword [ tmp4926 ], 2
  mov eax, dword [ innerSize ]
  cmp eax, dword [ tmp4926 ]
  jge l4948
  mov dword [ tmp4945 ], 1
  mov dword [ tmp4926 ], -32768
  mov [ tmp4925 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4926 ]
  mov [ tmp4925 + Variant_t.value], rax
  lea rcx, [ itemValue ]
  lea rdx, [ tmp4925 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l4949
  mov dword [ tmp4926 ], 32767
  mov [ tmp4925 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4926 ]
  mov [ tmp4925 + Variant_t.value], rax
  lea  rcx , [ tmp4925 ]
  lea  rdx , [ itemValue ]
  lea  r8 , [ tmp4945 ]
  call  __MOLD_VariantCompareLT
l4949:
  mov eax, dword [ tmp4945 ]
  mov dword [ tmp4943 ], eax
l4948:
  cmp dword [ tmp4943 ], 0
  jz l4951
  mov dword [ innerSize ], 2
  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal691 ]
  call __MOLD_VariantMove
  jmp l4952
l4951:
  mov dword [ tmp4945 ], 0
  mov dword [ tmp4926 ], 2
  mov eax, dword [ innerSize ]
  cmp eax, dword [ tmp4926 ]
  jge l4953
  mov dword [ tmp4950 ], 1
  mov dword [ tmp4926 ], -128
  mov [ tmp4925 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4926 ]
  mov [ tmp4925 + Variant_t.value], rax
  lea rcx, [ itemValue ]
  lea rdx, [ tmp4925 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l4954
  mov dword [ tmp4926 ], 127
  mov [ tmp4925 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4926 ]
  mov [ tmp4925 + Variant_t.value], rax
  lea  rcx , [ tmp4925 ]
  lea  rdx , [ itemValue ]
  lea  r8 , [ tmp4950 ]
  call  __MOLD_VariantCompareLT
l4954:
  mov eax, dword [ tmp4950 ]
  mov dword [ tmp4945 ], eax
l4953:
  cmp dword [ tmp4945 ], 0
  jz l4956
  mov dword [ innerSize ], 1
  lea  rcx, [ innerAsmType ]
  call __MOLD_VariantDestroy
  lea rcx, [ innerAsmType ]
  lea rdx, [ __literal692 ]
  call __MOLD_VariantMove
l4956:
l4957:
l4952:
l4947:
l4939:
l4940:
l4938:
  mov dword [ tmp4958 ], 1
  mov eax, dword [ innerItemIdx ]
  add eax, dword [ tmp4958 ]
  mov dword [ innerItemIdx ], eax
  jmp l4932
l4933:
;
; END: while
; -----------------------------
;
  lea  rcx, [ bufferNameBytes ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal681 ]
  lea  r8 , [ bufferNameBytes ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 4 ]
  lea  rdx , [ bufferNameBytes ]
  lea  r8 , [ __literal691 ]
  lea  r9 , [ innerTypeForEmit ]
  lea  rax , [ __literal693 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  mov [ tmp4925 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ innerSize ]
  mov [ tmp4925 + Variant_t.value], rax
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal688 ]
  lea  r8 , [ tmp4925 ]
  lea  r9 , [ __literal694 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal695 ]
  call  __MOLD_PrintVariantLn
  mov [ tmp4925 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ itemsCnt ]
  mov [ tmp4925 + Variant_t.value], rax
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal690 ]
  lea  r8 , [ tmp4925 ]
  lea  r9 , [ __literal696 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea rcx, [ innerTypeForEmit ]
  lea rdx, [ __literal678 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4960
  lea  rcx , [ innerAsmType ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal315 ]
  call __MOLD_VariantMove
  mov dword [ tmp4926 ], 1
  mov dword [ itemIdx ], 0
;
; -----------------------------
; BEGIN: for itemIdx in tmp4958 .. itemsCnt
;
l4962:
  mov eax, dword [ itemIdx ]
  cmp eax, dword [ itemsCnt ]
  jge l4963
  lea  rcx , [ sep ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ tmp4925 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ items ]
  lea  rdx , [ itemIdx ]
  lea  r8 , [ tmp4925 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp4925 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal410 ]
  call __MOLD_VariantMove
  mov eax, dword [ itemIdx ]
  add eax, dword [ tmp4926 ]
  mov dword [ itemIdx ], eax
  jmp l4962
l4963:
;
; END: for itemIdx in tmp4958 .. itemsCnt step tmp4926
; -----------------------------
;
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  mov dword [ itemsCnt ], -1
l4960:
l4961:
l4928:
l4929:
  mov dword [ tmp4958 ], 1
  mov dword [ itemIdx ], 0
;
; -----------------------------
; BEGIN: for itemIdx in tmp4926 .. itemsCnt
;
l4964:
  mov eax, dword [ itemIdx ]
  cmp eax, dword [ itemsCnt ]
  jge l4965
  mov [ tmp4930 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ itemIdx ]
  mov [ tmp4930 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp4930 ]
  lea  rdi , [ tmp4925 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp4966 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal226 ]
  lea  rdx , [ tmp4925 ]
  lea  r8 , [ tmp4966 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4959 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ tmp4966 ]
  lea  r8 , [ tmp4959 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp4925 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ items ]
  lea  rdx , [ itemIdx ]
  lea  r8 , [ tmp4925 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ tmp4959 ]
  lea  r8 , [ tmp4925 ]
  lea  r9 , [ wantDeepIdx ]
  lea  rax , [ deepIdx ]
  push rax
  call  __CodeGeneratorX64_emitConstant$0
  add rsp, 8
  mov eax, dword [ itemIdx ]
  add eax, dword [ tmp4958 ]
  mov dword [ itemIdx ], eax
  jmp l4964
l4965:
;
; END: for itemIdx in tmp4926 .. itemsCnt step tmp4958
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4925 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4930 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ innerType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ itemValue ]
  call __MOLD_VariantDestroy

  add  rsp, 368
  pop  rbp
  ret

  restore this
  restore name
  restore items
  restore wantDeepIdx
  restore deepIdx
  restore itemsCnt
  restore tmp4925
  restore tmp4926
  restore tmp4927
  restore tmp4930
  restore tmp4931
  restore tmp4935
  restore tmp4936
  restore tmp4941
  restore tmp4943
  restore tmp4945
  restore tmp4950
  restore tmp4955
  restore tmp4958
  restore tmp4959
  restore innerType
  restore innerSize
  restore innerTypeForEmit
  restore innerAsmType
  restore innerItemIdx
  restore itemValue
  restore goOn
  restore bufferNameBytes
  restore itemType
  restore sep
  restore itemIdx
  restore tmp4966
; -----------------------------------------------
; function __CodeGeneratorX64__cmp_cc_int64$0
; -----------------------------------------------
__CodeGeneratorX64__cmp_cc_int64$0:
  ; init frame
  ; ----------
  tmp4967 EQU rbp - 24 ; 16 bytes
  cc EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  dst EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0
  mov [tmp4967 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal698 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal699 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal700 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp4967 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal701 ]
  lea  rdx , [ cc ]
  lea  r8 , [ tmp4967 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 4 ]
  lea  rdx , [ tmp4967 ]
  lea  r8 , [ __literal702 ]
  lea  r9 , [ dst ]
  lea  rax , [ __literal77 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8

  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore dst
  restore x
  restore y
  restore cc
  restore tmp4967
; -----------------------------------------------
; function __CodeGeneratorX64__cmp_cc_int32$0
; -----------------------------------------------
__CodeGeneratorX64__cmp_cc_int32$0:
  ; init frame
  ; ----------
  tmp4968 EQU rbp - 24 ; 16 bytes
  cc EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  dst EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0
  mov [tmp4968 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal698 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal703 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal704 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp4968 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal701 ]
  lea  rdx , [ cc ]
  lea  r8 , [ tmp4968 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 4 ]
  lea  rdx , [ tmp4968 ]
  lea  r8 , [ __literal702 ]
  lea  r9 , [ dst ]
  lea  rax , [ __literal77 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8

  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore dst
  restore x
  restore y
  restore cc
  restore tmp4968
; -----------------------------------------------
; function __CodeGeneratorX64__cmp_cc_float64$0
; -----------------------------------------------
__CodeGeneratorX64__cmp_cc_float64$0:
  ; init frame
  ; ----------
  tmp4969 EQU rbp - 24 ; 16 bytes
  cc EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  dst EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0
  mov [tmp4969 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ __literal705 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp4969 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal701 ]
  lea  rdx , [ cc ]
  lea  r8 , [ tmp4969 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp4969 ]
  lea  r8 , [ __literal708 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore dst
  restore x
  restore y
  restore cc
  restore tmp4969
; -----------------------------------------------
; function __CodeGeneratorX64__jmp_if_cc_int64$0
; -----------------------------------------------
__CodeGeneratorX64__jmp_if_cc_int64$0:
  ; init frame
  ; ----------
  tmp4970 EQU rbp - 24 ; 16 bytes
  cc EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  dst EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0
  mov [tmp4970 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal711 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp4970 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal712 ]
  lea  rdx , [ cc ]
  lea  r8 , [ tmp4970 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp4970 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore dst
  restore x
  restore y
  restore cc
  restore tmp4970
; -----------------------------------------------
; function __CodeGeneratorX64__jmp_if_cc_int32$0
; -----------------------------------------------
__CodeGeneratorX64__jmp_if_cc_int32$0:
  ; init frame
  ; ----------
  tmp4975 EQU rbp - 24 ; 16 bytes
  tmp4972 EQU rbp - 40 ; 16 bytes
  tmp4971 EQU rbp - 44 ; 4 bytes
  cc EQU rbp - 60 ; 16 bytes
  y EQU rbp - 76 ; 16 bytes
  x EQU rbp - 92 ; 16 bytes
  dst EQU rbp - 108 ; 16 bytes
  this EQU rbp - 124 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0
  mov [tmp4972 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4975 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  push rdi
  lea  rcx , [ y ]
  lea  rdi , [ tmp4972 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4972 ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4973
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal713 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal714 ]
  lea  rax , [ y ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  jmp l4974
l4973:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal716 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
l4974:
  lea  rcx, [ tmp4975 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal712 ]
  lea  rdx , [ cc ]
  lea  r8 , [ tmp4975 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp4975 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4972 ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore dst
  restore x
  restore y
  restore cc
  restore tmp4971
  restore tmp4972
  restore tmp4975
; -----------------------------------------------
; function __CodeGeneratorX64__jmp_if_cc_variant$0
; -----------------------------------------------
__CodeGeneratorX64__jmp_if_cc_variant$0:
  ; init frame
  ; ----------
  tmp4976 EQU rbp - 24 ; 16 bytes
  cc EQU rbp - 40 ; 16 bytes
  y EQU rbp - 56 ; 16 bytes
  x EQU rbp - 72 ; 16 bytes
  dst EQU rbp - 88 ; 16 bytes
  this EQU rbp - 104 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ dst ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ x ], xmm0
  movdqu xmm0 , [ r9 ]
  movdqu [ y ], xmm0
  mov    rax, [rbp + 16 + 8 * 0 ]
  movdqu xmm0 , [ rax ]
  movdqu [ cc ], xmm0
  mov [tmp4976 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal664 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal717 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp4976 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal718 ]
  lea  rdx , [ cc ]
  lea  r8 , [ tmp4976 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp4976 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal719 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal720 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn

  ; clean frame
  ; -----------

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore dst
  restore x
  restore y
  restore cc
  restore tmp4976
; -----------------------------------------------
; function __CodeGeneratorX64__getSymbolType$0
; -----------------------------------------------
__CodeGeneratorX64__getSymbolType$0:
  ; init frame
  ; ----------
  symbolInfo EQU rbp - 24 ; 16 bytes
  tmp4985 EQU rbp - 40 ; 16 bytes
  tmp4984 EQU rbp - 44 ; 4 bytes
  tmp4983 EQU rbp - 48 ; 4 bytes
  tmp4981 EQU rbp - 52 ; 4 bytes
  tmp4978 EQU rbp - 68 ; 16 bytes
  tmp4977 EQU rbp - 72 ; 4 bytes
  rv EQU rdi
  id EQU rbp - 88 ; 16 bytes
  symbolsMap EQU rbp - 104 ; 16 bytes
  this EQU rbp - 120 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 160

  ; skipped unused param [ this ]
  movdqu xmm0 , [ rdx ]
  movdqu [ symbolsMap ], xmm0
  movdqu xmm0 , [ r8 ]
  movdqu [ id ], xmm0
  mov [tmp4978 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4985 + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolInfo + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea rcx, [ rv ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ id ]
  lea  rdi , [ tmp4978 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4978 ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l4979
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolsMap ]
  lea  rdx , [ id ]
  lea  r8 , [ symbolInfo ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4981 ], 0
  push rdi
  lea  rcx , [ symbolInfo ]
  lea  rdi , [ tmp4978 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4984 ], 0
  mov [ tmp4985 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4984 ]
  mov [ tmp4985 + Variant_t.value], rax
  lea rcx, [ tmp4978 ]
  lea rdx, [ tmp4985 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l4982
  lea  rcx, [ tmp4978 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4978 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4978 ]
  lea  rdi , [ tmp4985 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4984 ], 0
  mov [ tmp4978 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4984 ]
  mov [ tmp4978 + Variant_t.value], rax
  lea  rcx , [ tmp4985 ]
  lea  rdx , [ tmp4978 ]
  lea  r8 , [ tmp4981 ]
  call  __MOLD_VariantCompareNE
l4982:
  cmp dword [ tmp4981 ], 0
  jz l4986
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromKey
l4986:
l4987:
l4979:
l4980:

  ; clean frame
  ; -----------
  lea  rcx, [ tmp4978 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4985 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolInfo ]
  call __MOLD_VariantDestroy

  add  rsp, 160
  pop  rbp
  ret

  restore this
  restore symbolsMap
  restore id
  restore rv
  restore tmp4977
  restore tmp4978
  restore tmp4981
  restore tmp4983
  restore tmp4984
  restore tmp4985
  restore symbolInfo
; -----------------------------------------------
; function __CodeGeneratorX64_run$0
; -----------------------------------------------
__CodeGeneratorX64_run$0:
  ; init frame
  ; ----------
  procName EQU rbp - 24 ; 16 bytes
  methodPtr EQU rbp - 40 ; 16 bytes
  methodProto EQU rbp - 56 ; 16 bytes
  methodName EQU rbp - 72 ; 16 bytes
  methodIdx EQU rbp - 76 ; 4 bytes
  firstMethodFound EQU rbp - 80 ; 4 bytes
  lastUsedMethodIdx EQU rbp - 84 ; 4 bytes
  firstUsedMethodIdx EQU rbp - 88 ; 4 bytes
  vtable EQU rbp - 104 ; 16 bytes
  className EQU rbp - 120 ; 16 bytes
  classProto EQU rbp - 136 ; 16 bytes
  classIdx EQU rbp - 140 ; 4 bytes
  tmp5600 EQU rbp - 144 ; 4 bytes
  nextLabel EQU rbp - 160 ; 16 bytes
  labelIdx EQU rbp - 164 ; 4 bytes
  defaultLabel EQU rbp - 180 ; 16 bytes
  labels EQU rbp - 196 ; 16 bytes
  value EQU rbp - 212 ; 16 bytes
  symbolInfo EQU rbp - 228 ; 16 bytes
  deepIdx EQU rbp - 232 ; 4 bytes
  srcPtr EQU rbp - 248 ; 16 bytes
  varSize EQU rbp - 252 ; 4 bytes
  symbol EQU rbp - 268 ; 16 bytes
  symbolIdx EQU rbp - 272 ; 4 bytes
  v EQU rbp - 288 ; 16 bytes
  paramIdx EQU rbp - 292 ; 4 bytes
  symbolsIndex EQU rbp - 308 ; 16 bytes
  symbolsCnt EQU rbp - 312 ; 4 bytes
  paramsPassedCnt EQU rbp - 316 ; 4 bytes
  regParams EQU rbp - 332 ; 16 bytes
  currentFrame EQU rbp - 348 ; 16 bytes
  proto EQU rbp - 364 ; 16 bytes
  oneItem EQU rbp - 380 ; 16 bytes
  methodId EQU rbp - 396 ; 16 bytes
  name EQU rbp - 412 ; 16 bytes
  rv EQU rbp - 428 ; 16 bytes
  idx EQU rbp - 432 ; 4 bytes
  newParams EQU rbp - 448 ; 16 bytes
  params EQU rbp - 464 ; 16 bytes
  idxType EQU rbp - 480 ; 16 bytes
  xType EQU rbp - 496 ; 16 bytes
  dstType EQU rbp - 512 ; 16 bytes
  itemCnt EQU rbp - 516 ; 4 bytes
  item EQU rbp - 532 ; 16 bytes
  tmp5557 EQU rbp - 536 ; 4 bytes
  tmp5554 EQU rbp - 540 ; 4 bytes
  tmp5522 EQU rbp - 544 ; 4 bytes
  tmp5520 EQU rbp - 548 ; 4 bytes
  tmp5511 EQU rbp - 552 ; 4 bytes
  tmp5483 EQU rbp - 556 ; 4 bytes
  tmp5476 EQU rbp - 560 ; 4 bytes
  tmp5474 EQU rbp - 564 ; 4 bytes
  tmp5469 EQU rbp - 568 ; 4 bytes
  tmp5460 EQU rbp - 572 ; 4 bytes
  tmp5447 EQU rbp - 576 ; 4 bytes
  tmp5432 EQU rbp - 580 ; 4 bytes
  tmp5430 EQU rbp - 584 ; 4 bytes
  tmp5428 EQU rbp - 588 ; 4 bytes
  tmp5423 EQU rbp - 592 ; 4 bytes
  tmp5420 EQU rbp - 596 ; 4 bytes
  tmp5417 EQU rbp - 600 ; 4 bytes
  tmp5414 EQU rbp - 604 ; 4 bytes
  tmp5411 EQU rbp - 608 ; 4 bytes
  tmp5400 EQU rbp - 612 ; 4 bytes
  tmp5397 EQU rbp - 616 ; 4 bytes
  tmp5396 EQU rbp - 620 ; 4 bytes
  tmp5393 EQU rbp - 624 ; 4 bytes
  tmp5388 EQU rbp - 628 ; 4 bytes
  tmp5383 EQU rbp - 632 ; 4 bytes
  tmp5378 EQU rbp - 636 ; 4 bytes
  tmp5373 EQU rbp - 640 ; 4 bytes
  tmp5368 EQU rbp - 644 ; 4 bytes
  tmp5365 EQU rbp - 648 ; 4 bytes
  tmp5362 EQU rbp - 652 ; 4 bytes
  tmp5359 EQU rbp - 656 ; 4 bytes
  tmp5342 EQU rbp - 660 ; 4 bytes
  tmp5335 EQU rbp - 664 ; 4 bytes
  tmp5333 EQU rbp - 668 ; 4 bytes
  tmp5330 EQU rbp - 672 ; 4 bytes
  tmp5327 EQU rbp - 676 ; 4 bytes
  tmp5320 EQU rbp - 680 ; 4 bytes
  tmp5319 EQU rbp - 684 ; 4 bytes
  tmp5318 EQU rbp - 688 ; 4 bytes
  tmp5315 EQU rbp - 692 ; 4 bytes
  tmp5314 EQU rbp - 708 ; 16 bytes
  tmp5313 EQU rbp - 724 ; 16 bytes
  tmp5310 EQU rbp - 728 ; 4 bytes
  tmp5307 EQU rbp - 732 ; 4 bytes
  tmp5304 EQU rbp - 736 ; 4 bytes
  tmp5301 EQU rbp - 740 ; 4 bytes
  tmp5298 EQU rbp - 744 ; 4 bytes
  tmp5295 EQU rbp - 748 ; 4 bytes
  tmp5292 EQU rbp - 752 ; 4 bytes
  tmp5289 EQU rbp - 756 ; 4 bytes
  tmp5286 EQU rbp - 760 ; 4 bytes
  tmp5283 EQU rbp - 764 ; 4 bytes
  tmp5280 EQU rbp - 768 ; 4 bytes
  tmp5277 EQU rbp - 772 ; 4 bytes
  tmp5274 EQU rbp - 776 ; 4 bytes
  tmp5271 EQU rbp - 780 ; 4 bytes
  tmp5268 EQU rbp - 784 ; 4 bytes
  tmp5265 EQU rbp - 788 ; 4 bytes
  tmp5262 EQU rbp - 792 ; 4 bytes
  tmp5259 EQU rbp - 796 ; 4 bytes
  tmp5256 EQU rbp - 800 ; 4 bytes
  tmp5253 EQU rbp - 804 ; 4 bytes
  tmp5250 EQU rbp - 808 ; 4 bytes
  tmp5247 EQU rbp - 812 ; 4 bytes
  tmp5244 EQU rbp - 816 ; 4 bytes
  tmp5241 EQU rbp - 820 ; 4 bytes
  tmp5238 EQU rbp - 824 ; 4 bytes
  tmp5229 EQU rbp - 828 ; 4 bytes
  tmp5228 EQU rbp - 832 ; 4 bytes
  tmp5225 EQU rbp - 836 ; 4 bytes
  tmp5222 EQU rbp - 840 ; 4 bytes
  tmp5219 EQU rbp - 844 ; 4 bytes
  tmp5216 EQU rbp - 848 ; 4 bytes
  tmp5213 EQU rbp - 852 ; 4 bytes
  tmp5210 EQU rbp - 856 ; 4 bytes
  tmp5207 EQU rbp - 860 ; 4 bytes
  tmp5202 EQU rbp - 864 ; 4 bytes
  tmp5198 EQU rbp - 868 ; 4 bytes
  tmp5196 EQU rbp - 872 ; 4 bytes
  tmp5193 EQU rbp - 876 ; 4 bytes
  tmp5190 EQU rbp - 880 ; 4 bytes
  tmp5187 EQU rbp - 884 ; 4 bytes
  tmp5184 EQU rbp - 888 ; 4 bytes
  tmp5181 EQU rbp - 892 ; 4 bytes
  tmp5178 EQU rbp - 896 ; 4 bytes
  tmp5173 EQU rbp - 900 ; 4 bytes
  tmp5169 EQU rbp - 904 ; 4 bytes
  tmp5167 EQU rbp - 908 ; 4 bytes
  tmp5164 EQU rbp - 912 ; 4 bytes
  tmp5161 EQU rbp - 916 ; 4 bytes
  tmp5158 EQU rbp - 920 ; 4 bytes
  tmp5153 EQU rbp - 924 ; 4 bytes
  tmp5151 EQU rbp - 928 ; 4 bytes
  tmp5148 EQU rbp - 932 ; 4 bytes
  tmp5145 EQU rbp - 936 ; 4 bytes
  tmp5142 EQU rbp - 940 ; 4 bytes
  tmp5139 EQU rbp - 944 ; 4 bytes
  tmp5136 EQU rbp - 948 ; 4 bytes
  tmp5133 EQU rbp - 952 ; 4 bytes
  tmp5130 EQU rbp - 956 ; 4 bytes
  tmp5127 EQU rbp - 960 ; 4 bytes
  tmp5124 EQU rbp - 964 ; 4 bytes
  tmp5121 EQU rbp - 968 ; 4 bytes
  tmp5118 EQU rbp - 972 ; 4 bytes
  tmp5115 EQU rbp - 976 ; 4 bytes
  tmp5112 EQU rbp - 980 ; 4 bytes
  tmp5109 EQU rbp - 984 ; 4 bytes
  tmp5106 EQU rbp - 988 ; 4 bytes
  tmp5103 EQU rbp - 992 ; 4 bytes
  tmp5100 EQU rbp - 996 ; 4 bytes
  tmp5097 EQU rbp - 1000 ; 4 bytes
  tmp5094 EQU rbp - 1004 ; 4 bytes
  tmp5091 EQU rbp - 1008 ; 4 bytes
  tmp5088 EQU rbp - 1012 ; 4 bytes
  tmp5085 EQU rbp - 1016 ; 4 bytes
  tmp5082 EQU rbp - 1020 ; 4 bytes
  tmp5079 EQU rbp - 1024 ; 4 bytes
  tmp5076 EQU rbp - 1028 ; 4 bytes
  tmp5073 EQU rbp - 1032 ; 4 bytes
  tmp5070 EQU rbp - 1036 ; 4 bytes
  tmp5067 EQU rbp - 1040 ; 4 bytes
  tmp5064 EQU rbp - 1044 ; 4 bytes
  tmp5061 EQU rbp - 1048 ; 4 bytes
  tmp5058 EQU rbp - 1052 ; 4 bytes
  tmp5055 EQU rbp - 1056 ; 4 bytes
  tmp5052 EQU rbp - 1060 ; 4 bytes
  tmp5049 EQU rbp - 1064 ; 4 bytes
  tmp5046 EQU rbp - 1068 ; 4 bytes
  tmp5043 EQU rbp - 1072 ; 4 bytes
  tmp5040 EQU rbp - 1076 ; 4 bytes
  tmp5037 EQU rbp - 1080 ; 4 bytes
  tmp5032 EQU rbp - 1084 ; 4 bytes
  tmp5028 EQU rbp - 1088 ; 4 bytes
  tmp5013 EQU rbp - 1104 ; 16 bytes
  tmp5012 EQU rbp - 1120 ; 16 bytes
  tmp5011 EQU rbp - 1136 ; 16 bytes
  tmp5010 EQU rbp - 1152 ; 16 bytes
  tmp5004 EQU rbp - 1156 ; 4 bytes
  tmp5002 EQU rbp - 1160 ; 4 bytes
  tmp5000 EQU rbp - 1164 ; 4 bytes
  tmp4998 EQU rbp - 1168 ; 4 bytes
  tmp4994 EQU rbp - 1172 ; 4 bytes
  tmp4992 EQU rbp - 1176 ; 4 bytes
  tmp4989 EQU rbp - 1180 ; 4 bytes
  tmp4988 EQU rbp - 1196 ; 16 bytes
  methodsList EQU rbp - 1212 ; 16 bytes
  classList EQU rbp - 1228 ; 16 bytes
  classListCnt EQU rbp - 1244 ; 16 bytes
  globals EQU rbp - 1260 ; 16 bytes
  arrayOfProcedures EQU rbp - 1276 ; 16 bytes
  symbols EQU rbp - 1292 ; 16 bytes
  paramsCnt EQU rbp - 1296 ; 4 bytes
  originalOpcode EQU rbp - 1312 ; 16 bytes
  opcode EQU rbp - 1328 ; 16 bytes
  y EQU rbp - 1344 ; 16 bytes
  x EQU rbp - 1360 ; 16 bytes
  dst EQU rbp - 1376 ; 16 bytes
  currentFrameSize EQU rbp - 1380 ; 4 bytes
  currentSymbols EQU rbp - 1396 ; 16 bytes
  currentProcName EQU rbp - 1412 ; 16 bytes
  quads EQU rbp - 1428 ; 16 bytes
  codeObj EQU rbp - 1444 ; 16 bytes
  this EQU rbp - 1460 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 1488

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ codeObj ], xmm0
  mov [quads + Variant_t.type], VARIANT_UNDEFINED
  mov [currentProcName + Variant_t.type], VARIANT_UNDEFINED
  mov [currentSymbols + Variant_t.type], VARIANT_UNDEFINED
  mov [dst + Variant_t.type], VARIANT_UNDEFINED
  mov [x + Variant_t.type], VARIANT_UNDEFINED
  mov [y + Variant_t.type], VARIANT_UNDEFINED
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [originalOpcode + Variant_t.type], VARIANT_UNDEFINED
  mov [symbols + Variant_t.type], VARIANT_UNDEFINED
  mov [arrayOfProcedures + Variant_t.type], VARIANT_UNDEFINED
  mov [globals + Variant_t.type], VARIANT_UNDEFINED
  mov [classListCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [classList + Variant_t.type], VARIANT_UNDEFINED
  mov [methodsList + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp4988 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5010 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5011 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5012 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5013 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5313 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5314 + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [dstType + Variant_t.type], VARIANT_UNDEFINED
  mov [xType + Variant_t.type], VARIANT_UNDEFINED
  mov [idxType + Variant_t.type], VARIANT_UNDEFINED
  mov [params + Variant_t.type], VARIANT_UNDEFINED
  mov [newParams + Variant_t.type], VARIANT_UNDEFINED
  mov [rv + Variant_t.type], VARIANT_UNDEFINED
  mov [name + Variant_t.type], VARIANT_UNDEFINED
  mov [methodId + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [proto + Variant_t.type], VARIANT_UNDEFINED
  mov [currentFrame + Variant_t.type], VARIANT_UNDEFINED
  mov [regParams + Variant_t.type], VARIANT_UNDEFINED
  mov [symbolsIndex + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [symbol + Variant_t.type], VARIANT_UNDEFINED
  mov [srcPtr + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [value + Variant_t.type], VARIANT_UNDEFINED
  mov [labels + Variant_t.type], VARIANT_UNDEFINED
  mov [defaultLabel + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [className + Variant_t.type], VARIANT_UNDEFINED
  mov [vtable + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [methodPtr + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined

  ; code
  ; ----
  lea  rcx , [ __literal721 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal722 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal723 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal725 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal726 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal727 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal728 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ quads ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ quads ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ currentProcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentSymbols ]
  call  __MOLD_VariantMapCreate
  mov dword [ currentFrameSize ], 0
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea rcx, [ opcode ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
  lea  rcx, [ originalOpcode ]
  call __MOLD_VariantDestroy
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
  mov dword [ paramsCnt ], 0
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbols ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ arrayOfProcedures ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arrayOfProcedures ]
  call  __MOLD_VariantArrayCreate
;
; -----------------------------
; BEGIN: for keys undefined values item
;
  jmp l4991
l4990:
  push rdi
  lea  rcx , [ item ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4988 + Variant_t.value]
  mov dword [ itemCnt ], eax
  mov dword [ tmp4989 ], 0
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4989 ], 1
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4989 ], 2
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ x ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp4989 ], 3
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ y ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ originalOpcode ]
  call __MOLD_VariantDestroy
  lea rcx, [ originalOpcode ]
  lea rdx, [ opcode ]
  call __MOLD_VariantMove
  lea  rcx, [ dstType ]
  call __MOLD_VariantDestroy
  lea rcx, [ dstType ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove
  lea  rcx, [ xType ]
  call __MOLD_VariantDestroy
  lea rcx, [ xType ]
  lea rdx, [ __literal130 ]
  call __MOLD_VariantMove
  mov dword [ tmp4992 ], 0
  mov dword [ tmp4989 ], 2
  mov eax, dword [ itemCnt ]
  cmp eax, dword [ tmp4989 ]
  jle l4993
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp4992 ]
  call  __MOLD_VariantCompareEQ
l4993:
  cmp dword [ tmp4992 ], 0
  jz l4995
  mov dword [ tmp4994 ], 0
  mov dword [ tmp4998 ], 0
  mov dword [ tmp5000 ], 0
  mov dword [ tmp5002 ], 0
  lea rcx, [ opcode ]
  lea rdx, [ __literal102 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5003
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal104 ]
  lea  r8 , [ tmp5002 ]
  call  __MOLD_VariantCompareNE
l5003:
  cmp dword [ tmp5002 ], 0
  jz l5001
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal607 ]
  lea  r8 , [ tmp5000 ]
  call  __MOLD_VariantCompareNE
l5001:
  cmp dword [ tmp5000 ], 0
  jz l4999
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal614 ]
  lea  r8 , [ tmp4998 ]
  call  __MOLD_VariantCompareNE
l4999:
  cmp dword [ tmp4998 ], 0
  jz l4997
  mov dword [ tmp4998 ], 1
  mov dword [ tmp4989 ], 0
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp4988 ]
  lea rdx, [ __literal729 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5005
  mov dword [ tmp4989 ], 1
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ __literal86 ]
  lea  r8 , [ tmp4998 ]
  call  __MOLD_VariantCompareEQ
l5005:
  mov eax, dword [ tmp4998 ]
  mov dword [ tmp4994 ], eax
l4997:
  cmp dword [ tmp4994 ], 0
  jz l5006
  lea rcx, [ opcode ]
  lea rdx, [ __literal609 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5008
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ currentSymbols ]
  lea  r8 , [ dst ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__getSymbolType$0
  pop rdi
  lea  rcx, [ dstType ]
  call __MOLD_VariantDestroy
  lea rcx, [ dstType ]
  lea rdx, [ tmp4988 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ currentSymbols ]
  lea  r8 , [ y ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__getSymbolType$0
  pop rdi
  lea  rcx, [ idxType ]
  call __MOLD_VariantDestroy
  lea rcx, [ idxType ]
  lea rdx, [ tmp4988 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5013 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal730 ]
  lea  rdx , [ idxType ]
  lea  r8 , [ tmp5013 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5012 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dstType ]
  lea  rdx , [ tmp5013 ]
  lea  r8 , [ tmp5012 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal226 ]
  lea  rdx , [ tmp5012 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStringJoin
  jmp l5009
l5008:
  push rdi
  lea  rcx , [ this ]
  lea  rdx , [ currentSymbols ]
  lea  r8 , [ x ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64__getSymbolType$0
  pop rdi
  lea  rcx, [ xType ]
  call __MOLD_VariantDestroy
  lea rcx, [ xType ]
  lea rdx, [ tmp4988 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal226 ]
  lea  rdx , [ xType ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ opcode ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStringJoin
l5009:
l5006:
l5007:
l4995:
l4996:
  lea rcx, [ opcode ]
  lea rdx, [ __literal116 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5014
  lea  rcx , [ __literal731 ]
  call  __MOLD_PrintVariantLn
  jmp l5015
l5014:
  lea rcx, [ opcode ]
  lea rdx, [ __literal575 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5016
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal650 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5017
l5016:
  lea rcx, [ opcode ]
  lea rdx, [ __literal143 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5018
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ dst ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  call  __MOLD_PrintVariantLn
  jmp l5019
l5018:
  mov dword [ tmp5000 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal732 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5020
  mov dword [ tmp5002 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal733 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5021
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal734 ]
  lea  r8 , [ tmp5002 ]
  call  __MOLD_VariantCompareEQ
l5021:
  mov eax, dword [ tmp5002 ]
  mov dword [ tmp5000 ], eax
l5020:
  cmp dword [ tmp5000 ], 0
  jz l5022
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  call  __CodeGeneratorX64_variantMove$0
  jmp l5023
l5022:
  mov dword [ tmp5002 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal735 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5024
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal736 ]
  lea  r8 , [ tmp5002 ]
  call  __MOLD_VariantCompareEQ
l5024:
  cmp dword [ tmp5002 ], 0
  jz l5025
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5026
l5025:
  mov dword [ tmp5004 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal737 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5027
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal738 ]
  lea  r8 , [ tmp5004 ]
  call  __MOLD_VariantCompareEQ
l5027:
  cmp dword [ tmp5004 ], 0
  jz l5029
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5030
l5029:
  mov dword [ tmp5028 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal741 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5031
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal742 ]
  lea  r8 , [ tmp5028 ]
  call  __MOLD_VariantCompareEQ
l5031:
  cmp dword [ tmp5028 ], 0
  jz l5033
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ __literal743 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal744 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5034
l5033:
  lea rcx, [ opcode ]
  lea rdx, [ __literal746 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5035
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ __literal747 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal744 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5036
l5035:
  lea rcx, [ opcode ]
  lea rdx, [ __literal748 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5038
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ __literal749 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal744 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5039
l5038:
  lea rcx, [ opcode ]
  lea rdx, [ __literal750 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5041
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal751 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5042
l5041:
  lea rcx, [ opcode ]
  lea rdx, [ __literal752 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5044
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal753 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5045
l5044:
  lea rcx, [ opcode ]
  lea rdx, [ __literal754 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5047
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal755 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5048
l5047:
  lea rcx, [ opcode ]
  lea rdx, [ __literal756 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5050
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal699 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal757 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal758 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5051
l5050:
  lea rcx, [ opcode ]
  lea rdx, [ __literal759 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5053
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal760 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal761 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal762 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal763 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5054
l5053:
  lea rcx, [ opcode ]
  lea rdx, [ __literal764 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5056
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal765 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal766 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal767 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal768 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal769 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5057
l5056:
  lea rcx, [ opcode ]
  lea rdx, [ __literal770 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5059
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal771 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$0
  add rsp, 8
  jmp l5060
l5059:
  lea rcx, [ opcode ]
  lea rdx, [ __literal772 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5062
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal773 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$0
  add rsp, 8
  jmp l5063
l5062:
  lea rcx, [ opcode ]
  lea rdx, [ __literal774 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5065
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal205 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$0
  add rsp, 8
  jmp l5066
l5065:
  lea rcx, [ opcode ]
  lea rdx, [ __literal775 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5068
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal98 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$0
  add rsp, 8
  jmp l5069
l5068:
  lea rcx, [ opcode ]
  lea rdx, [ __literal776 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5071
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal777 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$0
  add rsp, 8
  jmp l5072
l5071:
  lea rcx, [ opcode ]
  lea rdx, [ __literal778 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5074
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal100 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int64$0
  add rsp, 8
  jmp l5075
l5074:
  lea rcx, [ opcode ]
  lea rdx, [ __literal779 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5077
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal780 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5078
l5077:
  lea rcx, [ opcode ]
  lea rdx, [ __literal781 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5080
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal782 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5081
l5080:
  lea rcx, [ opcode ]
  lea rdx, [ __literal783 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5083
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal784 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5084
l5083:
  lea rcx, [ opcode ]
  lea rdx, [ __literal785 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5086
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal703 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal786 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal787 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5087
l5086:
  lea rcx, [ opcode ]
  lea rdx, [ __literal788 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5089
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal789 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal790 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal762 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal763 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5090
l5089:
  lea rcx, [ opcode ]
  lea rdx, [ __literal791 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5092
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal792 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal793 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal794 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal795 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal796 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5093
l5092:
  lea rcx, [ opcode ]
  lea rdx, [ __literal797 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5095
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal771 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$0
  add rsp, 8
  jmp l5096
l5095:
  lea rcx, [ opcode ]
  lea rdx, [ __literal798 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5098
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal773 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$0
  add rsp, 8
  jmp l5099
l5098:
  lea rcx, [ opcode ]
  lea rdx, [ __literal799 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5101
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal205 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$0
  add rsp, 8
  jmp l5102
l5101:
  lea rcx, [ opcode ]
  lea rdx, [ __literal800 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5104
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal98 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$0
  add rsp, 8
  jmp l5105
l5104:
  lea rcx, [ opcode ]
  lea rdx, [ __literal801 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5107
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal777 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$0
  add rsp, 8
  jmp l5108
l5107:
  lea rcx, [ opcode ]
  lea rdx, [ __literal802 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5110
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal100 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_int32$0
  add rsp, 8
  jmp l5111
l5110:
  lea rcx, [ opcode ]
  lea rdx, [ __literal803 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5113
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal804 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5114
l5113:
  lea rcx, [ opcode ]
  lea rdx, [ __literal805 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5116
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal806 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal807 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal808 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5117
l5116:
  lea rcx, [ opcode ]
  lea rdx, [ __literal809 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5119
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal806 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal810 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal808 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5120
l5119:
  lea rcx, [ opcode ]
  lea rdx, [ __literal811 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5122
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal806 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal812 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal808 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5123
l5122:
  lea rcx, [ opcode ]
  lea rdx, [ __literal813 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5125
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal806 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal814 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal808 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5126
l5125:
  lea rcx, [ opcode ]
  lea rdx, [ __literal815 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5128
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal816 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal817 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal762 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal818 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal819 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5129
l5128:
  lea rcx, [ opcode ]
  lea rdx, [ __literal820 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5131
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal771 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$0
  add rsp, 8
  jmp l5132
l5131:
  lea rcx, [ opcode ]
  lea rdx, [ __literal821 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5134
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal773 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$0
  add rsp, 8
  jmp l5135
l5134:
  lea rcx, [ opcode ]
  lea rdx, [ __literal822 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5137
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal84 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$0
  add rsp, 8
  jmp l5138
l5137:
  lea rcx, [ opcode ]
  lea rdx, [ __literal823 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5140
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal824 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$0
  add rsp, 8
  jmp l5141
l5140:
  lea rcx, [ opcode ]
  lea rdx, [ __literal825 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5143
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal85 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$0
  add rsp, 8
  jmp l5144
l5143:
  lea rcx, [ opcode ]
  lea rdx, [ __literal826 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5146
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal827 ]
  push rax
  call  __CodeGeneratorX64__cmp_cc_float64$0
  add rsp, 8
  jmp l5147
l5146:
  lea rcx, [ opcode ]
  lea rdx, [ __literal828 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5149
  lea  rcx , [ this ]
  lea  rdx , [ __literal829 ]
  lea  r8 , [ x ]
  lea  r9 , [ dst ]
  call  __CodeGeneratorX64_call2$0
  jmp l5150
l5149:
  mov dword [ tmp5151 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal830 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5152
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal831 ]
  lea  r8 , [ tmp5151 ]
  call  __MOLD_VariantCompareEQ
l5152:
  cmp dword [ tmp5151 ], 0
  jz l5154
  lea  rcx , [ this ]
  lea  rdx , [ __literal832 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5155
l5154:
  lea rcx, [ opcode ]
  lea rdx, [ __literal833 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5156
  lea  rcx , [ this ]
  lea  rdx , [ __literal834 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5157
l5156:
  lea rcx, [ opcode ]
  lea rdx, [ __literal835 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5159
  lea  rcx , [ this ]
  lea  rdx , [ __literal836 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5160
l5159:
  lea rcx, [ opcode ]
  lea rdx, [ __literal837 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5162
  lea  rcx , [ this ]
  lea  rdx , [ __literal838 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5163
l5162:
  lea rcx, [ opcode ]
  lea rdx, [ __literal839 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5165
  lea  rcx , [ this ]
  lea  rdx , [ __literal840 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5166
l5165:
  mov dword [ tmp5167 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal841 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5168
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal842 ]
  lea  r8 , [ tmp5167 ]
  call  __MOLD_VariantCompareEQ
l5168:
  cmp dword [ tmp5167 ], 0
  jz l5170
  lea  rcx , [ this ]
  lea  rdx , [ __literal843 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5171
l5170:
  mov dword [ tmp5169 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal844 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5172
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal845 ]
  lea  r8 , [ tmp5169 ]
  call  __MOLD_VariantCompareEQ
l5172:
  cmp dword [ tmp5169 ], 0
  jz l5174
  lea  rcx , [ this ]
  lea  rdx , [ __literal846 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5175
l5174:
  lea rcx, [ opcode ]
  lea rdx, [ __literal847 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5176
  lea  rcx , [ this ]
  lea  rdx , [ __literal848 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5177
l5176:
  lea rcx, [ opcode ]
  lea rdx, [ __literal849 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5179
  lea  rcx , [ this ]
  lea  rdx , [ __literal850 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5180
l5179:
  lea rcx, [ opcode ]
  lea rdx, [ __literal851 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5182
  lea  rcx , [ this ]
  lea  rdx , [ __literal848 ]
  lea  r8 , [ y ]
  lea  r9 , [ x ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5183
l5182:
  lea rcx, [ opcode ]
  lea rdx, [ __literal852 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5185
  lea  rcx , [ this ]
  lea  rdx , [ __literal850 ]
  lea  r8 , [ y ]
  lea  r9 , [ x ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5186
l5185:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal585 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5188
  lea  rcx , [ this ]
  lea  rdx , [ __literal853 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3AndDestroy$0
  add rsp, 8
  jmp l5189
l5188:
  lea rcx, [ opcode ]
  lea rdx, [ __literal854 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5191
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal855 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal856 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal857 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal858 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5192
l5191:
  lea rcx, [ opcode ]
  lea rdx, [ __literal859 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5194
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal857 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal858 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5195
l5194:
  mov dword [ tmp5196 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal860 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5197
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal861 ]
  lea  r8 , [ tmp5196 ]
  call  __MOLD_VariantCompareEQ
l5197:
  cmp dword [ tmp5196 ], 0
  jz l5199
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal862 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$0
  add rsp, 8
  jmp l5200
l5199:
  mov dword [ tmp5198 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal863 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5201
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal864 ]
  lea  r8 , [ tmp5198 ]
  call  __MOLD_VariantCompareEQ
l5201:
  cmp dword [ tmp5198 ], 0
  jz l5203
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal865 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$0
  add rsp, 8
  jmp l5204
l5203:
  lea rcx, [ opcode ]
  lea rdx, [ __literal866 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5205
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal867 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$0
  add rsp, 8
  jmp l5206
l5205:
  lea rcx, [ opcode ]
  lea rdx, [ __literal868 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5208
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal869 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$0
  add rsp, 8
  jmp l5209
l5208:
  lea rcx, [ opcode ]
  lea rdx, [ __literal870 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5211
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ y ]
  lea  r9 , [ x ]
  lea  rax , [ __literal867 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$0
  add rsp, 8
  jmp l5212
l5211:
  lea rcx, [ opcode ]
  lea rdx, [ __literal871 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5214
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ y ]
  lea  r9 , [ x ]
  lea  rax , [ __literal869 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_variant$0
  add rsp, 8
  jmp l5215
l5214:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal592 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5217
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  jmp l5218
l5217:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal872 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5220
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal873 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5221
l5220:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal593 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5223
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal714 ]
  lea  rax , [ x ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  jmp l5224
l5223:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal596 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5226
  mov dword [ tmp5229 ], 1
  mov eax, dword [ tmp5229 ]
  mov [ tmp4988 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ x ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5230
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5010 ]
  lea rdx, [ __const5232 ]
  call __MOLD_VariantMove
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal714 ]
  lea  rax , [ tmp5010 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  jmp l5231
l5230:
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5010 ]
  lea rdx, [ __const5233 ]
  call __MOLD_VariantMove
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal714 ]
  lea  rax , [ tmp5010 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
l5231:
  jmp l5227
l5226:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal595 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5234
  lea  rcx , [ __literal874 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal875 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5235
l5234:
  lea rcx, [ opcode ]
  lea rdx, [ __literal876 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5236
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal771 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$0
  add rsp, 8
  jmp l5237
l5236:
  lea rcx, [ opcode ]
  lea rdx, [ __literal877 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5239
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal773 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$0
  add rsp, 8
  jmp l5240
l5239:
  lea rcx, [ opcode ]
  lea rdx, [ __literal878 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5242
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal205 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$0
  add rsp, 8
  jmp l5243
l5242:
  lea rcx, [ opcode ]
  lea rdx, [ __literal879 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5245
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal98 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$0
  add rsp, 8
  jmp l5246
l5245:
  lea rcx, [ opcode ]
  lea rdx, [ __literal880 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5248
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal777 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$0
  add rsp, 8
  jmp l5249
l5248:
  lea rcx, [ opcode ]
  lea rdx, [ __literal881 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5251
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal100 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int64$0
  add rsp, 8
  jmp l5252
l5251:
  lea rcx, [ opcode ]
  lea rdx, [ __literal882 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5254
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal771 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$0
  add rsp, 8
  jmp l5255
l5254:
  lea rcx, [ opcode ]
  lea rdx, [ __literal883 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5257
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal773 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$0
  add rsp, 8
  jmp l5258
l5257:
  lea rcx, [ opcode ]
  lea rdx, [ __literal884 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5260
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal205 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$0
  add rsp, 8
  jmp l5261
l5260:
  lea rcx, [ opcode ]
  lea rdx, [ __literal885 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5263
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal98 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$0
  add rsp, 8
  jmp l5264
l5263:
  lea rcx, [ opcode ]
  lea rdx, [ __literal886 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5266
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal777 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$0
  add rsp, 8
  jmp l5267
l5266:
  lea rcx, [ opcode ]
  lea rdx, [ __literal887 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5269
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ __literal100 ]
  push rax
  call  __CodeGeneratorX64__jmp_if_cc_int32$0
  add rsp, 8
  jmp l5270
l5269:
  lea rcx, [ opcode ]
  lea rdx, [ __literal888 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5272
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal713 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal698 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal720 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5273
l5272:
  lea rcx, [ opcode ]
  lea rdx, [ __literal889 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5275
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal713 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal698 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal890 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5276
l5275:
  lea rcx, [ opcode ]
  lea rdx, [ __literal891 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5278
  lea  rcx , [ __literal892 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal893 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal894 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal893 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal895 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal896 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal720 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5279
l5278:
  lea rcx, [ opcode ]
  lea rdx, [ __literal897 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5281
  lea  rcx , [ __literal898 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal899 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal900 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal899 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal901 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal902 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal720 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5282
l5281:
  lea rcx, [ opcode ]
  lea rdx, [ __literal903 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5284
  lea  rcx , [ __literal892 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal893 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal894 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal893 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal895 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal896 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal904 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5285
l5284:
  lea rcx, [ opcode ]
  lea rdx, [ __literal905 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5287
  lea  rcx , [ __literal898 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal899 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal900 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal899 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal901 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal902 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal796 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5288
l5287:
  lea rcx, [ opcode ]
  lea rdx, [ __literal906 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5290
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal890 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5291
l5290:
  lea rcx, [ opcode ]
  lea rdx, [ __literal907 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5293
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal720 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5294
l5293:
  lea rcx, [ opcode ]
  lea rdx, [ __literal908 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5296
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal909 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5297
l5296:
  lea rcx, [ opcode ]
  lea rdx, [ __literal910 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5299
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal911 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5300
l5299:
  lea rcx, [ opcode ]
  lea rdx, [ __literal912 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5302
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal913 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5303
l5302:
  lea rcx, [ opcode ]
  lea rdx, [ __literal914 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5305
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal706 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal707 ]
  lea  r8 , [ y ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal915 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5306
l5305:
  lea rcx, [ opcode ]
  lea rdx, [ __literal608 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5308
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea rcx, [ params ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4988 + Variant_t.value]
  mov dword [ paramsCnt ], eax
  mov dword [ tmp4989 ], 1
  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp4989 ]
  jnz l5311
  mov dword [ tmp4989 ], 0
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal916 ]
  lea  r8 , [ tmp4988 ]
  call  __CodeGeneratorX64_call1$0
  jmp l5312
l5311:
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4988 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp5313 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5313 + Variant_t.value], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ tmp5313 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  lea rcx, [ newParams ]
  lea rdx, [ tmp4988 ]
  call __MOLD_VariantMove
  mov dword [ tmp4989 ], 1
  mov dword [ idx ], 0
;
; -----------------------------
; BEGIN: for idx in tmp5315 .. paramsCnt
;
l5316:
  mov eax, dword [ idx ]
  cmp eax, dword [ paramsCnt ]
  jge l5317
  mov dword [ tmp5319 ], 1
  mov eax, dword [ idx ]
  add eax, dword [ tmp5319 ]
  mov dword [ tmp5318 ], eax
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ params ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ newParams ]
  lea  rdx , [ tmp5318 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov eax, dword [ idx ]
  add eax, dword [ tmp4989 ]
  mov dword [ idx ], eax
  jmp l5316
l5317:
;
; END: for idx in tmp5315 .. paramsCnt step tmp4989
; -----------------------------
;
  mov dword [ tmp4989 ], 1
  mov eax, dword [ paramsCnt ]
  add eax, dword [ tmp4989 ]
  mov dword [ paramsCnt ], eax
  lea  rcx , [ this ]
  lea  rdx , [ newParams ]
  call  __CodeGeneratorX64_pushParametersBeforeCall$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal917 ]
  call  __CodeGeneratorX64_call$0
  mov dword [ tmp5315 ], 4
  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp5315 ]
  jle l5321
  mov dword [ tmp5318 ], 8
  mov ecx, dword [ paramsCnt ]
  imul ecx, dword [ tmp5318 ]
  mov dword [ tmp4989 ], ecx
  mov dword [ tmp5318 ], 32
  mov eax, dword [ tmp4989 ]
  sub eax, dword [ tmp5318 ]
  mov dword [ tmp5315 ], eax
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal918 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5321:
l5322:
l5312:
  jmp l5309
l5308:
  lea rcx, [ opcode ]
  lea rdx, [ __literal919 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5323
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal920 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal921 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal922 ]
  call  __MOLD_PrintVariantLn
  jmp l5324
l5323:
  lea rcx, [ opcode ]
  lea rdx, [ __literal923 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5325
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal924 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal921 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal922 ]
  call  __MOLD_PrintVariantLn
  jmp l5326
l5325:
  lea rcx, [ opcode ]
  lea rdx, [ __literal925 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5328
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal920 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal926 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal922 ]
  call  __MOLD_PrintVariantLn
  jmp l5329
l5328:
  lea rcx, [ opcode ]
  lea rdx, [ __literal927 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5331
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal928 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal665 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal929 ]
  call  __MOLD_PrintVariantLn
  jmp l5332
l5331:
  mov dword [ tmp5333 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal102 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5334
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal607 ]
  lea  r8 , [ tmp5333 ]
  call  __MOLD_VariantCompareEQ
l5334:
  cmp dword [ tmp5333 ], 0
  jz l5336
  mov dword [ tmp5315 ], 1
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5315 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5315 ], 2
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5315 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5315 ], 3
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5315 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4988 + Variant_t.value]
  mov dword [ paramsCnt ], eax
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5315 ], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5338
  lea  rcx , [ this ]
  lea  rdx , [ __literal930 ]
  call  __CodeGeneratorX64_push$0
  lea  rcx , [ this ]
  lea  rdx , [ params ]
  call  __CodeGeneratorX64_pushParametersBeforeCall$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal930 ]
  lea  r8 , [ rv ]
  call  __CodeGeneratorX64_lea$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal931 ]
  lea  r8 , [ __literal932 ]
  call  __CodeGeneratorX64_mov$0
  jmp l5339
l5338:
  lea  rcx , [ this ]
  lea  rdx , [ params ]
  call  __CodeGeneratorX64_pushParametersBeforeCall$0
l5339:
  lea rcx, [ opcode ]
  lea rdx, [ __literal607 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5340
  push rdi
  lea  rcx , [ name ]
  lea  rdi , [ tmp5314 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp5314 ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5343
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal933 ]
  lea  r8 , [ name ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5344
l5343:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ name ]
  lea  r9 , [ __literal856 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5344:
  lea  rcx , [ this ]
  lea  rdx , [ __literal934 ]
  call  __CodeGeneratorX64_call$0
  jmp l5341
l5340:
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  call  __CodeGeneratorX64_call$0
l5341:
  mov dword [ tmp5315 ], 4
  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp5315 ]
  jle l5345
  mov dword [ tmp4989 ], 8
  mov ecx, dword [ paramsCnt ]
  imul ecx, dword [ tmp4989 ]
  mov dword [ tmp5318 ], ecx
  mov dword [ tmp4989 ], 32
  mov eax, dword [ tmp5318 ]
  sub eax, dword [ tmp4989 ]
  mov dword [ tmp5315 ], eax
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal918 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5345:
l5346:
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp5314 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5315 ], 0
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5347
  lea  rcx , [ this ]
  lea  rdx , [ __literal930 ]
  call  __CodeGeneratorX64_pop$0
l5347:
l5348:
  jmp l5337
l5336:
  lea rcx, [ opcode ]
  lea rdx, [ __literal104 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5349
  mov dword [ tmp5315 ], 1
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5315 ]
  lea  r8 , [ rv ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5315 ], 2
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5315 ]
  lea  r8 , [ methodId ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5315 ], 3
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5315 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4988 + Variant_t.value]
  mov dword [ paramsCnt ], eax
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5315 ], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5351
  lea  rcx , [ this ]
  lea  rdx , [ __literal930 ]
  call  __CodeGeneratorX64_push$0
  lea  rcx , [ this ]
  lea  rdx , [ params ]
  call  __CodeGeneratorX64_pushParametersBeforeCall$0
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal935 ]
  lea  r8 , [ rv ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal936 ]
  call  __MOLD_PrintVariantLn
  jmp l5352
l5351:
  lea  rcx , [ this ]
  lea  rdx , [ params ]
  call  __CodeGeneratorX64_pushParametersBeforeCall$0
l5352:
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal937 ]
  lea  r8 , [ methodId ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal938 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp5315 ], 4
  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp5315 ]
  jle l5353
  mov dword [ tmp5318 ], 8
  mov ecx, dword [ paramsCnt ]
  imul ecx, dword [ tmp5318 ]
  mov dword [ tmp4989 ], ecx
  mov dword [ tmp5318 ], 32
  mov eax, dword [ tmp4989 ]
  sub eax, dword [ tmp5318 ]
  mov dword [ tmp5315 ], eax
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal918 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5353:
l5354:
  push rdi
  lea  rcx , [ rv ]
  lea  rdi , [ tmp5314 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5315 ], 0
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5355
  lea  rcx , [ this ]
  lea  rdx , [ __literal930 ]
  call  __CodeGeneratorX64_pop$0
l5355:
l5356:
  jmp l5350
l5349:
  lea rcx, [ opcode ]
  lea rdx, [ __literal614 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5357
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal667 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ __literal77 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal939 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal940 ]
  call  __MOLD_PrintVariantLn
  jmp l5358
l5357:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal941 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5360
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal942 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal943 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5361
l5360:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal944 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5363
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal945 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal943 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5364
l5363:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal598 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5366
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal946 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal947 ]
  call  __MOLD_PrintArrayOfVariantsLn
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4988 ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5369
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal946 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal948 ]
  lea  rax , [ x ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  jmp l5370
l5369:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal949 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal946 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal950 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5370:
  jmp l5367
l5366:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal594 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5371
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4988 ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5374
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal873 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5375
l5374:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5375:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal946 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal947 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal946 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal950 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5372
l5371:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal599 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5376
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4988 ]
  lea rdx, [ __literal34 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5379
  lea  rcx , [ __literal874 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal875 ]
  lea  r8 , [ x ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5380
l5379:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5380:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal946 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal951 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal946 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal950 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5377
l5376:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal952 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5381
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4988 ]
  lea rdx, [ __literal34 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5384
  lea  rcx , [ __literal953 ]
  mov eax,  41
  call  __MOLD_SysCall
  jmp l5385
l5384:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal954 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5385:
  jmp l5382
l5381:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal955 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5386
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4988 ]
  lea rdx, [ __literal34 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5389
  lea  rcx , [ __literal956 ]
  mov eax,  41
  call  __MOLD_SysCall
  jmp l5390
l5389:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal957 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5390:
  jmp l5387
l5386:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal600 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5391
  push rdi
  lea  rcx , [ x ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp4988 ]
  lea rdx, [ __literal35 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5394
  mov dword [ tmp5397 ], 1
  mov eax, dword [ tmp5397 ]
  mov [ tmp4988 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ x ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5398
  lea  rcx , [ __literal958 ]
  call  __MOLD_PrintVariantLn
  jmp l5399
l5398:
  mov dword [ tmp5400 ], 0
  mov eax, dword [ tmp5400 ]
  mov [ tmp4988 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ x ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5401
  lea  rcx , [ __literal959 ]
  call  __MOLD_PrintVariantLn
l5401:
l5402:
l5399:
  jmp l5395
l5394:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5395:
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal946 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal960 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal946 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal950 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5392
l5391:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal961 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5403
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal962 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal960 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal963 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal856 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5404
l5403:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal964 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5405
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal962 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal947 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal965 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal856 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5406
l5405:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal966 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5407
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal962 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal947 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal965 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal856 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5408
l5407:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal967 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5409
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal962 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal951 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal968 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal856 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ dst ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5410
l5409:
  lea rcx, [ opcode ]
  lea rdx, [ __literal969 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5412
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal970 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal971 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal972 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5413
l5412:
  lea rcx, [ opcode ]
  lea rdx, [ __literal973 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5415
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal970 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal971 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal974 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5416
l5415:
  lea rcx, [ opcode ]
  lea rdx, [ __literal975 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5418
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal970 ]
  lea  r8 , [ x ]
  lea  r9 , [ __literal976 ]
  lea  rax , [ y ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal977 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5419
l5418:
  lea rcx, [ opcode ]
  lea rdx, [ __literal624 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5421
  lea  rcx , [ __literal978 ]
  call  __MOLD_PrintVariantLn
  jmp l5422
l5421:
  lea rcx, [ opcode ]
  lea rdx, [ __literal582 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5424
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal979 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal980 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea rcx, [ symbols ]
  lea rdx, [ currentSymbols ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys undefined values oneItem
;
  jmp l5427
l5426:
  mov dword [ tmp5428 ], 0
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5315 ], 1
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5429
  mov dword [ tmp5430 ], 1
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4988 ]
  lea  rdi , [ tmp5314 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5315 ], 0
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5431
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ __literal130 ]
  lea  r8 , [ tmp5430 ]
  call  __MOLD_VariantCompareEQ
l5431:
  mov eax, dword [ tmp5430 ]
  mov dword [ tmp5428 ], eax
l5429:
  cmp dword [ tmp5428 ], 0
  jz l5433
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal247 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5314 ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5315 ], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5435
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal981 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5436
l5435:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp5314 ]
  call  __CodeGeneratorX64_variantDestroy$0
l5436:
l5433:
l5434:
  ret
l5427:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5426 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneItem
; -----------------------------
;
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal652 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5430 ], 1
  mov eax, dword [ tmp5430 ]
  mov [ tmp4988 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5437
  lea  rcx , [ __literal982 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal983 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal984 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal985 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal986 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal987 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentProcName ]
  lea  rdx , [ __literal989 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal988 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal990 ]
  call  __MOLD_PrintVariantLn
  lea rcx, [ currentProcName ]
  lea rdx, [ __literal550 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5439
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal991 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal992 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal993 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal994 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
l5439:
l5440:
l5437:
l5438:
  lea rcx, [ currentProcName ]
  lea rdx, [ __literal550 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5441
;
; -----------------------------
; BEGIN: for keys undefined values oneItem
;
  jmp l5444
l5443:
  mov dword [ tmp5430 ], 0
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5315 ], 2
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5445
  mov dword [ tmp5432 ], 1
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4988 ]
  lea  rdi , [ tmp5314 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5315 ], 0
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5446
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ __literal130 ]
  lea  r8 , [ tmp5432 ]
  call  __MOLD_VariantCompareEQ
l5446:
  mov eax, dword [ tmp5432 ]
  mov dword [ tmp5430 ], eax
l5445:
  cmp dword [ tmp5430 ], 0
  jz l5448
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ this ]
  lea  rdx , [ tmp4988 ]
  call  __CodeGeneratorX64_variantDestroy$0
l5448:
l5449:
  ret
l5444:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5443 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneItem
; -----------------------------
;
l5441:
l5442:
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentFrameSize ]
  mov [ tmp4988 + Variant_t.value], rax
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal995 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal996 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal978 ]
  call  __MOLD_PrintVariantLn
  jmp l5425
l5424:
  lea rcx, [ opcode ]
  lea rdx, [ __literal579 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5450
  mov dword [ tmp5315 ], 1
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5315 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ currentProcName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ currentProcName ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ currentSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ currentSymbols ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentProcName ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ arrayOfProcedures ]
  lea  rdx , [ currentProcName ]
  mov eax,  50
  call  __MOLD_SysCall
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal652 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5432 ], 1
  mov eax, dword [ tmp5432 ]
  mov [ tmp5314 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5452
  lea  rcx , [ __literal997 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal983 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal984 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal985 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal986 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal987 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentProcName ]
  lea  rdx , [ __literal989 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal998 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal990 ]
  call  __MOLD_PrintVariantLn
l5452:
l5453:
  jmp l5451
l5450:
  lea rcx, [ opcode ]
  lea rdx, [ __literal581 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5454
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
;
; -----------------------------
; BEGIN: for keys undefined values oneItem
;
  jmp l5457
l5456:
  mov dword [ tmp5432 ], 1
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5315 ], 1
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5458
  mov dword [ tmp5447 ], 1
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5315 ], 3
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5459
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5315 ], 4
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5315 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea  rcx , [ tmp5314 ]
  lea  rdx , [ tmp4988 ]
  lea  r8 , [ tmp5447 ]
  call  __MOLD_VariantCompareEQ
l5459:
  mov eax, dword [ tmp5447 ]
  mov dword [ tmp5432 ], eax
l5458:
  cmp dword [ tmp5432 ], 0
  jz l5461
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal999 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5461:
l5462:
  ret
l5457:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5456 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneItem
; -----------------------------
;
  jmp l5455
l5454:
  lea rcx, [ opcode ]
  lea rdx, [ __literal580 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5463
  lea  rcx, [ currentFrame ]
  call __MOLD_VariantDestroy
  lea rcx, [ currentFrame ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentFrame ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ symbols ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx , [ currentFrame ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ params ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ params ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4988 + Variant_t.value]
  mov dword [ paramsCnt ], eax
  lea  rcx , [ this ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ symbols ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4988 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5314 + Variant_t.value], 0
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5313 ]
  lea rdx, [ __literal661 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5314 + Variant_t.value], 1
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5313 ]
  lea rdx, [ __literal662 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5314 + Variant_t.value], 2
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5313 ]
  lea rdx, [ __literal663 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5314 + Variant_t.value], 3
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5313 ]
  lea rdx, [ __literal669 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ regParams ]
  call __MOLD_VariantDestroy
  lea rcx, [ regParams ]
  lea rdx, [ tmp4988 ]
  call __MOLD_VariantMove
  lea  rcx , [ __literal1000 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1001 ]
  call  __MOLD_PrintVariantLn
  mov dword [ currentFrameSize ], 0
  mov dword [ paramsPassedCnt ], 0
  push rdi
  lea  rcx , [ symbols ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4988 + Variant_t.value]
  mov dword [ symbolsCnt ], eax
  lea  rcx, [ symbolsIndex ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolsIndex ]
  call  __MOLD_VariantArrayCreate
;
; -----------------------------
; BEGIN: for keys undefined values v
;
  jmp l5466
l5465:
  lea  rcx , [ symbolsIndex ]
  lea  rdx , [ v ]
  mov eax,  50
  call  __MOLD_SysCall
  ret
l5466:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ v ]
  lea  r9 , [ l5465 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values v
; -----------------------------
;
  push rdi
  lea  rcx , [ symbolsIndex ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  cmp [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp4988 + Variant_t.value]
  mov dword [ symbolsCnt ], eax
  mov dword [ tmp5315 ], 1
  mov dword [ symbolIdx ], 0
;
; -----------------------------
; BEGIN: for symbolIdx in tmp5318 .. symbolsCnt
;
l5467:
  mov eax, dword [ symbolIdx ]
  cmp eax, dword [ symbolsCnt ]
  jge l5468
  mov eax, dword [ symbolsCnt ]
  sub eax, dword [ symbolIdx ]
  mov dword [ tmp5319 ], eax
  mov dword [ tmp5469 ], 1
  mov eax, dword [ tmp5319 ]
  sub eax, dword [ tmp5469 ]
  mov dword [ tmp4989 ], eax
  lea  rcx, [ symbol ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolsIndex ]
  lea  rdx , [ tmp4989 ]
  lea  r8 , [ symbol ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5447 ], 1
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4989 ], 1
  mov [ tmp5313 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp5313 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5313 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5470
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4989 ], 3
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea  rcx , [ tmp5313 ]
  lea  rdx , [ tmp4988 ]
  lea  r8 , [ tmp5447 ]
  call  __MOLD_VariantCompareEQ
l5470:
  cmp dword [ tmp5447 ], 0
  jz l5471
  mov dword [ tmp5460 ], 1
  mov dword [ tmp5474 ], 1
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5313 ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4989 ], 0
  mov [ tmp5313 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp5313 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5313 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5475
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5313 ]
  lea  rdx , [ __literal130 ]
  lea  r8 , [ tmp5474 ]
  call  __MOLD_VariantCompareEQ
l5475:
  cmp dword [ tmp5474 ], 0
  jnz l5473
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5313 ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp5460 ]
  call  __MOLD_VariantCompareEQ
l5473:
  cmp dword [ tmp5460 ], 0
  jz l5477
  mov dword [ varSize ], 16
  jmp l5478
l5477:
  mov dword [ tmp5474 ], 1
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5313 ]
  lea rdx, [ __literal158 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5479
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5313 ]
  lea  rdx , [ __literal159 ]
  lea  r8 , [ tmp5474 ]
  call  __MOLD_VariantCompareEQ
l5479:
  cmp dword [ tmp5474 ], 0
  jz l5480
  mov dword [ varSize ], 8
  jmp l5481
l5480:
  mov dword [ tmp5476 ], 1
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5313 ]
  lea rdx, [ __literal155 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5482
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5313 ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp5476 ]
  call  __MOLD_VariantCompareEQ
l5482:
  cmp dword [ tmp5476 ], 0
  jz l5484
  mov dword [ varSize ], 4
  jmp l5485
l5484:
  mov dword [ varSize ], -1
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4988 ]
  lea  rdi , [ tmp5313 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1002 ]
  lea  rdx , [ tmp5313 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  mov eax,  41
  call  __MOLD_SysCall
l5485:
l5481:
l5478:
  mov eax, dword [ currentFrameSize ]
  add eax, dword [ varSize ]
  mov dword [ currentFrameSize ], eax
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5313 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5469 ], 8
  mov eax, dword [ tmp5469 ]
  add eax, dword [ currentFrameSize ]
  mov dword [ tmp4989 ], eax
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4988 + Variant_t.value], rax
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ varSize ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ 7 ]
  lea  rdx , [ __literal315 ]
  lea  r8 , [ tmp5313 ]
  lea  r9 , [ __literal1003 ]
  lea  rax , [ tmp4988 ]
  push rax
  lea  rax , [ __literal650 ]
  push rax
  lea  rax , [ tmp5314 ]
  push rax
  lea  rax , [ __literal1004 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 32
  jmp l5472
l5471:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4989 ], 4
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5486
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal315 ]
  lea  r8 , [ tmp4988 ]
  lea  r9 , [ __literal1005 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5486:
l5487:
l5472:
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbol ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4989 ], 3
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5488
  mov dword [ tmp5469 ], 1
  mov eax, dword [ paramsPassedCnt ]
  add eax, dword [ tmp5469 ]
  mov dword [ paramsPassedCnt ], eax
l5488:
l5489:
  mov eax, dword [ symbolIdx ]
  add eax, dword [ tmp5315 ]
  mov dword [ symbolIdx ], eax
  jmp l5467
l5468:
;
; END: for symbolIdx in tmp5318 .. symbolsCnt step tmp5315
; -----------------------------
;
  mov dword [ tmp5318 ], 0
  mov eax, dword [ currentFrameSize ]
  cmp eax, dword [ tmp5318 ]
  jle l5490
  mov dword [ tmp5319 ], 32
  mov eax, dword [ currentFrameSize ]
  add eax, dword [ tmp5319 ]
  mov dword [ tmp5469 ], eax
  mov dword [ tmp5319 ], 16
  mov  eax, dword [ tmp5469 ]
  mov  ecx, dword [ tmp5319 ]
  cdq
  idiv ecx
  mov  dword [ tmp4989 ], eax
  mov dword [ tmp5319 ], 1
  mov eax, dword [ tmp4989 ]
  add eax, dword [ tmp5319 ]
  mov dword [ tmp5315 ], eax
  mov dword [ tmp5319 ], 16
  mov ecx, dword [ tmp5315 ]
  imul ecx, dword [ tmp5319 ]
  mov dword [ currentFrameSize ], ecx
  jmp l5491
l5490:
  mov dword [ currentFrameSize ], 32
l5491:
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1006 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1007 ]
  call  __MOLD_PrintVariantLn
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ currentFrameSize ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal1008 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  mov dword [ paramIdx ], 0
;
; -----------------------------
; BEGIN: for keys undefined values oneItem
;
  jmp l5493
l5492:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5318 ], 1
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5494
  mov dword [ tmp5460 ], 1
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5314 ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5318 ], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5496
  mov dword [ tmp5474 ], 1
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5314 ]
  lea rdx, [ __literal130 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5497
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5314 ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp5474 ]
  call  __MOLD_VariantCompareEQ
l5497:
  mov eax, dword [ tmp5474 ]
  mov dword [ tmp5460 ], eax
l5496:
  cmp dword [ tmp5460 ], 0
  jz l5498
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal247 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4988 ]
  lea  rdi , [ tmp5314 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5318 ], 0
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5500
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal1009 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal981 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5501
l5500:
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ __literal1010 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal946 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  call  __MOLD_PrintVariantLn
l5501:
l5498:
l5499:
  jmp l5495
l5494:
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5318 ], 3
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5502
  mov dword [ tmp5474 ], 1
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5318 ], 0
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLT
  cmp dword [__TrashBin], 0
  jnz l5504
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5318 ], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ tmp5314 ]
  lea  rdx , [ tmp4988 ]
  lea  r8 , [ tmp5474 ]
  call  __MOLD_VariantCompareLT
l5504:
  cmp dword [ tmp5474 ], 0
  jz l5505
  mov dword [ tmp5318 ], 4
  mov eax, dword [ paramIdx ]
  cmp eax, dword [ tmp5318 ]
  jge l5507
  lea  rcx, [ srcPtr ]
  call __MOLD_VariantDestroy
  lea  rcx , [ regParams ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ srcPtr ]
  call  __MOLD_VariantLoadFromIndex_int32
  jmp l5508
l5507:
  mov eax, dword [ paramsPassedCnt ]
  sub eax, dword [ paramIdx ]
  mov dword [ tmp5319 ], eax
  mov dword [ tmp5315 ], 1
  mov eax, dword [ tmp5319 ]
  sub eax, dword [ tmp5315 ]
  mov dword [ tmp5318 ], eax
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal1011 ]
  lea  r8 , [ tmp5314 ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ srcPtr ]
  call __MOLD_VariantDestroy
  lea rcx, [ srcPtr ]
  lea rdx, [ __literal670 ]
  call __MOLD_VariantMove
l5508:
  mov dword [ tmp5476 ], 1
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4988 ]
  lea  rdi , [ tmp5314 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5318 ], 0
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5509
  mov dword [ tmp5483 ], 1
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp4988 ]
  lea rdx, [ __literal130 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5510
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ __literal161 ]
  lea  r8 , [ tmp5483 ]
  call  __MOLD_VariantCompareEQ
l5510:
  mov eax, dword [ tmp5483 ]
  mov dword [ tmp5476 ], eax
l5509:
  cmp dword [ tmp5476 ], 0
  jz l5512
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal1012 ]
  lea  r8 , [ __literal656 ]
  lea  r9 , [ srcPtr ]
  lea  rax , [ __literal77 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal744 ]
  lea  r8 , [ tmp4988 ]
  lea  r9 , [ __literal745 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal551 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5314 ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5318 ], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5514
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal1013 ]
  lea  r8 , [ tmp5314 ]
  lea  r9 , [ __literal1014 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5514:
l5515:
  jmp l5513
l5512:
  mov dword [ tmp5483 ], 1
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5314 ]
  lea rdx, [ __literal155 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5516
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5314 ]
  lea  rdx , [ __literal160 ]
  lea  r8 , [ tmp5483 ]
  call  __MOLD_VariantCompareEQ
l5516:
  cmp dword [ tmp5483 ], 0
  jz l5517
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal715 ]
  lea  r8 , [ srcPtr ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal697 ]
  lea  r8 , [ tmp5314 ]
  lea  r9 , [ __literal709 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5518
l5517:
  mov dword [ tmp5511 ], 1
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5314 ]
  lea rdx, [ __literal158 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5519
  mov dword [ tmp5520 ], 1
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5314 ]
  lea rdx, [ __literal1015 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5521
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5314 ]
  lea  rdx , [ __literal159 ]
  lea  r8 , [ tmp5520 ]
  call  __MOLD_VariantCompareEQ
l5521:
  mov eax, dword [ tmp5520 ]
  mov dword [ tmp5511 ], eax
l5519:
  cmp dword [ tmp5511 ], 0
  jz l5523
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal710 ]
  lea  r8 , [ srcPtr ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal739 ]
  lea  r8 , [ tmp5314 ]
  lea  r9 , [ __literal740 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5524
l5523:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5012 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1017 ]
  lea  rdx , [ tmp4988 ]
  lea  r8 , [ tmp5012 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5314 ]
  lea  rdx , [ tmp5012 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1016 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  mov eax,  41
  call  __MOLD_SysCall
l5524:
l5518:
l5513:
  jmp l5506
l5505:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 3 ]
  lea  rdx , [ __literal1018 ]
  lea  r8 , [ tmp5314 ]
  lea  r9 , [ __literal77 ]
  call  __MOLD_PrintArrayOfVariantsLn
l5506:
  mov dword [ tmp5315 ], 1
  mov eax, dword [ paramIdx ]
  add eax, dword [ tmp5315 ]
  mov dword [ paramIdx ], eax
l5502:
l5503:
l5495:
  ret
l5493:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5492 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneItem
; -----------------------------
;
  lea rcx, [ currentProcName ]
  lea rdx, [ __literal550 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5525
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
;
; -----------------------------
; BEGIN: for keys undefined values oneItem
;
  jmp l5528
l5527:
  mov dword [ tmp5460 ], 0
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5314 ]
  lea rdx, [ __literal237 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5529
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5314 ]
  lea  rdx , [ __literal238 ]
  lea  r8 , [ tmp5460 ]
  call  __MOLD_VariantCompareNE
l5529:
  cmp dword [ tmp5460 ], 0
  jz l5530
  mov dword [ tmp5474 ], 0
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5318 ], 2
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5532
  mov dword [ tmp5476 ], 1
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5314 ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5318 ], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5533
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5314 ]
  lea  rdx , [ __literal130 ]
  lea  r8 , [ tmp5476 ]
  call  __MOLD_VariantCompareEQ
l5533:
  mov eax, dword [ tmp5476 ]
  mov dword [ tmp5474 ], eax
l5532:
  cmp dword [ tmp5474 ], 0
  jz l5534
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5314 ]
  lea  rdx , [ __literal1010 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal946 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  call  __MOLD_PrintVariantLn
l5534:
l5535:
l5530:
l5531:
  ret
l5528:
  lea  rcx , [ symbols ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5527 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneItem
; -----------------------------
;
l5525:
l5526:
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1019 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1020 ]
  call  __MOLD_PrintVariantLn
  jmp l5464
l5463:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal590 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5536
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal1021 ]
  lea  r8 , [ dst ]
  call  __CodeGeneratorX64_call1$0
  jmp l5537
l5536:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal591 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5538
  lea  rcx , [ this ]
  lea  rdx , [ dst ]
  call  __CodeGeneratorX64_variantDestroy$0
  lea  rcx , [ this ]
  lea  rdx , [ __literal1022 ]
  lea  r8 , [ dst ]
  call  __CodeGeneratorX64_call1$0
  jmp l5539
l5538:
  lea rcx, [ opcode ]
  lea rdx, [ __literal1023 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5540
  lea  rcx , [ this ]
  lea  rdx , [ __literal1024 ]
  lea  r8 , [ dst ]
  lea  r9 , [ x ]
  lea  rax , [ y ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5541
l5540:
  mov dword [ tmp5476 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal1025 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5542
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal1026 ]
  lea  r8 , [ tmp5476 ]
  call  __MOLD_VariantCompareEQ
l5542:
  cmp dword [ tmp5476 ], 0
  jz l5543
  lea  rcx , [ this ]
  lea  rdx , [ __literal1027 ]
  lea  r8 , [ dst ]
  lea  r9 , [ x ]
  lea  rax , [ y ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5544
l5543:
  lea rcx, [ opcode ]
  lea rdx, [ __literal1028 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5545
  lea  rcx , [ this ]
  lea  rdx , [ __literal1029 ]
  lea  r8 , [ dst ]
  lea  r9 , [ x ]
  lea  rax , [ y ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5546
l5545:
  lea rcx, [ opcode ]
  lea rdx, [ __literal1030 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5547
  lea  rcx , [ this ]
  lea  rdx , [ __literal1031 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3AndDestroy$0
  add rsp, 8
  jmp l5548
l5547:
  mov dword [ tmp5520 ], 1
  lea rcx, [ opcode ]
  lea rdx, [ __literal1032 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5549
  lea  rcx , [ opcode ]
  lea  rdx , [ __literal1033 ]
  lea  r8 , [ tmp5520 ]
  call  __MOLD_VariantCompareEQ
l5549:
  cmp dword [ tmp5520 ], 0
  jz l5550
  lea  rcx , [ this ]
  lea  rdx , [ __literal1034 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3AndDestroy$0
  add rsp, 8
  jmp l5551
l5550:
  lea rcx, [ opcode ]
  lea rdx, [ __literal1035 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5552
  lea  rcx , [ this ]
  lea  rdx , [ __literal1036 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3$0
  add rsp, 8
  jmp l5553
l5552:
  lea rcx, [ opcode ]
  lea rdx, [ __literal1037 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5555
  lea  rcx , [ this ]
  lea  rdx , [ __literal1038 ]
  lea  r8 , [ x ]
  lea  r9 , [ y ]
  lea  rax , [ dst ]
  push rax
  call  __CodeGeneratorX64_call3AndDestroy$0
  add rsp, 8
  jmp l5556
l5555:
  lea rcx, [ originalOpcode ]
  lea rdx, [ __literal576 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5558
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal1039 ]
  lea  r8 , [ dst ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5559
l5558:
  push rdi
  lea  rcx , [ opcode ]
  lea  rdi , [ tmp5314 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5314 ]
  lea  rdx , [ __literal453 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1040 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  mov eax,  41
  call  __MOLD_SysCall
l5559:
l5556:
l5553:
l5551:
l5548:
l5546:
l5544:
l5541:
l5539:
l5537:
l5464:
l5455:
l5451:
l5425:
l5422:
l5419:
l5416:
l5413:
l5410:
l5408:
l5406:
l5404:
l5392:
l5387:
l5382:
l5377:
l5372:
l5367:
l5364:
l5361:
l5358:
l5350:
l5337:
l5332:
l5329:
l5326:
l5324:
l5309:
l5306:
l5303:
l5300:
l5297:
l5294:
l5291:
l5288:
l5285:
l5282:
l5279:
l5276:
l5273:
l5270:
l5267:
l5264:
l5261:
l5258:
l5255:
l5252:
l5249:
l5246:
l5243:
l5240:
l5237:
l5235:
l5227:
l5224:
l5221:
l5218:
l5215:
l5212:
l5209:
l5206:
l5204:
l5200:
l5195:
l5192:
l5189:
l5186:
l5183:
l5180:
l5177:
l5175:
l5171:
l5166:
l5163:
l5160:
l5157:
l5155:
l5150:
l5147:
l5144:
l5141:
l5138:
l5135:
l5132:
l5129:
l5126:
l5123:
l5120:
l5117:
l5114:
l5111:
l5108:
l5105:
l5102:
l5099:
l5096:
l5093:
l5090:
l5087:
l5084:
l5081:
l5078:
l5075:
l5072:
l5069:
l5066:
l5063:
l5060:
l5057:
l5054:
l5051:
l5048:
l5045:
l5042:
l5039:
l5036:
l5034:
l5030:
l5026:
l5023:
l5019:
l5017:
l5015:
  ret
l4991:
  lea  rcx , [ quads ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ item ]
  lea  r9 , [ l4990 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values item
; -----------------------------
;
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1041 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1042 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1043 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1044 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1045 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1046 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4988 ]
  lea  rdi, [ tmp5314 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 32
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ globals ]
  call __MOLD_VariantDestroy
  lea rcx, [ globals ]
  lea rdx, [ tmp5314 ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: for keys undefined values oneItem
;
  jmp l5561
l5560:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5318 ], 2
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5562
  mov dword [ tmp4994 ], 1
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp4988 ]
  lea rdx, [ __literal130 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5564
  mov dword [ tmp4998 ], 1
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp4988 ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5565
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5314 ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5318 ], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5318 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ tmp4988 ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ tmp4998 ]
  call  __MOLD_VariantCompareEQ
l5565:
  mov eax, dword [ tmp4998 ]
  mov dword [ tmp4994 ], eax
l5564:
  cmp dword [ tmp4994 ], 0
  jz l5566
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ __literal1047 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5567
l5566:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5314 ]
  lea rdx, [ __literal158 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5568
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ __literal1048 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5569
l5568:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5314 ]
  lea rdx, [ __literal155 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5570
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ __literal1049 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5571
l5570:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5314 ]
  lea rdx, [ __literal159 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5572
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ __literal1048 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5573
l5572:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5314 ]
  lea rdx, [ __literal160 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5574
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ 2 ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ __literal1049 ]
  call  __MOLD_PrintArrayOfVariantsLn
  jmp l5575
l5574:
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ oneItem ]
  lea  rdx , [ __literal198 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4988 ]
  lea  rdi , [ tmp5314 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1050 ]
  lea  rdx , [ tmp5314 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  mov eax,  41
  call  __MOLD_SysCall
l5575:
l5573:
l5571:
l5569:
l5567:
l5562:
l5563:
  ret
l5561:
  lea  rcx , [ globals ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ oneItem ]
  lea  r9 , [ l5560 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values oneItem
; -----------------------------
;
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1051 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1052 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1053 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1054 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1055 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp5318 ], 1
  mov dword [ tmp5315 ], 16
  mov dword [ deepIdx ], 0
;
; -----------------------------
; BEGIN: for deepIdx in tmp5319 .. tmp5315
;
l5576:
  mov eax, dword [ deepIdx ]
  cmp eax, dword [ tmp5315 ]
  jge l5577
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ deepIdx ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal1056 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_PrintArrayOfVariantsLn
;
; -----------------------------
; BEGIN: for keys undefined values symbolInfo
;
  jmp l5579
l5578:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4989 ], 5
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5580
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal1 ]
  lea  r8 , [ value ]
  call  __MOLD_VariantLoadFromKey
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ deepIdx ]
  mov [ tmp4988 + Variant_t.value], rax
  mov dword [ tmp4989 ], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ name ]
  lea  r8 , [ value ]
  lea  r9 , [ tmp4988 ]
  lea  rax , [ tmp5314 ]
  push rax
  call  __CodeGeneratorX64_emitConstant$0
  add rsp, 8
l5580:
l5581:
  ret
l5579:
  lea  rcx , [ globals ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l5578 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values symbolInfo
; -----------------------------
;
  mov eax, dword [ deepIdx ]
  add eax, dword [ tmp5318 ]
  mov dword [ deepIdx ], eax
  jmp l5576
l5577:
;
; END: for deepIdx in tmp5319 .. tmp5315 step tmp5318
; -----------------------------
;
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1057 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1046 ]
  call  __MOLD_PrintVariantLn
;
; -----------------------------
; BEGIN: for keys undefined values symbolInfo
;
  jmp l5583
l5582:
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal172 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5319 ], 10
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5319 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5584
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ name ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ labels ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal207 ]
  lea  r8 , [ labels ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ defaultLabel ]
  call __MOLD_VariantDestroy
  lea  rcx , [ symbolInfo ]
  lea  rdx , [ __literal630 ]
  lea  r8 , [ defaultLabel ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ name ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  call  __MOLD_PrintVariantLn
;
; -----------------------------
; BEGIN: for keys labelIdx values nextLabel
;
  jmp l5587
l5586:
  push rdi
  lea  rcx , [ nextLabel ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5319 ], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5319 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5588
  lea  rcx, [ nextLabel ]
  call __MOLD_VariantDestroy
  lea rcx, [ nextLabel ]
  lea rdx, [ defaultLabel ]
  call __MOLD_VariantMove
l5588:
l5589:
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ labelIdx ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal1058 ]
  lea  r8 , [ nextLabel ]
  lea  r9 , [ __literal650 ]
  lea  rax , [ tmp5314 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  ret
l5587:
  lea  rcx , [ labels ]
  lea  rdx , [ labelIdx ]
  lea  r8 , [ nextLabel ]
  lea  r9 , [ l5586 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys labelIdx values nextLabel
; -----------------------------
;
l5584:
l5585:
  ret
l5583:
  lea  rcx , [ globals ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ symbolInfo ]
  lea  r9 , [ l5582 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values symbolInfo
; -----------------------------
;
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1059 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1060 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ classListCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal377 ]
  lea  r8 , [ classListCnt ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal376 ]
  lea  r8 , [ classList ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodsList ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal379 ]
  lea  r8 , [ methodsList ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5319 ], 1
  cmp [ classListCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ classListCnt + Variant_t.value]
  mov dword [ tmp5315 ], eax
  mov dword [ classIdx ], 0
;
; -----------------------------
; BEGIN: for classIdx in tmp5318 .. tmp5315
;
l5590:
  mov eax, dword [ classIdx ]
  cmp eax, dword [ tmp5315 ]
  jge l5591
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classList ]
  lea  rdx , [ classIdx ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ className ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal223 ]
  lea  r8 , [ vtable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ className ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1061 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5010 ]
  call  __MOLD_PrintVariantLn
  mov dword [ firstUsedMethodIdx ], 0
  mov dword [ lastUsedMethodIdx ], 0
  mov dword [ firstMethodFound ], 0
;
; -----------------------------
; BEGIN: for keys methodIdx values methodName
;
  jmp l5593
l5592:
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ vtable ]
  lea  rdx , [ methodName ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp4988 ]
  lea  rdi , [ tmp5314 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp4989 ], 0
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5594
  mov eax, dword [ methodIdx ]
  mov dword [ lastUsedMethodIdx ], eax
  mov dword [ tmp4998 ], 0
  xor  eax, eax
  or   dword [ firstMethodFound ], eax
  setz cl
  or   dword [ tmp4998 ], eax
  setz al
  xor  al, cl
  jnz l5596
  mov eax, dword [ methodIdx ]
  mov dword [ firstUsedMethodIdx ], eax
  mov dword [ firstMethodFound ], 1
l5596:
l5597:
l5594:
l5595:
  ret
l5593:
  lea  rcx , [ methodsList ]
  lea  rdx , [ methodIdx ]
  lea  r8 , [ methodName ]
  lea  r9 , [ l5592 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys methodIdx values methodName
; -----------------------------
;
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ firstUsedMethodIdx ]
  mov [ tmp4988 + Variant_t.value], rax
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal1062 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_PrintArrayOfVariantsLn
  mov eax, dword [ lastUsedMethodIdx ]
  sub eax, dword [ firstUsedMethodIdx ]
  mov dword [ tmp4989 ], eax
  mov [ tmp4988 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp4989 ]
  mov [ tmp4988 + Variant_t.value], rax
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal1063 ]
  lea  r8 , [ tmp4988 ]
  call  __MOLD_PrintArrayOfVariantsLn
  mov dword [ tmp4994 ], 1
  xor  eax, eax
  or   dword [ firstMethodFound ], eax
  setz cl
  or   dword [ tmp4994 ], eax
  setz al
  xor  al, cl
  jnz l5598
  lea  rcx , [ __literal1064 ]
  call  __MOLD_PrintVariantLn
  mov dword [ tmp4989 ], 1
  mov dword [ tmp5600 ], 1
  mov eax, dword [ lastUsedMethodIdx ]
  add eax, dword [ tmp5600 ]
  mov dword [ tmp5469 ], eax
  mov eax, dword [ firstUsedMethodIdx ]
  mov dword [ methodIdx ], eax
;
; -----------------------------
; BEGIN: for methodIdx in firstUsedMethodIdx .. tmp5469
;
l5601:
  mov eax, dword [ methodIdx ]
  cmp eax, dword [ tmp5469 ]
  jge l5602
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodsList ]
  lea  rdx , [ methodIdx ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ vtable ]
  lea  rdx , [ methodName ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp4988 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5600 ], 0
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5600 ]
  mov [ tmp5314 + Variant_t.value], rax
  lea rcx, [ tmp4988 ]
  lea rdx, [ tmp5314 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5603
  lea  rcx, [ methodPtr ]
  call __MOLD_VariantDestroy
  lea rcx, [ methodPtr ]
  lea rdx, [ __literal1065 ]
  call __MOLD_VariantMove
  jmp l5604
l5603:
  lea  rcx, [ methodPtr ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal224 ]
  lea  r8 , [ methodPtr ]
  call  __MOLD_VariantLoadFromKey
l5604:
  mov [ tmp5314 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ methodIdx ]
  mov [ tmp5314 + Variant_t.value], rax
  lea  rcx , [ 7 ]
  lea  rdx , [ __literal875 ]
  lea  r8 , [ methodPtr ]
  lea  r9 , [ __literal650 ]
  lea  rax , [ methodName ]
  push rax
  lea  rax , [ __literal408 ]
  push rax
  lea  rax , [ tmp5314 ]
  push rax
  lea  rax , [ __literal176 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 32
  mov eax, dword [ methodIdx ]
  add eax, dword [ tmp4989 ]
  mov dword [ methodIdx ], eax
  jmp l5601
l5602:
;
; END: for methodIdx in firstUsedMethodIdx .. tmp5469 step tmp4989
; -----------------------------
;
l5598:
l5599:
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  mov eax, dword [ classIdx ]
  add eax, dword [ tmp5319 ]
  mov dword [ classIdx ], eax
  jmp l5590
l5591:
;
; END: for classIdx in tmp5318 .. tmp5315 step tmp5319
; -----------------------------
;
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1066 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1067 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1068 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1069 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1070 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1071 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1072 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1073 ]
  call  __MOLD_PrintVariantLn
;
; -----------------------------
; BEGIN: for keys undefined values procName
;
  jmp l5606
l5605:
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1075 ]
  lea  rdx , [ procName ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 4 ]
  lea  rdx , [ __literal1074 ]
  lea  r8 , [ procName ]
  lea  r9 , [ __literal127 ]
  lea  rax , [ tmp5010 ]
  push rax
  call  __MOLD_PrintArrayOfVariantsLn
  add rsp, 8
  ret
l5606:
  lea  rcx , [ arrayOfProcedures ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ procName ]
  lea  r9 , [ l5605 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values procName
; -----------------------------
;
  lea  rcx , [ __literal1076 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1077 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1072 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1078 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1079 ]
  call  __MOLD_PrintVariantLn
;
; -----------------------------
; BEGIN: for keys undefined values procName
;
  jmp l5608
l5607:
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1075 ]
  lea  rdx , [ procName ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5012 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ procName ]
  lea  rdx , [ __literal1080 ]
  lea  r8 , [ tmp5012 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal22 ]
  lea  rdx , [ tmp5012 ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 3 ]
  lea  rdx , [ tmp5010 ]
  lea  r8 , [ __literal688 ]
  lea  r9 , [ tmp5011 ]
  call  __MOLD_PrintArrayOfVariantsLn
  ret
l5608:
  lea  rcx , [ arrayOfProcedures ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ procName ]
  lea  r9 , [ l5607 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values procName
; -----------------------------
;
  lea  rcx , [ __literal1081 ]
  call  __MOLD_PrintVariantLn
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal652 ]
  lea  r8 , [ tmp5314 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp4994 ], 1
  mov eax, dword [ tmp4994 ]
  mov [ tmp4988 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp4988 + Variant_t.value], rax
  lea rcx, [ tmp5314 ]
  lea rdx, [ tmp4988 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5609
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1082 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal724 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1083 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1084 ]
  call  __MOLD_PrintVariantLn
;
; -----------------------------
; BEGIN: for keys undefined values procName
;
  jmp l5612
l5611:
  lea  rcx, [ tmp5011 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1085 ]
  lea  rdx , [ procName ]
  lea  r8 , [ tmp5011 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5010 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1075 ]
  lea  rdx , [ procName ]
  lea  r8 , [ tmp5010 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ 3 ]
  lea  rdx , [ tmp5011 ]
  lea  r8 , [ __literal1086 ]
  lea  r9 , [ tmp5010 ]
  call  __MOLD_PrintArrayOfVariantsLn
  ret
l5612:
  lea  rcx , [ arrayOfProcedures ]
  lea  rdx , [ __TrashBin ]
  lea  r8 , [ procName ]
  lea  r9 , [ l5611 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys __TrashBin values procName
; -----------------------------
;
  lea  rcx , [ __literal1072 ]
  call  __MOLD_PrintVariantLn
l5609:
l5610:

  ; clean frame
  ; -----------
  lea  rcx, [ quads ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentProcName ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentSymbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ x ]
  call __MOLD_VariantDestroy
  lea  rcx, [ y ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbols ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arrayOfProcedures ]
  call __MOLD_VariantDestroy
  lea  rcx, [ globals ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classListCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodsList ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp4988 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5313 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5314 ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator item
  lea  rcx, [ idxType ]
  call __MOLD_VariantDestroy
  lea  rcx, [ params ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ name ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodId ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator oneItem
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ currentFrame ]
  call __MOLD_VariantDestroy
  lea  rcx, [ regParams ]
  call __MOLD_VariantDestroy
  lea  rcx, [ symbolsIndex ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator v
  lea  rcx, [ symbol ]
  call __MOLD_VariantDestroy
  lea  rcx, [ srcPtr ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator symbolInfo
  lea  rcx, [ value ]
  call __MOLD_VariantDestroy
  lea  rcx, [ labels ]
  call __MOLD_VariantDestroy
  lea  rcx, [ defaultLabel ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator nextLabel
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ className ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator methodName
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator procName

  add  rsp, 1488
  pop  rbp
  ret

  restore this
  restore codeObj
  restore quads
  restore currentProcName
  restore currentSymbols
  restore currentFrameSize
  restore dst
  restore x
  restore y
  restore opcode
  restore originalOpcode
  restore paramsCnt
  restore symbols
  restore arrayOfProcedures
  restore globals
  restore classListCnt
  restore classList
  restore methodsList
  restore tmp4988
  restore tmp4989
  restore tmp4992
  restore tmp4994
  restore tmp4998
  restore tmp5000
  restore tmp5002
  restore tmp5004
  restore tmp5010
  restore tmp5011
  restore tmp5012
  restore tmp5013
  restore tmp5028
  restore tmp5032
  restore tmp5037
  restore tmp5040
  restore tmp5043
  restore tmp5046
  restore tmp5049
  restore tmp5052
  restore tmp5055
  restore tmp5058
  restore tmp5061
  restore tmp5064
  restore tmp5067
  restore tmp5070
  restore tmp5073
  restore tmp5076
  restore tmp5079
  restore tmp5082
  restore tmp5085
  restore tmp5088
  restore tmp5091
  restore tmp5094
  restore tmp5097
  restore tmp5100
  restore tmp5103
  restore tmp5106
  restore tmp5109
  restore tmp5112
  restore tmp5115
  restore tmp5118
  restore tmp5121
  restore tmp5124
  restore tmp5127
  restore tmp5130
  restore tmp5133
  restore tmp5136
  restore tmp5139
  restore tmp5142
  restore tmp5145
  restore tmp5148
  restore tmp5151
  restore tmp5153
  restore tmp5158
  restore tmp5161
  restore tmp5164
  restore tmp5167
  restore tmp5169
  restore tmp5173
  restore tmp5178
  restore tmp5181
  restore tmp5184
  restore tmp5187
  restore tmp5190
  restore tmp5193
  restore tmp5196
  restore tmp5198
  restore tmp5202
  restore tmp5207
  restore tmp5210
  restore tmp5213
  restore tmp5216
  restore tmp5219
  restore tmp5222
  restore tmp5225
  restore tmp5228
  restore tmp5229
  restore tmp5238
  restore tmp5241
  restore tmp5244
  restore tmp5247
  restore tmp5250
  restore tmp5253
  restore tmp5256
  restore tmp5259
  restore tmp5262
  restore tmp5265
  restore tmp5268
  restore tmp5271
  restore tmp5274
  restore tmp5277
  restore tmp5280
  restore tmp5283
  restore tmp5286
  restore tmp5289
  restore tmp5292
  restore tmp5295
  restore tmp5298
  restore tmp5301
  restore tmp5304
  restore tmp5307
  restore tmp5310
  restore tmp5313
  restore tmp5314
  restore tmp5315
  restore tmp5318
  restore tmp5319
  restore tmp5320
  restore tmp5327
  restore tmp5330
  restore tmp5333
  restore tmp5335
  restore tmp5342
  restore tmp5359
  restore tmp5362
  restore tmp5365
  restore tmp5368
  restore tmp5373
  restore tmp5378
  restore tmp5383
  restore tmp5388
  restore tmp5393
  restore tmp5396
  restore tmp5397
  restore tmp5400
  restore tmp5411
  restore tmp5414
  restore tmp5417
  restore tmp5420
  restore tmp5423
  restore tmp5428
  restore tmp5430
  restore tmp5432
  restore tmp5447
  restore tmp5460
  restore tmp5469
  restore tmp5474
  restore tmp5476
  restore tmp5483
  restore tmp5511
  restore tmp5520
  restore tmp5522
  restore tmp5554
  restore tmp5557
  restore item
  restore itemCnt
  restore dstType
  restore xType
  restore idxType
  restore params
  restore newParams
  restore idx
  restore rv
  restore name
  restore methodId
  restore oneItem
  restore proto
  restore currentFrame
  restore regParams
  restore paramsPassedCnt
  restore symbolsCnt
  restore symbolsIndex
  restore paramIdx
  restore v
  restore symbolIdx
  restore symbol
  restore varSize
  restore srcPtr
  restore deepIdx
  restore symbolInfo
  restore value
  restore labels
  restore defaultLabel
  restore labelIdx
  restore nextLabel
  restore tmp5600
  restore classIdx
  restore classProto
  restore className
  restore vtable
  restore firstUsedMethodIdx
  restore lastUsedMethodIdx
  restore firstMethodFound
  restore methodIdx
  restore methodName
  restore methodProto
  restore methodPtr
  restore procName
; -----------------------------------------------
; function __MIRQuadOptimizer_constructor$0
; -----------------------------------------------
__MIRQuadOptimizer_constructor$0:
  ; init frame
  ; ----------
  tmp5615 EQU rbp - 24 ; 16 bytes
  tmp5614 EQU rbp - 40 ; 16 bytes
  tmp5613 EQU rbp - 44 ; 4 bytes
  this EQU rbp - 60 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp5614 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5615 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx , [ this ]
  call  __PipeAbstract_constructor$0
  mov dword [ tmp5613 ], 1
  mov eax, dword [ tmp5613 ]
  mov [ tmp5614 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5614 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ __literal636 ]
  lea  r8 , [ tmp5614 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1087 ]
  lea  r8 , [ __literal116 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1088 ]
  lea  r8 , [ __literal138 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1089 ]
  lea  r8 , [ __literal138 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1090 ]
  lea  r8 , [ __literal138 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5614 ]
  call  __MOLD_VariantMapCreate
  lea  rcx , [ this ]
  lea  rdx , [ __literal639 ]
  lea  r8 , [ tmp5614 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5614 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal1092 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal601 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal1093 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal602 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal619 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal603 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal632 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal604 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal1094 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal605 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal631 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal606 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1091 ]
  lea  r8 , [ tmp5614 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5614 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5614 ]
  call  __MOLD_VariantMapCreate
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal1093 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal601 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal1092 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal602 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal631 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal603 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal1094 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal604 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal632 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal605 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5615 ]
  lea rdx, [ __literal619 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5614 ]
  lea  rdx , [ __literal606 ]
  lea  r8 , [ tmp5615 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1095 ]
  lea  r8 , [ tmp5614 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp5614 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5615 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp5613
  restore tmp5614
  restore tmp5615
; -----------------------------------------------
; function __MIRQuadOptimizer__decreaseReadAndWriteHits$0
; -----------------------------------------------
__MIRQuadOptimizer__decreaseReadAndWriteHits$0:
  ; init frame
  ; ----------
  tmp5619 EQU rbp - 12 ; 4 bytes
  tmp5618 EQU rbp - 28 ; 16 bytes
  tmp5617 EQU rbp - 44 ; 16 bytes
  tmp5616 EQU rbp - 60 ; 16 bytes
  srcInfo EQU rbp - 76 ; 16 bytes
  src EQU rbp - 92 ; 16 bytes
  this EQU rbp - 108 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 144

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ src ], xmm0
  mov [srcInfo + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5616 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5617 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5618 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp5618 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal639 ]
  lea  r8 , [ tmp5618 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5617 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5618 ]
  lea  rdx , [ __literal163 ]
  lea  r8 , [ tmp5617 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ srcInfo ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5617 ]
  lea  rdx , [ src ]
  lea  r8 , [ srcInfo ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5617 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5617 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5619 ], 1
  mov [ tmp5618 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5619 ]
  mov [ tmp5618 + Variant_t.value], rax
  lea  rcx , [ tmp5617 ]
  lea  rdx , [ tmp5618 ]
  lea  r8 , [ tmp5616 ]
  call  __MOLD_VariantSub
  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal170 ]
  lea  r8 , [ tmp5616 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5618 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5618 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5619 ], 1
  mov [ tmp5617 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5619 ]
  mov [ tmp5617 + Variant_t.value], rax
  lea  rcx , [ tmp5618 ]
  lea  rdx , [ tmp5617 ]
  lea  r8 , [ tmp5616 ]
  call  __MOLD_VariantSub
  lea  rcx , [ srcInfo ]
  lea  rdx , [ __literal171 ]
  lea  r8 , [ tmp5616 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ srcInfo ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5616 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5617 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5618 ]
  call __MOLD_VariantDestroy

  add  rsp, 144
  pop  rbp
  ret

  restore this
  restore src
  restore srcInfo
  restore tmp5616
  restore tmp5617
  restore tmp5618
  restore tmp5619
; -----------------------------------------------
; function __MIRQuadOptimizer_processOneItem$0
; -----------------------------------------------
__MIRQuadOptimizer_processOneItem$0:
  ; init frame
  ; ----------
  newOpcode EQU rbp - 24 ; 16 bytes
  lastItem EQU rbp - 40 ; 16 bytes
  buffer EQU rbp - 56 ; 16 bytes
  tmp5643 EQU rbp - 72 ; 16 bytes
  tmp5642 EQU rbp - 88 ; 16 bytes
  tmp5639 EQU rbp - 104 ; 16 bytes
  tmp5638 EQU rbp - 108 ; 4 bytes
  tmp5636 EQU rbp - 112 ; 4 bytes
  tmp5634 EQU rbp - 116 ; 4 bytes
  tmp5632 EQU rbp - 120 ; 4 bytes
  tmp5629 EQU rbp - 124 ; 4 bytes
  tmp5624 EQU rbp - 128 ; 4 bytes
  tmp5622 EQU rbp - 132 ; 4 bytes
  tmp5621 EQU rbp - 136 ; 4 bytes
  tmp5620 EQU rbp - 152 ; 16 bytes
  src EQU rbp - 168 ; 16 bytes
  dst EQU rbp - 184 ; 16 bytes
  opcode EQU rbp - 200 ; 16 bytes
  item EQU rbp - 216 ; 16 bytes
  this EQU rbp - 232 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 272

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ item ], xmm0
  mov [opcode + Variant_t.type], VARIANT_UNDEFINED
  mov [dst + Variant_t.type], VARIANT_UNDEFINED
  mov [src + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5620 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5639 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5642 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5643 + Variant_t.type], VARIANT_UNDEFINED
  mov [buffer + Variant_t.type], VARIANT_UNDEFINED
  mov [lastItem + Variant_t.type], VARIANT_UNDEFINED
  mov [newOpcode + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp5621 ], 0
  lea  rcx, [ opcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5621 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5621 ], 1
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5621 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5621 ], 2
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5621 ]
  lea  r8 , [ src ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5622 ], 1
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1087 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5620 ]
  lea rdx, [ __literal611 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5623
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1087 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5620 ]
  lea  rdx , [ __literal612 ]
  lea  r8 , [ tmp5622 ]
  call  __MOLD_VariantCompareEQ
l5623:
  cmp dword [ tmp5622 ], 0
  jz l5625
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  call  __PipeAbstract__emitOneItem$0
  jmp l5626
l5625:
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1087 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5620 ]
  lea rdx, [ __literal102 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5627
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  call  __PipeAbstract__emitOneItem$0
  jmp l5628
l5627:
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1087 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5620 ]
  lea rdx, [ __literal104 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5630
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  call  __PipeAbstract__emitOneItem$0
  jmp l5631
l5630:
  mov dword [ tmp5632 ], 0
  lea rcx, [ opcode ]
  lea rdx, [ __literal578 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5633
  mov dword [ tmp5634 ], 0
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1087 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantLoadFromKey
  lea rcx, [ tmp5620 ]
  lea rdx, [ __literal578 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5635
  mov dword [ tmp5636 ], 0
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1088 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5639 ]
  lea  rdi , [ tmp5620 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ tmp5620 ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5637
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1088 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5620 ]
  lea  rdx , [ src ]
  lea  r8 , [ tmp5636 ]
  call  __MOLD_VariantCompareEQ
l5637:
  mov eax, dword [ tmp5636 ]
  mov dword [ tmp5634 ], eax
l5635:
  mov eax, dword [ tmp5634 ]
  mov dword [ tmp5632 ], eax
l5633:
  cmp dword [ tmp5632 ], 0
  jz l5640
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal635 ]
  lea  r8 , [ buffer ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ buffer ]
  lea  rdi , [ tmp5642 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5621 ], 1
  mov [ tmp5643 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5621 ]
  mov [ tmp5643 + Variant_t.value], rax
  lea  rcx , [ tmp5642 ]
  lea  rdx , [ tmp5643 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantSub
  cmp [ tmp5639 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5639 + Variant_t.value]
  mov dword [ tmp5621 ], eax
  lea  rcx, [ lastItem ]
  call __MOLD_VariantDestroy
  lea  rcx , [ buffer ]
  lea  rdx , [ tmp5621 ]
  lea  r8 , [ lastItem ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5621 ], 1
  lea  rcx , [ lastItem ]
  lea  rdx , [ tmp5621 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5641
l5640:
  lea rcx, [ opcode ]
  lea rdx, [ __literal615 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5644
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1091 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5643 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1087 ]
  lea  r8 , [ tmp5643 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5639 ]
  lea  rdx , [ tmp5643 ]
  lea  r8 , [ newOpcode ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ newOpcode ]
  lea  rdi , [ tmp5620 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5621 ], 0
  mov [ tmp5643 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5621 ]
  mov [ tmp5643 + Variant_t.value], rax
  lea rcx, [ tmp5620 ]
  lea rdx, [ tmp5643 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5646
  lea  rcx, [ tmp5643 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5643 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp5620 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5620 + Variant_t.value], 0
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5639 ]
  lea rdx, [ newOpcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5643 ]
  lea  rdx , [ tmp5620 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5620 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5620 + Variant_t.value], 1
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5639 ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5643 ]
  lea  rdx , [ tmp5620 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5620 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5620 + Variant_t.value], 2
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1089 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5643 ]
  lea  rdx , [ tmp5620 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5620 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5620 + Variant_t.value], 3
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1090 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5643 ]
  lea  rdx , [ tmp5620 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ this ]
  lea  rdx , [ tmp5643 ]
  call  __PipeAbstract__replaceLastItem$0
  jmp l5647
l5646:
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  call  __PipeAbstract__emitOneItem$0
l5647:
  jmp l5645
l5644:
  lea rcx, [ opcode ]
  lea rdx, [ __literal616 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5648
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1095 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1087 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ newOpcode ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5639 ]
  lea  rdx , [ tmp5620 ]
  lea  r8 , [ newOpcode ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ newOpcode ]
  lea  rdi , [ tmp5643 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5621 ], 0
  mov [ tmp5620 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5621 ]
  mov [ tmp5620 + Variant_t.value], rax
  lea rcx, [ tmp5643 ]
  lea rdx, [ tmp5620 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5650
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5620 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp5643 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5643 + Variant_t.value], 0
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5639 ]
  lea rdx, [ newOpcode ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5620 ]
  lea  rdx , [ tmp5643 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5643 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5643 + Variant_t.value], 1
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5639 ]
  lea rdx, [ dst ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp5620 ]
  lea  rdx , [ tmp5643 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5643 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5643 + Variant_t.value], 2
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1089 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5620 ]
  lea  rdx , [ tmp5643 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp5643 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp5643 + Variant_t.value], 3
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1090 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ tmp5620 ]
  lea  rdx , [ tmp5643 ]
  lea  r8 , [ tmp5639 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx , [ this ]
  lea  rdx , [ tmp5620 ]
  call  __PipeAbstract__replaceLastItem$0
  jmp l5651
l5650:
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  call  __PipeAbstract__emitOneItem$0
l5651:
  jmp l5649
l5648:
  lea  rcx , [ this ]
  lea  rdx , [ item ]
  call  __PipeAbstract__emitOneItem$0
l5649:
l5645:
l5641:
l5631:
l5628:
l5626:
  lea rcx, [ opcode ]
  lea rdx, [ __literal579 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5652
  mov dword [ tmp5621 ], 1
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5621 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal639 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantStoreAtKey
  jmp l5653
l5652:
  lea rcx, [ opcode ]
  lea rdx, [ __literal581 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5654
  lea  rcx , [ this ]
  call  __PipeAbstract_flush$0
l5654:
l5655:
l5653:
  lea  rcx , [ this ]
  lea  rdx , [ __literal1087 ]
  lea  r8 , [ opcode ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ this ]
  lea  rdx , [ __literal1088 ]
  lea  r8 , [ dst ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp5621 ], 2
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5621 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal1089 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp5621 ], 3
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5621 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ this ]
  lea  rdx , [ __literal1090 ]
  lea  r8 , [ tmp5620 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5620 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5639 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5642 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5643 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ buffer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ lastItem ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newOpcode ]
  call __MOLD_VariantDestroy

  add  rsp, 272
  pop  rbp
  ret

  restore this
  restore item
  restore opcode
  restore dst
  restore src
  restore tmp5620
  restore tmp5621
  restore tmp5622
  restore tmp5624
  restore tmp5629
  restore tmp5632
  restore tmp5634
  restore tmp5636
  restore tmp5638
  restore tmp5639
  restore tmp5642
  restore tmp5643
  restore buffer
  restore lastItem
  restore newOpcode
; -----------------------------------------------
; function __VMachineStackObject_constructor$0
; -----------------------------------------------
__VMachineStackObject_constructor$0:
  ; init frame
  ; ----------
  classProto EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ classProto ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal229 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore classProto
; -----------------------------------------------
; function __VMachineStack_constructor$0
; -----------------------------------------------
__VMachineStack_constructor$0:
  ; init frame
  ; ----------
  tmp5657 EQU rbp - 24 ; 16 bytes
  tmp5656 EQU rbp - 40 ; 16 bytes
  this EQU rbp - 56 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 96

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp5656 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5657 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ tmp5656 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal1096 ]
  lea  r8 , [ tmp5656 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ tmp5656 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5656 ]
  lea  rdx, [vtable_Stack]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp5656 ]
  lea  rdi , [ tmp5657 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Stack_constructor$0
  pop rdi
  lea  rcx , [ this ]
  lea  rdx , [ __literal570 ]
  lea  r8 , [ tmp5656 ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------
  lea  rcx, [ tmp5656 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5657 ]
  call __MOLD_VariantDestroy

  add  rsp, 96
  pop  rbp
  ret

  restore this
  restore tmp5656
  restore tmp5657
; -----------------------------------------------
; function __VMachineStack_loadCode$0
; -----------------------------------------------
__VMachineStack_loadCode$0:
  ; init frame
  ; ----------
  code EQU rbp - 24 ; 16 bytes
  this EQU rbp - 40 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ code ], xmm0

  ; code
  ; ----
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantStoreAtKey

  ; clean frame
  ; -----------

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore code
; -----------------------------------------------
; function __VMachineStack__call$0
; -----------------------------------------------
__VMachineStack__call$0:
  ; init frame
  ; ----------
  i EQU rbp - 12 ; 4 bytes
  idxId EQU rbp - 28 ; 16 bytes
  v EQU rbp - 44 ; 16 bytes
  k EQU rbp - 60 ; 16 bytes
  bodyIp EQU rbp - 76 ; 16 bytes
  valueId EQU rbp - 92 ; 16 bytes
  keyId EQU rbp - 108 ; 16 bytes
  arg3 EQU rbp - 124 ; 16 bytes
  arg2 EQU rbp - 140 ; 16 bytes
  arg1 EQU rbp - 156 ; 16 bytes
  rv EQU rbp - 172 ; 16 bytes
  id EQU rbp - 188 ; 16 bytes
  paramIdx2 EQU rbp - 192 ; 4 bytes
  sep EQU rbp - 208 ; 16 bytes
  paramsCnt2 EQU rbp - 212 ; 4 bytes
  methodProto EQU rbp - 228 ; 16 bytes
  vtable EQU rbp - 244 ; 16 bytes
  thiz EQU rbp - 260 ; 16 bytes
  paramsCnt EQU rbp - 264 ; 4 bytes
  methodName EQU rbp - 280 ; 16 bytes
  newObject EQU rbp - 296 ; 16 bytes
  classProto EQU rbp - 312 ; 16 bytes
  proto EQU rbp - 328 ; 16 bytes
  dst EQU rbp - 344 ; 16 bytes
  src EQU rbp - 360 ; 16 bytes
  val EQU rbp - 376 ; 16 bytes
  paramValue EQU rbp - 392 ; 16 bytes
  paramIdx EQU rbp - 408 ; 16 bytes
  paramBase EQU rbp - 424 ; 16 bytes
  key EQU rbp - 440 ; 16 bytes
  box EQU rbp - 456 ; 16 bytes
  idx EQU rbp - 460 ; 4 bytes
  last EQU rbp - 476 ; 16 bytes
  newMap EQU rbp - 492 ; 16 bytes
  newArray EQU rbp - 508 ; 16 bytes
  opcode EQU rbp - 512 ; 4 bytes
  item EQU rbp - 528 ; 16 bytes
  tmp5858 EQU rbp - 532 ; 4 bytes
  tmp5839 EQU rbp - 536 ; 4 bytes
  tmp5836 EQU rbp - 540 ; 4 bytes
  tmp5833 EQU rbp - 544 ; 4 bytes
  tmp5830 EQU rbp - 548 ; 4 bytes
  tmp5827 EQU rbp - 552 ; 4 bytes
  tmp5826 EQU rbp - 556 ; 4 bytes
  tmp5821 EQU rbp - 572 ; 16 bytes
  tmp5820 EQU rbp - 588 ; 16 bytes
  tmp5819 EQU rbp - 604 ; 16 bytes
  tmp5818 EQU rbp - 620 ; 16 bytes
  tmp5815 EQU rbp - 636 ; 16 bytes
  tmp5812 EQU rbp - 640 ; 4 bytes
  tmp5809 EQU rbp - 644 ; 4 bytes
  tmp5806 EQU rbp - 648 ; 4 bytes
  tmp5803 EQU rbp - 652 ; 4 bytes
  tmp5800 EQU rbp - 656 ; 4 bytes
  tmp5791 EQU rbp - 672 ; 16 bytes
  tmp5788 EQU rbp - 676 ; 4 bytes
  tmp5787 EQU rbp - 680 ; 4 bytes
  tmp5785 EQU rbp - 684 ; 4 bytes
  tmp5784 EQU rbp - 688 ; 4 bytes
  tmp5777 EQU rbp - 692 ; 4 bytes
  tmp5772 EQU rbp - 696 ; 4 bytes
  tmp5771 EQU rbp - 700 ; 4 bytes
  tmp5768 EQU rbp - 704 ; 4 bytes
  tmp5765 EQU rbp - 708 ; 4 bytes
  tmp5759 EQU rbp - 712 ; 4 bytes
  tmp5756 EQU rbp - 716 ; 4 bytes
  tmp5753 EQU rbp - 720 ; 4 bytes
  tmp5750 EQU rbp - 724 ; 4 bytes
  tmp5747 EQU rbp - 728 ; 4 bytes
  tmp5744 EQU rbp - 732 ; 4 bytes
  tmp5741 EQU rbp - 736 ; 4 bytes
  tmp5738 EQU rbp - 740 ; 4 bytes
  tmp5735 EQU rbp - 744 ; 4 bytes
  tmp5732 EQU rbp - 748 ; 4 bytes
  tmp5729 EQU rbp - 752 ; 4 bytes
  tmp5726 EQU rbp - 756 ; 4 bytes
  tmp5723 EQU rbp - 760 ; 4 bytes
  tmp5720 EQU rbp - 764 ; 4 bytes
  tmp5717 EQU rbp - 768 ; 4 bytes
  tmp5714 EQU rbp - 772 ; 4 bytes
  tmp5711 EQU rbp - 776 ; 4 bytes
  tmp5708 EQU rbp - 780 ; 4 bytes
  tmp5705 EQU rbp - 784 ; 4 bytes
  tmp5702 EQU rbp - 788 ; 4 bytes
  tmp5699 EQU rbp - 792 ; 4 bytes
  tmp5696 EQU rbp - 796 ; 4 bytes
  tmp5693 EQU rbp - 800 ; 4 bytes
  tmp5690 EQU rbp - 804 ; 4 bytes
  tmp5689 EQU rbp - 820 ; 16 bytes
  tmp5686 EQU rbp - 824 ; 4 bytes
  tmp5683 EQU rbp - 828 ; 4 bytes
  tmp5682 EQU rbp - 844 ; 16 bytes
  tmp5679 EQU rbp - 848 ; 4 bytes
  tmp5676 EQU rbp - 852 ; 4 bytes
  tmp5673 EQU rbp - 856 ; 4 bytes
  tmp5670 EQU rbp - 860 ; 4 bytes
  tmp5669 EQU rbp - 876 ; 16 bytes
  tmp5666 EQU rbp - 880 ; 4 bytes
  tmp5663 EQU rbp - 884 ; 4 bytes
  tmp5662 EQU rbp - 888 ; 4 bytes
  tmp5661 EQU rbp - 892 ; 4 bytes
  tmp5658 EQU rbp - 908 ; 16 bytes
  stack EQU rbp - 924 ; 16 bytes
  codeCnt EQU rbp - 940 ; 16 bytes
  code EQU rbp - 956 ; 16 bytes
  codeObj EQU rbp - 972 ; 16 bytes
  ip EQU rbp - 988 ; 16 bytes
  this EQU rbp - 1004 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 1040

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  movdqu xmm0 , [ rdx ]
  movdqu [ ip ], xmm0
  mov [codeObj + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [codeCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [stack + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5658 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5669 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5682 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5689 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5791 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5815 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5818 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5819 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5820 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5821 + Variant_t.type], VARIANT_UNDEFINED
  mov [item + Variant_t.type], VARIANT_UNDEFINED
  mov [newArray + Variant_t.type], VARIANT_UNDEFINED
  mov [newMap + Variant_t.type], VARIANT_UNDEFINED
  mov [last + Variant_t.type], VARIANT_UNDEFINED
  mov [box + Variant_t.type], VARIANT_UNDEFINED
  mov [key + Variant_t.type], VARIANT_UNDEFINED
  mov [paramBase + Variant_t.type], VARIANT_UNDEFINED
  mov [paramIdx + Variant_t.type], VARIANT_UNDEFINED
  mov [paramValue + Variant_t.type], VARIANT_UNDEFINED
  mov [val + Variant_t.type], VARIANT_UNDEFINED
  mov [src + Variant_t.type], VARIANT_UNDEFINED
  mov [dst + Variant_t.type], VARIANT_UNDEFINED
  mov [proto + Variant_t.type], VARIANT_UNDEFINED
  mov [classProto + Variant_t.type], VARIANT_UNDEFINED
  mov [newObject + Variant_t.type], VARIANT_UNDEFINED
  mov [methodName + Variant_t.type], VARIANT_UNDEFINED
  mov [thiz + Variant_t.type], VARIANT_UNDEFINED
  mov [vtable + Variant_t.type], VARIANT_UNDEFINED
  mov [methodProto + Variant_t.type], VARIANT_UNDEFINED
  mov [sep + Variant_t.type], VARIANT_UNDEFINED
  mov [id + Variant_t.type], VARIANT_UNDEFINED
  mov [rv + Variant_t.type], VARIANT_UNDEFINED
  mov [arg1 + Variant_t.type], VARIANT_UNDEFINED
  mov [arg2 + Variant_t.type], VARIANT_UNDEFINED
  mov [arg3 + Variant_t.type], VARIANT_UNDEFINED
  mov [keyId + Variant_t.type], VARIANT_UNDEFINED
  mov [valueId + Variant_t.type], VARIANT_UNDEFINED
  mov [bodyIp + Variant_t.type], VARIANT_UNDEFINED
  ; Skipped loop iterator undefined
  ; Skipped loop iterator undefined
  mov [idxId + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ codeObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ codeObj ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ codeCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ codeCnt ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ stack ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal570 ]
  lea  r8 , [ stack ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ codeCnt ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
;
; -----------------------------
; BEGIN: while
;
l5659:
  lea rcx, [ codeCnt ]
  lea rdx, [ ip ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareLE
  cmp dword [__TrashBin], 0
  jnz l5660
  cmp [ ip + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ ip + Variant_t.value]
  mov dword [ tmp5662 ], eax
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea  rcx , [ code ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ item ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5662 ], 0
  lea  rcx, [ tmp5658 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp5658 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5658 + Variant_t.value]
  mov dword [ opcode ], eax
  mov dword [ tmp5662 ], 0
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jz l5664
  mov dword [ tmp5662 ], 10
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5667
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5668
l5667:
  mov dword [ tmp5662 ], 7
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5671
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5672
l5671:
  mov dword [ tmp5662 ], 8
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5674
  lea  rcx, [ newArray ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newArray ]
  call  __MOLD_VariantArrayCreate
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ newArray ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5675
l5674:
  mov dword [ tmp5662 ], 9
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5677
  lea  rcx, [ newMap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ newMap ]
  call  __MOLD_VariantMapCreate
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ newMap ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5678
l5677:
  mov dword [ tmp5662 ], 1
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5680
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ tmp5682 ]
  lea  rdx , [ tmp5669 ]
  call  __MOLD_VariantNeg
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5681
l5680:
  mov dword [ tmp5662 ], 2
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5684
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ tmp5682 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantAdd
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5685
l5684:
  mov dword [ tmp5662 ], 49
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5687
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5669 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp5689 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5669 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5689 ]
  call  __MOLD_VariantStringJoin
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5689 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5688
l5687:
  mov dword [ tmp5662 ], 4
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5691
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ tmp5682 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantMul
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5692
l5691:
  mov dword [ tmp5662 ], 3
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5694
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ tmp5682 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantSub
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5695
l5694:
  mov dword [ tmp5662 ], 5
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5697
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ tmp5682 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantDiv
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5698
l5697:
  mov dword [ tmp5662 ], 6
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5700
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ tmp5682 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantDivAsInteger
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5701
l5700:
  mov dword [ tmp5662 ], 11
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5703
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5669 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ tmp5669 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5705 ]
  call  __MOLD_VariantCompareEQ
  mov eax, dword [ tmp5705 ]
  mov [ tmp5669 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5704
l5703:
  mov dword [ tmp5662 ], 12
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5706
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5669 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ tmp5669 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5708 ]
  call  __MOLD_VariantCompareNE
  mov eax, dword [ tmp5708 ]
  mov [ tmp5669 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5707
l5706:
  mov dword [ tmp5662 ], 15
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5709
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5669 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ tmp5669 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5711 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp5711 ]
  mov [ tmp5669 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5710
l5709:
  mov dword [ tmp5662 ], 16
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5712
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5669 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ tmp5669 ]
  lea  rdx , [ last ]
  lea  r8 , [ tmp5714 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp5714 ]
  mov [ tmp5669 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5713
l5712:
  mov dword [ tmp5662 ], 13
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5715
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5669 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ last ]
  lea  rdx , [ tmp5669 ]
  lea  r8 , [ tmp5717 ]
  call  __MOLD_VariantCompareLT
  mov eax, dword [ tmp5717 ]
  mov [ tmp5669 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5716
l5715:
  mov dword [ tmp5662 ], 14
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5718
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea rcx, [ last ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5669 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ last ]
  lea  rdx , [ tmp5669 ]
  lea  r8 , [ tmp5720 ]
  call  __MOLD_VariantCompareLE
  mov eax, dword [ tmp5720 ]
  mov [ tmp5669 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5719
l5718:
  mov dword [ tmp5662 ], 30
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5721
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 164
  call __MOLD_VCall
  pop rdi
  jmp l5722
l5721:
  mov dword [ tmp5662 ], 31
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5724
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 159
  call __MOLD_VCall
  pop rdi
  jmp l5725
l5724:
  mov dword [ tmp5662 ], 32
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5727
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 138
  call __MOLD_VCall
  pop rdi
  jmp l5728
l5727:
  mov dword [ tmp5662 ], 33
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5730
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 139
  call __MOLD_VCall
  pop rdi
  jmp l5731
l5730:
  mov dword [ tmp5662 ], 17
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5733
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5682 + Variant_t.value]
  mov dword [ tmp5662 ], eax
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5734
l5733:
  mov dword [ tmp5662 ], 19
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5736
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5682 + Variant_t.value]
  mov dword [ tmp5662 ], eax
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_heap ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5737
l5736:
  mov dword [ tmp5662 ], 21
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5739
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  cmp [ tmp5658 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5658 + Variant_t.value]
  mov dword [ idx ], eax
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ box ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5740
l5739:
  mov dword [ tmp5662 ], 22
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5742
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ box ]
  lea  rdx , [ key ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5743
l5742:
  mov dword [ tmp5662 ], 18
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5745
  lea  rcx, [ paramBase ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_paramBaseStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ paramBase ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5662 ], 1
  lea  rcx, [ paramIdx ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ paramIdx ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ paramBase ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantAdd
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 165
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ paramValue ]
  call __MOLD_VariantDestroy
  lea rcx, [ paramValue ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ paramValue ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5746
l5745:
  mov dword [ tmp5662 ], 24
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5748
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5658 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp5658 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5658 + Variant_t.value]
  mov dword [ tmp5662 ], eax
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5749
l5748:
  mov dword [ tmp5662 ], 26
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5751
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5658 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp5658 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5658 + Variant_t.value]
  mov dword [ tmp5662 ], eax
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ _vm_heap ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5752
l5751:
  mov dword [ tmp5662 ], 25
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5754
  lea  rcx, [ paramBase ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_paramBaseStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ paramBase ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5662 ], 1
  lea  rcx, [ paramIdx ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ paramIdx ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ paramBase ]
  lea  rdx , [ paramIdx ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantAdd
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  r8 , [ tmp5682 ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 166
  call __MOLD_VCall
  pop rdi
  jmp l5755
l5754:
  mov dword [ tmp5662 ], 28
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5757
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  cmp [ tmp5658 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5658 + Variant_t.value]
  mov dword [ idx ], eax
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5689 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp5689 ]
  lea rdx, [ __const5760 ]
  call __MOLD_VariantMove
  lea rcx, [ tmp5689 ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5761
  lea  rcx , [ __literal1097 ]
  mov eax,  41
  call  __MOLD_SysCall
l5761:
l5762:
  lea  rcx , [ box ]
  lea  rdx , [ idx ]
  lea  r8 , [ val ]
  call  __MOLD_VariantStoreAtIndex_int32
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ box ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5758
l5757:
  mov dword [ tmp5662 ], 29
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5763
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea rcx, [ val ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ key ]
  call __MOLD_VariantDestroy
  lea rcx, [ key ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp5658 ]
  call __MOLD_VariantMove
  lea  rcx , [ box ]
  lea  rdx , [ key ]
  lea  r8 , [ val ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ box ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5764
l5763:
  mov dword [ tmp5662 ], 39
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5766
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5662 ], 1
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5662 ]
  mov [ tmp5669 + Variant_t.value], rax
  lea  rcx , [ tmp5682 ]
  lea  rdx , [ tmp5669 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantSub
  jmp l5767
l5766:
  mov dword [ tmp5662 ], 40
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5769
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5658 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp5772 ], 1
  mov eax, dword [ tmp5772 ]
  mov [ tmp5669 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5669 + Variant_t.value], rax
  lea rcx, [ tmp5658 ]
  lea rdx, [ tmp5669 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5773
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5658 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5662 ], 1
  mov [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5662 ]
  mov [ tmp5682 + Variant_t.value], rax
  lea  rcx , [ tmp5658 ]
  lea  rdx , [ tmp5682 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantSub
l5773:
l5774:
  jmp l5770
l5769:
  mov dword [ tmp5662 ], 41
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5775
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5669 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp5777 ], 0
  mov eax, dword [ tmp5777 ]
  mov [ tmp5682 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5682 + Variant_t.value], rax
  lea rcx, [ tmp5669 ]
  lea rdx, [ tmp5682 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5778
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5662 ], 1
  mov [ tmp5658 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5662 ]
  mov [ tmp5658 + Variant_t.value], rax
  lea  rcx , [ tmp5669 ]
  lea  rdx , [ tmp5658 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantSub
l5778:
l5779:
  jmp l5776
l5775:
  mov dword [ tmp5662 ], 34
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5780
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea rcx, [ src ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea rcx, [ dst ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ src ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5781
l5780:
  mov dword [ tmp5662 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5782
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ ip ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp5662 ], 1
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ proto ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5658 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal560 ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5662 ], 1
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5662 ]
  mov [ tmp5669 + Variant_t.value], rax
  lea  rcx , [ tmp5658 ]
  lea  rdx , [ tmp5669 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantSub
  mov dword [ tmp5784 ], 1
  mov eax, dword [ _vm_deepIdx ]
  add eax, dword [ tmp5784 ]
  mov dword [ _vm_deepIdx ], eax
  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_locals ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantStoreAtIndex_int32
  mov dword [ tmp5785 ], 0
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal541 ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5669 ]
  lea  rdi , [ tmp5682 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5662 ], 0
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5662 ]
  mov [ tmp5669 + Variant_t.value], rax
  lea rcx, [ tmp5682 ]
  lea rdx, [ tmp5669 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5786
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal541 ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5788 ], 1
  mov eax, dword [ tmp5788 ]
  mov [ tmp5682 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp5682 + Variant_t.value], rax
  lea  rcx , [ tmp5669 ]
  lea  rdx , [ tmp5682 ]
  lea  r8 , [ tmp5785 ]
  call  __MOLD_VariantCompareEQ
l5786:
  cmp dword [ tmp5785 ], 0
  jz l5789
  lea  rcx, [ tmp5791 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ proto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp5791 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5791 ]
  lea  rdi , [ tmp5658 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5662 ], 2
  mov [ tmp5791 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5662 ]
  mov [ tmp5791 + Variant_t.value], rax
  lea  rcx , [ tmp5658 ]
  lea  rdx , [ tmp5791 ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantAdd
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 158
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantStoreAtIndex_int32
l5789:
l5790:
  jmp l5783
l5782:
  mov dword [ tmp5662 ], 46
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5792
  lea  rcx, [ tmp5791 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ stack ]
  lea  rdx , [ __literal564 ]
  lea  r8 , [ tmp5791 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5658 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp5791 ]
  lea  rdx , [ tmp5658 ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantSub
  mov dword [ tmp5662 ], 1
  mov [ tmp5658 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5662 ]
  mov [ tmp5658 + Variant_t.value], rax
  lea  rcx , [ tmp5669 ]
  lea  rdx , [ tmp5658 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantSub
  lea  rcx , [ _vm_paramBaseStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5793
l5792:
  mov dword [ tmp5662 ], 43
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5794
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea rcx, [ ip ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5658 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5658 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 159
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp5658 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5658 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp5784 ], 1
  mov eax, dword [ _vm_deepIdx ]
  sub eax, dword [ tmp5784 ]
  mov dword [ _vm_deepIdx ], eax
  mov dword [ tmp5662 ], 0
  mov eax, dword [ _vm_deepIdx ]
  cmp eax, dword [ tmp5662 ]
  jl l5796
  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantLoadFromIndex_int32
l5796:
l5797:
  jmp l5795
l5794:
  mov dword [ tmp5662 ], 44
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5798
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea rcx, [ ip ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  jmp l5799
l5798:
  mov dword [ tmp5662 ], 20
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5801
  lea  rcx, [ tmp5658 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5658 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5802
l5801:
  mov dword [ tmp5662 ], 27
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5804
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ _vm_retValStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5805
l5804:
  mov dword [ tmp5662 ], 36
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5807
  mov dword [ tmp5662 ], 1
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ classProto ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5682 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5682 ]
  lea  rdx, [vtable_VMachineStackObject]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp5682 ]
  lea  rdx , [ classProto ]
  lea  rdi , [ tmp5658 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __VMachineStackObject_constructor$0
  pop rdi
  lea  rcx, [ newObject ]
  call __MOLD_VariantDestroy
  lea rcx, [ newObject ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp5682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ classProto ]
  lea  rdx , [ __literal223 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ newObject ]
  lea  rdx , [ __literal1098 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ newObject ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5808
l5807:
  mov dword [ tmp5662 ], 37
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5810
  mov dword [ tmp5662 ], 1
  lea  rcx, [ methodName ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ methodName ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5662 ], 2
  lea  rcx, [ tmp5682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5682 + Variant_t.value]
  mov dword [ paramsCnt ], eax
  mov [ tmp5658 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5658 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5658 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 158
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea rcx, [ thiz ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx , [ thiz ]
  lea  rdx , [ __literal1098 ]
  lea  r8 , [ vtable ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx , [ vtable ]
  lea  rdx , [ methodName ]
  lea  r8 , [ methodProto ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ methodProto ]
  lea  rdi , [ tmp5682 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5662 ], 0
  mov [ tmp5658 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5662 ]
  mov [ tmp5658 + Variant_t.value], rax
  lea rcx, [ tmp5682 ]
  lea rdx, [ tmp5658 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5813
  lea  rcx, [ tmp5815 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodName ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp5815 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5689 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal634 ]
  lea  rdx , [ tmp5815 ]
  lea  r8 , [ tmp5689 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5689 ]
  mov eax,  41
  call  __MOLD_SysCall
l5813:
l5814:
  lea  rcx, [ tmp5682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5682 ]
  lea  rdi , [ tmp5658 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5784 ], 1
  mov eax, dword [ paramsCnt ]
  sub eax, dword [ tmp5784 ]
  mov dword [ tmp5662 ], eax
  mov [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5662 ]
  mov [ tmp5682 + Variant_t.value], rax
  lea rcx, [ tmp5658 ]
  lea rdx, [ tmp5682 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5816
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal182 ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5669 ]
  lea  rdi , [ tmp5658 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ tmp5658 ]
  lea  rdi , [ tmp5682 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp5669 ]
  lea  rdi , [ tmp5658 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5821 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5658 ]
  lea  rdx , [ __literal186 ]
  lea  r8 , [ tmp5821 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5820 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal304 ]
  lea  rdx , [ tmp5821 ]
  lea  r8 , [ tmp5820 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5819 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5682 ]
  lea  rdx , [ tmp5820 ]
  lea  r8 , [ tmp5819 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5818 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal303 ]
  lea  rdx , [ tmp5819 ]
  lea  r8 , [ tmp5818 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5815 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodName ]
  lea  rdx , [ tmp5818 ]
  lea  r8 , [ tmp5815 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5689 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1099 ]
  lea  rdx , [ tmp5815 ]
  lea  r8 , [ tmp5689 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5689 ]
  mov eax,  41
  call  __MOLD_SysCall
l5816:
l5817:
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ ip ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ tmp5658 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ methodProto ]
  lea  rdx , [ __literal560 ]
  lea  r8 , [ tmp5658 ]
  call  __MOLD_VariantLoadFromKey
  mov dword [ tmp5662 ], 1
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5662 ]
  mov [ tmp5669 + Variant_t.value], rax
  lea  rcx , [ tmp5658 ]
  lea  rdx , [ tmp5669 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantSub
  mov dword [ tmp5784 ], 1
  mov eax, dword [ _vm_deepIdx ]
  add eax, dword [ tmp5784 ]
  mov dword [ _vm_deepIdx ], eax
  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_locals ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ _vm_deepIdx ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantStoreAtIndex_int32
  jmp l5811
l5810:
  mov dword [ tmp5662 ], 35
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5662 ]
  jnz l5822
  mov dword [ tmp5662 ], 1
  lea  rcx, [ tmp5682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5662 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5682 + Variant_t.value]
  mov dword [ paramsCnt2 ], eax
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
  mov dword [ tmp5662 ], 1
  mov dword [ paramIdx2 ], 0
;
; -----------------------------
; BEGIN: for paramIdx2 in tmp5784 .. paramsCnt2
;
l5824:
  mov eax, dword [ paramIdx2 ]
  cmp eax, dword [ paramsCnt2 ]
  jge l5825
  lea  rcx , [ sep ]
  mov eax,  45
  call  __MOLD_SysCall
  mov eax, dword [ paramsCnt2 ]
  sub eax, dword [ paramIdx2 ]
  mov dword [ tmp5826 ], eax
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5826 ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 158
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ tmp5682 ]
  mov eax,  45
  call  __MOLD_SysCall
  lea  rcx, [ sep ]
  call __MOLD_VariantDestroy
  lea rcx, [ sep ]
  lea rdx, [ __literal315 ]
  call __MOLD_VariantMove
  mov eax, dword [ paramIdx2 ]
  add eax, dword [ tmp5662 ]
  mov dword [ paramIdx2 ], eax
  jmp l5824
l5825:
;
; END: for paramIdx2 in tmp5784 .. paramsCnt2 step tmp5662
; -----------------------------
;
  lea  rcx , [ __literal6 ]
  call  __MOLD_PrintVariantLn
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt2 ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 159
  call __MOLD_VCall
  pop rdi
  jmp l5823
l5822:
  mov dword [ tmp5784 ], 48
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5784 ]
  jnz l5828
  mov dword [ tmp5784 ], 1
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ id ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5784 ], 2
  lea  rcx, [ tmp5682 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ tmp5682 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5682 + Variant_t.value]
  mov dword [ paramsCnt ], eax
  mov dword [ tmp5784 ], 0
  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp5784 ]
  jnz l5831
  push rdi
  lea  rdi , [ rv ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax, dword [ id + Variant_t.value]
  call  __MOLD_SysCall
  pop rdi
  jmp l5832
l5831:
  mov dword [ tmp5784 ], 1
  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp5784 ]
  jnz l5834
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 158
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg1 ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ arg1 ]
  lea  rdi , [ rv ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax, dword [ id + Variant_t.value]
  call  __MOLD_SysCall
  pop rdi
  jmp l5835
l5834:
  mov dword [ tmp5784 ], 2
  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp5784 ]
  jnz l5837
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 158
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg1 ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  mov dword [ tmp5662 ], 1
  mov eax, dword [ paramsCnt ]
  sub eax, dword [ tmp5662 ]
  mov dword [ tmp5784 ], eax
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5784 ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 158
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ arg2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg2 ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ arg1 ]
  lea  rdx , [ arg2 ]
  lea  rdi , [ rv ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax, dword [ id + Variant_t.value]
  call  __MOLD_SysCall
  pop rdi
  jmp l5838
l5837:
  mov dword [ tmp5784 ], 3
  mov eax, dword [ paramsCnt ]
  cmp eax, dword [ tmp5784 ]
  jnz l5840
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 158
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg1 ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  mov dword [ tmp5662 ], 1
  mov eax, dword [ paramsCnt ]
  sub eax, dword [ tmp5662 ]
  mov dword [ tmp5784 ], eax
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5784 ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 158
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ arg2 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg2 ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  mov dword [ tmp5662 ], 2
  mov eax, dword [ paramsCnt ]
  sub eax, dword [ tmp5662 ]
  mov dword [ tmp5784 ], eax
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5784 ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 158
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ arg3 ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg3 ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ arg1 ]
  lea  rdx , [ arg2 ]
  lea  r8 , [ arg3 ]
  lea  rdi , [ rv ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax, dword [ id + Variant_t.value]
  call  __MOLD_SysCall
  pop rdi
  jmp l5841
l5840:
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp5669 ]
  lea  rdi , [ tmp5682 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5689 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1100 ]
  lea  rdx , [ tmp5682 ]
  lea  r8 , [ tmp5689 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5689 ]
  mov eax,  41
  call  __MOLD_SysCall
l5841:
l5838:
l5835:
l5832:
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ paramsCnt ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ tmp5669 ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 159
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ rv ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5829
l5828:
  mov dword [ tmp5784 ], 252
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5784 ]
  jnz l5842
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ argc ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5843
l5842:
  mov dword [ tmp5784 ], 253
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5784 ]
  jnz l5844
  push rdi
  lea  rcx , [ stack ]
  lea  rdx , [ argv ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 157
  call __MOLD_VCall
  pop rdi
  jmp l5845
l5844:
  mov dword [ tmp5784 ], 100
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5784 ]
  jnz l5846
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  mov dword [ tmp5784 ], 1
  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ keyId ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5784 ], 2
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ valueId ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5784 ], 3
  lea  rcx, [ bodyIp ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ bodyIp ]
  call  __MOLD_VariantLoadFromIndex_int32
;
; -----------------------------
; BEGIN: for keys k values v
;
  jmp l5849
l5848:
  push rdi
  lea  rcx , [ keyId ]
  lea  rdi , [ tmp5682 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5784 ], 0
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5784 ]
  mov [ tmp5669 + Variant_t.value], rax
  lea rcx, [ tmp5682 ]
  lea rdx, [ tmp5669 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5850
  cmp [ keyId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ keyId + Variant_t.value]
  mov dword [ tmp5784 ], eax
  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ k ]
  call  __MOLD_VariantStoreAtIndex_int32
l5850:
l5851:
  push rdi
  lea  rcx , [ valueId ]
  lea  rdi , [ tmp5669 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5784 ], 0
  mov [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5784 ]
  mov [ tmp5682 + Variant_t.value], rax
  lea rcx, [ tmp5669 ]
  lea rdx, [ tmp5682 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5852
  cmp [ valueId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ valueId + Variant_t.value]
  mov dword [ tmp5784 ], eax
  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ v ]
  call  __MOLD_VariantStoreAtIndex_int32
l5852:
l5853:
  lea  rcx , [ this ]
  lea  rdx , [ bodyIp ]
  call  __VMachineStack__call$0
  ret
l5849:
  lea  rcx , [ box ]
  lea  rdx , [ k ]
  lea  r8 , [ v ]
  lea  r9 , [ l5848 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys k values v
; -----------------------------
;
  jmp l5847
l5846:
  mov dword [ tmp5784 ], 101
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5784 ]
  jnz l5854
  push rdi
  lea  rcx , [ stack ]
  lea  rdi, [ tmp5682 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 156
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea rcx, [ box ]
  lea rdx, [ tmp5682 ]
  call __MOLD_VariantMove
  mov dword [ tmp5784 ], 1
  lea  rcx, [ idxId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ idxId ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5784 ], 2
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ valueId ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5784 ], 3
  lea  rcx, [ bodyIp ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ bodyIp ]
  call  __MOLD_VariantLoadFromIndex_int32
;
; -----------------------------
; BEGIN: for keys i values v
;
  jmp l5857
l5856:
  push rdi
  lea  rcx , [ idxId ]
  lea  rdi , [ tmp5682 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5784 ], 0
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5784 ]
  mov [ tmp5669 + Variant_t.value], rax
  lea rcx, [ tmp5682 ]
  lea rdx, [ tmp5669 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5859
  cmp [ idxId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ idxId + Variant_t.value]
  mov dword [ tmp5784 ], eax
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ i ]
  mov [ tmp5669 + Variant_t.value], rax
  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ tmp5669 ]
  call  __MOLD_VariantStoreAtIndex_int32
l5859:
l5860:
  push rdi
  lea  rcx , [ valueId ]
  lea  rdi , [ tmp5669 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  57
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5784 ], 0
  mov [ tmp5682 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5784 ]
  mov [ tmp5682 + Variant_t.value], rax
  lea rcx, [ tmp5669 ]
  lea rdx, [ tmp5682 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l5861
  cmp [ valueId + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ valueId + Variant_t.value]
  mov dword [ tmp5784 ], eax
  lea  rcx , [ _vm_locals ]
  lea  rdx , [ tmp5784 ]
  lea  r8 , [ v ]
  call  __MOLD_VariantStoreAtIndex_int32
l5861:
l5862:
  lea  rcx , [ this ]
  lea  rdx , [ bodyIp ]
  call  __VMachineStack__call$0
  ret
l5857:
  lea  rcx , [ box ]
  lea  rdx , [ i ]
  lea  r8 , [ v ]
  lea  r9 , [ l5856 ]
  call  __MOLD_ForDriver_Generic
;
; END: for keys i values v
; -----------------------------
;
  jmp l5855
l5854:
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp5669 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp5669 ]
  lea  rdi , [ tmp5682 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5815 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5682 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp5815 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5689 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1101 ]
  lea  rdx , [ tmp5815 ]
  lea  r8 , [ tmp5689 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5689 ]
  mov eax,  41
  call  __MOLD_SysCall
l5855:
l5847:
l5845:
l5843:
l5829:
l5823:
l5811:
l5808:
l5805:
l5802:
l5799:
l5795:
l5793:
l5783:
l5781:
l5776:
l5770:
l5767:
l5764:
l5758:
l5755:
l5752:
l5749:
l5746:
l5743:
l5740:
l5737:
l5734:
l5731:
l5728:
l5725:
l5722:
l5719:
l5716:
l5713:
l5710:
l5707:
l5704:
l5701:
l5698:
l5695:
l5692:
l5688:
l5685:
l5681:
l5678:
l5675:
l5672:
l5668:
l5664:
l5665:
  mov dword [ tmp5784 ], 1
  mov [ tmp5669 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5784 ]
  mov [ tmp5669 + Variant_t.value], rax
  lea  rcx , [ ip ]
  lea  rdx , [ tmp5669 ]
  lea  r8 , [ ip ]
  call  __MOLD_VariantAdd
  jmp l5659
l5660:
;
; END: while
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ codeObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ stack ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5658 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5669 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5682 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5791 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newArray ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newMap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ last ]
  call __MOLD_VariantDestroy
  lea  rcx, [ box ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramBase ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramIdx ]
  call __MOLD_VariantDestroy
  lea  rcx, [ paramValue ]
  call __MOLD_VariantDestroy
  lea  rcx, [ val ]
  call __MOLD_VariantDestroy
  lea  rcx, [ src ]
  call __MOLD_VariantDestroy
  lea  rcx, [ dst ]
  call __MOLD_VariantDestroy
  lea  rcx, [ proto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ classProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ newObject ]
  call __MOLD_VariantDestroy
  lea  rcx, [ thiz ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vtable ]
  call __MOLD_VariantDestroy
  lea  rcx, [ methodProto ]
  call __MOLD_VariantDestroy
  lea  rcx, [ id ]
  call __MOLD_VariantDestroy
  lea  rcx, [ rv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg3 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ keyId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ valueId ]
  call __MOLD_VariantDestroy
  lea  rcx, [ bodyIp ]
  call __MOLD_VariantDestroy
  ; Skipped loop iterator v
  lea  rcx, [ idxId ]
  call __MOLD_VariantDestroy

  add  rsp, 1040
  pop  rbp
  ret

  restore this
  restore ip
  restore codeObj
  restore code
  restore codeCnt
  restore stack
  restore tmp5658
  restore tmp5661
  restore tmp5662
  restore tmp5663
  restore tmp5666
  restore tmp5669
  restore tmp5670
  restore tmp5673
  restore tmp5676
  restore tmp5679
  restore tmp5682
  restore tmp5683
  restore tmp5686
  restore tmp5689
  restore tmp5690
  restore tmp5693
  restore tmp5696
  restore tmp5699
  restore tmp5702
  restore tmp5705
  restore tmp5708
  restore tmp5711
  restore tmp5714
  restore tmp5717
  restore tmp5720
  restore tmp5723
  restore tmp5726
  restore tmp5729
  restore tmp5732
  restore tmp5735
  restore tmp5738
  restore tmp5741
  restore tmp5744
  restore tmp5747
  restore tmp5750
  restore tmp5753
  restore tmp5756
  restore tmp5759
  restore tmp5765
  restore tmp5768
  restore tmp5771
  restore tmp5772
  restore tmp5777
  restore tmp5784
  restore tmp5785
  restore tmp5787
  restore tmp5788
  restore tmp5791
  restore tmp5800
  restore tmp5803
  restore tmp5806
  restore tmp5809
  restore tmp5812
  restore tmp5815
  restore tmp5818
  restore tmp5819
  restore tmp5820
  restore tmp5821
  restore tmp5826
  restore tmp5827
  restore tmp5830
  restore tmp5833
  restore tmp5836
  restore tmp5839
  restore tmp5858
  restore item
  restore opcode
  restore newArray
  restore newMap
  restore last
  restore idx
  restore box
  restore key
  restore paramBase
  restore paramIdx
  restore paramValue
  restore val
  restore src
  restore dst
  restore proto
  restore classProto
  restore newObject
  restore methodName
  restore paramsCnt
  restore thiz
  restore vtable
  restore methodProto
  restore paramsCnt2
  restore sep
  restore paramIdx2
  restore id
  restore rv
  restore arg1
  restore arg2
  restore arg3
  restore keyId
  restore valueId
  restore bodyIp
  restore k
  restore v
  restore idxId
  restore i
; -----------------------------------------------
; function __VMachineStack_run$0
; -----------------------------------------------
__VMachineStack_run$0:
  ; init frame
  ; ----------
  tmp5864 EQU rbp - 24 ; 16 bytes
  tmp5863 EQU rbp - 28 ; 4 bytes
  this EQU rbp - 44 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 80

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [tmp5864 + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ tmp5863 ], 0
  mov [ tmp5864 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5863 ]
  mov [ tmp5864 + Variant_t.value], rax
  lea  rcx , [ this ]
  lea  rdx , [ tmp5864 ]
  call  __VMachineStack__call$0

  ; clean frame
  ; -----------
  lea  rcx, [ tmp5864 ]
  call __MOLD_VariantDestroy

  add  rsp, 80
  pop  rbp
  ret

  restore this
  restore tmp5863
  restore tmp5864
; -----------------------------------------------
; function __VMachineStack_dumpCode$0
; -----------------------------------------------
__VMachineStack_dumpCode$0:
  ; init frame
  ; ----------
  spaceIdx EQU rbp - 12 ; 4 bytes
  type EQU rbp - 28 ; 16 bytes
  spacesCnt EQU rbp - 44 ; 16 bytes
  labelPrefix EQU rbp - 60 ; 16 bytes
  arg EQU rbp - 76 ; 16 bytes
  arg3 EQU rbp - 92 ; 16 bytes
  arg2 EQU rbp - 108 ; 16 bytes
  arg1 EQU rbp - 124 ; 16 bytes
  opcode EQU rbp - 128 ; 4 bytes
  item EQU rbp - 144 ; 16 bytes
  ip EQU rbp - 148 ; 4 bytes
  tmp6044 EQU rbp - 152 ; 4 bytes
  tmp6041 EQU rbp - 156 ; 4 bytes
  tmp6040 EQU rbp - 172 ; 16 bytes
  tmp6039 EQU rbp - 188 ; 16 bytes
  tmp6036 EQU rbp - 192 ; 4 bytes
  tmp6035 EQU rbp - 208 ; 16 bytes
  tmp6032 EQU rbp - 212 ; 4 bytes
  tmp6029 EQU rbp - 216 ; 4 bytes
  tmp6026 EQU rbp - 220 ; 4 bytes
  tmp6023 EQU rbp - 224 ; 4 bytes
  tmp6020 EQU rbp - 228 ; 4 bytes
  tmp6017 EQU rbp - 232 ; 4 bytes
  tmp6014 EQU rbp - 236 ; 4 bytes
  tmp6011 EQU rbp - 240 ; 4 bytes
  tmp6008 EQU rbp - 244 ; 4 bytes
  tmp6005 EQU rbp - 248 ; 4 bytes
  tmp6002 EQU rbp - 252 ; 4 bytes
  tmp5999 EQU rbp - 256 ; 4 bytes
  tmp5996 EQU rbp - 260 ; 4 bytes
  tmp5995 EQU rbp - 276 ; 16 bytes
  tmp5992 EQU rbp - 280 ; 4 bytes
  tmp5989 EQU rbp - 284 ; 4 bytes
  tmp5986 EQU rbp - 288 ; 4 bytes
  tmp5983 EQU rbp - 292 ; 4 bytes
  tmp5980 EQU rbp - 296 ; 4 bytes
  tmp5977 EQU rbp - 300 ; 4 bytes
  tmp5974 EQU rbp - 304 ; 4 bytes
  tmp5971 EQU rbp - 308 ; 4 bytes
  tmp5968 EQU rbp - 312 ; 4 bytes
  tmp5965 EQU rbp - 316 ; 4 bytes
  tmp5962 EQU rbp - 320 ; 4 bytes
  tmp5959 EQU rbp - 324 ; 4 bytes
  tmp5956 EQU rbp - 328 ; 4 bytes
  tmp5953 EQU rbp - 332 ; 4 bytes
  tmp5950 EQU rbp - 336 ; 4 bytes
  tmp5947 EQU rbp - 340 ; 4 bytes
  tmp5944 EQU rbp - 344 ; 4 bytes
  tmp5941 EQU rbp - 348 ; 4 bytes
  tmp5938 EQU rbp - 352 ; 4 bytes
  tmp5935 EQU rbp - 356 ; 4 bytes
  tmp5932 EQU rbp - 360 ; 4 bytes
  tmp5929 EQU rbp - 364 ; 4 bytes
  tmp5926 EQU rbp - 368 ; 4 bytes
  tmp5923 EQU rbp - 372 ; 4 bytes
  tmp5920 EQU rbp - 376 ; 4 bytes
  tmp5917 EQU rbp - 380 ; 4 bytes
  tmp5914 EQU rbp - 384 ; 4 bytes
  tmp5911 EQU rbp - 388 ; 4 bytes
  tmp5900 EQU rbp - 392 ; 4 bytes
  tmp5897 EQU rbp - 396 ; 4 bytes
  tmp5894 EQU rbp - 412 ; 16 bytes
  tmp5893 EQU rbp - 428 ; 16 bytes
  tmp5890 EQU rbp - 432 ; 4 bytes
  tmp5887 EQU rbp - 436 ; 4 bytes
  tmp5884 EQU rbp - 440 ; 4 bytes
  tmp5881 EQU rbp - 444 ; 4 bytes
  tmp5878 EQU rbp - 448 ; 4 bytes
  tmp5877 EQU rbp - 452 ; 4 bytes
  tmp5875 EQU rbp - 456 ; 4 bytes
  tmp5872 EQU rbp - 472 ; 16 bytes
  tmp5871 EQU rbp - 476 ; 4 bytes
  tmp5868 EQU rbp - 480 ; 4 bytes
  tmp5867 EQU rbp - 484 ; 4 bytes
  tmp5866 EQU rbp - 488 ; 4 bytes
  tmp5865 EQU rbp - 504 ; 16 bytes
  txt EQU rbp - 520 ; 16 bytes
  commentIdx EQU rbp - 524 ; 4 bytes
  commentsCnt EQU rbp - 528 ; 4 bytes
  comments EQU rbp - 544 ; 16 bytes
  codeCnt EQU rbp - 560 ; 16 bytes
  code EQU rbp - 576 ; 16 bytes
  codeObj EQU rbp - 592 ; 16 bytes
  this EQU rbp - 608 ; 16 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 640

  movdqu xmm0 , [ rcx ]
  movdqu [ this ], xmm0
  mov [codeObj + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [codeCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [comments + Variant_t.type], VARIANT_UNDEFINED
  mov [txt + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5865 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5872 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5893 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5894 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp5995 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6035 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6039 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6040 + Variant_t.type], VARIANT_UNDEFINED
  mov [item + Variant_t.type], VARIANT_UNDEFINED
  mov [arg1 + Variant_t.type], VARIANT_UNDEFINED
  mov [arg2 + Variant_t.type], VARIANT_UNDEFINED
  mov [arg3 + Variant_t.type], VARIANT_UNDEFINED
  mov [arg + Variant_t.type], VARIANT_UNDEFINED
  mov [labelPrefix + Variant_t.type], VARIANT_UNDEFINED
  mov [spacesCnt + Variant_t.type], VARIANT_UNDEFINED
  mov [type + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  lea  rcx, [ codeObj ]
  call __MOLD_VariantDestroy
  lea  rcx , [ this ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ codeObj ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ codeCnt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal366 ]
  lea  r8 , [ codeCnt ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ comments ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal381 ]
  lea  r8 , [ comments ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ tmp5865 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ codeObj ]
  lea  rdx , [ __literal382 ]
  lea  r8 , [ tmp5865 ]
  call  __MOLD_VariantLoadFromKey
  cmp [ tmp5865 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5865 + Variant_t.value]
  mov dword [ commentsCnt ], eax
  mov dword [ commentIdx ], 0
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal138 ]
  call __MOLD_VariantMove
  mov dword [ tmp5866 ], 1
  cmp [ codeCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ codeCnt + Variant_t.value]
  mov dword [ tmp5867 ], eax
  mov dword [ ip ], 0
;
; -----------------------------
; BEGIN: for ip in tmp5868 .. tmp5867
;
l5869:
  mov eax, dword [ ip ]
  cmp eax, dword [ tmp5867 ]
  jge l5870
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea  rcx , [ code ]
  lea  rdx , [ ip ]
  lea  r8 , [ item ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5871 ], 0
  lea  rcx, [ tmp5865 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5871 ]
  lea  r8 , [ tmp5865 ]
  call  __MOLD_VariantLoadFromIndex_int32
  cmp [ tmp5865 + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ tmp5865 + Variant_t.value]
  mov dword [ opcode ], eax
  mov dword [ tmp5871 ], 1
  lea  rcx, [ tmp5872 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5871 ]
  lea  r8 , [ tmp5872 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp5872 ]
  lea  rdi , [ arg1 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5871 ], 2
  lea  rcx, [ tmp5872 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5871 ]
  lea  r8 , [ tmp5872 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp5872 ]
  lea  rdi , [ arg2 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  mov dword [ tmp5871 ], 3
  lea  rcx, [ tmp5872 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5871 ]
  lea  r8 , [ tmp5872 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp5872 ]
  lea  rdi , [ arg3 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ arg ]
  call __MOLD_VariantDestroy
  lea rcx, [ arg ]
  lea rdx, [ arg1 ]
  call __MOLD_VariantMove
;
; -----------------------------
; BEGIN: while
;
l5873:
  mov dword [ tmp5875 ], 0
  mov eax, dword [ commentIdx ]
  cmp eax, dword [ commentsCnt ]
  jge l5876
  lea  rcx, [ tmp5872 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ comments ]
  lea  rdx , [ commentIdx ]
  lea  r8 , [ tmp5872 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5871 ], 0
  lea  rcx, [ tmp5865 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5872 ]
  lea  rdx , [ tmp5871 ]
  lea  r8 , [ tmp5865 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov [ tmp5872 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ ip ]
  mov [ tmp5872 + Variant_t.value], rax
  lea  rcx , [ tmp5865 ]
  lea  rdx , [ tmp5872 ]
  lea  r8 , [ tmp5875 ]
  call  __MOLD_VariantCompareEQ
l5876:
  cmp dword [ tmp5875 ], 0
  jz l5874
  lea  rcx, [ tmp5865 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ comments ]
  lea  rdx , [ commentIdx ]
  lea  r8 , [ tmp5865 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp5871 ], 1
  lea  rcx, [ tmp5872 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5865 ]
  lea  rdx , [ tmp5871 ]
  lea  r8 , [ tmp5872 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal650 ]
  lea  r8 , [ tmp5872 ]
  call  __MOLD_PrintArrayOfVariantsLn
  mov dword [ tmp5878 ], 1
  mov eax, dword [ commentIdx ]
  add eax, dword [ tmp5878 ]
  mov dword [ commentIdx ], eax
  jmp l5873
l5874:
;
; END: while
; -----------------------------
;
  mov dword [ tmp5871 ], 0
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5879
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal116 ]
  call __MOLD_VariantMove
  jmp l5880
l5879:
  mov dword [ tmp5871 ], 10
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5882
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1102 ]
  call __MOLD_VariantMove
  jmp l5883
l5882:
  mov dword [ tmp5871 ], 7
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5885
  mov dword [ tmp5871 ], 1
  lea  rcx, [ tmp5865 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5871 ]
  lea  r8 , [ tmp5865 ]
  call  __MOLD_VariantLoadFromIndex_int32
  push rdi
  lea  rcx , [ tmp5865 ]
  lea  rdi , [ type ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  44
  call  __MOLD_SysCall
  pop rdi
  lea rcx, [ type ]
  lea rdx, [ __literal161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5888
  mov dword [ tmp5871 ], 0
  lea  rcx, [ tmp5872 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arg ]
  lea  rdx , [ tmp5871 ]
  lea  r8 , [ tmp5872 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp5872 ]
  lea rdx, [ __literal453 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5891
  lea  rcx, [ tmp5894 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arg ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp5894 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1103 ]
  lea  rdx , [ tmp5894 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5892
l5891:
  lea  rcx, [ tmp5894 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ arg ]
  lea  rdx , [ __literal453 ]
  lea  r8 , [ tmp5894 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1104 ]
  lea  rdx , [ tmp5894 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
l5892:
  jmp l5889
l5888:
  lea rcx, [ type ]
  lea rdx, [ __literal35 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5895
  push rdi
  lea  rcx , [ arg ]
  lea  rdi , [ tmp5872 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1105 ]
  lea  rdx , [ tmp5872 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5896
l5895:
  lea rcx, [ type ]
  lea rdx, [ __literal33 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5898
  push rdi
  lea  rcx , [ arg ]
  lea  rdi , [ tmp5872 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1106 ]
  lea  rdx , [ tmp5872 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5899
l5898:
  lea rcx, [ type ]
  lea rdx, [ __literal34 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l5901
  push rdi
  lea  rcx , [ arg ]
  lea  rdi , [ tmp5872 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1107 ]
  lea  rdx , [ tmp5872 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5902
l5901:
  lea  rcx , [ __literal1108 ]
  mov eax,  41
  call  __MOLD_SysCall
l5902:
l5899:
l5896:
l5889:
  jmp l5886
l5885:
  mov dword [ tmp5871 ], 8
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5903
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1109 ]
  call __MOLD_VariantMove
  jmp l5904
l5903:
  mov dword [ tmp5871 ], 9
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5905
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1110 ]
  call __MOLD_VariantMove
  jmp l5906
l5905:
  mov dword [ tmp5871 ], 1
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5907
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal583 ]
  call __MOLD_VariantMove
  jmp l5908
l5907:
  mov dword [ tmp5871 ], 2
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5909
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal584 ]
  call __MOLD_VariantMove
  jmp l5910
l5909:
  mov dword [ tmp5871 ], 49
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5912
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1111 ]
  call __MOLD_VariantMove
  jmp l5913
l5912:
  mov dword [ tmp5871 ], 4
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5915
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal587 ]
  call __MOLD_VariantMove
  jmp l5916
l5915:
  mov dword [ tmp5871 ], 3
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5918
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal586 ]
  call __MOLD_VariantMove
  jmp l5919
l5918:
  mov dword [ tmp5871 ], 5
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5921
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal588 ]
  call __MOLD_VariantMove
  jmp l5922
l5921:
  mov dword [ tmp5871 ], 6
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5924
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal589 ]
  call __MOLD_VariantMove
  jmp l5925
l5924:
  mov dword [ tmp5871 ], 11
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5927
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1112 ]
  call __MOLD_VariantMove
  jmp l5928
l5927:
  mov dword [ tmp5871 ], 12
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5930
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1113 ]
  call __MOLD_VariantMove
  jmp l5931
l5930:
  mov dword [ tmp5871 ], 15
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5933
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1114 ]
  call __MOLD_VariantMove
  jmp l5934
l5933:
  mov dword [ tmp5871 ], 16
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5936
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1115 ]
  call __MOLD_VariantMove
  jmp l5937
l5936:
  mov dword [ tmp5871 ], 13
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5939
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1116 ]
  call __MOLD_VariantMove
  jmp l5940
l5939:
  mov dword [ tmp5871 ], 14
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5942
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1117 ]
  call __MOLD_VariantMove
  jmp l5943
l5942:
  mov dword [ tmp5871 ], 35
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5945
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1118 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5946
l5945:
  mov dword [ tmp5871 ], 17
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5948
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1119 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5949
l5948:
  mov dword [ tmp5871 ], 21
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5951
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1120 ]
  call __MOLD_VariantMove
  jmp l5952
l5951:
  mov dword [ tmp5871 ], 22
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5954
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1121 ]
  call __MOLD_VariantMove
  jmp l5955
l5954:
  mov dword [ tmp5871 ], 18
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5957
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1122 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5958
l5957:
  mov dword [ tmp5871 ], 19
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5960
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1123 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5961
l5960:
  mov dword [ tmp5871 ], 20
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5963
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1124 ]
  call __MOLD_VariantMove
  jmp l5964
l5963:
  mov dword [ tmp5871 ], 24
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5966
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1125 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5967
l5966:
  mov dword [ tmp5871 ], 25
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5969
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1126 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5970
l5969:
  mov dword [ tmp5871 ], 26
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5972
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1127 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5973
l5972:
  mov dword [ tmp5871 ], 27
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5975
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1128 ]
  call __MOLD_VariantMove
  jmp l5976
l5975:
  mov dword [ tmp5871 ], 28
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5978
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1129 ]
  call __MOLD_VariantMove
  jmp l5979
l5978:
  mov dword [ tmp5871 ], 29
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5981
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1130 ]
  call __MOLD_VariantMove
  jmp l5982
l5981:
  mov dword [ tmp5871 ], 39
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5984
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1131 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5985
l5984:
  mov dword [ tmp5871 ], 40
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5987
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1132 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5988
l5987:
  mov dword [ tmp5871 ], 41
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5990
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1133 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5991
l5990:
  mov dword [ tmp5871 ], 42
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5993
  mov dword [ tmp5871 ], 1
  lea  rcx, [ tmp5995 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5871 ]
  lea  r8 , [ tmp5995 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5865 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5995 ]
  lea  rdx , [ __literal560 ]
  lea  r8 , [ tmp5865 ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ tmp5865 ]
  lea  rdi , [ tmp5872 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1134 ]
  lea  rdx , [ tmp5872 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5994
l5993:
  mov dword [ tmp5871 ], 46
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l5997
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1135 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l5998
l5997:
  mov dword [ tmp5871 ], 43
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6000
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1136 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l6001
l6000:
  mov dword [ tmp5871 ], 44
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6003
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1137 ]
  call __MOLD_VariantMove
  jmp l6004
l6003:
  mov dword [ tmp5871 ], 30
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6006
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1138 ]
  call __MOLD_VariantMove
  jmp l6007
l6006:
  mov dword [ tmp5871 ], 31
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6009
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1139 ]
  lea  rdx , [ arg ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l6010
l6009:
  mov dword [ tmp5871 ], 32
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6012
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1140 ]
  call __MOLD_VariantMove
  jmp l6013
l6012:
  mov dword [ tmp5871 ], 33
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6015
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1141 ]
  call __MOLD_VariantMove
  jmp l6016
l6015:
  mov dword [ tmp5871 ], 37
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6018
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1142 ]
  lea  rdx , [ arg1 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l6019
l6018:
  mov dword [ tmp5871 ], 36
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6021
  mov dword [ tmp5871 ], 1
  lea  rcx, [ tmp5865 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ item ]
  lea  rdx , [ tmp5871 ]
  lea  r8 , [ tmp5865 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ tmp5872 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5865 ]
  lea  rdx , [ __literal25 ]
  lea  r8 , [ tmp5872 ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1143 ]
  lea  rdx , [ tmp5872 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l6022
l6021:
  mov dword [ tmp5871 ], 34
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6024
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1144 ]
  call __MOLD_VariantMove
  jmp l6025
l6024:
  mov dword [ tmp5871 ], 252
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6027
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1145 ]
  call __MOLD_VariantMove
  jmp l6028
l6027:
  mov dword [ tmp5871 ], 253
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6030
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal1146 ]
  call __MOLD_VariantMove
  jmp l6031
l6030:
  mov dword [ tmp5871 ], 48
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6033
  push rdi
  lea  rcx , [ arg1 ]
  lea  rdi , [ tmp5872 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ arg2 ]
  lea  rdi , [ tmp5865 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp6035 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal410 ]
  lea  rdx , [ tmp5865 ]
  lea  r8 , [ tmp6035 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5894 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5872 ]
  lea  rdx , [ tmp6035 ]
  lea  r8 , [ tmp5894 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1147 ]
  lea  rdx , [ tmp5894 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l6034
l6033:
  mov dword [ tmp5871 ], 101
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6037
  push rdi
  lea  rcx , [ arg1 ]
  lea  rdi , [ tmp5872 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ arg2 ]
  lea  rdi , [ tmp5865 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ arg3 ]
  lea  rdi , [ tmp5995 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp6040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal410 ]
  lea  rdx , [ tmp5995 ]
  lea  r8 , [ tmp6040 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp6039 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5865 ]
  lea  rdx , [ tmp6040 ]
  lea  r8 , [ tmp6039 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp6035 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal410 ]
  lea  rdx , [ tmp6039 ]
  lea  r8 , [ tmp6035 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5894 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5872 ]
  lea  rdx , [ tmp6035 ]
  lea  r8 , [ tmp5894 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1148 ]
  lea  rdx , [ tmp5894 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l6038
l6037:
  mov dword [ tmp5871 ], 100
  mov eax, dword [ opcode ]
  cmp eax, dword [ tmp5871 ]
  jnz l6042
  push rdi
  lea  rcx , [ arg1 ]
  lea  rdi , [ tmp5872 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ arg2 ]
  lea  rdi , [ tmp5865 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  push rdi
  lea  rcx , [ arg3 ]
  lea  rdi , [ tmp5995 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp6040 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal410 ]
  lea  rdx , [ tmp5995 ]
  lea  r8 , [ tmp6040 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp6039 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5865 ]
  lea  rdx , [ tmp6040 ]
  lea  r8 , [ tmp6039 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp6035 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal410 ]
  lea  rdx , [ tmp6039 ]
  lea  r8 , [ tmp6035 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5894 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5872 ]
  lea  rdx , [ tmp6035 ]
  lea  r8 , [ tmp5894 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1149 ]
  lea  rdx , [ tmp5894 ]
  lea  r8 , [ txt ]
  call  __MOLD_VariantStringJoin
  jmp l6043
l6042:
  lea  rcx, [ txt ]
  call __MOLD_VariantDestroy
  lea rcx, [ txt ]
  lea rdx, [ __literal138 ]
  call __MOLD_VariantMove
  mov [ tmp5865 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ opcode ]
  mov [ tmp5865 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp5865 ]
  lea  rdi , [ tmp5872 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp5894 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5872 ]
  lea  rdx , [ __literal22 ]
  lea  r8 , [ tmp5894 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp5893 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1101 ]
  lea  rdx , [ tmp5894 ]
  lea  r8 , [ tmp5893 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp5893 ]
  mov eax,  41
  call  __MOLD_SysCall
l6043:
l6038:
l6034:
l6031:
l6028:
l6025:
l6022:
l6019:
l6016:
l6013:
l6010:
l6007:
l6004:
l6001:
l5998:
l5994:
l5991:
l5988:
l5985:
l5982:
l5979:
l5976:
l5973:
l5970:
l5967:
l5964:
l5961:
l5958:
l5955:
l5952:
l5949:
l5946:
l5943:
l5940:
l5937:
l5934:
l5931:
l5928:
l5925:
l5922:
l5919:
l5916:
l5913:
l5910:
l5908:
l5906:
l5904:
l5886:
l5883:
l5880:
  mov [ tmp5865 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ ip ]
  mov [ tmp5865 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp5865 ]
  lea  rdi , [ tmp5872 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ labelPrefix ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp5872 ]
  lea  rdx , [ __literal13 ]
  lea  r8 , [ labelPrefix ]
  call  __MOLD_VariantStringJoin
  mov dword [ tmp5871 ], 5
  mov [ tmp5865 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp5871 ]
  mov [ tmp5865 + Variant_t.value], rax
  push rdi
  lea  rcx , [ labelPrefix ]
  lea  rdi , [ tmp5995 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  43
  call  __MOLD_SysCall
  pop rdi
  lea  rcx , [ tmp5865 ]
  lea  rdx , [ tmp5995 ]
  lea  r8 , [ spacesCnt ]
  call  __MOLD_VariantSub
  mov dword [ tmp5871 ], 1
  cmp [ spacesCnt + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ spacesCnt + Variant_t.value]
  mov dword [ tmp5878 ], eax
  mov dword [ spaceIdx ], 0
;
; -----------------------------
; BEGIN: for spaceIdx in tmp6044 .. tmp5878
;
l6045:
  mov eax, dword [ spaceIdx ]
  cmp eax, dword [ tmp5878 ]
  jge l6046
  lea  rcx , [ labelPrefix ]
  lea  rdx , [ __literal315 ]
  lea  r8 , [ labelPrefix ]
  call  __MOLD_VariantStringJoin
  mov eax, dword [ spaceIdx ]
  add eax, dword [ tmp5871 ]
  mov dword [ spaceIdx ], eax
  jmp l6045
l6046:
;
; END: for spaceIdx in tmp6044 .. tmp5878 step tmp5871
; -----------------------------
;
  lea  rcx , [ 2 ]
  lea  rdx , [ labelPrefix ]
  lea  r8 , [ txt ]
  call  __MOLD_PrintArrayOfVariantsLn
  mov eax, dword [ ip ]
  add eax, dword [ tmp5866 ]
  mov dword [ ip ], eax
  jmp l5869
l5870:
;
; END: for ip in tmp5868 .. tmp5867 step tmp5866
; -----------------------------
;

  ; clean frame
  ; -----------
  lea  rcx, [ codeObj ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeCnt ]
  call __MOLD_VariantDestroy
  lea  rcx, [ comments ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5865 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5872 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp5995 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ item ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg1 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg2 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg3 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ arg ]
  call __MOLD_VariantDestroy
  lea  rcx, [ spacesCnt ]
  call __MOLD_VariantDestroy

  add  rsp, 640
  pop  rbp
  ret

  restore this
  restore codeObj
  restore code
  restore codeCnt
  restore comments
  restore commentsCnt
  restore commentIdx
  restore txt
  restore tmp5865
  restore tmp5866
  restore tmp5867
  restore tmp5868
  restore tmp5871
  restore tmp5872
  restore tmp5875
  restore tmp5877
  restore tmp5878
  restore tmp5881
  restore tmp5884
  restore tmp5887
  restore tmp5890
  restore tmp5893
  restore tmp5894
  restore tmp5897
  restore tmp5900
  restore tmp5911
  restore tmp5914
  restore tmp5917
  restore tmp5920
  restore tmp5923
  restore tmp5926
  restore tmp5929
  restore tmp5932
  restore tmp5935
  restore tmp5938
  restore tmp5941
  restore tmp5944
  restore tmp5947
  restore tmp5950
  restore tmp5953
  restore tmp5956
  restore tmp5959
  restore tmp5962
  restore tmp5965
  restore tmp5968
  restore tmp5971
  restore tmp5974
  restore tmp5977
  restore tmp5980
  restore tmp5983
  restore tmp5986
  restore tmp5989
  restore tmp5992
  restore tmp5995
  restore tmp5996
  restore tmp5999
  restore tmp6002
  restore tmp6005
  restore tmp6008
  restore tmp6011
  restore tmp6014
  restore tmp6017
  restore tmp6020
  restore tmp6023
  restore tmp6026
  restore tmp6029
  restore tmp6032
  restore tmp6035
  restore tmp6036
  restore tmp6039
  restore tmp6040
  restore tmp6041
  restore tmp6044
  restore ip
  restore item
  restore opcode
  restore arg1
  restore arg2
  restore arg3
  restore arg
  restore labelPrefix
  restore spacesCnt
  restore type
  restore spaceIdx
; -----------------------------------------------
; function BadUsageError
; -----------------------------------------------
BadUsageError:
  ; init frame
  ; ----------

  push rbp
  mov  rbp, rsp
  sub  rsp, 32


  ; code
  ; ----
  lea  rcx , [ 2 ]
  lea  rdx , [ __literal1151 ]
  lea  r8 , [ VERSION_STRING ]
  call  __MOLD_PrintArrayOfVariantsLn
  lea  rcx , [ __literal1152 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1153 ]
  call  __MOLD_PrintVariantLn
  mov eax,  40
  call  __MOLD_SysCall

  ; clean frame
  ; -----------

  add  rsp, 32
  pop  rbp
  ret

; -----------------------------------------------
; entry point
; -----------------------------------------------
; -----------------------------------------------
; function start
; -----------------------------------------------
start:
  ; init frame
  ; ----------
  codeGenerator EQU rbp - 24 ; 16 bytes
  astPrinterText EQU rbp - 40 ; 16 bytes
  mirQuadOptimizer EQU rbp - 56 ; 16 bytes
  mirQuadCollector EQU rbp - 72 ; 16 bytes
  vm EQU rbp - 88 ; 16 bytes
  code EQU rbp - 104 ; 16 bytes
  astTranslator EQU rbp - 120 ; 16 bytes
  astSymbolsCollector EQU rbp - 136 ; 16 bytes
  astModuleResolver EQU rbp - 152 ; 16 bytes
  tmp6117 EQU rbp - 168 ; 16 bytes
  tmp6116 EQU rbp - 184 ; 16 bytes
  idx EQU rbp - 188 ; 4 bytes
  tmp6100 EQU rbp - 192 ; 4 bytes
  tmp6097 EQU rbp - 196 ; 4 bytes
  tmp6094 EQU rbp - 200 ; 4 bytes
  tmp6091 EQU rbp - 204 ; 4 bytes
  tmp6088 EQU rbp - 208 ; 4 bytes
  tmp6087 EQU rbp - 212 ; 4 bytes
  tmp6084 EQU rbp - 216 ; 4 bytes
  tmp6081 EQU rbp - 220 ; 4 bytes
  tmp6078 EQU rbp - 224 ; 4 bytes
  tmp6075 EQU rbp - 228 ; 4 bytes
  tmp6072 EQU rbp - 232 ; 4 bytes
  tmp6067 EQU rbp - 236 ; 4 bytes
  tmp6065 EQU rbp - 240 ; 4 bytes
  tmp6062 EQU rbp - 244 ; 4 bytes
  tmp6059 EQU rbp - 248 ; 4 bytes
  tmp6054 EQU rbp - 252 ; 4 bytes
  tmp6053 EQU rbp - 268 ; 16 bytes
  tmp6052 EQU rbp - 272 ; 4 bytes
  tmp6051 EQU rbp - 288 ; 16 bytes
  tmp6050 EQU rbp - 304 ; 16 bytes
  tmp6049 EQU rbp - 320 ; 16 bytes
  tmp6048 EQU rbp - 324 ; 4 bytes
  tmp6047 EQU rbp - 328 ; 4 bytes
  ast EQU rbp - 344 ; 16 bytes
  parser EQU rbp - 360 ; 16 bytes
  app EQU rbp - 376 ; 16 bytes
  isProfilerEnabled EQU rbp - 380 ; 4 bytes
  optimizationLevel EQU rbp - 384 ; 4 bytes
  path EQU rbp - 400 ; 16 bytes
  mode EQU rbp - 416 ; 16 bytes
  MOLD_SYSCALL_TWO_ARGS EQU rbp - 420 ; 4 bytes
  MOLD_SYSCALL_ONE_ARG EQU rbp - 424 ; 4 bytes
  MOLD_SYSCALL_ZERO_ARGS EQU rbp - 428 ; 4 bytes

  push rbp
  mov  rbp, rsp
  sub  rsp, 464

  mov [mode + Variant_t.type], VARIANT_UNDEFINED
  mov [path + Variant_t.type], VARIANT_UNDEFINED
  mov [app + Variant_t.type], VARIANT_UNDEFINED
  mov [parser + Variant_t.type], VARIANT_UNDEFINED
  mov [ast + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6049 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6050 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6051 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6053 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6116 + Variant_t.type], VARIANT_UNDEFINED
  mov [tmp6117 + Variant_t.type], VARIANT_UNDEFINED
  mov [astModuleResolver + Variant_t.type], VARIANT_UNDEFINED
  mov [astSymbolsCollector + Variant_t.type], VARIANT_UNDEFINED
  mov [astTranslator + Variant_t.type], VARIANT_UNDEFINED
  mov [code + Variant_t.type], VARIANT_UNDEFINED
  mov [vm + Variant_t.type], VARIANT_UNDEFINED
  mov [mirQuadCollector + Variant_t.type], VARIANT_UNDEFINED
  mov [mirQuadOptimizer + Variant_t.type], VARIANT_UNDEFINED
  mov [astPrinterText + Variant_t.type], VARIANT_UNDEFINED
  mov [codeGenerator + Variant_t.type], VARIANT_UNDEFINED

  mov [SYMBOL_KIND_AS_TEXT + Variant_t.type], VARIANT_UNDEFINED
  mov [MOLD_SYSCALL_MAP + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_dataStack + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_locals + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_heap + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_paramBaseStack + Variant_t.type], VARIANT_UNDEFINED
  mov [_vm_retValStack + Variant_t.type], VARIANT_UNDEFINED

  ; code
  ; ----
  mov dword [ DEBUG_AST_OPTIMIZER ], 0
  mov dword [ DEBUG_MOLD ], 0
  mov dword [ AST_DATA_INTEGER ], 1
  mov dword [ AST_DATA_STRING ], 4
  mov dword [ AST_OPCODE_BLOCK ], 31
  mov dword [ AST_OPCODE_CALL ], 42
  mov dword [ AST_OPCODE_VARIABLE ], 52
  mov dword [ AST_OPCODE_DECLARE_OR_ASSIGN ], 56
  mov dword [ AST_OPCODE_SUB ], 59
  mov dword [ AST_OPCODE_TYPE_CAST ], 75
  mov dword [ SCANERLESS_MODE_ENABLED ], 0
  mov dword [ NodeId ], 0
  mov dword [ SYMBOL_KIND_VAR_LOCAL ], 1
  mov dword [ SYMBOL_KIND_VAR_GLOBAL ], 2
  mov dword [ SYMBOL_KIND_VAR_PARAM ], 3
  mov dword [ SYMBOL_KIND_VAR_RETVAL ], 4
  mov dword [ SYMBOL_KIND_CONST ], 5
  mov dword [ SYMBOL_KIND_LABEL ], 6
  mov dword [ SYMBOL_KIND_FUNCTION ], 7
  mov dword [ SYMBOL_KIND_CLASS ], 8
  mov dword [ SYMBOL_KIND_JMP_TABLE ], 10
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6049 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp6050 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6050 + Variant_t.value], 0
  lea  rcx, [ tmp6051 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6051 ]
  lea rdx, [ __literal138 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ tmp6050 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6050 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6050 + Variant_t.value], 1
  lea  rcx, [ tmp6051 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6051 ]
  lea rdx, [ __literal139 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ tmp6050 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6050 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6050 + Variant_t.value], 2
  lea  rcx, [ tmp6051 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6051 ]
  lea rdx, [ __literal17 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ tmp6050 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6050 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6050 + Variant_t.value], 3
  lea  rcx, [ tmp6051 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6051 ]
  lea rdx, [ __literal140 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ tmp6050 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6050 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6050 + Variant_t.value], 4
  lea  rcx, [ tmp6051 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6051 ]
  lea rdx, [ __literal141 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ tmp6050 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6050 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6050 + Variant_t.value], 5
  lea  rcx, [ tmp6051 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6051 ]
  lea rdx, [ __literal142 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ tmp6050 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6050 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6050 + Variant_t.value], 6
  lea  rcx, [ tmp6051 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6051 ]
  lea rdx, [ __literal143 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ tmp6050 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6050 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6050 + Variant_t.value], 7
  lea  rcx, [ tmp6051 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6051 ]
  lea rdx, [ __literal144 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ tmp6050 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6050 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6050 + Variant_t.value], 8
  lea  rcx, [ tmp6051 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6051 ]
  lea rdx, [ __literal145 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ tmp6050 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtIndex
  mov [ tmp6050 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6050 + Variant_t.value], 9
  lea  rcx, [ tmp6051 ]
  call __MOLD_VariantDestroy
  lea rcx, [ tmp6051 ]
  lea rdx, [ __literal146 ]
  call __MOLD_VariantMove
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ tmp6050 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ SYMBOL_KIND_AS_TEXT ]
  call __MOLD_VariantDestroy
  lea rcx, [ SYMBOL_KIND_AS_TEXT ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  mov dword [ SymbolTable_NextId ], 0
  mov dword [ MOLD_SYSCALL_ZERO_ARGS ], 0
  mov dword [ MOLD_SYSCALL_ONE_ARG ], 4096
  mov dword [ MOLD_SYSCALL_TWO_ARGS ], 8192
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6049 ]
  call  __MOLD_VariantMapCreate
  mov dword [ tmp6048 ], 4097
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal261 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 2
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal262 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 3
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal263 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 4
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal264 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 8
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal265 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 9
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal266 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 10
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal267 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 11
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal268 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 14
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal269 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 15
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal270 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 16
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal271 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 17
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal272 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 18
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal273 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 19
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal274 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 20
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal275 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 21
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal276 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 21
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal277 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 22
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal278 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 23
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal279 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 24
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal280 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 24
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal281 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 29
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal282 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 31
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal283 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 32
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal284 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 33
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal285 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 34
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal286 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 35
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal287 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 36
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal288 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 37
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal289 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 38
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal290 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 40
  mov eax, dword [ MOLD_SYSCALL_ZERO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal291 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 41
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal292 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 42
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal293 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 43
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal294 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 44
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal295 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 45
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal296 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 46
  mov eax, dword [ MOLD_SYSCALL_ONE_ARG ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal297 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 50
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal19 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  mov dword [ tmp6052 ], 51
  mov eax, dword [ MOLD_SYSCALL_TWO_ARGS ]
  add eax, dword [ tmp6052 ]
  mov dword [ tmp6048 ], eax
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ tmp6048 ]
  mov [ tmp6051 + Variant_t.value], rax
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal298 ]
  lea  r8 , [ tmp6051 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx, [ MOLD_SYSCALL_MAP ]
  call __MOLD_VariantDestroy
  lea rcx, [ MOLD_SYSCALL_MAP ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  mov dword [ DEBUG_MOLD ], 0
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6049 ]
  call  __MOLD_VariantArrayCreate
  mov [ tmp6051 + Variant_t.type], VARIANT_INTEGER
  mov [ tmp6051 + Variant_t.value], 0
  lea  rcx, [ tmp6050 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6050 ]
  call  __MOLD_VariantArrayCreate
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ tmp6051 ]
  lea  r8 , [ tmp6050 ]
  call  __MOLD_VariantStoreAtIndex
  lea  rcx, [ _vm_dataStack ]
  call __MOLD_VariantDestroy
  lea rcx, [ _vm_dataStack ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  mov dword [ tmp6048 ], 0
  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_dataStack ]
  lea  rdx , [ tmp6048 ]
  lea  r8 , [ _vm_locals ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx, [ _vm_heap ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_heap ]
  call  __MOLD_VariantArrayCreate
  mov dword [ _vm_deepIdx ], 0
  lea  rcx, [ _vm_paramBaseStack ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_paramBaseStack ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ _vm_retValStack ]
  call __MOLD_VariantDestroy
  lea  rcx , [ _vm_retValStack ]
  call  __MOLD_VariantArrayCreate
  lea  rcx, [ VERSION_STRING ]
  call __MOLD_VariantDestroy
  lea rcx, [ VERSION_STRING ]
  lea rdx, [ __literal1150 ]
  call __MOLD_VariantMove
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1154 ]
  call __MOLD_VariantMove
  lea  rcx, [ path ]
  call __MOLD_VariantDestroy
  lea rcx, [ path ]
  lea rdx, [ __literal6 ]
  call __MOLD_VariantMove
  mov dword [ optimizationLevel ], 0
  mov dword [ isProfilerEnabled ], 0
  mov dword [ tmp6048 ], 1
  cmp [ argc + Variant_t.type], VARIANT_INTEGER
  jnz __MOLD_PrintErrorAndDie.integerExpected
  mov eax, dword [ argc + Variant_t.value]
  mov dword [ tmp6052 ], eax
  mov dword [ idx ], 1
;
; -----------------------------
; BEGIN: for idx in tmp6054 .. tmp6052
;
l6055:
  mov eax, dword [ idx ]
  cmp eax, dword [ tmp6052 ]
  jge l6056
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1155 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6057
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1156 ]
  call __MOLD_VariantMove
  lea  rcx , [ __literal1157 ]
  call  __MOLD_PrintVariantLn
  lea  rcx , [ __literal1158 ]
  call  __MOLD_PrintVariantLn
  mov eax,  40
  call  __MOLD_SysCall
  jmp l6058
l6057:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1159 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6060
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1160 ]
  call __MOLD_VariantMove
  jmp l6061
l6060:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1161 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6063
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1162 ]
  call __MOLD_VariantMove
  jmp l6064
l6063:
  mov dword [ tmp6065 ], 1
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1163 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l6066
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal1164 ]
  lea  r8 , [ tmp6065 ]
  call  __MOLD_VariantCompareEQ
l6066:
  cmp dword [ tmp6065 ], 0
  jz l6068
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1165 ]
  call __MOLD_VariantMove
  jmp l6069
l6068:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1166 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6070
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1167 ]
  call __MOLD_VariantMove
  jmp l6071
l6070:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1168 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6073
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1169 ]
  call __MOLD_VariantMove
  jmp l6074
l6073:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1170 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6076
  lea  rcx, [ mode ]
  call __MOLD_VariantDestroy
  lea rcx, [ mode ]
  lea rdx, [ __literal1171 ]
  call __MOLD_VariantMove
  jmp l6077
l6076:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1172 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l6079
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1173 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6082
  mov dword [ DEBUG_AST_OPTIMIZER ], 1
  mov dword [ DEBUG_MOLD ], 1
  jmp l6083
l6082:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1174 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6085
  mov dword [ optimizationLevel ], 0
  jmp l6086
l6085:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1175 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6089
  mov dword [ optimizationLevel ], 1
  jmp l6090
l6089:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1176 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6092
  mov dword [ optimizationLevel ], 2
  jmp l6093
l6092:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1177 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6095
  mov dword [ optimizationLevel ], 3
  jmp l6096
l6095:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal1178 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6098
  mov dword [ isProfilerEnabled ], 1
  jmp l6099
l6098:
  lea  rcx, [ tmp6050 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ tmp6050 ]
  call  __MOLD_VariantLoadFromIndex_int32
  mov dword [ tmp6087 ], 0
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6050 ]
  lea  rdx , [ tmp6087 ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantLoadFromIndex_int32
  lea rcx, [ tmp6049 ]
  lea rdx, [ __literal89 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6101
  call  BadUsageError
  jmp l6102
l6101:
  lea  rcx, [ path ]
  call __MOLD_VariantDestroy
  lea  rcx , [ argv ]
  lea  rdx , [ idx ]
  lea  r8 , [ path ]
  call  __MOLD_VariantLoadFromIndex_int32
l6102:
l6099:
l6096:
l6093:
l6090:
l6086:
l6083:
l6079:
l6080:
l6077:
l6074:
l6071:
l6069:
l6064:
l6061:
l6058:
  mov eax, dword [ idx ]
  add eax, dword [ tmp6048 ]
  mov dword [ idx ], eax
  jmp l6055
l6056:
;
; END: for idx in tmp6054 .. tmp6052 step tmp6048
; -----------------------------
;
  lea rcx, [ path ]
  lea rdx, [ __literal6 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6103
  call  BadUsageError
l6103:
l6104:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6049 ]
  lea  rdx, [vtable_AppMold]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp6049 ]
  lea  rdi , [ tmp6050 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_constructor$0
  pop rdi
  lea  rcx, [ app ]
  call __MOLD_VariantDestroy
  lea rcx, [ app ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  lea  rcx , [ app ]
  lea  rdx , [ __literal1179 ]
  call  __AppMold_logDebug$0
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6049 ]
  lea  rdx, [vtable_Parser]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp6049 ]
  lea  rdi , [ tmp6050 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser_constructor$0
  pop rdi
  lea  rcx, [ parser ]
  call __MOLD_VariantDestroy
  lea rcx, [ parser ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  lea  rcx , [ app ]
  lea  rdx , [ __literal1180 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ parser ]
  lea  rdx , [ path ]
  lea  rdi , [ tmp6049 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __Parser_parseFile$0
  pop rdi
  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy
  lea rcx, [ ast ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  lea rcx, [ mode ]
  lea rdx, [ __literal1167 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6105
  push rdi
  lea  rcx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 167
  call __MOLD_VCall
  pop rdi
  jmp l6106
l6105:
  lea rcx, [ mode ]
  lea rdx, [ __literal1169 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6107
  lea  rcx , [ __literal1181 ]
  mov eax,  41
  call  __MOLD_SysCall
  jmp l6108
l6107:
  lea  rcx , [ app ]
  lea  rdx , [ __literal1182 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ app ]
  lea  rdi , [ tmp6049 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_getAstModuleResolver$0
  pop rdi
  lea  rcx, [ astModuleResolver ]
  call __MOLD_VariantDestroy
  lea rcx, [ astModuleResolver ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ astModuleResolver ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 168
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1183 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6050 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 169
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ tmp6050 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 170
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1184 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ app ]
  lea  rdi , [ tmp6049 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_getAstSymbolsCollector$0
  pop rdi
  lea  rcx, [ astSymbolsCollector ]
  call __MOLD_VariantDestroy
  lea rcx, [ astSymbolsCollector ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ astSymbolsCollector ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 171
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1185 ]
  call  __AppMold_logDebug$0
  mov dword [ tmp6054 ], 0
  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6054 ]
  jnz l6109
  lea  rcx , [ app ]
  lea  rdx , [ __literal1186 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6050 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 172
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ tmp6050 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 170
  call __MOLD_VCall
  pop rdi
  jmp l6110
l6109:
  mov dword [ tmp6054 ], 1
  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6054 ]
  jnz l6111
  lea  rcx , [ app ]
  lea  rdx , [ __literal1187 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6050 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 173
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ tmp6050 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 170
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1188 ]
  call  __AppMold_logDebug$0
  lea  rcx , [ app ]
  lea  rdx , [ __literal1186 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6050 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 172
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ tmp6050 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 170
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1189 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6050 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 174
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ tmp6050 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 170
  call __MOLD_VCall
  pop rdi
  mov dword [ tmp6067 ], 1
  lea rcx, [ mode ]
  lea rdx, [ __literal1162 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l6113
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1154 ]
  lea  r8 , [ tmp6067 ]
  call  __MOLD_VariantCompareEQ
l6113:
  cmp dword [ tmp6067 ], 0
  jz l6114
  lea  rcx , [ app ]
  lea  rdx , [ __literal1190 ]
  call  __AppMold_logDebug$0
  jmp l6115
l6114:
  lea  rcx , [ app ]
  lea  rdx , [ __literal1191 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6050 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 175
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ tmp6050 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 170
  call __MOLD_VCall
  pop rdi
l6115:
  lea  rcx , [ app ]
  lea  rdx , [ __literal1192 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6050 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 176
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ tmp6050 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 170
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1193 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6050 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 177
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ tmp6050 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 170
  call __MOLD_VCall
  pop rdi
  jmp l6112
l6111:
  mov [ tmp6050 + Variant_t.type], VARIANT_INTEGER
  movsxd rax, dword [ optimizationLevel ]
  mov [ tmp6050 + Variant_t.value], rax
  push rdi
  lea  rcx , [ tmp6050 ]
  lea  rdi , [ tmp6049 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  mov eax,  42
  call  __MOLD_SysCall
  pop rdi
  lea  rcx, [ tmp6117 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ __literal1195 ]
  lea  r8 , [ tmp6117 ]
  call  __MOLD_VariantStringJoin
  lea  rcx, [ tmp6116 ]
  call __MOLD_VariantDestroy
  lea  rcx , [ __literal1194 ]
  lea  rdx , [ tmp6117 ]
  lea  r8 , [ tmp6116 ]
  call  __MOLD_VariantStringJoin
  lea  rcx , [ tmp6116 ]
  mov eax,  41
  call  __MOLD_SysCall
l6112:
l6110:
  mov dword [ tmp6062 ], 1
  lea rcx, [ mode ]
  lea rdx, [ __literal1162 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareEQ
  cmp dword [__TrashBin], 0
  jnz l6118
  lea  rcx , [ mode ]
  lea  rdx , [ __literal1154 ]
  lea  r8 , [ tmp6062 ]
  call  __MOLD_VariantCompareEQ
l6118:
  cmp dword [ tmp6062 ], 0
  jz l6119
  lea  rcx , [ app ]
  lea  rdx , [ __literal1196 ]
  call  __AppMold_logDebug$0
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6049 ]
  lea  rdx, [vtable_ASTTranslatorMIR0]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ app ]
  lea  rdi , [ tmp6050 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR0_constructor$0
  pop rdi
  lea  rcx, [ astTranslator ]
  call __MOLD_VariantDestroy
  lea rcx, [ astTranslator ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  push rdi
  lea  rcx , [ astTranslator ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 178
  call __MOLD_VCall
  pop rdi
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ astTranslator ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  lea  rcx , [ app ]
  lea  rdx , [ __literal1197 ]
  call  __AppMold_logDebug$0
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6049 ]
  lea  rdx, [vtable_VMachineStack]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp6049 ]
  lea  rdi , [ tmp6050 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __VMachineStack_constructor$0
  pop rdi
  lea  rcx, [ vm ]
  call __MOLD_VariantDestroy
  lea rcx, [ vm ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  lea  rcx , [ vm ]
  lea  rdx , [ code ]
  call  __VMachineStack_loadCode$0
  lea rcx, [ mode ]
  lea rdx, [ __literal1162 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6121
  lea  rcx , [ app ]
  lea  rdx , [ __literal1198 ]
  call  __AppMold_logDebug$0
  lea  rcx , [ vm ]
  call  __VMachineStack_dumpCode$0
  jmp l6122
l6121:
  lea rcx, [ mode ]
  lea rdx, [ __literal1154 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6123
  lea  rcx , [ app ]
  lea  rdx , [ __literal1199 ]
  call  __AppMold_logDebug$0
  lea  rcx , [ vm ]
  call  __VMachineStack_run$0
l6123:
l6124:
l6122:
  jmp l6120
l6119:
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6049 ]
  lea  rdx, [vtable_ASTTranslatorMIR1]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp6049 ]
  lea  rdx , [ app ]
  lea  rdi , [ tmp6050 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __ASTTranslatorMIR1_constructor$0
  pop rdi
  lea  rcx, [ astTranslator ]
  call __MOLD_VariantDestroy
  lea rcx, [ astTranslator ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6049 ]
  lea  rdx, [vtable_MIRQuadCollector]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp6049 ]
  lea  rdi , [ tmp6050 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector_constructor$0
  pop rdi
  lea  rcx, [ mirQuadCollector ]
  call __MOLD_VariantDestroy
  lea rcx, [ mirQuadCollector ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6049 ]
  lea  rdx, [vtable_MIRQuadOptimizer]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp6049 ]
  lea  rdi , [ tmp6050 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadOptimizer_constructor$0
  pop rdi
  lea  rcx, [ mirQuadOptimizer ]
  call __MOLD_VariantDestroy
  lea rcx, [ mirQuadOptimizer ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  lea rcx, [ mode ]
  lea rdx, [ __literal1171 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6125
  lea  rcx, [ astPrinterText ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astPrinterText ]
  lea  rdx, [vtable_ASTPrinterText]
  call __MOLD_VariantObjectCreate
  lea  rcx , [ astPrinterText ]
  lea  rdx , [ ast ]
  call  __ASTPrinterText_printNode$0
  jmp l6126
l6125:
  mov dword [ tmp6054 ], 0
  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6054 ]
  jnz l6127
  push rdi
  lea  rcx , [ astTranslator ]
  lea  rdx , [ mirQuadCollector ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 179
  call __MOLD_VCall
  pop rdi
  jmp l6128
l6127:
  mov dword [ tmp6054 ], 1
  mov eax, dword [ optimizationLevel ]
  cmp eax, dword [ tmp6054 ]
  jnz l6129
  push rdi
  lea  rcx , [ astTranslator ]
  lea  rdx , [ mirQuadOptimizer ]
  lea  rdi, [ tmp6050 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 179
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ tmp6050 ]
  lea  rdx , [ mirQuadCollector ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 179
  call __MOLD_VCall
  pop rdi
l6129:
l6130:
l6128:
  lea  rcx , [ app ]
  lea  rdx , [ __literal1200 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ app ]
  lea  rdi, [ tmp6050 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 180
  call __MOLD_VCall
  pop rdi
  push rdi
  lea  rcx , [ tmp6050 ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 170
  call __MOLD_VCall
  pop rdi
  lea  rcx , [ app ]
  lea  rdx , [ __literal1201 ]
  call  __AppMold_logDebug$0
  push rdi
  lea  rcx , [ astTranslator ]
  lea  rdx , [ ast ]
  lea  rdi, [ tmp6049 ]
  mov [rdi + Variant_t.type], VARIANT_UNDEFINED
  mov  eax, 178
  call __MOLD_VCall
  pop rdi
  lea rcx, [ mode ]
  lea rdx, [ __literal1165 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6131
  lea  rcx , [ mirQuadCollector ]
  call  __MIRQuadCollector_printQuads$0
  jmp l6132
l6131:
  lea rcx, [ mode ]
  lea rdx, [ __literal1160 ]
  lea r8, [__TrashBin]
  call __MOLD_VariantCompareNE
  cmp dword [__TrashBin], 0
  jnz l6133
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx , [ astTranslator ]
  lea  rdx , [ __literal365 ]
  lea  r8 , [ code ]
  call  __MOLD_VariantLoadFromKey
  push rdi
  lea  rcx , [ mirQuadCollector ]
  lea  rdi , [ tmp6049 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __MIRQuadCollector_getQuads$0
  pop rdi
  lea  rcx , [ code ]
  lea  rdx , [ __literal638 ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantStoreAtKey
  push rdi
  lea  rcx , [ app ]
  lea  rdi , [ tmp6049 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __AppMold_getSymbolTable$0
  pop rdi
  lea  rcx , [ code ]
  lea  rdx , [ __literal221 ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ app ]
  lea  rdx , [ __literal1202 ]
  call  __AppMold_logDebug$0
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6049 ]
  lea  rdx, [vtable_CodeGeneratorX64]
  call __MOLD_VariantObjectCreate
  push rdi
  lea  rcx , [ tmp6049 ]
  lea  rdi , [ tmp6050 ]
  mov  [rdi + Variant_t.type] , VARIANT_UNDEFINED
  call  __CodeGeneratorX64_constructor$0
  pop rdi
  lea  rcx, [ codeGenerator ]
  call __MOLD_VariantDestroy
  lea rcx, [ codeGenerator ]
  lea rdx, [ tmp6049 ]
  call __MOLD_VariantMove
  mov eax, dword [ isProfilerEnabled ]
  mov [ tmp6049 + Variant_t.type], VARIANT_BOOLEAN
  mov [ tmp6049 + Variant_t.value], rax
  lea  rcx , [ codeGenerator ]
  lea  rdx , [ __literal652 ]
  lea  r8 , [ tmp6049 ]
  call  __MOLD_VariantStoreAtKey
  lea  rcx , [ codeGenerator ]
  lea  rdx , [ code ]
  call  __CodeGeneratorX64_run$0
  jmp l6134
l6133:
  call  BadUsageError
l6134:
l6132:
l6126:
l6120:
l6108:
l6106:

  ; clean frame
  ; -----------
  lea  rcx, [ app ]
  call __MOLD_VariantDestroy
  lea  rcx, [ parser ]
  call __MOLD_VariantDestroy
  lea  rcx, [ ast ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6049 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6050 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6051 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ tmp6053 ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astModuleResolver ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astSymbolsCollector ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astTranslator ]
  call __MOLD_VariantDestroy
  lea  rcx, [ code ]
  call __MOLD_VariantDestroy
  lea  rcx, [ vm ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirQuadCollector ]
  call __MOLD_VariantDestroy
  lea  rcx, [ mirQuadOptimizer ]
  call __MOLD_VariantDestroy
  lea  rcx, [ astPrinterText ]
  call __MOLD_VariantDestroy
  lea  rcx, [ codeGenerator ]
  call __MOLD_VariantDestroy
  lea  rcx, [ argv ]
  call __MOLD_VariantDestroy
  lea  rcx, [ argc ]
  call __MOLD_VariantDestroy
  lea  rcx, [ SYMBOL_KIND_AS_TEXT ]
  call __MOLD_VariantDestroy
  lea  rcx, [ MOLD_SYSCALL_MAP ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_dataStack ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_locals ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_heap ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_paramBaseStack ]
  call __MOLD_VariantDestroy
  lea  rcx, [ _vm_retValStack ]
  call __MOLD_VariantDestroy

  add  rsp, 464
  pop  rbp
  ret

  restore MOLD_SYSCALL_ZERO_ARGS
  restore MOLD_SYSCALL_ONE_ARG
  restore MOLD_SYSCALL_TWO_ARGS
  restore mode
  restore path
  restore optimizationLevel
  restore isProfilerEnabled
  restore app
  restore parser
  restore ast
  restore tmp6047
  restore tmp6048
  restore tmp6049
  restore tmp6050
  restore tmp6051
  restore tmp6052
  restore tmp6053
  restore tmp6054
  restore tmp6059
  restore tmp6062
  restore tmp6065
  restore tmp6067
  restore tmp6072
  restore tmp6075
  restore tmp6078
  restore tmp6081
  restore tmp6084
  restore tmp6087
  restore tmp6088
  restore tmp6091
  restore tmp6094
  restore tmp6097
  restore tmp6100
  restore idx
  restore tmp6116
  restore tmp6117
  restore astModuleResolver
  restore astSymbolsCollector
  restore astTranslator
  restore code
  restore vm
  restore mirQuadCollector
  restore mirQuadOptimizer
  restore astPrinterText
  restore codeGenerator

endOfCodeSection:
; ------------------------------------------------------------------------------
;                                 Data section
; ------------------------------------------------------------------------------
section '.data' data readable writeable
include 'CommonData.asm'


; Global vars
; -----------
NodeId  dd 0
UNICC_ERROR  dd 0
UNICC_REDUCE  dd 0
UNICC_SHIFT  dd 0
PRODUCTION_LHS_IDX  dd 0
PRODUCTION_LENGTH_IDX  dd 0
PRODUCTION_EMIT_IDX  dd 0
SCANERLESS_MODE_ENABLED  dd 0
AST_OPCODE_VARIABLE  dd 0
AST_DATA_INTEGER  dd 0
AST_DATA_STRING  dd 0
AST_DATA_DOUBLE  dd 0
AST_DATA_BOOL  dd 0
AST_DATA_FLOAT  dd 0
AST_DATA_OBJECT  dd 0
AST_DATA_UNDEFINED  dd 0
AST_DATA_ARRAY  dd 0
AST_DATA_MAP  dd 0
AST_OPCODE_PROGRAM  dd 0
AST_OPCODE_NEG  dd 0
AST_OPCODE_BOOL_AND  dd 0
AST_OPCODE_BOOL_OR  dd 0
AST_OPCODE_IDIV  dd 0
AST_OPCODE_CALL  dd 0
AST_OPCODE_SUB  dd 0
AST_OPCODE_MUL  dd 0
AST_OPCODE_DIV  dd 0
AST_OPCODE_COMPARE_EQ  dd 0
AST_OPCODE_COMPARE_NEQ  dd 0
AST_OPCODE_COMPARE_GT  dd 0
AST_OPCODE_COMPARE_GE  dd 0
AST_OPCODE_COMPARE_LT  dd 0
AST_OPCODE_COMPARE_LE  dd 0
AST_OPCODE_CALL_NEW  dd 0
AST_OPCODE_VCALL  dd 0
AST_OPCODE_BLOCK  dd 0
AST_OPCODE_FUNCTION  dd 0
AST_OPCODE_CLASS  dd 0
AST_OPCODE_CLASS_METHOD  dd 0
AST_OPCODE_IF  dd 0
AST_OPCODE_WHILE  dd 0
AST_OPCODE_FOR_VALUES_RANGE  dd 0
AST_OPCODE_TYPE_CAST  dd 0
AST_OPCODE_ASSIGN  dd 0
AST_OPCODE_DECLARE  dd 0
AST_OPCODE_DECLARE_OR_ASSIGN  dd 0
AST_OPCODE_NOP  dd 0
AST_DATA_NULL  dd 0
AST_OPCODE_REFERENCE_BY_INDEX  dd 0
AST_OPCODE_REFERENCE_BY_KEY  dd 0
AST_OPCODE_ADD  dd 0
AST_OPCODE_STRING_JOIN  dd 0
AST_OPCODE_FOR_VALUES  dd 0
AST_OPCODE_FOR_KEYS  dd 0
AST_OPCODE_FOR_KEYS_VALUES  dd 0
AST_OPCODE_FOR_INDEXES  dd 0
AST_OPCODE_FOR_INDEXES_VALUES  dd 0
AST_OPCODE_BOOL_NOT  dd 0
SYMBOL_KIND_CONST  dd 0
SymbolTable_NextId  dd 0
SYMBOL_KIND_VAR_GLOBAL  dd 0
SYMBOL_KIND_VAR_LOCAL  dd 0
SYMBOL_KIND_FUNCTION  dd 0
SYMBOL_KIND_CLASS  dd 0
SYMBOL_KIND_VAR_PARAM  dd 0
SYMBOL_KIND_VAR_RETVAL  dd 0
SYMBOL_KIND_LABEL  dd 0
SYMBOL_KIND_JMP_TABLE  dd 0
DEBUG_AST_OPTIMIZER  dd 0
MOLD_SYSCALL_MAP  Variant_t 0, 0, 0
AST_DATA_SELECTOR  dd 0
AST_OPCODE_SWITCH  dd 0
MIR_OPCODE_NOP  dd 0
MIR_OPCODE_NEG  dd 0
MIR_OPCODE_ADD  dd 0
MIR_OPCODE_SUB  dd 0
MIR_OPCODE_MUL  dd 0
MIR_OPCODE_DIV  dd 0
MIR_OPCODE_IDIV  dd 0
MIR_OPCODE_STRING_JOIN  dd 0
MIR_OPCODE_LOAD_NULL  dd 0
MIR_OPCODE_LOAD_ARRAY  dd 0
MIR_OPCODE_LOAD_MAP  dd 0
MIR_OPCODE_LOAD_IMM  dd 0
MIR_OPCODE_CMP_EQ  dd 0
MIR_OPCODE_CMP_NEQ  dd 0
MIR_OPCODE_CMP_GT  dd 0
MIR_OPCODE_CMP_GE  dd 0
MIR_OPCODE_CMP_LT  dd 0
MIR_OPCODE_CMP_LE  dd 0
MIR_OPCODE_LOAD_LOCAL  dd 0
MIR_OPCODE_LOAD_PARAMN  dd 0
MIR_OPCODE_LOAD_GLOBAL  dd 0
MIR_OPCODE_LOAD_RETVAL  dd 0
MIR_OPCODE_LOAD_BY_INDEX  dd 0
MIR_OPCODE_LOAD_BY_KEY  dd 0
MIR_OPCODE_STORE_LOCAL  dd 0
MIR_OPCODE_STORE_PARAMN  dd 0
MIR_OPCODE_STORE_GLOBAL  dd 0
MIR_OPCODE_STORE_RETVAL  dd 0
MIR_OPCODE_STORE_BY_INDEX  dd 0
MIR_OPCODE_STORE_BY_KEY  dd 0
MIR_OPCODE_MOVE_BACK  dd 0
MIR_OPCODE_DROP  dd 0
MIR_OPCODE_DROP_N  dd 0
MIR_OPCODE_DUP  dd 0
MIR_OPCODE_OVER  dd 0
MIR_OPCODE_LOAD_ARGC  dd 0
MIR_OPCODE_LOAD_ARGV  dd 0
MIR_OPCODE_CREATE_OBJECT  dd 0
MIR_OPCODE_JMP  dd 0
MIR_OPCODE_JMP_IF_TRUE  dd 0
MIR_OPCODE_JMP_IF_FALSE  dd 0
MIR_OPCODE_RET  dd 0
MIR_OPCODE_INNER_RET  dd 0
MIR_OPCODE_CALL  dd 0
MIR_OPCODE_VCALL  dd 0
MIR_OPCODE_PRINT  dd 0
MIR_OPCODE_INIT_FRAME  dd 0
MIR_OPCODE_RETVAL_GUARD  dd 0
MIR_OPCODE_FOR_EACH_INDEXES  dd 0
MIR_OPCODE_FOR_EACH_KEYS  dd 0
MIR_OPCODE_SYSCALL  dd 0
DEBUG_MOLD  dd 0
SHOW_TYPE_CAST_NODES_ENABLED  dd 0
SYMBOL_KIND_AS_TEXT  Variant_t 0, 0, 0
SYMBOL_KIND_METHOD  dd 0
_vm_dataStack  Variant_t 0, 0, 0
_vm_locals  Variant_t 0, 0, 0
_vm_heap  Variant_t 0, 0, 0
_vm_deepIdx  dd 0
_vm_paramBaseStack  Variant_t 0, 0, 0
_vm_retValStack  Variant_t 0, 0, 0
VERSION_STRING  Variant_t 0, 0, 0
; ------------------------------------------------------------------------------
;                     Constant (read-only) data section
; ------------------------------------------------------------------------------
section '.rdata' data readable

; Constants
; ---------
db ?
; iter 0
GrammarProductionsLUT Variant_t VARIANT_ARRAY, 0, GrammarProductionsLUT_buffer
SymbolsGreedyLUT Variant_t VARIANT_ARRAY, 0, SymbolsGreedyLUT_buffer
ParserActionsLUT Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_buffer
ParserGotoLUT Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_buffer
ParserActionsDefaultLUT Variant_t VARIANT_ARRAY, 0, ParserActionsDefaultLUT_buffer
LexerSelectLUT Variant_t VARIANT_ARRAY, 0, LexerSelectLUT_buffer
LexerIndexBaseLUT Variant_t VARIANT_ARRAY, 0, LexerIndexBaseLUT_buffer
LexerIndexLUT Variant_t VARIANT_ARRAY, 0, LexerIndexLUT_buffer
LexerCharsLUT Variant_t VARIANT_ARRAY, 0, LexerCharsLUT_buffer
LexerTransLUT Variant_t VARIANT_ARRAY, 0, LexerTransLUT_buffer
LexerAcceptLUT Variant_t VARIANT_ARRAY, 0, LexerAcceptLUT_buffer
__literal0 Variant_t VARIANT_STRING, 0, __literal0_buffer
__literal1 Variant_t VARIANT_STRING, 0, __literal1_buffer
__literal2 Variant_t VARIANT_STRING, 0, __literal2_buffer
__literal3 Variant_t VARIANT_STRING, 0, __literal3_buffer
__literal4 Variant_t VARIANT_STRING, 0, __literal4_buffer
__literal5 Variant_t VARIANT_STRING, 0, __literal5_buffer
__literal6 Variant_t VARIANT_STRING, 0, __literal6_buffer
__literal7 Variant_t VARIANT_STRING, 0, __literal7_buffer
__literal8 Variant_t VARIANT_STRING, 0, __literal8_buffer
__literal9 Variant_t VARIANT_STRING, 0, __literal9_buffer
__literal10 Variant_t VARIANT_STRING, 0, __literal10_buffer
__literal11 Variant_t VARIANT_STRING, 0, __literal11_buffer
__literal12 Variant_t VARIANT_STRING, 0, __literal12_buffer
__literal13 Variant_t VARIANT_STRING, 0, __literal13_buffer
__literal14 Variant_t VARIANT_STRING, 0, __literal14_buffer
__literal15 Variant_t VARIANT_STRING, 0, __literal15_buffer
__literal16 Variant_t VARIANT_STRING, 0, __literal16_buffer
__literal17 Variant_t VARIANT_STRING, 0, __literal17_buffer
__literal18 Variant_t VARIANT_STRING, 0, __literal18_buffer
__literal19 Variant_t VARIANT_STRING, 0, __literal19_buffer
__literal20 Variant_t VARIANT_STRING, 0, __literal20_buffer
__literal21 Variant_t VARIANT_STRING, 0, __literal21_buffer
__literal22 Variant_t VARIANT_STRING, 0, __literal22_buffer
__literal23 Variant_t VARIANT_STRING, 0, __literal23_buffer
__literal24 Variant_t VARIANT_STRING, 0, __literal24_buffer
__literal25 Variant_t VARIANT_STRING, 0, __literal25_buffer
__literal26 Variant_t VARIANT_STRING, 0, __literal26_buffer
__literal27 Variant_t VARIANT_STRING, 0, __literal27_buffer
__literal28 Variant_t VARIANT_STRING, 0, __literal28_buffer
__literal29 Variant_t VARIANT_STRING, 0, __literal29_buffer
__literal30 Variant_t VARIANT_STRING, 0, __literal30_buffer
__literal31 Variant_t VARIANT_STRING, 0, __literal31_buffer
__literal32 Variant_t VARIANT_STRING, 0, __literal32_buffer
AST_DataTypeNames Variant_t VARIANT_ARRAY, 0, AST_DataTypeNames_buffer
AST_DataTypeForMIR Variant_t VARIANT_ARRAY, 0, AST_DataTypeForMIR_buffer
__literal33 Variant_t VARIANT_STRING, 0, __literal33_buffer
__literal34 Variant_t VARIANT_STRING, 0, __literal34_buffer
__literal35 Variant_t VARIANT_STRING, 0, __literal35_buffer
__literal36 Variant_t VARIANT_STRING, 0, __literal36_buffer
__literal37 Variant_t VARIANT_STRING, 0, __literal37_buffer
__literal38 Variant_t VARIANT_STRING, 0, __literal38_buffer
__literal39 Variant_t VARIANT_STRING, 0, __literal39_buffer
__literal40 Variant_t VARIANT_STRING, 0, __literal40_buffer
__literal41 Variant_t VARIANT_STRING, 0, __literal41_buffer
__literal42 Variant_t VARIANT_STRING, 0, __literal42_buffer
__literal43 Variant_t VARIANT_STRING, 0, __literal43_buffer
__literal44 Variant_t VARIANT_STRING, 0, __literal44_buffer
__literal45 Variant_t VARIANT_STRING, 0, __literal45_buffer
__literal46 Variant_t VARIANT_STRING, 0, __literal46_buffer
__literal47 Variant_t VARIANT_STRING, 0, __literal47_buffer
__literal48 Variant_t VARIANT_STRING, 0, __literal48_buffer
__literal49 Variant_t VARIANT_STRING, 0, __literal49_buffer
__literal50 Variant_t VARIANT_STRING, 0, __literal50_buffer
__literal51 Variant_t VARIANT_STRING, 0, __literal51_buffer
__literal52 Variant_t VARIANT_STRING, 0, __literal52_buffer
__literal53 Variant_t VARIANT_STRING, 0, __literal53_buffer
__literal54 Variant_t VARIANT_STRING, 0, __literal54_buffer
__literal55 Variant_t VARIANT_STRING, 0, __literal55_buffer
__literal56 Variant_t VARIANT_STRING, 0, __literal56_buffer
__literal57 Variant_t VARIANT_STRING, 0, __literal57_buffer
__literal58 Variant_t VARIANT_STRING, 0, __literal58_buffer
__literal59 Variant_t VARIANT_STRING, 0, __literal59_buffer
__literal60 Variant_t VARIANT_STRING, 0, __literal60_buffer
__literal61 Variant_t VARIANT_STRING, 0, __literal61_buffer
__literal62 Variant_t VARIANT_STRING, 0, __literal62_buffer
__literal63 Variant_t VARIANT_STRING, 0, __literal63_buffer
__literal64 Variant_t VARIANT_STRING, 0, __literal64_buffer
__literal65 Variant_t VARIANT_STRING, 0, __literal65_buffer
__literal66 Variant_t VARIANT_STRING, 0, __literal66_buffer
__literal67 Variant_t VARIANT_STRING, 0, __literal67_buffer
__literal68 Variant_t VARIANT_STRING, 0, __literal68_buffer
__literal69 Variant_t VARIANT_STRING, 0, __literal69_buffer
__literal70 Variant_t VARIANT_STRING, 0, __literal70_buffer
__literal71 Variant_t VARIANT_STRING, 0, __literal71_buffer
__literal72 Variant_t VARIANT_STRING, 0, __literal72_buffer
__literal73 Variant_t VARIANT_STRING, 0, __literal73_buffer
__literal74 Variant_t VARIANT_STRING, 0, __literal74_buffer
__literal75 Variant_t VARIANT_STRING, 0, __literal75_buffer
__literal76 Variant_t VARIANT_STRING, 0, __literal76_buffer
__literal77 Variant_t VARIANT_STRING, 0, __literal77_buffer
__literal78 Variant_t VARIANT_STRING, 0, __literal78_buffer
__literal79 Variant_t VARIANT_STRING, 0, __literal79_buffer
__literal80 Variant_t VARIANT_STRING, 0, __literal80_buffer
__literal81 Variant_t VARIANT_STRING, 0, __literal81_buffer
__literal82 Variant_t VARIANT_STRING, 0, __literal82_buffer
__literal83 Variant_t VARIANT_STRING, 0, __literal83_buffer
__literal84 Variant_t VARIANT_STRING, 0, __literal84_buffer
__literal85 Variant_t VARIANT_STRING, 0, __literal85_buffer
__literal86 Variant_t VARIANT_STRING, 0, __literal86_buffer
__literal87 Variant_t VARIANT_STRING, 0, __literal87_buffer
__literal88 Variant_t VARIANT_STRING, 0, __literal88_buffer
__literal89 Variant_t VARIANT_STRING, 0, __literal89_buffer
__literal90 Variant_t VARIANT_STRING, 0, __literal90_buffer
__literal91 Variant_t VARIANT_STRING, 0, __literal91_buffer
__literal92 Variant_t VARIANT_STRING, 0, __literal92_buffer
__literal93 Variant_t VARIANT_STRING, 0, __literal93_buffer
__literal94 Variant_t VARIANT_STRING, 0, __literal94_buffer
__literal95 Variant_t VARIANT_STRING, 0, __literal95_buffer
__literal96 Variant_t VARIANT_STRING, 0, __literal96_buffer
__literal97 Variant_t VARIANT_STRING, 0, __literal97_buffer
__literal98 Variant_t VARIANT_STRING, 0, __literal98_buffer
__literal99 Variant_t VARIANT_STRING, 0, __literal99_buffer
__literal100 Variant_t VARIANT_STRING, 0, __literal100_buffer
__literal101 Variant_t VARIANT_STRING, 0, __literal101_buffer
__literal102 Variant_t VARIANT_STRING, 0, __literal102_buffer
__literal103 Variant_t VARIANT_STRING, 0, __literal103_buffer
__literal104 Variant_t VARIANT_STRING, 0, __literal104_buffer
__literal105 Variant_t VARIANT_STRING, 0, __literal105_buffer
__literal106 Variant_t VARIANT_STRING, 0, __literal106_buffer
__literal107 Variant_t VARIANT_STRING, 0, __literal107_buffer
__literal108 Variant_t VARIANT_STRING, 0, __literal108_buffer
__literal109 Variant_t VARIANT_STRING, 0, __literal109_buffer
__literal110 Variant_t VARIANT_STRING, 0, __literal110_buffer
__literal111 Variant_t VARIANT_STRING, 0, __literal111_buffer
__literal112 Variant_t VARIANT_STRING, 0, __literal112_buffer
__literal113 Variant_t VARIANT_STRING, 0, __literal113_buffer
__literal114 Variant_t VARIANT_STRING, 0, __literal114_buffer
__literal115 Variant_t VARIANT_STRING, 0, __literal115_buffer
__literal116 Variant_t VARIANT_STRING, 0, __literal116_buffer
__literal117 Variant_t VARIANT_STRING, 0, __literal117_buffer
__literal118 Variant_t VARIANT_STRING, 0, __literal118_buffer
__literal119 Variant_t VARIANT_STRING, 0, __literal119_buffer
__literal120 Variant_t VARIANT_STRING, 0, __literal120_buffer
__literal121 Variant_t VARIANT_STRING, 0, __literal121_buffer
__literal122 Variant_t VARIANT_STRING, 0, __literal122_buffer
__literal123 Variant_t VARIANT_STRING, 0, __literal123_buffer
__literal124 Variant_t VARIANT_STRING, 0, __literal124_buffer
__literal125 Variant_t VARIANT_STRING, 0, __literal125_buffer
__literal126 Variant_t VARIANT_STRING, 0, __literal126_buffer
__literal127 Variant_t VARIANT_STRING, 0, __literal127_buffer
__literal128 Variant_t VARIANT_STRING, 0, __literal128_buffer
__literal129 Variant_t VARIANT_STRING, 0, __literal129_buffer
__literal130 Variant_t VARIANT_STRING, 0, __literal130_buffer
__literal131 Variant_t VARIANT_STRING, 0, __literal131_buffer
__literal132 Variant_t VARIANT_STRING, 0, __literal132_buffer
__literal133 Variant_t VARIANT_STRING, 0, __literal133_buffer
__literal134 Variant_t VARIANT_STRING, 0, __literal134_buffer
__literal135 Variant_t VARIANT_STRING, 0, __literal135_buffer
__literal136 Variant_t VARIANT_STRING, 0, __literal136_buffer
__literal137 Variant_t VARIANT_STRING, 0, __literal137_buffer
__literal138 Variant_t VARIANT_STRING, 0, __literal138_buffer
__literal139 Variant_t VARIANT_STRING, 0, __literal139_buffer
__literal140 Variant_t VARIANT_STRING, 0, __literal140_buffer
__literal141 Variant_t VARIANT_STRING, 0, __literal141_buffer
__literal142 Variant_t VARIANT_STRING, 0, __literal142_buffer
__literal143 Variant_t VARIANT_STRING, 0, __literal143_buffer
__literal144 Variant_t VARIANT_STRING, 0, __literal144_buffer
__literal145 Variant_t VARIANT_STRING, 0, __literal145_buffer
__literal146 Variant_t VARIANT_STRING, 0, __literal146_buffer
__literal147 Variant_t VARIANT_STRING, 0, __literal147_buffer
__literal148 Variant_t VARIANT_STRING, 0, __literal148_buffer
__literal149 Variant_t VARIANT_STRING, 0, __literal149_buffer
__literal150 Variant_t VARIANT_STRING, 0, __literal150_buffer
__literal151 Variant_t VARIANT_STRING, 0, __literal151_buffer
__literal152 Variant_t VARIANT_STRING, 0, __literal152_buffer
__literal153 Variant_t VARIANT_STRING, 0, __literal153_buffer
__literal154 Variant_t VARIANT_STRING, 0, __literal154_buffer
__literal155 Variant_t VARIANT_STRING, 0, __literal155_buffer
__literal156 Variant_t VARIANT_STRING, 0, __literal156_buffer
__literal157 Variant_t VARIANT_STRING, 0, __literal157_buffer
__literal158 Variant_t VARIANT_STRING, 0, __literal158_buffer
__literal159 Variant_t VARIANT_STRING, 0, __literal159_buffer
__literal160 Variant_t VARIANT_STRING, 0, __literal160_buffer
__literal161 Variant_t VARIANT_STRING, 0, __literal161_buffer
__literal162 Variant_t VARIANT_STRING, 0, __literal162_buffer
__literal163 Variant_t VARIANT_STRING, 0, __literal163_buffer
__literal164 Variant_t VARIANT_STRING, 0, __literal164_buffer
__literal165 Variant_t VARIANT_STRING, 0, __literal165_buffer
__literal166 Variant_t VARIANT_STRING, 0, __literal166_buffer
__literal167 Variant_t VARIANT_STRING, 0, __literal167_buffer
__literal168 Variant_t VARIANT_STRING, 0, __literal168_buffer
__literal169 Variant_t VARIANT_STRING, 0, __literal169_buffer
__literal170 Variant_t VARIANT_STRING, 0, __literal170_buffer
__literal171 Variant_t VARIANT_STRING, 0, __literal171_buffer
__literal172 Variant_t VARIANT_STRING, 0, __literal172_buffer
__literal173 Variant_t VARIANT_STRING, 0, __literal173_buffer
__literal174 Variant_t VARIANT_STRING, 0, __literal174_buffer
__literal175 Variant_t VARIANT_STRING, 0, __literal175_buffer
__literal176 Variant_t VARIANT_STRING, 0, __literal176_buffer
__literal177 Variant_t VARIANT_STRING, 0, __literal177_buffer
__literal178 Variant_t VARIANT_STRING, 0, __literal178_buffer
__literal179 Variant_t VARIANT_STRING, 0, __literal179_buffer
__literal180 Variant_t VARIANT_STRING, 0, __literal180_buffer
__literal181 Variant_t VARIANT_STRING, 0, __literal181_buffer
__literal182 Variant_t VARIANT_STRING, 0, __literal182_buffer
__literal183 Variant_t VARIANT_STRING, 0, __literal183_buffer
__literal184 Variant_t VARIANT_STRING, 0, __literal184_buffer
__literal185 Variant_t VARIANT_STRING, 0, __literal185_buffer
__literal186 Variant_t VARIANT_STRING, 0, __literal186_buffer
__literal187 Variant_t VARIANT_STRING, 0, __literal187_buffer
__literal188 Variant_t VARIANT_STRING, 0, __literal188_buffer
__literal189 Variant_t VARIANT_STRING, 0, __literal189_buffer
__literal190 Variant_t VARIANT_STRING, 0, __literal190_buffer
__literal191 Variant_t VARIANT_STRING, 0, __literal191_buffer
__literal192 Variant_t VARIANT_STRING, 0, __literal192_buffer
__literal193 Variant_t VARIANT_STRING, 0, __literal193_buffer
__literal194 Variant_t VARIANT_STRING, 0, __literal194_buffer
__literal195 Variant_t VARIANT_STRING, 0, __literal195_buffer
__literal196 Variant_t VARIANT_STRING, 0, __literal196_buffer
__literal197 Variant_t VARIANT_STRING, 0, __literal197_buffer
__literal198 Variant_t VARIANT_STRING, 0, __literal198_buffer
__literal199 Variant_t VARIANT_STRING, 0, __literal199_buffer
__literal200 Variant_t VARIANT_STRING, 0, __literal200_buffer
__literal201 Variant_t VARIANT_STRING, 0, __literal201_buffer
__literal202 Variant_t VARIANT_STRING, 0, __literal202_buffer
__literal203 Variant_t VARIANT_STRING, 0, __literal203_buffer
__literal204 Variant_t VARIANT_STRING, 0, __literal204_buffer
__literal205 Variant_t VARIANT_STRING, 0, __literal205_buffer
__literal206 Variant_t VARIANT_STRING, 0, __literal206_buffer
__literal207 Variant_t VARIANT_STRING, 0, __literal207_buffer
__literal208 Variant_t VARIANT_STRING, 0, __literal208_buffer
__literal209 Variant_t VARIANT_STRING, 0, __literal209_buffer
__literal210 Variant_t VARIANT_STRING, 0, __literal210_buffer
__literal211 Variant_t VARIANT_STRING, 0, __literal211_buffer
__literal212 Variant_t VARIANT_STRING, 0, __literal212_buffer
__literal213 Variant_t VARIANT_STRING, 0, __literal213_buffer
__literal214 Variant_t VARIANT_STRING, 0, __literal214_buffer
__literal215 Variant_t VARIANT_STRING, 0, __literal215_buffer
__literal216 Variant_t VARIANT_STRING, 0, __literal216_buffer
__literal217 Variant_t VARIANT_STRING, 0, __literal217_buffer
__literal218 Variant_t VARIANT_STRING, 0, __literal218_buffer
__literal219 Variant_t VARIANT_STRING, 0, __literal219_buffer
__literal220 Variant_t VARIANT_STRING, 0, __literal220_buffer
__literal221 Variant_t VARIANT_STRING, 0, __literal221_buffer
__literal222 Variant_t VARIANT_STRING, 0, __literal222_buffer
__literal223 Variant_t VARIANT_STRING, 0, __literal223_buffer
__literal224 Variant_t VARIANT_STRING, 0, __literal224_buffer
__literal225 Variant_t VARIANT_STRING, 0, __literal225_buffer
__literal226 Variant_t VARIANT_STRING, 0, __literal226_buffer
__literal227 Variant_t VARIANT_STRING, 0, __literal227_buffer
__literal228 Variant_t VARIANT_STRING, 0, __literal228_buffer
__literal229 Variant_t VARIANT_STRING, 0, __literal229_buffer
__literal230 Variant_t VARIANT_STRING, 0, __literal230_buffer
__literal231 Variant_t VARIANT_STRING, 0, __literal231_buffer
__literal232 Variant_t VARIANT_STRING, 0, __literal232_buffer
__literal233 Variant_t VARIANT_STRING, 0, __literal233_buffer
__literal234 Variant_t VARIANT_STRING, 0, __literal234_buffer
__literal235 Variant_t VARIANT_STRING, 0, __literal235_buffer
__literal236 Variant_t VARIANT_STRING, 0, __literal236_buffer
__literal237 Variant_t VARIANT_STRING, 0, __literal237_buffer
__literal238 Variant_t VARIANT_STRING, 0, __literal238_buffer
__literal239 Variant_t VARIANT_STRING, 0, __literal239_buffer
__literal240 Variant_t VARIANT_STRING, 0, __literal240_buffer
__literal241 Variant_t VARIANT_STRING, 0, __literal241_buffer
__literal242 Variant_t VARIANT_STRING, 0, __literal242_buffer
__literal243 Variant_t VARIANT_STRING, 0, __literal243_buffer
__literal244 Variant_t VARIANT_STRING, 0, __literal244_buffer
__literal245 Variant_t VARIANT_STRING, 0, __literal245_buffer
__literal246 Variant_t VARIANT_STRING, 0, __literal246_buffer
__literal247 Variant_t VARIANT_STRING, 0, __literal247_buffer
__literal248 Variant_t VARIANT_STRING, 0, __literal248_buffer
__literal249 Variant_t VARIANT_STRING, 0, __literal249_buffer
__literal250 Variant_t VARIANT_STRING, 0, __literal250_buffer
__literal251 Variant_t VARIANT_STRING, 0, __literal251_buffer
__literal252 Variant_t VARIANT_STRING, 0, __literal252_buffer
__literal253 Variant_t VARIANT_STRING, 0, __literal253_buffer
__literal254 Variant_t VARIANT_STRING, 0, __literal254_buffer
__literal255 Variant_t VARIANT_STRING, 0, __literal255_buffer
__literal256 Variant_t VARIANT_STRING, 0, __literal256_buffer
__literal257 Variant_t VARIANT_STRING, 0, __literal257_buffer
__literal258 Variant_t VARIANT_STRING, 0, __literal258_buffer
__literal259 Variant_t VARIANT_STRING, 0, __literal259_buffer
__literal260 Variant_t VARIANT_STRING, 0, __literal260_buffer
__literal261 Variant_t VARIANT_STRING, 0, __literal261_buffer
__literal262 Variant_t VARIANT_STRING, 0, __literal262_buffer
__literal263 Variant_t VARIANT_STRING, 0, __literal263_buffer
__literal264 Variant_t VARIANT_STRING, 0, __literal264_buffer
__literal265 Variant_t VARIANT_STRING, 0, __literal265_buffer
__literal266 Variant_t VARIANT_STRING, 0, __literal266_buffer
__literal267 Variant_t VARIANT_STRING, 0, __literal267_buffer
__literal268 Variant_t VARIANT_STRING, 0, __literal268_buffer
__literal269 Variant_t VARIANT_STRING, 0, __literal269_buffer
__literal270 Variant_t VARIANT_STRING, 0, __literal270_buffer
__literal271 Variant_t VARIANT_STRING, 0, __literal271_buffer
__literal272 Variant_t VARIANT_STRING, 0, __literal272_buffer
__literal273 Variant_t VARIANT_STRING, 0, __literal273_buffer
__literal274 Variant_t VARIANT_STRING, 0, __literal274_buffer
__literal275 Variant_t VARIANT_STRING, 0, __literal275_buffer
__literal276 Variant_t VARIANT_STRING, 0, __literal276_buffer
__literal277 Variant_t VARIANT_STRING, 0, __literal277_buffer
__literal278 Variant_t VARIANT_STRING, 0, __literal278_buffer
__literal279 Variant_t VARIANT_STRING, 0, __literal279_buffer
__literal280 Variant_t VARIANT_STRING, 0, __literal280_buffer
__literal281 Variant_t VARIANT_STRING, 0, __literal281_buffer
__literal282 Variant_t VARIANT_STRING, 0, __literal282_buffer
__literal283 Variant_t VARIANT_STRING, 0, __literal283_buffer
__literal284 Variant_t VARIANT_STRING, 0, __literal284_buffer
__literal285 Variant_t VARIANT_STRING, 0, __literal285_buffer
__literal286 Variant_t VARIANT_STRING, 0, __literal286_buffer
__literal287 Variant_t VARIANT_STRING, 0, __literal287_buffer
__literal288 Variant_t VARIANT_STRING, 0, __literal288_buffer
__literal289 Variant_t VARIANT_STRING, 0, __literal289_buffer
__literal290 Variant_t VARIANT_STRING, 0, __literal290_buffer
__literal291 Variant_t VARIANT_STRING, 0, __literal291_buffer
__literal292 Variant_t VARIANT_STRING, 0, __literal292_buffer
__literal293 Variant_t VARIANT_STRING, 0, __literal293_buffer
__literal294 Variant_t VARIANT_STRING, 0, __literal294_buffer
__literal295 Variant_t VARIANT_STRING, 0, __literal295_buffer
__literal296 Variant_t VARIANT_STRING, 0, __literal296_buffer
__literal297 Variant_t VARIANT_STRING, 0, __literal297_buffer
__literal298 Variant_t VARIANT_STRING, 0, __literal298_buffer
__literal299 Variant_t VARIANT_STRING, 0, __literal299_buffer
__literal300 Variant_t VARIANT_STRING, 0, __literal300_buffer
__literal301 Variant_t VARIANT_STRING, 0, __literal301_buffer
__literal302 Variant_t VARIANT_STRING, 0, __literal302_buffer
__literal303 Variant_t VARIANT_STRING, 0, __literal303_buffer
__literal304 Variant_t VARIANT_STRING, 0, __literal304_buffer
__literal305 Variant_t VARIANT_STRING, 0, __literal305_buffer
__literal306 Variant_t VARIANT_STRING, 0, __literal306_buffer
__literal307 Variant_t VARIANT_STRING, 0, __literal307_buffer
__literal308 Variant_t VARIANT_STRING, 0, __literal308_buffer
__literal309 Variant_t VARIANT_STRING, 0, __literal309_buffer
__literal310 Variant_t VARIANT_STRING, 0, __literal310_buffer
__literal311 Variant_t VARIANT_STRING, 0, __literal311_buffer
__literal312 Variant_t VARIANT_STRING, 0, __literal312_buffer
__literal313 Variant_t VARIANT_STRING, 0, __literal313_buffer
__literal314 Variant_t VARIANT_STRING, 0, __literal314_buffer
__literal315 Variant_t VARIANT_STRING, 0, __literal315_buffer
__literal316 Variant_t VARIANT_STRING, 0, __literal316_buffer
__literal317 Variant_t VARIANT_STRING, 0, __literal317_buffer
__literal318 Variant_t VARIANT_STRING, 0, __literal318_buffer
__literal319 Variant_t VARIANT_STRING, 0, __literal319_buffer
__literal320 Variant_t VARIANT_STRING, 0, __literal320_buffer
__literal321 Variant_t VARIANT_STRING, 0, __literal321_buffer
__literal322 Variant_t VARIANT_STRING, 0, __literal322_buffer
__literal323 Variant_t VARIANT_STRING, 0, __literal323_buffer
__literal324 Variant_t VARIANT_STRING, 0, __literal324_buffer
__literal325 Variant_t VARIANT_STRING, 0, __literal325_buffer
__literal326 Variant_t VARIANT_STRING, 0, __literal326_buffer
__literal327 Variant_t VARIANT_STRING, 0, __literal327_buffer
__literal328 Variant_t VARIANT_STRING, 0, __literal328_buffer
__literal329 Variant_t VARIANT_STRING, 0, __literal329_buffer
__literal330 Variant_t VARIANT_STRING, 0, __literal330_buffer
__literal331 Variant_t VARIANT_STRING, 0, __literal331_buffer
__literal332 Variant_t VARIANT_STRING, 0, __literal332_buffer
__literal333 Variant_t VARIANT_STRING, 0, __literal333_buffer
__literal334 Variant_t VARIANT_STRING, 0, __literal334_buffer
__literal335 Variant_t VARIANT_STRING, 0, __literal335_buffer
__literal336 Variant_t VARIANT_STRING, 0, __literal336_buffer
__literal337 Variant_t VARIANT_STRING, 0, __literal337_buffer
__literal338 Variant_t VARIANT_STRING, 0, __literal338_buffer
__literal339 Variant_t VARIANT_STRING, 0, __literal339_buffer
__literal340 Variant_t VARIANT_STRING, 0, __literal340_buffer
__literal341 Variant_t VARIANT_STRING, 0, __literal341_buffer
__literal342 Variant_t VARIANT_STRING, 0, __literal342_buffer
__literal343 Variant_t VARIANT_STRING, 0, __literal343_buffer
__literal344 Variant_t VARIANT_STRING, 0, __literal344_buffer
__literal345 Variant_t VARIANT_STRING, 0, __literal345_buffer
__literal346 Variant_t VARIANT_STRING, 0, __literal346_buffer
__literal347 Variant_t VARIANT_STRING, 0, __literal347_buffer
__literal348 Variant_t VARIANT_STRING, 0, __literal348_buffer
__literal349 Variant_t VARIANT_STRING, 0, __literal349_buffer
__literal350 Variant_t VARIANT_STRING, 0, __literal350_buffer
__literal351 Variant_t VARIANT_STRING, 0, __literal351_buffer
__literal352 Variant_t VARIANT_STRING, 0, __literal352_buffer
__literal353 Variant_t VARIANT_STRING, 0, __literal353_buffer
__literal354 Variant_t VARIANT_STRING, 0, __literal354_buffer
__literal355 Variant_t VARIANT_STRING, 0, __literal355_buffer
__literal356 Variant_t VARIANT_STRING, 0, __literal356_buffer
__literal357 Variant_t VARIANT_STRING, 0, __literal357_buffer
__literal358 Variant_t VARIANT_STRING, 0, __literal358_buffer
__literal359 Variant_t VARIANT_STRING, 0, __literal359_buffer
__literal360 Variant_t VARIANT_STRING, 0, __literal360_buffer
__literal361 Variant_t VARIANT_STRING, 0, __literal361_buffer
__literal362 Variant_t VARIANT_STRING, 0, __literal362_buffer
__literal363 Variant_t VARIANT_STRING, 0, __literal363_buffer
__literal364 Variant_t VARIANT_STRING, 0, __literal364_buffer
__literal365 Variant_t VARIANT_STRING, 0, __literal365_buffer
__literal366 Variant_t VARIANT_STRING, 0, __literal366_buffer
__literal367 Variant_t VARIANT_STRING, 0, __literal367_buffer
__literal368 Variant_t VARIANT_STRING, 0, __literal368_buffer
__literal369 Variant_t VARIANT_STRING, 0, __literal369_buffer
__literal370 Variant_t VARIANT_STRING, 0, __literal370_buffer
__literal371 Variant_t VARIANT_STRING, 0, __literal371_buffer
__literal372 Variant_t VARIANT_STRING, 0, __literal372_buffer
__literal373 Variant_t VARIANT_STRING, 0, __literal373_buffer
__literal374 Variant_t VARIANT_STRING, 0, __literal374_buffer
__literal375 Variant_t VARIANT_STRING, 0, __literal375_buffer
__literal376 Variant_t VARIANT_STRING, 0, __literal376_buffer
__literal377 Variant_t VARIANT_STRING, 0, __literal377_buffer
__literal378 Variant_t VARIANT_STRING, 0, __literal378_buffer
__literal379 Variant_t VARIANT_STRING, 0, __literal379_buffer
__literal380 Variant_t VARIANT_STRING, 0, __literal380_buffer
__literal381 Variant_t VARIANT_STRING, 0, __literal381_buffer
__literal382 Variant_t VARIANT_STRING, 0, __literal382_buffer
__literal383 Variant_t VARIANT_STRING, 0, __literal383_buffer
__literal384 Variant_t VARIANT_STRING, 0, __literal384_buffer
__literal385 Variant_t VARIANT_STRING, 0, __literal385_buffer
__literal386 Variant_t VARIANT_STRING, 0, __literal386_buffer
__literal387 Variant_t VARIANT_STRING, 0, __literal387_buffer
__literal388 Variant_t VARIANT_STRING, 0, __literal388_buffer
__literal389 Variant_t VARIANT_STRING, 0, __literal389_buffer
__literal390 Variant_t VARIANT_STRING, 0, __literal390_buffer
__literal391 Variant_t VARIANT_STRING, 0, __literal391_buffer
__literal392 Variant_t VARIANT_STRING, 0, __literal392_buffer
__literal393 Variant_t VARIANT_STRING, 0, __literal393_buffer
__literal394 Variant_t VARIANT_STRING, 0, __literal394_buffer
__literal395 Variant_t VARIANT_STRING, 0, __literal395_buffer
__literal396 Variant_t VARIANT_STRING, 0, __literal396_buffer
__literal397 Variant_t VARIANT_STRING, 0, __literal397_buffer
__literal398 Variant_t VARIANT_STRING, 0, __literal398_buffer
__literal399 Variant_t VARIANT_STRING, 0, __literal399_buffer
__literal400 Variant_t VARIANT_STRING, 0, __literal400_buffer
__literal401 Variant_t VARIANT_STRING, 0, __literal401_buffer
__literal402 Variant_t VARIANT_STRING, 0, __literal402_buffer
__literal403 Variant_t VARIANT_STRING, 0, __literal403_buffer
__literal404 Variant_t VARIANT_STRING, 0, __literal404_buffer
__literal405 Variant_t VARIANT_STRING, 0, __literal405_buffer
__literal406 Variant_t VARIANT_STRING, 0, __literal406_buffer
__literal407 Variant_t VARIANT_STRING, 0, __literal407_buffer
__literal408 Variant_t VARIANT_STRING, 0, __literal408_buffer
__literal409 Variant_t VARIANT_STRING, 0, __literal409_buffer
__literal410 Variant_t VARIANT_STRING, 0, __literal410_buffer
__literal411 Variant_t VARIANT_STRING, 0, __literal411_buffer
__literal412 Variant_t VARIANT_STRING, 0, __literal412_buffer
__literal413 Variant_t VARIANT_STRING, 0, __literal413_buffer
__literal414 Variant_t VARIANT_STRING, 0, __literal414_buffer
__literal415 Variant_t VARIANT_STRING, 0, __literal415_buffer
__literal416 Variant_t VARIANT_STRING, 0, __literal416_buffer
__literal417 Variant_t VARIANT_STRING, 0, __literal417_buffer
__literal418 Variant_t VARIANT_STRING, 0, __literal418_buffer
__literal419 Variant_t VARIANT_STRING, 0, __literal419_buffer
__literal420 Variant_t VARIANT_STRING, 0, __literal420_buffer
__literal421 Variant_t VARIANT_STRING, 0, __literal421_buffer
__literal422 Variant_t VARIANT_STRING, 0, __literal422_buffer
__literal423 Variant_t VARIANT_STRING, 0, __literal423_buffer
__literal424 Variant_t VARIANT_STRING, 0, __literal424_buffer
__literal425 Variant_t VARIANT_STRING, 0, __literal425_buffer
__literal426 Variant_t VARIANT_STRING, 0, __literal426_buffer
__literal427 Variant_t VARIANT_STRING, 0, __literal427_buffer
__literal428 Variant_t VARIANT_STRING, 0, __literal428_buffer
__literal429 Variant_t VARIANT_STRING, 0, __literal429_buffer
__literal430 Variant_t VARIANT_STRING, 0, __literal430_buffer
__literal431 Variant_t VARIANT_STRING, 0, __literal431_buffer
__literal432 Variant_t VARIANT_STRING, 0, __literal432_buffer
__literal433 Variant_t VARIANT_STRING, 0, __literal433_buffer
__literal434 Variant_t VARIANT_STRING, 0, __literal434_buffer
__literal435 Variant_t VARIANT_STRING, 0, __literal435_buffer
__literal436 Variant_t VARIANT_STRING, 0, __literal436_buffer
__literal437 Variant_t VARIANT_STRING, 0, __literal437_buffer
__literal438 Variant_t VARIANT_STRING, 0, __literal438_buffer
__literal439 Variant_t VARIANT_STRING, 0, __literal439_buffer
__literal440 Variant_t VARIANT_STRING, 0, __literal440_buffer
__literal441 Variant_t VARIANT_STRING, 0, __literal441_buffer
__literal442 Variant_t VARIANT_STRING, 0, __literal442_buffer
__literal443 Variant_t VARIANT_STRING, 0, __literal443_buffer
__literal444 Variant_t VARIANT_STRING, 0, __literal444_buffer
__literal445 Variant_t VARIANT_STRING, 0, __literal445_buffer
__literal446 Variant_t VARIANT_STRING, 0, __literal446_buffer
__literal447 Variant_t VARIANT_STRING, 0, __literal447_buffer
__literal448 Variant_t VARIANT_STRING, 0, __literal448_buffer
__literal449 Variant_t VARIANT_STRING, 0, __literal449_buffer
__literal450 Variant_t VARIANT_STRING, 0, __literal450_buffer
__literal451 Variant_t VARIANT_STRING, 0, __literal451_buffer
__literal452 Variant_t VARIANT_STRING, 0, __literal452_buffer
__literal453 Variant_t VARIANT_STRING, 0, __literal453_buffer
__literal454 Variant_t VARIANT_STRING, 0, __literal454_buffer
__literal455 Variant_t VARIANT_STRING, 0, __literal455_buffer
__literal456 Variant_t VARIANT_STRING, 0, __literal456_buffer
__literal457 Variant_t VARIANT_STRING, 0, __literal457_buffer
__literal458 Variant_t VARIANT_STRING, 0, __literal458_buffer
__literal459 Variant_t VARIANT_STRING, 0, __literal459_buffer
__literal460 Variant_t VARIANT_STRING, 0, __literal460_buffer
__literal461 Variant_t VARIANT_STRING, 0, __literal461_buffer
__literal462 Variant_t VARIANT_STRING, 0, __literal462_buffer
__literal463 Variant_t VARIANT_STRING, 0, __literal463_buffer
__literal464 Variant_t VARIANT_STRING, 0, __literal464_buffer
__literal465 Variant_t VARIANT_STRING, 0, __literal465_buffer
__literal466 Variant_t VARIANT_STRING, 0, __literal466_buffer
__literal467 Variant_t VARIANT_STRING, 0, __literal467_buffer
__literal468 Variant_t VARIANT_STRING, 0, __literal468_buffer
__literal469 Variant_t VARIANT_STRING, 0, __literal469_buffer
__literal470 Variant_t VARIANT_STRING, 0, __literal470_buffer
__literal471 Variant_t VARIANT_STRING, 0, __literal471_buffer
__literal472 Variant_t VARIANT_STRING, 0, __literal472_buffer
__literal473 Variant_t VARIANT_STRING, 0, __literal473_buffer
__literal474 Variant_t VARIANT_STRING, 0, __literal474_buffer
__literal475 Variant_t VARIANT_STRING, 0, __literal475_buffer
__literal476 Variant_t VARIANT_STRING, 0, __literal476_buffer
__literal477 Variant_t VARIANT_STRING, 0, __literal477_buffer
__literal478 Variant_t VARIANT_STRING, 0, __literal478_buffer
__literal479 Variant_t VARIANT_STRING, 0, __literal479_buffer
__literal480 Variant_t VARIANT_STRING, 0, __literal480_buffer
__literal481 Variant_t VARIANT_STRING, 0, __literal481_buffer
__literal482 Variant_t VARIANT_STRING, 0, __literal482_buffer
__literal483 Variant_t VARIANT_STRING, 0, __literal483_buffer
__literal484 Variant_t VARIANT_STRING, 0, __literal484_buffer
__literal485 Variant_t VARIANT_STRING, 0, __literal485_buffer
__literal486 Variant_t VARIANT_STRING, 0, __literal486_buffer
__literal487 Variant_t VARIANT_STRING, 0, __literal487_buffer
__literal488 Variant_t VARIANT_STRING, 0, __literal488_buffer
__literal489 Variant_t VARIANT_STRING, 0, __literal489_buffer
__literal490 Variant_t VARIANT_STRING, 0, __literal490_buffer
__literal491 Variant_t VARIANT_STRING, 0, __literal491_buffer
__literal492 Variant_t VARIANT_STRING, 0, __literal492_buffer
__literal493 Variant_t VARIANT_STRING, 0, __literal493_buffer
__literal494 Variant_t VARIANT_STRING, 0, __literal494_buffer
__literal495 Variant_t VARIANT_STRING, 0, __literal495_buffer
__literal496 Variant_t VARIANT_STRING, 0, __literal496_buffer
__literal497 Variant_t VARIANT_STRING, 0, __literal497_buffer
__literal498 Variant_t VARIANT_STRING, 0, __literal498_buffer
__literal499 Variant_t VARIANT_STRING, 0, __literal499_buffer
__literal500 Variant_t VARIANT_STRING, 0, __literal500_buffer
__literal501 Variant_t VARIANT_STRING, 0, __literal501_buffer
__literal502 Variant_t VARIANT_STRING, 0, __literal502_buffer
__literal503 Variant_t VARIANT_STRING, 0, __literal503_buffer
__literal504 Variant_t VARIANT_STRING, 0, __literal504_buffer
__literal505 Variant_t VARIANT_STRING, 0, __literal505_buffer
__literal506 Variant_t VARIANT_STRING, 0, __literal506_buffer
__literal507 Variant_t VARIANT_STRING, 0, __literal507_buffer
__literal508 Variant_t VARIANT_STRING, 0, __literal508_buffer
__literal509 Variant_t VARIANT_STRING, 0, __literal509_buffer
__literal510 Variant_t VARIANT_STRING, 0, __literal510_buffer
__literal511 Variant_t VARIANT_STRING, 0, __literal511_buffer
__literal512 Variant_t VARIANT_STRING, 0, __literal512_buffer
__literal513 Variant_t VARIANT_STRING, 0, __literal513_buffer
__literal514 Variant_t VARIANT_STRING, 0, __literal514_buffer
__literal515 Variant_t VARIANT_STRING, 0, __literal515_buffer
__literal516 Variant_t VARIANT_STRING, 0, __literal516_buffer
__literal517 Variant_t VARIANT_STRING, 0, __literal517_buffer
__literal518 Variant_t VARIANT_STRING, 0, __literal518_buffer
__literal519 Variant_t VARIANT_STRING, 0, __literal519_buffer
__literal520 Variant_t VARIANT_STRING, 0, __literal520_buffer
__literal521 Variant_t VARIANT_STRING, 0, __literal521_buffer
__literal522 Variant_t VARIANT_STRING, 0, __literal522_buffer
__literal523 Variant_t VARIANT_STRING, 0, __literal523_buffer
__literal524 Variant_t VARIANT_STRING, 0, __literal524_buffer
__literal525 Variant_t VARIANT_STRING, 0, __literal525_buffer
__literal526 Variant_t VARIANT_STRING, 0, __literal526_buffer
__literal527 Variant_t VARIANT_STRING, 0, __literal527_buffer
__literal528 Variant_t VARIANT_STRING, 0, __literal528_buffer
__literal529 Variant_t VARIANT_STRING, 0, __literal529_buffer
__literal530 Variant_t VARIANT_STRING, 0, __literal530_buffer
__literal531 Variant_t VARIANT_STRING, 0, __literal531_buffer
__literal532 Variant_t VARIANT_STRING, 0, __literal532_buffer
__literal533 Variant_t VARIANT_STRING, 0, __literal533_buffer
__literal534 Variant_t VARIANT_STRING, 0, __literal534_buffer
__literal535 Variant_t VARIANT_STRING, 0, __literal535_buffer
__literal536 Variant_t VARIANT_STRING, 0, __literal536_buffer
__literal537 Variant_t VARIANT_STRING, 0, __literal537_buffer
__literal538 Variant_t VARIANT_STRING, 0, __literal538_buffer
__literal539 Variant_t VARIANT_STRING, 0, __literal539_buffer
__literal540 Variant_t VARIANT_STRING, 0, __literal540_buffer
__literal541 Variant_t VARIANT_STRING, 0, __literal541_buffer
__literal542 Variant_t VARIANT_STRING, 0, __literal542_buffer
__literal543 Variant_t VARIANT_STRING, 0, __literal543_buffer
__literal544 Variant_t VARIANT_STRING, 0, __literal544_buffer
__literal545 Variant_t VARIANT_STRING, 0, __literal545_buffer
__literal546 Variant_t VARIANT_STRING, 0, __literal546_buffer
__literal547 Variant_t VARIANT_STRING, 0, __literal547_buffer
__literal548 Variant_t VARIANT_STRING, 0, __literal548_buffer
__literal549 Variant_t VARIANT_STRING, 0, __literal549_buffer
__literal550 Variant_t VARIANT_STRING, 0, __literal550_buffer
__literal551 Variant_t VARIANT_STRING, 0, __literal551_buffer
__literal552 Variant_t VARIANT_STRING, 0, __literal552_buffer
__literal553 Variant_t VARIANT_STRING, 0, __literal553_buffer
__literal554 Variant_t VARIANT_STRING, 0, __literal554_buffer
__literal555 Variant_t VARIANT_STRING, 0, __literal555_buffer
__literal556 Variant_t VARIANT_STRING, 0, __literal556_buffer
__literal557 Variant_t VARIANT_STRING, 0, __literal557_buffer
__literal558 Variant_t VARIANT_STRING, 0, __literal558_buffer
__literal559 Variant_t VARIANT_STRING, 0, __literal559_buffer
__literal560 Variant_t VARIANT_STRING, 0, __literal560_buffer
__literal561 Variant_t VARIANT_STRING, 0, __literal561_buffer
__literal562 Variant_t VARIANT_STRING, 0, __literal562_buffer
__literal563 Variant_t VARIANT_STRING, 0, __literal563_buffer
__literal564 Variant_t VARIANT_STRING, 0, __literal564_buffer
__literal565 Variant_t VARIANT_STRING, 0, __literal565_buffer
__literal566 Variant_t VARIANT_STRING, 0, __literal566_buffer
__literal567 Variant_t VARIANT_STRING, 0, __literal567_buffer
__literal568 Variant_t VARIANT_STRING, 0, __literal568_buffer
__literal569 Variant_t VARIANT_STRING, 0, __literal569_buffer
__literal570 Variant_t VARIANT_STRING, 0, __literal570_buffer
__literal571 Variant_t VARIANT_STRING, 0, __literal571_buffer
__literal572 Variant_t VARIANT_STRING, 0, __literal572_buffer
__literal573 Variant_t VARIANT_STRING, 0, __literal573_buffer
__literal574 Variant_t VARIANT_STRING, 0, __literal574_buffer
__literal575 Variant_t VARIANT_STRING, 0, __literal575_buffer
__literal576 Variant_t VARIANT_STRING, 0, __literal576_buffer
__literal577 Variant_t VARIANT_STRING, 0, __literal577_buffer
__literal578 Variant_t VARIANT_STRING, 0, __literal578_buffer
__literal579 Variant_t VARIANT_STRING, 0, __literal579_buffer
__literal580 Variant_t VARIANT_STRING, 0, __literal580_buffer
__literal581 Variant_t VARIANT_STRING, 0, __literal581_buffer
__literal582 Variant_t VARIANT_STRING, 0, __literal582_buffer
__literal583 Variant_t VARIANT_STRING, 0, __literal583_buffer
__literal584 Variant_t VARIANT_STRING, 0, __literal584_buffer
__literal585 Variant_t VARIANT_STRING, 0, __literal585_buffer
__literal586 Variant_t VARIANT_STRING, 0, __literal586_buffer
__literal587 Variant_t VARIANT_STRING, 0, __literal587_buffer
__literal588 Variant_t VARIANT_STRING, 0, __literal588_buffer
__literal589 Variant_t VARIANT_STRING, 0, __literal589_buffer
__literal590 Variant_t VARIANT_STRING, 0, __literal590_buffer
__literal591 Variant_t VARIANT_STRING, 0, __literal591_buffer
__literal592 Variant_t VARIANT_STRING, 0, __literal592_buffer
__literal593 Variant_t VARIANT_STRING, 0, __literal593_buffer
__literal594 Variant_t VARIANT_STRING, 0, __literal594_buffer
__literal595 Variant_t VARIANT_STRING, 0, __literal595_buffer
__literal596 Variant_t VARIANT_STRING, 0, __literal596_buffer
__literal597 Variant_t VARIANT_STRING, 0, __literal597_buffer
__literal598 Variant_t VARIANT_STRING, 0, __literal598_buffer
__literal599 Variant_t VARIANT_STRING, 0, __literal599_buffer
__literal600 Variant_t VARIANT_STRING, 0, __literal600_buffer
__literal601 Variant_t VARIANT_STRING, 0, __literal601_buffer
__literal602 Variant_t VARIANT_STRING, 0, __literal602_buffer
__literal603 Variant_t VARIANT_STRING, 0, __literal603_buffer
__literal604 Variant_t VARIANT_STRING, 0, __literal604_buffer
__literal605 Variant_t VARIANT_STRING, 0, __literal605_buffer
__literal606 Variant_t VARIANT_STRING, 0, __literal606_buffer
__literal607 Variant_t VARIANT_STRING, 0, __literal607_buffer
__literal608 Variant_t VARIANT_STRING, 0, __literal608_buffer
__literal609 Variant_t VARIANT_STRING, 0, __literal609_buffer
__literal610 Variant_t VARIANT_STRING, 0, __literal610_buffer
__literal611 Variant_t VARIANT_STRING, 0, __literal611_buffer
__literal612 Variant_t VARIANT_STRING, 0, __literal612_buffer
__literal613 Variant_t VARIANT_STRING, 0, __literal613_buffer
__literal614 Variant_t VARIANT_STRING, 0, __literal614_buffer
__literal615 Variant_t VARIANT_STRING, 0, __literal615_buffer
__literal616 Variant_t VARIANT_STRING, 0, __literal616_buffer
__literal617 Variant_t VARIANT_STRING, 0, __literal617_buffer
__literal618 Variant_t VARIANT_STRING, 0, __literal618_buffer
__literal619 Variant_t VARIANT_STRING, 0, __literal619_buffer
__literal620 Variant_t VARIANT_STRING, 0, __literal620_buffer
__literal621 Variant_t VARIANT_STRING, 0, __literal621_buffer
__literal622 Variant_t VARIANT_STRING, 0, __literal622_buffer
__literal623 Variant_t VARIANT_STRING, 0, __literal623_buffer
__literal624 Variant_t VARIANT_STRING, 0, __literal624_buffer
__literal625 Variant_t VARIANT_STRING, 0, __literal625_buffer
__literal626 Variant_t VARIANT_STRING, 0, __literal626_buffer
__literal627 Variant_t VARIANT_STRING, 0, __literal627_buffer
__literal628 Variant_t VARIANT_STRING, 0, __literal628_buffer
__literal629 Variant_t VARIANT_STRING, 0, __literal629_buffer
__literal630 Variant_t VARIANT_STRING, 0, __literal630_buffer
__literal631 Variant_t VARIANT_STRING, 0, __literal631_buffer
__literal632 Variant_t VARIANT_STRING, 0, __literal632_buffer
__literal633 Variant_t VARIANT_STRING, 0, __literal633_buffer
__literal634 Variant_t VARIANT_STRING, 0, __literal634_buffer
__literal635 Variant_t VARIANT_STRING, 0, __literal635_buffer
__literal636 Variant_t VARIANT_STRING, 0, __literal636_buffer
__literal637 Variant_t VARIANT_STRING, 0, __literal637_buffer
__literal638 Variant_t VARIANT_STRING, 0, __literal638_buffer
__literal639 Variant_t VARIANT_STRING, 0, __literal639_buffer
__literal640 Variant_t VARIANT_STRING, 0, __literal640_buffer
__literal641 Variant_t VARIANT_STRING, 0, __literal641_buffer
__literal642 Variant_t VARIANT_STRING, 0, __literal642_buffer
__literal643 Variant_t VARIANT_STRING, 0, __literal643_buffer
__literal644 Variant_t VARIANT_STRING, 0, __literal644_buffer
__literal645 Variant_t VARIANT_STRING, 0, __literal645_buffer
__literal646 Variant_t VARIANT_STRING, 0, __literal646_buffer
__literal647 Variant_t VARIANT_STRING, 0, __literal647_buffer
__literal648 Variant_t VARIANT_STRING, 0, __literal648_buffer
__literal649 Variant_t VARIANT_STRING, 0, __literal649_buffer
__literal650 Variant_t VARIANT_STRING, 0, __literal650_buffer
__literal651 Variant_t VARIANT_STRING, 0, __literal651_buffer
__literal652 Variant_t VARIANT_STRING, 0, __literal652_buffer
__literal653 Variant_t VARIANT_STRING, 0, __literal653_buffer
__literal654 Variant_t VARIANT_STRING, 0, __literal654_buffer
__literal655 Variant_t VARIANT_STRING, 0, __literal655_buffer
__literal656 Variant_t VARIANT_STRING, 0, __literal656_buffer
__literal657 Variant_t VARIANT_STRING, 0, __literal657_buffer
__literal658 Variant_t VARIANT_STRING, 0, __literal658_buffer
__literal659 Variant_t VARIANT_STRING, 0, __literal659_buffer
__literal660 Variant_t VARIANT_STRING, 0, __literal660_buffer
__literal661 Variant_t VARIANT_STRING, 0, __literal661_buffer
__literal662 Variant_t VARIANT_STRING, 0, __literal662_buffer
__literal663 Variant_t VARIANT_STRING, 0, __literal663_buffer
__literal664 Variant_t VARIANT_STRING, 0, __literal664_buffer
__literal665 Variant_t VARIANT_STRING, 0, __literal665_buffer
__literal666 Variant_t VARIANT_STRING, 0, __literal666_buffer
__literal667 Variant_t VARIANT_STRING, 0, __literal667_buffer
__literal668 Variant_t VARIANT_STRING, 0, __literal668_buffer
__literal669 Variant_t VARIANT_STRING, 0, __literal669_buffer
__literal670 Variant_t VARIANT_STRING, 0, __literal670_buffer
__literal671 Variant_t VARIANT_STRING, 0, __literal671_buffer
__literal672 Variant_t VARIANT_STRING, 0, __literal672_buffer
__literal673 Variant_t VARIANT_STRING, 0, __literal673_buffer
__literal674 Variant_t VARIANT_STRING, 0, __literal674_buffer
__literal675 Variant_t VARIANT_STRING, 0, __literal675_buffer
__literal676 Variant_t VARIANT_STRING, 0, __literal676_buffer
__literal677 Variant_t VARIANT_STRING, 0, __literal677_buffer
__literal678 Variant_t VARIANT_STRING, 0, __literal678_buffer
__literal679 Variant_t VARIANT_STRING, 0, __literal679_buffer
__literal680 Variant_t VARIANT_STRING, 0, __literal680_buffer
__literal681 Variant_t VARIANT_STRING, 0, __literal681_buffer
__literal682 Variant_t VARIANT_STRING, 0, __literal682_buffer
__literal683 Variant_t VARIANT_STRING, 0, __literal683_buffer
__literal684 Variant_t VARIANT_STRING, 0, __literal684_buffer
__literal685 Variant_t VARIANT_STRING, 0, __literal685_buffer
__literal686 Variant_t VARIANT_STRING, 0, __literal686_buffer
__literal687 Variant_t VARIANT_STRING, 0, __literal687_buffer
__literal688 Variant_t VARIANT_STRING, 0, __literal688_buffer
__literal689 Variant_t VARIANT_STRING, 0, __literal689_buffer
__literal690 Variant_t VARIANT_STRING, 0, __literal690_buffer
__literal691 Variant_t VARIANT_STRING, 0, __literal691_buffer
__literal692 Variant_t VARIANT_STRING, 0, __literal692_buffer
__literal693 Variant_t VARIANT_STRING, 0, __literal693_buffer
__literal694 Variant_t VARIANT_STRING, 0, __literal694_buffer
__literal695 Variant_t VARIANT_STRING, 0, __literal695_buffer
__literal696 Variant_t VARIANT_STRING, 0, __literal696_buffer
__literal697 Variant_t VARIANT_STRING, 0, __literal697_buffer
__literal698 Variant_t VARIANT_STRING, 0, __literal698_buffer
__literal699 Variant_t VARIANT_STRING, 0, __literal699_buffer
__literal700 Variant_t VARIANT_STRING, 0, __literal700_buffer
__literal701 Variant_t VARIANT_STRING, 0, __literal701_buffer
__literal702 Variant_t VARIANT_STRING, 0, __literal702_buffer
__literal703 Variant_t VARIANT_STRING, 0, __literal703_buffer
__literal704 Variant_t VARIANT_STRING, 0, __literal704_buffer
__literal705 Variant_t VARIANT_STRING, 0, __literal705_buffer
__literal706 Variant_t VARIANT_STRING, 0, __literal706_buffer
__literal707 Variant_t VARIANT_STRING, 0, __literal707_buffer
__literal708 Variant_t VARIANT_STRING, 0, __literal708_buffer
__literal709 Variant_t VARIANT_STRING, 0, __literal709_buffer
__literal710 Variant_t VARIANT_STRING, 0, __literal710_buffer
__literal711 Variant_t VARIANT_STRING, 0, __literal711_buffer
__literal712 Variant_t VARIANT_STRING, 0, __literal712_buffer
__literal713 Variant_t VARIANT_STRING, 0, __literal713_buffer
__literal714 Variant_t VARIANT_STRING, 0, __literal714_buffer
__literal715 Variant_t VARIANT_STRING, 0, __literal715_buffer
__literal716 Variant_t VARIANT_STRING, 0, __literal716_buffer
__literal717 Variant_t VARIANT_STRING, 0, __literal717_buffer
__literal718 Variant_t VARIANT_STRING, 0, __literal718_buffer
__literal719 Variant_t VARIANT_STRING, 0, __literal719_buffer
__literal720 Variant_t VARIANT_STRING, 0, __literal720_buffer
__literal721 Variant_t VARIANT_STRING, 0, __literal721_buffer
__literal722 Variant_t VARIANT_STRING, 0, __literal722_buffer
__literal723 Variant_t VARIANT_STRING, 0, __literal723_buffer
__literal724 Variant_t VARIANT_STRING, 0, __literal724_buffer
__literal725 Variant_t VARIANT_STRING, 0, __literal725_buffer
__literal726 Variant_t VARIANT_STRING, 0, __literal726_buffer
__literal727 Variant_t VARIANT_STRING, 0, __literal727_buffer
__literal728 Variant_t VARIANT_STRING, 0, __literal728_buffer
__literal729 Variant_t VARIANT_STRING, 0, __literal729_buffer
__literal730 Variant_t VARIANT_STRING, 0, __literal730_buffer
__literal731 Variant_t VARIANT_STRING, 0, __literal731_buffer
__literal732 Variant_t VARIANT_STRING, 0, __literal732_buffer
__literal733 Variant_t VARIANT_STRING, 0, __literal733_buffer
__literal734 Variant_t VARIANT_STRING, 0, __literal734_buffer
__literal735 Variant_t VARIANT_STRING, 0, __literal735_buffer
__literal736 Variant_t VARIANT_STRING, 0, __literal736_buffer
__literal737 Variant_t VARIANT_STRING, 0, __literal737_buffer
__literal738 Variant_t VARIANT_STRING, 0, __literal738_buffer
__literal739 Variant_t VARIANT_STRING, 0, __literal739_buffer
__literal740 Variant_t VARIANT_STRING, 0, __literal740_buffer
__literal741 Variant_t VARIANT_STRING, 0, __literal741_buffer
__literal742 Variant_t VARIANT_STRING, 0, __literal742_buffer
__literal743 Variant_t VARIANT_STRING, 0, __literal743_buffer
__literal744 Variant_t VARIANT_STRING, 0, __literal744_buffer
__literal745 Variant_t VARIANT_STRING, 0, __literal745_buffer
__literal746 Variant_t VARIANT_STRING, 0, __literal746_buffer
__literal747 Variant_t VARIANT_STRING, 0, __literal747_buffer
__literal748 Variant_t VARIANT_STRING, 0, __literal748_buffer
__literal749 Variant_t VARIANT_STRING, 0, __literal749_buffer
__literal750 Variant_t VARIANT_STRING, 0, __literal750_buffer
__literal751 Variant_t VARIANT_STRING, 0, __literal751_buffer
__literal752 Variant_t VARIANT_STRING, 0, __literal752_buffer
__literal753 Variant_t VARIANT_STRING, 0, __literal753_buffer
__literal754 Variant_t VARIANT_STRING, 0, __literal754_buffer
__literal755 Variant_t VARIANT_STRING, 0, __literal755_buffer
__literal756 Variant_t VARIANT_STRING, 0, __literal756_buffer
__literal757 Variant_t VARIANT_STRING, 0, __literal757_buffer
__literal758 Variant_t VARIANT_STRING, 0, __literal758_buffer
__literal759 Variant_t VARIANT_STRING, 0, __literal759_buffer
__literal760 Variant_t VARIANT_STRING, 0, __literal760_buffer
__literal761 Variant_t VARIANT_STRING, 0, __literal761_buffer
__literal762 Variant_t VARIANT_STRING, 0, __literal762_buffer
__literal763 Variant_t VARIANT_STRING, 0, __literal763_buffer
__literal764 Variant_t VARIANT_STRING, 0, __literal764_buffer
__literal765 Variant_t VARIANT_STRING, 0, __literal765_buffer
__literal766 Variant_t VARIANT_STRING, 0, __literal766_buffer
__literal767 Variant_t VARIANT_STRING, 0, __literal767_buffer
__literal768 Variant_t VARIANT_STRING, 0, __literal768_buffer
__literal769 Variant_t VARIANT_STRING, 0, __literal769_buffer
__literal770 Variant_t VARIANT_STRING, 0, __literal770_buffer
__literal771 Variant_t VARIANT_STRING, 0, __literal771_buffer
__literal772 Variant_t VARIANT_STRING, 0, __literal772_buffer
__literal773 Variant_t VARIANT_STRING, 0, __literal773_buffer
__literal774 Variant_t VARIANT_STRING, 0, __literal774_buffer
__literal775 Variant_t VARIANT_STRING, 0, __literal775_buffer
__literal776 Variant_t VARIANT_STRING, 0, __literal776_buffer
__literal777 Variant_t VARIANT_STRING, 0, __literal777_buffer
__literal778 Variant_t VARIANT_STRING, 0, __literal778_buffer
__literal779 Variant_t VARIANT_STRING, 0, __literal779_buffer
__literal780 Variant_t VARIANT_STRING, 0, __literal780_buffer
__literal781 Variant_t VARIANT_STRING, 0, __literal781_buffer
__literal782 Variant_t VARIANT_STRING, 0, __literal782_buffer
__literal783 Variant_t VARIANT_STRING, 0, __literal783_buffer
__literal784 Variant_t VARIANT_STRING, 0, __literal784_buffer
__literal785 Variant_t VARIANT_STRING, 0, __literal785_buffer
__literal786 Variant_t VARIANT_STRING, 0, __literal786_buffer
__literal787 Variant_t VARIANT_STRING, 0, __literal787_buffer
__literal788 Variant_t VARIANT_STRING, 0, __literal788_buffer
__literal789 Variant_t VARIANT_STRING, 0, __literal789_buffer
__literal790 Variant_t VARIANT_STRING, 0, __literal790_buffer
__literal791 Variant_t VARIANT_STRING, 0, __literal791_buffer
__literal792 Variant_t VARIANT_STRING, 0, __literal792_buffer
__literal793 Variant_t VARIANT_STRING, 0, __literal793_buffer
__literal794 Variant_t VARIANT_STRING, 0, __literal794_buffer
__literal795 Variant_t VARIANT_STRING, 0, __literal795_buffer
__literal796 Variant_t VARIANT_STRING, 0, __literal796_buffer
__literal797 Variant_t VARIANT_STRING, 0, __literal797_buffer
__literal798 Variant_t VARIANT_STRING, 0, __literal798_buffer
__literal799 Variant_t VARIANT_STRING, 0, __literal799_buffer
__literal800 Variant_t VARIANT_STRING, 0, __literal800_buffer
__literal801 Variant_t VARIANT_STRING, 0, __literal801_buffer
__literal802 Variant_t VARIANT_STRING, 0, __literal802_buffer
__literal803 Variant_t VARIANT_STRING, 0, __literal803_buffer
__literal804 Variant_t VARIANT_STRING, 0, __literal804_buffer
__literal805 Variant_t VARIANT_STRING, 0, __literal805_buffer
__literal806 Variant_t VARIANT_STRING, 0, __literal806_buffer
__literal807 Variant_t VARIANT_STRING, 0, __literal807_buffer
__literal808 Variant_t VARIANT_STRING, 0, __literal808_buffer
__literal809 Variant_t VARIANT_STRING, 0, __literal809_buffer
__literal810 Variant_t VARIANT_STRING, 0, __literal810_buffer
__literal811 Variant_t VARIANT_STRING, 0, __literal811_buffer
__literal812 Variant_t VARIANT_STRING, 0, __literal812_buffer
__literal813 Variant_t VARIANT_STRING, 0, __literal813_buffer
__literal814 Variant_t VARIANT_STRING, 0, __literal814_buffer
__literal815 Variant_t VARIANT_STRING, 0, __literal815_buffer
__literal816 Variant_t VARIANT_STRING, 0, __literal816_buffer
__literal817 Variant_t VARIANT_STRING, 0, __literal817_buffer
__literal818 Variant_t VARIANT_STRING, 0, __literal818_buffer
__literal819 Variant_t VARIANT_STRING, 0, __literal819_buffer
__literal820 Variant_t VARIANT_STRING, 0, __literal820_buffer
__literal821 Variant_t VARIANT_STRING, 0, __literal821_buffer
__literal822 Variant_t VARIANT_STRING, 0, __literal822_buffer
__literal823 Variant_t VARIANT_STRING, 0, __literal823_buffer
__literal824 Variant_t VARIANT_STRING, 0, __literal824_buffer
__literal825 Variant_t VARIANT_STRING, 0, __literal825_buffer
__literal826 Variant_t VARIANT_STRING, 0, __literal826_buffer
__literal827 Variant_t VARIANT_STRING, 0, __literal827_buffer
__literal828 Variant_t VARIANT_STRING, 0, __literal828_buffer
__literal829 Variant_t VARIANT_STRING, 0, __literal829_buffer
__literal830 Variant_t VARIANT_STRING, 0, __literal830_buffer
__literal831 Variant_t VARIANT_STRING, 0, __literal831_buffer
__literal832 Variant_t VARIANT_STRING, 0, __literal832_buffer
__literal833 Variant_t VARIANT_STRING, 0, __literal833_buffer
__literal834 Variant_t VARIANT_STRING, 0, __literal834_buffer
__literal835 Variant_t VARIANT_STRING, 0, __literal835_buffer
__literal836 Variant_t VARIANT_STRING, 0, __literal836_buffer
__literal837 Variant_t VARIANT_STRING, 0, __literal837_buffer
__literal838 Variant_t VARIANT_STRING, 0, __literal838_buffer
__literal839 Variant_t VARIANT_STRING, 0, __literal839_buffer
__literal840 Variant_t VARIANT_STRING, 0, __literal840_buffer
__literal841 Variant_t VARIANT_STRING, 0, __literal841_buffer
__literal842 Variant_t VARIANT_STRING, 0, __literal842_buffer
__literal843 Variant_t VARIANT_STRING, 0, __literal843_buffer
__literal844 Variant_t VARIANT_STRING, 0, __literal844_buffer
__literal845 Variant_t VARIANT_STRING, 0, __literal845_buffer
__literal846 Variant_t VARIANT_STRING, 0, __literal846_buffer
__literal847 Variant_t VARIANT_STRING, 0, __literal847_buffer
__literal848 Variant_t VARIANT_STRING, 0, __literal848_buffer
__literal849 Variant_t VARIANT_STRING, 0, __literal849_buffer
__literal850 Variant_t VARIANT_STRING, 0, __literal850_buffer
__literal851 Variant_t VARIANT_STRING, 0, __literal851_buffer
__literal852 Variant_t VARIANT_STRING, 0, __literal852_buffer
__literal853 Variant_t VARIANT_STRING, 0, __literal853_buffer
__literal854 Variant_t VARIANT_STRING, 0, __literal854_buffer
__literal855 Variant_t VARIANT_STRING, 0, __literal855_buffer
__literal856 Variant_t VARIANT_STRING, 0, __literal856_buffer
__literal857 Variant_t VARIANT_STRING, 0, __literal857_buffer
__literal858 Variant_t VARIANT_STRING, 0, __literal858_buffer
__literal859 Variant_t VARIANT_STRING, 0, __literal859_buffer
__literal860 Variant_t VARIANT_STRING, 0, __literal860_buffer
__literal861 Variant_t VARIANT_STRING, 0, __literal861_buffer
__literal862 Variant_t VARIANT_STRING, 0, __literal862_buffer
__literal863 Variant_t VARIANT_STRING, 0, __literal863_buffer
__literal864 Variant_t VARIANT_STRING, 0, __literal864_buffer
__literal865 Variant_t VARIANT_STRING, 0, __literal865_buffer
__literal866 Variant_t VARIANT_STRING, 0, __literal866_buffer
__literal867 Variant_t VARIANT_STRING, 0, __literal867_buffer
__literal868 Variant_t VARIANT_STRING, 0, __literal868_buffer
__literal869 Variant_t VARIANT_STRING, 0, __literal869_buffer
__literal870 Variant_t VARIANT_STRING, 0, __literal870_buffer
__literal871 Variant_t VARIANT_STRING, 0, __literal871_buffer
__literal872 Variant_t VARIANT_STRING, 0, __literal872_buffer
__literal873 Variant_t VARIANT_STRING, 0, __literal873_buffer
__literal874 Variant_t VARIANT_STRING, 0, __literal874_buffer
__literal875 Variant_t VARIANT_STRING, 0, __literal875_buffer
__literal876 Variant_t VARIANT_STRING, 0, __literal876_buffer
__literal877 Variant_t VARIANT_STRING, 0, __literal877_buffer
__literal878 Variant_t VARIANT_STRING, 0, __literal878_buffer
__literal879 Variant_t VARIANT_STRING, 0, __literal879_buffer
__literal880 Variant_t VARIANT_STRING, 0, __literal880_buffer
__literal881 Variant_t VARIANT_STRING, 0, __literal881_buffer
__literal882 Variant_t VARIANT_STRING, 0, __literal882_buffer
__literal883 Variant_t VARIANT_STRING, 0, __literal883_buffer
__literal884 Variant_t VARIANT_STRING, 0, __literal884_buffer
__literal885 Variant_t VARIANT_STRING, 0, __literal885_buffer
__literal886 Variant_t VARIANT_STRING, 0, __literal886_buffer
__literal887 Variant_t VARIANT_STRING, 0, __literal887_buffer
__literal888 Variant_t VARIANT_STRING, 0, __literal888_buffer
__literal889 Variant_t VARIANT_STRING, 0, __literal889_buffer
__literal890 Variant_t VARIANT_STRING, 0, __literal890_buffer
__literal891 Variant_t VARIANT_STRING, 0, __literal891_buffer
__literal892 Variant_t VARIANT_STRING, 0, __literal892_buffer
__literal893 Variant_t VARIANT_STRING, 0, __literal893_buffer
__literal894 Variant_t VARIANT_STRING, 0, __literal894_buffer
__literal895 Variant_t VARIANT_STRING, 0, __literal895_buffer
__literal896 Variant_t VARIANT_STRING, 0, __literal896_buffer
__literal897 Variant_t VARIANT_STRING, 0, __literal897_buffer
__literal898 Variant_t VARIANT_STRING, 0, __literal898_buffer
__literal899 Variant_t VARIANT_STRING, 0, __literal899_buffer
__literal900 Variant_t VARIANT_STRING, 0, __literal900_buffer
__literal901 Variant_t VARIANT_STRING, 0, __literal901_buffer
__literal902 Variant_t VARIANT_STRING, 0, __literal902_buffer
__literal903 Variant_t VARIANT_STRING, 0, __literal903_buffer
__literal904 Variant_t VARIANT_STRING, 0, __literal904_buffer
__literal905 Variant_t VARIANT_STRING, 0, __literal905_buffer
__literal906 Variant_t VARIANT_STRING, 0, __literal906_buffer
__literal907 Variant_t VARIANT_STRING, 0, __literal907_buffer
__literal908 Variant_t VARIANT_STRING, 0, __literal908_buffer
__literal909 Variant_t VARIANT_STRING, 0, __literal909_buffer
__literal910 Variant_t VARIANT_STRING, 0, __literal910_buffer
__literal911 Variant_t VARIANT_STRING, 0, __literal911_buffer
__literal912 Variant_t VARIANT_STRING, 0, __literal912_buffer
__literal913 Variant_t VARIANT_STRING, 0, __literal913_buffer
__literal914 Variant_t VARIANT_STRING, 0, __literal914_buffer
__literal915 Variant_t VARIANT_STRING, 0, __literal915_buffer
__literal916 Variant_t VARIANT_STRING, 0, __literal916_buffer
__literal917 Variant_t VARIANT_STRING, 0, __literal917_buffer
__literal918 Variant_t VARIANT_STRING, 0, __literal918_buffer
__literal919 Variant_t VARIANT_STRING, 0, __literal919_buffer
__literal920 Variant_t VARIANT_STRING, 0, __literal920_buffer
__literal921 Variant_t VARIANT_STRING, 0, __literal921_buffer
__literal922 Variant_t VARIANT_STRING, 0, __literal922_buffer
__literal923 Variant_t VARIANT_STRING, 0, __literal923_buffer
__literal924 Variant_t VARIANT_STRING, 0, __literal924_buffer
__literal925 Variant_t VARIANT_STRING, 0, __literal925_buffer
__literal926 Variant_t VARIANT_STRING, 0, __literal926_buffer
__literal927 Variant_t VARIANT_STRING, 0, __literal927_buffer
__literal928 Variant_t VARIANT_STRING, 0, __literal928_buffer
__literal929 Variant_t VARIANT_STRING, 0, __literal929_buffer
__literal930 Variant_t VARIANT_STRING, 0, __literal930_buffer
__literal931 Variant_t VARIANT_STRING, 0, __literal931_buffer
__literal932 Variant_t VARIANT_STRING, 0, __literal932_buffer
__literal933 Variant_t VARIANT_STRING, 0, __literal933_buffer
__literal934 Variant_t VARIANT_STRING, 0, __literal934_buffer
__literal935 Variant_t VARIANT_STRING, 0, __literal935_buffer
__literal936 Variant_t VARIANT_STRING, 0, __literal936_buffer
__literal937 Variant_t VARIANT_STRING, 0, __literal937_buffer
__literal938 Variant_t VARIANT_STRING, 0, __literal938_buffer
__literal939 Variant_t VARIANT_STRING, 0, __literal939_buffer
__literal940 Variant_t VARIANT_STRING, 0, __literal940_buffer
__literal941 Variant_t VARIANT_STRING, 0, __literal941_buffer
__literal942 Variant_t VARIANT_STRING, 0, __literal942_buffer
__literal943 Variant_t VARIANT_STRING, 0, __literal943_buffer
__literal944 Variant_t VARIANT_STRING, 0, __literal944_buffer
__literal945 Variant_t VARIANT_STRING, 0, __literal945_buffer
__literal946 Variant_t VARIANT_STRING, 0, __literal946_buffer
__literal947 Variant_t VARIANT_STRING, 0, __literal947_buffer
__literal948 Variant_t VARIANT_STRING, 0, __literal948_buffer
__literal949 Variant_t VARIANT_STRING, 0, __literal949_buffer
__literal950 Variant_t VARIANT_STRING, 0, __literal950_buffer
__literal951 Variant_t VARIANT_STRING, 0, __literal951_buffer
__literal952 Variant_t VARIANT_STRING, 0, __literal952_buffer
__literal953 Variant_t VARIANT_STRING, 0, __literal953_buffer
__literal954 Variant_t VARIANT_STRING, 0, __literal954_buffer
__literal955 Variant_t VARIANT_STRING, 0, __literal955_buffer
__literal956 Variant_t VARIANT_STRING, 0, __literal956_buffer
__literal957 Variant_t VARIANT_STRING, 0, __literal957_buffer
__literal958 Variant_t VARIANT_STRING, 0, __literal958_buffer
__literal959 Variant_t VARIANT_STRING, 0, __literal959_buffer
__literal960 Variant_t VARIANT_STRING, 0, __literal960_buffer
__literal961 Variant_t VARIANT_STRING, 0, __literal961_buffer
__literal962 Variant_t VARIANT_STRING, 0, __literal962_buffer
__literal963 Variant_t VARIANT_STRING, 0, __literal963_buffer
__literal964 Variant_t VARIANT_STRING, 0, __literal964_buffer
__literal965 Variant_t VARIANT_STRING, 0, __literal965_buffer
__literal966 Variant_t VARIANT_STRING, 0, __literal966_buffer
__literal967 Variant_t VARIANT_STRING, 0, __literal967_buffer
__literal968 Variant_t VARIANT_STRING, 0, __literal968_buffer
__literal969 Variant_t VARIANT_STRING, 0, __literal969_buffer
__literal970 Variant_t VARIANT_STRING, 0, __literal970_buffer
__literal971 Variant_t VARIANT_STRING, 0, __literal971_buffer
__literal972 Variant_t VARIANT_STRING, 0, __literal972_buffer
__literal973 Variant_t VARIANT_STRING, 0, __literal973_buffer
__literal974 Variant_t VARIANT_STRING, 0, __literal974_buffer
__literal975 Variant_t VARIANT_STRING, 0, __literal975_buffer
__literal976 Variant_t VARIANT_STRING, 0, __literal976_buffer
__literal977 Variant_t VARIANT_STRING, 0, __literal977_buffer
__literal978 Variant_t VARIANT_STRING, 0, __literal978_buffer
__literal979 Variant_t VARIANT_STRING, 0, __literal979_buffer
__literal980 Variant_t VARIANT_STRING, 0, __literal980_buffer
__literal981 Variant_t VARIANT_STRING, 0, __literal981_buffer
__literal982 Variant_t VARIANT_STRING, 0, __literal982_buffer
__literal983 Variant_t VARIANT_STRING, 0, __literal983_buffer
__literal984 Variant_t VARIANT_STRING, 0, __literal984_buffer
__literal985 Variant_t VARIANT_STRING, 0, __literal985_buffer
__literal986 Variant_t VARIANT_STRING, 0, __literal986_buffer
__literal987 Variant_t VARIANT_STRING, 0, __literal987_buffer
__literal988 Variant_t VARIANT_STRING, 0, __literal988_buffer
__literal989 Variant_t VARIANT_STRING, 0, __literal989_buffer
__literal990 Variant_t VARIANT_STRING, 0, __literal990_buffer
__literal991 Variant_t VARIANT_STRING, 0, __literal991_buffer
__literal992 Variant_t VARIANT_STRING, 0, __literal992_buffer
__literal993 Variant_t VARIANT_STRING, 0, __literal993_buffer
__literal994 Variant_t VARIANT_STRING, 0, __literal994_buffer
__literal995 Variant_t VARIANT_STRING, 0, __literal995_buffer
__literal996 Variant_t VARIANT_STRING, 0, __literal996_buffer
__literal997 Variant_t VARIANT_STRING, 0, __literal997_buffer
__literal998 Variant_t VARIANT_STRING, 0, __literal998_buffer
__literal999 Variant_t VARIANT_STRING, 0, __literal999_buffer
__literal1000 Variant_t VARIANT_STRING, 0, __literal1000_buffer
__literal1001 Variant_t VARIANT_STRING, 0, __literal1001_buffer
__literal1002 Variant_t VARIANT_STRING, 0, __literal1002_buffer
__literal1003 Variant_t VARIANT_STRING, 0, __literal1003_buffer
__literal1004 Variant_t VARIANT_STRING, 0, __literal1004_buffer
__literal1005 Variant_t VARIANT_STRING, 0, __literal1005_buffer
__literal1006 Variant_t VARIANT_STRING, 0, __literal1006_buffer
__literal1007 Variant_t VARIANT_STRING, 0, __literal1007_buffer
__literal1008 Variant_t VARIANT_STRING, 0, __literal1008_buffer
__literal1009 Variant_t VARIANT_STRING, 0, __literal1009_buffer
__literal1010 Variant_t VARIANT_STRING, 0, __literal1010_buffer
__literal1011 Variant_t VARIANT_STRING, 0, __literal1011_buffer
__literal1012 Variant_t VARIANT_STRING, 0, __literal1012_buffer
__literal1013 Variant_t VARIANT_STRING, 0, __literal1013_buffer
__literal1014 Variant_t VARIANT_STRING, 0, __literal1014_buffer
__literal1015 Variant_t VARIANT_STRING, 0, __literal1015_buffer
__literal1016 Variant_t VARIANT_STRING, 0, __literal1016_buffer
__literal1017 Variant_t VARIANT_STRING, 0, __literal1017_buffer
__literal1018 Variant_t VARIANT_STRING, 0, __literal1018_buffer
__literal1019 Variant_t VARIANT_STRING, 0, __literal1019_buffer
__literal1020 Variant_t VARIANT_STRING, 0, __literal1020_buffer
__literal1021 Variant_t VARIANT_STRING, 0, __literal1021_buffer
__literal1022 Variant_t VARIANT_STRING, 0, __literal1022_buffer
__literal1023 Variant_t VARIANT_STRING, 0, __literal1023_buffer
__literal1024 Variant_t VARIANT_STRING, 0, __literal1024_buffer
__literal1025 Variant_t VARIANT_STRING, 0, __literal1025_buffer
__literal1026 Variant_t VARIANT_STRING, 0, __literal1026_buffer
__literal1027 Variant_t VARIANT_STRING, 0, __literal1027_buffer
__literal1028 Variant_t VARIANT_STRING, 0, __literal1028_buffer
__literal1029 Variant_t VARIANT_STRING, 0, __literal1029_buffer
__literal1030 Variant_t VARIANT_STRING, 0, __literal1030_buffer
__literal1031 Variant_t VARIANT_STRING, 0, __literal1031_buffer
__literal1032 Variant_t VARIANT_STRING, 0, __literal1032_buffer
__literal1033 Variant_t VARIANT_STRING, 0, __literal1033_buffer
__literal1034 Variant_t VARIANT_STRING, 0, __literal1034_buffer
__literal1035 Variant_t VARIANT_STRING, 0, __literal1035_buffer
__literal1036 Variant_t VARIANT_STRING, 0, __literal1036_buffer
__literal1037 Variant_t VARIANT_STRING, 0, __literal1037_buffer
__literal1038 Variant_t VARIANT_STRING, 0, __literal1038_buffer
__literal1039 Variant_t VARIANT_STRING, 0, __literal1039_buffer
__literal1040 Variant_t VARIANT_STRING, 0, __literal1040_buffer
__literal1041 Variant_t VARIANT_STRING, 0, __literal1041_buffer
__literal1042 Variant_t VARIANT_STRING, 0, __literal1042_buffer
__literal1043 Variant_t VARIANT_STRING, 0, __literal1043_buffer
__literal1044 Variant_t VARIANT_STRING, 0, __literal1044_buffer
__literal1045 Variant_t VARIANT_STRING, 0, __literal1045_buffer
__literal1046 Variant_t VARIANT_STRING, 0, __literal1046_buffer
__literal1047 Variant_t VARIANT_STRING, 0, __literal1047_buffer
__literal1048 Variant_t VARIANT_STRING, 0, __literal1048_buffer
__literal1049 Variant_t VARIANT_STRING, 0, __literal1049_buffer
__literal1050 Variant_t VARIANT_STRING, 0, __literal1050_buffer
__literal1051 Variant_t VARIANT_STRING, 0, __literal1051_buffer
__literal1052 Variant_t VARIANT_STRING, 0, __literal1052_buffer
__literal1053 Variant_t VARIANT_STRING, 0, __literal1053_buffer
__literal1054 Variant_t VARIANT_STRING, 0, __literal1054_buffer
__literal1055 Variant_t VARIANT_STRING, 0, __literal1055_buffer
__literal1056 Variant_t VARIANT_STRING, 0, __literal1056_buffer
__literal1057 Variant_t VARIANT_STRING, 0, __literal1057_buffer
__literal1058 Variant_t VARIANT_STRING, 0, __literal1058_buffer
__literal1059 Variant_t VARIANT_STRING, 0, __literal1059_buffer
__literal1060 Variant_t VARIANT_STRING, 0, __literal1060_buffer
__literal1061 Variant_t VARIANT_STRING, 0, __literal1061_buffer
__literal1062 Variant_t VARIANT_STRING, 0, __literal1062_buffer
__literal1063 Variant_t VARIANT_STRING, 0, __literal1063_buffer
__literal1064 Variant_t VARIANT_STRING, 0, __literal1064_buffer
__literal1065 Variant_t VARIANT_STRING, 0, __literal1065_buffer
__literal1066 Variant_t VARIANT_STRING, 0, __literal1066_buffer
__literal1067 Variant_t VARIANT_STRING, 0, __literal1067_buffer
__literal1068 Variant_t VARIANT_STRING, 0, __literal1068_buffer
__literal1069 Variant_t VARIANT_STRING, 0, __literal1069_buffer
__literal1070 Variant_t VARIANT_STRING, 0, __literal1070_buffer
__literal1071 Variant_t VARIANT_STRING, 0, __literal1071_buffer
__literal1072 Variant_t VARIANT_STRING, 0, __literal1072_buffer
__literal1073 Variant_t VARIANT_STRING, 0, __literal1073_buffer
__literal1074 Variant_t VARIANT_STRING, 0, __literal1074_buffer
__literal1075 Variant_t VARIANT_STRING, 0, __literal1075_buffer
__literal1076 Variant_t VARIANT_STRING, 0, __literal1076_buffer
__literal1077 Variant_t VARIANT_STRING, 0, __literal1077_buffer
__literal1078 Variant_t VARIANT_STRING, 0, __literal1078_buffer
__literal1079 Variant_t VARIANT_STRING, 0, __literal1079_buffer
__literal1080 Variant_t VARIANT_STRING, 0, __literal1080_buffer
__literal1081 Variant_t VARIANT_STRING, 0, __literal1081_buffer
__literal1082 Variant_t VARIANT_STRING, 0, __literal1082_buffer
__literal1083 Variant_t VARIANT_STRING, 0, __literal1083_buffer
__literal1084 Variant_t VARIANT_STRING, 0, __literal1084_buffer
__literal1085 Variant_t VARIANT_STRING, 0, __literal1085_buffer
__literal1086 Variant_t VARIANT_STRING, 0, __literal1086_buffer
__literal1087 Variant_t VARIANT_STRING, 0, __literal1087_buffer
__literal1088 Variant_t VARIANT_STRING, 0, __literal1088_buffer
__literal1089 Variant_t VARIANT_STRING, 0, __literal1089_buffer
__literal1090 Variant_t VARIANT_STRING, 0, __literal1090_buffer
__literal1091 Variant_t VARIANT_STRING, 0, __literal1091_buffer
__literal1092 Variant_t VARIANT_STRING, 0, __literal1092_buffer
__literal1093 Variant_t VARIANT_STRING, 0, __literal1093_buffer
__literal1094 Variant_t VARIANT_STRING, 0, __literal1094_buffer
__literal1095 Variant_t VARIANT_STRING, 0, __literal1095_buffer
__literal1096 Variant_t VARIANT_STRING, 0, __literal1096_buffer
__literal1097 Variant_t VARIANT_STRING, 0, __literal1097_buffer
__literal1098 Variant_t VARIANT_STRING, 0, __literal1098_buffer
__literal1099 Variant_t VARIANT_STRING, 0, __literal1099_buffer
__literal1100 Variant_t VARIANT_STRING, 0, __literal1100_buffer
__literal1101 Variant_t VARIANT_STRING, 0, __literal1101_buffer
__literal1102 Variant_t VARIANT_STRING, 0, __literal1102_buffer
__literal1103 Variant_t VARIANT_STRING, 0, __literal1103_buffer
__literal1104 Variant_t VARIANT_STRING, 0, __literal1104_buffer
__literal1105 Variant_t VARIANT_STRING, 0, __literal1105_buffer
__literal1106 Variant_t VARIANT_STRING, 0, __literal1106_buffer
__literal1107 Variant_t VARIANT_STRING, 0, __literal1107_buffer
__literal1108 Variant_t VARIANT_STRING, 0, __literal1108_buffer
__literal1109 Variant_t VARIANT_STRING, 0, __literal1109_buffer
__literal1110 Variant_t VARIANT_STRING, 0, __literal1110_buffer
__literal1111 Variant_t VARIANT_STRING, 0, __literal1111_buffer
__literal1112 Variant_t VARIANT_STRING, 0, __literal1112_buffer
__literal1113 Variant_t VARIANT_STRING, 0, __literal1113_buffer
__literal1114 Variant_t VARIANT_STRING, 0, __literal1114_buffer
__literal1115 Variant_t VARIANT_STRING, 0, __literal1115_buffer
__literal1116 Variant_t VARIANT_STRING, 0, __literal1116_buffer
__literal1117 Variant_t VARIANT_STRING, 0, __literal1117_buffer
__literal1118 Variant_t VARIANT_STRING, 0, __literal1118_buffer
__literal1119 Variant_t VARIANT_STRING, 0, __literal1119_buffer
__literal1120 Variant_t VARIANT_STRING, 0, __literal1120_buffer
__literal1121 Variant_t VARIANT_STRING, 0, __literal1121_buffer
__literal1122 Variant_t VARIANT_STRING, 0, __literal1122_buffer
__literal1123 Variant_t VARIANT_STRING, 0, __literal1123_buffer
__literal1124 Variant_t VARIANT_STRING, 0, __literal1124_buffer
__literal1125 Variant_t VARIANT_STRING, 0, __literal1125_buffer
__literal1126 Variant_t VARIANT_STRING, 0, __literal1126_buffer
__literal1127 Variant_t VARIANT_STRING, 0, __literal1127_buffer
__literal1128 Variant_t VARIANT_STRING, 0, __literal1128_buffer
__literal1129 Variant_t VARIANT_STRING, 0, __literal1129_buffer
__literal1130 Variant_t VARIANT_STRING, 0, __literal1130_buffer
__literal1131 Variant_t VARIANT_STRING, 0, __literal1131_buffer
__literal1132 Variant_t VARIANT_STRING, 0, __literal1132_buffer
__literal1133 Variant_t VARIANT_STRING, 0, __literal1133_buffer
__literal1134 Variant_t VARIANT_STRING, 0, __literal1134_buffer
__literal1135 Variant_t VARIANT_STRING, 0, __literal1135_buffer
__literal1136 Variant_t VARIANT_STRING, 0, __literal1136_buffer
__literal1137 Variant_t VARIANT_STRING, 0, __literal1137_buffer
__literal1138 Variant_t VARIANT_STRING, 0, __literal1138_buffer
__literal1139 Variant_t VARIANT_STRING, 0, __literal1139_buffer
__literal1140 Variant_t VARIANT_STRING, 0, __literal1140_buffer
__literal1141 Variant_t VARIANT_STRING, 0, __literal1141_buffer
__literal1142 Variant_t VARIANT_STRING, 0, __literal1142_buffer
__literal1143 Variant_t VARIANT_STRING, 0, __literal1143_buffer
__literal1144 Variant_t VARIANT_STRING, 0, __literal1144_buffer
__literal1145 Variant_t VARIANT_STRING, 0, __literal1145_buffer
__literal1146 Variant_t VARIANT_STRING, 0, __literal1146_buffer
__literal1147 Variant_t VARIANT_STRING, 0, __literal1147_buffer
__literal1148 Variant_t VARIANT_STRING, 0, __literal1148_buffer
__literal1149 Variant_t VARIANT_STRING, 0, __literal1149_buffer
__literal1150 Variant_t VARIANT_STRING, 0, __literal1150_buffer
__literal1151 Variant_t VARIANT_STRING, 0, __literal1151_buffer
__literal1152 Variant_t VARIANT_STRING, 0, __literal1152_buffer
__literal1153 Variant_t VARIANT_STRING, 0, __literal1153_buffer
__literal1154 Variant_t VARIANT_STRING, 0, __literal1154_buffer
__literal1155 Variant_t VARIANT_STRING, 0, __literal1155_buffer
__literal1156 Variant_t VARIANT_STRING, 0, __literal1156_buffer
__literal1157 Variant_t VARIANT_STRING, 0, __literal1157_buffer
__literal1158 Variant_t VARIANT_STRING, 0, __literal1158_buffer
__literal1159 Variant_t VARIANT_STRING, 0, __literal1159_buffer
__literal1160 Variant_t VARIANT_STRING, 0, __literal1160_buffer
__literal1161 Variant_t VARIANT_STRING, 0, __literal1161_buffer
__literal1162 Variant_t VARIANT_STRING, 0, __literal1162_buffer
__literal1163 Variant_t VARIANT_STRING, 0, __literal1163_buffer
__literal1164 Variant_t VARIANT_STRING, 0, __literal1164_buffer
__literal1165 Variant_t VARIANT_STRING, 0, __literal1165_buffer
__literal1166 Variant_t VARIANT_STRING, 0, __literal1166_buffer
__literal1167 Variant_t VARIANT_STRING, 0, __literal1167_buffer
__literal1168 Variant_t VARIANT_STRING, 0, __literal1168_buffer
__literal1169 Variant_t VARIANT_STRING, 0, __literal1169_buffer
__literal1170 Variant_t VARIANT_STRING, 0, __literal1170_buffer
__literal1171 Variant_t VARIANT_STRING, 0, __literal1171_buffer
__literal1172 Variant_t VARIANT_STRING, 0, __literal1172_buffer
__literal1173 Variant_t VARIANT_STRING, 0, __literal1173_buffer
__literal1174 Variant_t VARIANT_STRING, 0, __literal1174_buffer
__literal1175 Variant_t VARIANT_STRING, 0, __literal1175_buffer
__literal1176 Variant_t VARIANT_STRING, 0, __literal1176_buffer
__literal1177 Variant_t VARIANT_STRING, 0, __literal1177_buffer
__literal1178 Variant_t VARIANT_STRING, 0, __literal1178_buffer
__literal1179 Variant_t VARIANT_STRING, 0, __literal1179_buffer
__literal1180 Variant_t VARIANT_STRING, 0, __literal1180_buffer
__literal1181 Variant_t VARIANT_STRING, 0, __literal1181_buffer
__literal1182 Variant_t VARIANT_STRING, 0, __literal1182_buffer
__literal1183 Variant_t VARIANT_STRING, 0, __literal1183_buffer
__literal1184 Variant_t VARIANT_STRING, 0, __literal1184_buffer
__literal1185 Variant_t VARIANT_STRING, 0, __literal1185_buffer
__literal1186 Variant_t VARIANT_STRING, 0, __literal1186_buffer
__literal1187 Variant_t VARIANT_STRING, 0, __literal1187_buffer
__literal1188 Variant_t VARIANT_STRING, 0, __literal1188_buffer
__literal1189 Variant_t VARIANT_STRING, 0, __literal1189_buffer
__literal1190 Variant_t VARIANT_STRING, 0, __literal1190_buffer
__literal1191 Variant_t VARIANT_STRING, 0, __literal1191_buffer
__literal1192 Variant_t VARIANT_STRING, 0, __literal1192_buffer
__literal1193 Variant_t VARIANT_STRING, 0, __literal1193_buffer
__literal1194 Variant_t VARIANT_STRING, 0, __literal1194_buffer
__literal1195 Variant_t VARIANT_STRING, 0, __literal1195_buffer
__literal1196 Variant_t VARIANT_STRING, 0, __literal1196_buffer
__literal1197 Variant_t VARIANT_STRING, 0, __literal1197_buffer
__literal1198 Variant_t VARIANT_STRING, 0, __literal1198_buffer
__literal1199 Variant_t VARIANT_STRING, 0, __literal1199_buffer
__literal1200 Variant_t VARIANT_STRING, 0, __literal1200_buffer
__literal1201 Variant_t VARIANT_STRING, 0, __literal1201_buffer
__literal1202 Variant_t VARIANT_STRING, 0, __literal1202_buffer
; Reuse already emitted buffer
__const1746 Variant_t VARIANT_STRING, 0, __literal33_buffer
; Reuse already emitted buffer
__const2711 Variant_t VARIANT_STRING, 0, __literal161_buffer
; Reuse already emitted buffer
__const2717 Variant_t VARIANT_STRING, 0, __literal161_buffer
; Reuse already emitted buffer
__const3745 Variant_t VARIANT_STRING, 0, __literal161_buffer
; Reuse already emitted buffer
__const3746 Variant_t VARIANT_STRING, 0, __literal161_buffer
; Reuse already emitted buffer
__const3884 Variant_t VARIANT_STRING, 0, __literal161_buffer
; Reuse already emitted buffer
__const3925 Variant_t VARIANT_STRING, 0, __literal161_buffer
; Reuse already emitted buffer
__const4106 Variant_t VARIANT_STRING, 0, __literal161_buffer
; Reuse already emitted buffer
__const5232 Variant_t VARIANT_STRING, 0, __literal677_buffer
; Reuse already emitted buffer
__const5233 Variant_t VARIANT_STRING, 0, __literal678_buffer
; Reuse already emitted buffer
__const5760 Variant_t VARIANT_STRING, 0, __literal33_buffer
; iter 1
GrammarProductionsLUT_buffer Buffer_t 8928 , -1, 0, GrammarProductionsLUT_bufferBytes
SymbolsGreedyLUT_buffer Buffer_t 2288 , -1, 0, SymbolsGreedyLUT_bufferBytes
ParserActionsLUT_buffer Buffer_t 3696 , -1, 0, ParserActionsLUT_bufferBytes
ParserGotoLUT_buffer Buffer_t 3696 , -1, 0, ParserGotoLUT_bufferBytes
ParserActionsDefaultLUT_buffer Buffer_t 3696 , -1, 0, ParserActionsDefaultLUT_bufferBytes
LexerSelectLUT_buffer Buffer_t 0 , -1, 0, LexerSelectLUT_bufferBytes
LexerIndexBaseLUT_buffer Buffer_t 16 , -1, 0, LexerIndexBaseLUT_bufferBytes
LexerIndexLUT_buffer Buffer_t 16 , -1, 0, LexerIndexLUT_bufferBytes
LexerCharsLUT_buffer Buffer_t 43360 , -1, 0, LexerCharsLUT_bufferBytes
LexerTransLUT_buffer Buffer_t 21680 , -1, 0, LexerTransLUT_bufferBytes
LexerAcceptLUT_buffer Buffer_t 16 , -1, 0, LexerAcceptLUT_bufferBytes
__literal0_buffer Buffer_t 7 , -1, 0, __literal0_bufferBytes
__literal1_buffer Buffer_t 6 , -1, 0, __literal1_bufferBytes
__literal2_buffer Buffer_t 3 , -1, 0, __literal2_bufferBytes
__literal3_buffer Buffer_t 9 , -1, 0, __literal3_bufferBytes
__literal4_buffer Buffer_t 7 , -1, 0, __literal4_bufferBytes
__literal5_buffer Buffer_t 5 , -1, 0, __literal5_bufferBytes
__literal6_buffer Buffer_t 1 , -1, 0, __literal6_bufferBytes
__literal7_buffer Buffer_t 3 , -1, 0, __literal7_bufferBytes
__literal8_buffer Buffer_t 2 , -1, 0, __literal8_bufferBytes
__literal9_buffer Buffer_t 35 , -1, 0, __literal9_bufferBytes
__literal10_buffer Buffer_t 22 , -1, 0, __literal10_bufferBytes
__literal11_buffer Buffer_t 13 , -1, 0, __literal11_bufferBytes
__literal12_buffer Buffer_t 9 , -1, 0, __literal12_bufferBytes
__literal13_buffer Buffer_t 2 , -1, 0, __literal13_bufferBytes
__literal14_buffer Buffer_t 10 , -1, 0, __literal14_bufferBytes
__literal15_buffer Buffer_t 13 , -1, 0, __literal15_bufferBytes
__literal16_buffer Buffer_t 6 , -1, 0, __literal16_bufferBytes
__literal17_buffer Buffer_t 7 , -1, 0, __literal17_bufferBytes
__literal18_buffer Buffer_t 7 , -1, 0, __literal18_bufferBytes
__literal19_buffer Buffer_t 28 , -1, 0, __literal19_bufferBytes
__literal20_buffer Buffer_t 29 , -1, 0, __literal20_bufferBytes
__literal21_buffer Buffer_t 30 , -1, 0, __literal21_bufferBytes
__literal22_buffer Buffer_t 2 , -1, 0, __literal22_bufferBytes
__literal23_buffer Buffer_t 5 , -1, 0, __literal23_bufferBytes
__literal24_buffer Buffer_t 6 , -1, 0, __literal24_bufferBytes
__literal25_buffer Buffer_t 5 , -1, 0, __literal25_bufferBytes
__literal26_buffer Buffer_t 9 , -1, 0, __literal26_bufferBytes
__literal27_buffer Buffer_t 21 , -1, 0, __literal27_bufferBytes
__literal28_buffer Buffer_t 57 , -1, 0, __literal28_bufferBytes
__literal29_buffer Buffer_t 20 , -1, 0, __literal29_bufferBytes
__literal30_buffer Buffer_t 5 , -1, 0, __literal30_bufferBytes
__literal31_buffer Buffer_t 7 , -1, 0, __literal31_bufferBytes
__literal32_buffer Buffer_t 19 , -1, 0, __literal32_bufferBytes
AST_DataTypeNames_buffer Buffer_t 176 , -1, 0, AST_DataTypeNames_bufferBytes
AST_DataTypeForMIR_buffer Buffer_t 176 , -1, 0, AST_DataTypeForMIR_bufferBytes
__literal33_buffer Buffer_t 8 , -1, 0, __literal33_bufferBytes
__literal34_buffer Buffer_t 6 , -1, 0, __literal34_bufferBytes
__literal35_buffer Buffer_t 8 , -1, 0, __literal35_bufferBytes
__literal36_buffer Buffer_t 8 , -1, 0, __literal36_bufferBytes
__literal37_buffer Buffer_t 6 , -1, 0, __literal37_bufferBytes
__literal38_buffer Buffer_t 9 , -1, 0, __literal38_bufferBytes
__literal39_buffer Buffer_t 6 , -1, 0, __literal39_bufferBytes
__literal40_buffer Buffer_t 7 , -1, 0, __literal40_bufferBytes
__literal41_buffer Buffer_t 3 , -1, 0, __literal41_bufferBytes
__literal42_buffer Buffer_t 4 , -1, 0, __literal42_bufferBytes
__literal43_buffer Buffer_t 6 , -1, 0, __literal43_bufferBytes
__literal44_buffer Buffer_t 5 , -1, 0, __literal44_bufferBytes
__literal45_buffer Buffer_t 19 , -1, 0, __literal45_bufferBytes
__literal46_buffer Buffer_t 17 , -1, 0, __literal46_bufferBytes
__literal47_buffer Buffer_t 8 , -1, 0, __literal47_bufferBytes
__literal48_buffer Buffer_t 7 , -1, 0, __literal48_bufferBytes
__literal49_buffer Buffer_t 6 , -1, 0, __literal49_bufferBytes
__literal50_buffer Buffer_t 7 , -1, 0, __literal50_bufferBytes
__literal51_buffer Buffer_t 5 , -1, 0, __literal51_bufferBytes
__literal52_buffer Buffer_t 6 , -1, 0, __literal52_bufferBytes
__literal53_buffer Buffer_t 4 , -1, 0, __literal53_bufferBytes
__literal54_buffer Buffer_t 10 , -1, 0, __literal54_bufferBytes
__literal55_buffer Buffer_t 9 , -1, 0, __literal55_bufferBytes
__literal56_buffer Buffer_t 8 , -1, 0, __literal56_bufferBytes
__literal57_buffer Buffer_t 4 , -1, 0, __literal57_bufferBytes
__literal58_buffer Buffer_t 4 , -1, 0, __literal58_bufferBytes
__literal59_buffer Buffer_t 12 , -1, 0, __literal59_bufferBytes
__literal60_buffer Buffer_t 4 , -1, 0, __literal60_bufferBytes
__literal61_buffer Buffer_t 4 , -1, 0, __literal61_bufferBytes
__literal62_buffer Buffer_t 4 , -1, 0, __literal62_bufferBytes
__literal63_buffer Buffer_t 5 , -1, 0, __literal63_bufferBytes
__literal64_buffer Buffer_t 7 , -1, 0, __literal64_bufferBytes
__literal65_buffer Buffer_t 7 , -1, 0, __literal65_bufferBytes
__literal66_buffer Buffer_t 7 , -1, 0, __literal66_bufferBytes
__literal67_buffer Buffer_t 7 , -1, 0, __literal67_bufferBytes
__literal68_buffer Buffer_t 7 , -1, 0, __literal68_bufferBytes
__literal69_buffer Buffer_t 7 , -1, 0, __literal69_bufferBytes
__literal70_buffer Buffer_t 18 , -1, 0, __literal70_bufferBytes
__literal71_buffer Buffer_t 9 , -1, 0, __literal71_bufferBytes
__literal72_buffer Buffer_t 4 , -1, 0, __literal72_bufferBytes
__literal73_buffer Buffer_t 10 , -1, 0, __literal73_bufferBytes
__literal74_buffer Buffer_t 9 , -1, 0, __literal74_bufferBytes
__literal75_buffer Buffer_t 6 , -1, 0, __literal75_bufferBytes
__literal76_buffer Buffer_t 11 , -1, 0, __literal76_bufferBytes
__literal77_buffer Buffer_t 2 , -1, 0, __literal77_bufferBytes
__literal78_buffer Buffer_t 3 , -1, 0, __literal78_bufferBytes
__literal79_buffer Buffer_t 3 , -1, 0, __literal79_bufferBytes
__literal80_buffer Buffer_t 5 , -1, 0, __literal80_bufferBytes
__literal81_buffer Buffer_t 2 , -1, 0, __literal81_bufferBytes
__literal82_buffer Buffer_t 2 , -1, 0, __literal82_bufferBytes
__literal83_buffer Buffer_t 2 , -1, 0, __literal83_bufferBytes
__literal84_buffer Buffer_t 2 , -1, 0, __literal84_bufferBytes
__literal85_buffer Buffer_t 2 , -1, 0, __literal85_bufferBytes
__literal86_buffer Buffer_t 2 , -1, 0, __literal86_bufferBytes
__literal87_buffer Buffer_t 4 , -1, 0, __literal87_bufferBytes
__literal88_buffer Buffer_t 3 , -1, 0, __literal88_bufferBytes
__literal89_buffer Buffer_t 2 , -1, 0, __literal89_bufferBytes
__literal90_buffer Buffer_t 2 , -1, 0, __literal90_bufferBytes
__literal91_buffer Buffer_t 2 , -1, 0, __literal91_bufferBytes
__literal92_buffer Buffer_t 2 , -1, 0, __literal92_bufferBytes
__literal93_buffer Buffer_t 2 , -1, 0, __literal93_bufferBytes
__literal94_buffer Buffer_t 3 , -1, 0, __literal94_bufferBytes
__literal95_buffer Buffer_t 3 , -1, 0, __literal95_bufferBytes
__literal96_buffer Buffer_t 3 , -1, 0, __literal96_bufferBytes
__literal97_buffer Buffer_t 3 , -1, 0, __literal97_bufferBytes
__literal98_buffer Buffer_t 3 , -1, 0, __literal98_bufferBytes
__literal99_buffer Buffer_t 3 , -1, 0, __literal99_bufferBytes
__literal100_buffer Buffer_t 3 , -1, 0, __literal100_bufferBytes
__literal101_buffer Buffer_t 2 , -1, 0, __literal101_bufferBytes
__literal102_buffer Buffer_t 5 , -1, 0, __literal102_bufferBytes
__literal103_buffer Buffer_t 4 , -1, 0, __literal103_bufferBytes
__literal104_buffer Buffer_t 6 , -1, 0, __literal104_bufferBytes
__literal105_buffer Buffer_t 6 , -1, 0, __literal105_bufferBytes
__literal106_buffer Buffer_t 2 , -1, 0, __literal106_bufferBytes
__literal107_buffer Buffer_t 4 , -1, 0, __literal107_bufferBytes
__literal108_buffer Buffer_t 6 , -1, 0, __literal108_bufferBytes
__literal109_buffer Buffer_t 3 , -1, 0, __literal109_bufferBytes
__literal110_buffer Buffer_t 6 , -1, 0, __literal110_bufferBytes
__literal111_buffer Buffer_t 6 , -1, 0, __literal111_bufferBytes
__literal112_buffer Buffer_t 6 , -1, 0, __literal112_bufferBytes
__literal113_buffer Buffer_t 7 , -1, 0, __literal113_bufferBytes
__literal114_buffer Buffer_t 7 , -1, 0, __literal114_bufferBytes
__literal115_buffer Buffer_t 5 , -1, 0, __literal115_bufferBytes
__literal116_buffer Buffer_t 4 , -1, 0, __literal116_bufferBytes
__literal117_buffer Buffer_t 6 , -1, 0, __literal117_bufferBytes
__literal118_buffer Buffer_t 26 , -1, 0, __literal118_bufferBytes
__literal119_buffer Buffer_t 47 , -1, 0, __literal119_bufferBytes
__literal120_buffer Buffer_t 6 , -1, 0, __literal120_bufferBytes
__literal121_buffer Buffer_t 4 , -1, 0, __literal121_bufferBytes
__literal122_buffer Buffer_t 15 , -1, 0, __literal122_bufferBytes
__literal123_buffer Buffer_t 10 , -1, 0, __literal123_bufferBytes
__literal124_buffer Buffer_t 5 , -1, 0, __literal124_bufferBytes
__literal125_buffer Buffer_t 2 , -1, 0, __literal125_bufferBytes
__literal126_buffer Buffer_t 12 , -1, 0, __literal126_bufferBytes
__literal127_buffer Buffer_t 2 , -1, 0, __literal127_bufferBytes
__literal128_buffer Buffer_t 6 , -1, 0, __literal128_bufferBytes
__literal129_buffer Buffer_t 12 , -1, 0, __literal129_bufferBytes
__literal130_buffer Buffer_t 8 , -1, 0, __literal130_bufferBytes
__literal131_buffer Buffer_t 19 , -1, 0, __literal131_bufferBytes
__literal132_buffer Buffer_t 11 , -1, 0, __literal132_bufferBytes
__literal133_buffer Buffer_t 8 , -1, 0, __literal133_bufferBytes
__literal134_buffer Buffer_t 13 , -1, 0, __literal134_bufferBytes
__literal135_buffer Buffer_t 6 , -1, 0, __literal135_bufferBytes
__literal136_buffer Buffer_t 14 , -1, 0, __literal136_bufferBytes
__literal137_buffer Buffer_t 58 , -1, 0, __literal137_bufferBytes
__literal138_buffer Buffer_t 8 , -1, 0, __literal138_bufferBytes
__literal139_buffer Buffer_t 6 , -1, 0, __literal139_bufferBytes
__literal140_buffer Buffer_t 6 , -1, 0, __literal140_bufferBytes
__literal141_buffer Buffer_t 3 , -1, 0, __literal141_bufferBytes
__literal142_buffer Buffer_t 6 , -1, 0, __literal142_bufferBytes
__literal143_buffer Buffer_t 6 , -1, 0, __literal143_bufferBytes
__literal144_buffer Buffer_t 9 , -1, 0, __literal144_bufferBytes
__literal145_buffer Buffer_t 6 , -1, 0, __literal145_bufferBytes
__literal146_buffer Buffer_t 7 , -1, 0, __literal146_bufferBytes
__literal147_buffer Buffer_t 19 , -1, 0, __literal147_bufferBytes
__literal148_buffer Buffer_t 4 , -1, 0, __literal148_bufferBytes
__literal149_buffer Buffer_t 8 , -1, 0, __literal149_bufferBytes
__literal150_buffer Buffer_t 8 , -1, 0, __literal150_bufferBytes
__literal151_buffer Buffer_t 10 , -1, 0, __literal151_bufferBytes
__literal152_buffer Buffer_t 10 , -1, 0, __literal152_bufferBytes
__literal153_buffer Buffer_t 9 , -1, 0, __literal153_bufferBytes
__literal154_buffer Buffer_t 15 , -1, 0, __literal154_bufferBytes
__literal155_buffer Buffer_t 6 , -1, 0, __literal155_bufferBytes
__literal156_buffer Buffer_t 4 , -1, 0, __literal156_bufferBytes
__literal157_buffer Buffer_t 5 , -1, 0, __literal157_bufferBytes
__literal158_buffer Buffer_t 6 , -1, 0, __literal158_bufferBytes
__literal159_buffer Buffer_t 8 , -1, 0, __literal159_bufferBytes
__literal160_buffer Buffer_t 7 , -1, 0, __literal160_bufferBytes
__literal161_buffer Buffer_t 7 , -1, 0, __literal161_bufferBytes
__literal162_buffer Buffer_t 12 , -1, 0, __literal162_bufferBytes
__literal163_buffer Buffer_t 8 , -1, 0, __literal163_bufferBytes
__literal164_buffer Buffer_t 16 , -1, 0, __literal164_bufferBytes
__literal165_buffer Buffer_t 18 , -1, 0, __literal165_bufferBytes
__literal166_buffer Buffer_t 5 , -1, 0, __literal166_bufferBytes
__literal167_buffer Buffer_t 13 , -1, 0, __literal167_bufferBytes
__literal168_buffer Buffer_t 28 , -1, 0, __literal168_bufferBytes
__literal169_buffer Buffer_t 19 , -1, 0, __literal169_bufferBytes
__literal170_buffer Buffer_t 10 , -1, 0, __literal170_bufferBytes
__literal171_buffer Buffer_t 9 , -1, 0, __literal171_bufferBytes
__literal172_buffer Buffer_t 5 , -1, 0, __literal172_bufferBytes
__literal173_buffer Buffer_t 33 , -1, 0, __literal173_bufferBytes
__literal174_buffer Buffer_t 12 , -1, 0, __literal174_bufferBytes
__literal175_buffer Buffer_t 11 , -1, 0, __literal175_bufferBytes
__literal176_buffer Buffer_t 2 , -1, 0, __literal176_bufferBytes
__literal177_buffer Buffer_t 13 , -1, 0, __literal177_bufferBytes
__literal178_buffer Buffer_t 12 , -1, 0, __literal178_bufferBytes
__literal179_buffer Buffer_t 22 , -1, 0, __literal179_bufferBytes
__literal180_buffer Buffer_t 20 , -1, 0, __literal180_bufferBytes
__literal181_buffer Buffer_t 8 , -1, 0, __literal181_bufferBytes
__literal182_buffer Buffer_t 7 , -1, 0, __literal182_bufferBytes
__literal183_buffer Buffer_t 11 , -1, 0, __literal183_bufferBytes
__literal184_buffer Buffer_t 20 , -1, 0, __literal184_bufferBytes
__literal185_buffer Buffer_t 18 , -1, 0, __literal185_bufferBytes
__literal186_buffer Buffer_t 13 , -1, 0, __literal186_bufferBytes
__literal187_buffer Buffer_t 26 , -1, 0, __literal187_bufferBytes
__literal188_buffer Buffer_t 25 , -1, 0, __literal188_bufferBytes
__literal189_buffer Buffer_t 11 , -1, 0, __literal189_bufferBytes
__literal190_buffer Buffer_t 17 , -1, 0, __literal190_bufferBytes
__literal191_buffer Buffer_t 44 , -1, 0, __literal191_bufferBytes
__literal192_buffer Buffer_t 38 , -1, 0, __literal192_bufferBytes
__literal193_buffer Buffer_t 33 , -1, 0, __literal193_bufferBytes
__literal194_buffer Buffer_t 10 , -1, 0, __literal194_bufferBytes
__literal195_buffer Buffer_t 8 , -1, 0, __literal195_bufferBytes
__literal196_buffer Buffer_t 5 , -1, 0, __literal196_bufferBytes
__literal197_buffer Buffer_t 16 , -1, 0, __literal197_bufferBytes
__literal198_buffer Buffer_t 5 , -1, 0, __literal198_bufferBytes
__literal199_buffer Buffer_t 18 , -1, 0, __literal199_bufferBytes
__literal200_buffer Buffer_t 16 , -1, 0, __literal200_bufferBytes
__literal201_buffer Buffer_t 43 , -1, 0, __literal201_bufferBytes
__literal202_buffer Buffer_t 7 , -1, 0, __literal202_bufferBytes
__literal203_buffer Buffer_t 17 , -1, 0, __literal203_bufferBytes
__literal204_buffer Buffer_t 24 , -1, 0, __literal204_bufferBytes
__literal205_buffer Buffer_t 2 , -1, 0, __literal205_bufferBytes
__literal206_buffer Buffer_t 11 , -1, 0, __literal206_bufferBytes
__literal207_buffer Buffer_t 7 , -1, 0, __literal207_bufferBytes
__literal208_buffer Buffer_t 15 , -1, 0, __literal208_bufferBytes
__literal209_buffer Buffer_t 14 , -1, 0, __literal209_bufferBytes
__literal210_buffer Buffer_t 4 , -1, 0, __literal210_bufferBytes
__literal211_buffer Buffer_t 7 , -1, 0, __literal211_bufferBytes
__literal212_buffer Buffer_t 25 , -1, 0, __literal212_bufferBytes
__literal213_buffer Buffer_t 4 , -1, 0, __literal213_bufferBytes
__literal214_buffer Buffer_t 19 , -1, 0, __literal214_bufferBytes
__literal215_buffer Buffer_t 12 , -1, 0, __literal215_bufferBytes
__literal216_buffer Buffer_t 16 , -1, 0, __literal216_bufferBytes
__literal217_buffer Buffer_t 7 , -1, 0, __literal217_bufferBytes
__literal218_buffer Buffer_t 19 , -1, 0, __literal218_bufferBytes
__literal219_buffer Buffer_t 5 , -1, 0, __literal219_bufferBytes
__literal220_buffer Buffer_t 24 , -1, 0, __literal220_bufferBytes
__literal221_buffer Buffer_t 12 , -1, 0, __literal221_bufferBytes
__literal222_buffer Buffer_t 31 , -1, 0, __literal222_bufferBytes
__literal223_buffer Buffer_t 7 , -1, 0, __literal223_bufferBytes
__literal224_buffer Buffer_t 9 , -1, 0, __literal224_bufferBytes
__literal225_buffer Buffer_t 3 , -1, 0, __literal225_bufferBytes
__literal226_buffer Buffer_t 2 , -1, 0, __literal226_bufferBytes
__literal227_buffer Buffer_t 2 , -1, 0, __literal227_bufferBytes
__literal228_buffer Buffer_t 10 , -1, 0, __literal228_bufferBytes
__literal229_buffer Buffer_t 11 , -1, 0, __literal229_bufferBytes
__literal230_buffer Buffer_t 11 , -1, 0, __literal230_bufferBytes
__literal231_buffer Buffer_t 13 , -1, 0, __literal231_bufferBytes
__literal232_buffer Buffer_t 19 , -1, 0, __literal232_bufferBytes
__literal233_buffer Buffer_t 5 , -1, 0, __literal233_bufferBytes
__literal234_buffer Buffer_t 14 , -1, 0, __literal234_bufferBytes
__literal235_buffer Buffer_t 24 , -1, 0, __literal235_bufferBytes
__literal236_buffer Buffer_t 7 , -1, 0, __literal236_bufferBytes
__literal237_buffer Buffer_t 5 , -1, 0, __literal237_bufferBytes
__literal238_buffer Buffer_t 5 , -1, 0, __literal238_bufferBytes
__literal239_buffer Buffer_t 20 , -1, 0, __literal239_bufferBytes
__literal240_buffer Buffer_t 52 , -1, 0, __literal240_bufferBytes
__literal241_buffer Buffer_t 19 , -1, 0, __literal241_bufferBytes
__literal242_buffer Buffer_t 6 , -1, 0, __literal242_bufferBytes
__literal243_buffer Buffer_t 18 , -1, 0, __literal243_bufferBytes
__literal244_buffer Buffer_t 8 , -1, 0, __literal244_bufferBytes
__literal245_buffer Buffer_t 29 , -1, 0, __literal245_bufferBytes
__literal246_buffer Buffer_t 40 , -1, 0, __literal246_bufferBytes
__literal247_buffer Buffer_t 15 , -1, 0, __literal247_bufferBytes
__literal248_buffer Buffer_t 6 , -1, 0, __literal248_bufferBytes
__literal249_buffer Buffer_t 34 , -1, 0, __literal249_bufferBytes
__literal250_buffer Buffer_t 3 , -1, 0, __literal250_bufferBytes
__literal251_buffer Buffer_t 12 , -1, 0, __literal251_bufferBytes
__literal252_buffer Buffer_t 18 , -1, 0, __literal252_bufferBytes
__literal253_buffer Buffer_t 56 , -1, 0, __literal253_bufferBytes
__literal254_buffer Buffer_t 17 , -1, 0, __literal254_bufferBytes
__literal255_buffer Buffer_t 9 , -1, 0, __literal255_bufferBytes
__literal256_buffer Buffer_t 10 , -1, 0, __literal256_bufferBytes
__literal257_buffer Buffer_t 2 , -1, 0, __literal257_bufferBytes
__literal258_buffer Buffer_t 22 , -1, 0, __literal258_bufferBytes
__literal259_buffer Buffer_t 9 , -1, 0, __literal259_bufferBytes
__literal260_buffer Buffer_t 22 , -1, 0, __literal260_bufferBytes
__literal261_buffer Buffer_t 16 , -1, 0, __literal261_bufferBytes
__literal262_buffer Buffer_t 17 , -1, 0, __literal262_bufferBytes
__literal263_buffer Buffer_t 18 , -1, 0, __literal263_bufferBytes
__literal264_buffer Buffer_t 10 , -1, 0, __literal264_bufferBytes
__literal265_buffer Buffer_t 13 , -1, 0, __literal265_bufferBytes
__literal266_buffer Buffer_t 14 , -1, 0, __literal266_bufferBytes
__literal267_buffer Buffer_t 14 , -1, 0, __literal267_bufferBytes
__literal268_buffer Buffer_t 14 , -1, 0, __literal268_bufferBytes
__literal269_buffer Buffer_t 16 , -1, 0, __literal269_bufferBytes
__literal270_buffer Buffer_t 16 , -1, 0, __literal270_bufferBytes
__literal271_buffer Buffer_t 14 , -1, 0, __literal271_bufferBytes
__literal272_buffer Buffer_t 15 , -1, 0, __literal272_bufferBytes
__literal273_buffer Buffer_t 15 , -1, 0, __literal273_bufferBytes
__literal274_buffer Buffer_t 15 , -1, 0, __literal274_bufferBytes
__literal275_buffer Buffer_t 13 , -1, 0, __literal275_bufferBytes
__literal276_buffer Buffer_t 14 , -1, 0, __literal276_bufferBytes
__literal277_buffer Buffer_t 14 , -1, 0, __literal277_bufferBytes
__literal278_buffer Buffer_t 15 , -1, 0, __literal278_bufferBytes
__literal279_buffer Buffer_t 15 , -1, 0, __literal279_bufferBytes
__literal280_buffer Buffer_t 15 , -1, 0, __literal280_bufferBytes
__literal281_buffer Buffer_t 17 , -1, 0, __literal281_bufferBytes
__literal282_buffer Buffer_t 9 , -1, 0, __literal282_bufferBytes
__literal283_buffer Buffer_t 4 , -1, 0, __literal283_bufferBytes
__literal284_buffer Buffer_t 4 , -1, 0, __literal284_bufferBytes
__literal285_buffer Buffer_t 13 , -1, 0, __literal285_bufferBytes
__literal286_buffer Buffer_t 11 , -1, 0, __literal286_bufferBytes
__literal287_buffer Buffer_t 7 , -1, 0, __literal287_bufferBytes
__literal288_buffer Buffer_t 6 , -1, 0, __literal288_bufferBytes
__literal289_buffer Buffer_t 7 , -1, 0, __literal289_bufferBytes
__literal290_buffer Buffer_t 7 , -1, 0, __literal290_bufferBytes
__literal291_buffer Buffer_t 5 , -1, 0, __literal291_bufferBytes
__literal292_buffer Buffer_t 4 , -1, 0, __literal292_bufferBytes
__literal293_buffer Buffer_t 4 , -1, 0, __literal293_bufferBytes
__literal294_buffer Buffer_t 4 , -1, 0, __literal294_bufferBytes
__literal295_buffer Buffer_t 7 , -1, 0, __literal295_bufferBytes
__literal296_buffer Buffer_t 24 , -1, 0, __literal296_bufferBytes
__literal297_buffer Buffer_t 15 , -1, 0, __literal297_bufferBytes
__literal298_buffer Buffer_t 30 , -1, 0, __literal298_bufferBytes
__literal299_buffer Buffer_t 20 , -1, 0, __literal299_bufferBytes
__literal300_buffer Buffer_t 8 , -1, 0, __literal300_bufferBytes
__literal301_buffer Buffer_t 10 , -1, 0, __literal301_bufferBytes
__literal302_buffer Buffer_t 10 , -1, 0, __literal302_bufferBytes
__literal303_buffer Buffer_t 28 , -1, 0, __literal303_bufferBytes
__literal304_buffer Buffer_t 20 , -1, 0, __literal304_bufferBytes
__literal305_buffer Buffer_t 6 , -1, 0, __literal305_bufferBytes
__literal306_buffer Buffer_t 7 , -1, 0, __literal306_bufferBytes
__literal307_buffer Buffer_t 23 , -1, 0, __literal307_bufferBytes
__literal308_buffer Buffer_t 18 , -1, 0, __literal308_bufferBytes
__literal309_buffer Buffer_t 8 , -1, 0, __literal309_bufferBytes
__literal310_buffer Buffer_t 23 , -1, 0, __literal310_bufferBytes
__literal311_buffer Buffer_t 11 , -1, 0, __literal311_bufferBytes
__literal312_buffer Buffer_t 10 , -1, 0, __literal312_bufferBytes
__literal313_buffer Buffer_t 4 , -1, 0, __literal313_bufferBytes
__literal314_buffer Buffer_t 46 , -1, 0, __literal314_bufferBytes
__literal315_buffer Buffer_t 2 , -1, 0, __literal315_bufferBytes
__literal316_buffer Buffer_t 7 , -1, 0, __literal316_bufferBytes
__literal317_buffer Buffer_t 6 , -1, 0, __literal317_bufferBytes
__literal318_buffer Buffer_t 20 , -1, 0, __literal318_bufferBytes
__literal319_buffer Buffer_t 30 , -1, 0, __literal319_bufferBytes
__literal320_buffer Buffer_t 27 , -1, 0, __literal320_bufferBytes
__literal321_buffer Buffer_t 4 , -1, 0, __literal321_bufferBytes
__literal322_buffer Buffer_t 33 , -1, 0, __literal322_bufferBytes
__literal323_buffer Buffer_t 4 , -1, 0, __literal323_bufferBytes
__literal324_buffer Buffer_t 4 , -1, 0, __literal324_bufferBytes
__literal325_buffer Buffer_t 33 , -1, 0, __literal325_bufferBytes
__literal326_buffer Buffer_t 31 , -1, 0, __literal326_bufferBytes
__literal327_buffer Buffer_t 14 , -1, 0, __literal327_bufferBytes
__literal328_buffer Buffer_t 17 , -1, 0, __literal328_bufferBytes
__literal329_buffer Buffer_t 6 , -1, 0, __literal329_bufferBytes
__literal330_buffer Buffer_t 72 , -1, 0, __literal330_bufferBytes
__literal331_buffer Buffer_t 64 , -1, 0, __literal331_bufferBytes
__literal332_buffer Buffer_t 25 , -1, 0, __literal332_bufferBytes
__literal333_buffer Buffer_t 27 , -1, 0, __literal333_bufferBytes
__literal334_buffer Buffer_t 25 , -1, 0, __literal334_bufferBytes
__literal335_buffer Buffer_t 25 , -1, 0, __literal335_bufferBytes
__literal336_buffer Buffer_t 28 , -1, 0, __literal336_bufferBytes
__literal337_buffer Buffer_t 30 , -1, 0, __literal337_bufferBytes
__literal338_buffer Buffer_t 19 , -1, 0, __literal338_bufferBytes
__literal339_buffer Buffer_t 24 , -1, 0, __literal339_bufferBytes
__literal340_buffer Buffer_t 36 , -1, 0, __literal340_bufferBytes
__literal341_buffer Buffer_t 25 , -1, 0, __literal341_bufferBytes
__literal342_buffer Buffer_t 15 , -1, 0, __literal342_bufferBytes
__literal343_buffer Buffer_t 25 , -1, 0, __literal343_bufferBytes
__literal344_buffer Buffer_t 35 , -1, 0, __literal344_bufferBytes
__literal345_buffer Buffer_t 32 , -1, 0, __literal345_bufferBytes
__literal346_buffer Buffer_t 22 , -1, 0, __literal346_bufferBytes
__literal347_buffer Buffer_t 16 , -1, 0, __literal347_bufferBytes
__literal348_buffer Buffer_t 12 , -1, 0, __literal348_bufferBytes
__literal349_buffer Buffer_t 16 , -1, 0, __literal349_bufferBytes
__literal350_buffer Buffer_t 29 , -1, 0, __literal350_bufferBytes
__literal351_buffer Buffer_t 19 , -1, 0, __literal351_bufferBytes
__literal352_buffer Buffer_t 14 , -1, 0, __literal352_bufferBytes
__literal353_buffer Buffer_t 9 , -1, 0, __literal353_bufferBytes
__literal354_buffer Buffer_t 9 , -1, 0, __literal354_bufferBytes
__literal355_buffer Buffer_t 17 , -1, 0, __literal355_bufferBytes
__literal356_buffer Buffer_t 23 , -1, 0, __literal356_bufferBytes
__literal357_buffer Buffer_t 33 , -1, 0, __literal357_bufferBytes
__literal358_buffer Buffer_t 9 , -1, 0, __literal358_bufferBytes
__literal359_buffer Buffer_t 23 , -1, 0, __literal359_bufferBytes
__literal360_buffer Buffer_t 12 , -1, 0, __literal360_bufferBytes
__literal361_buffer Buffer_t 16 , -1, 0, __literal361_bufferBytes
__literal362_buffer Buffer_t 46 , -1, 0, __literal362_bufferBytes
__literal363_buffer Buffer_t 5 , -1, 0, __literal363_bufferBytes
__literal364_buffer Buffer_t 62 , -1, 0, __literal364_bufferBytes
__literal365_buffer Buffer_t 5 , -1, 0, __literal365_bufferBytes
__literal366_buffer Buffer_t 8 , -1, 0, __literal366_bufferBytes
__literal367_buffer Buffer_t 10 , -1, 0, __literal367_bufferBytes
__literal368_buffer Buffer_t 10 , -1, 0, __literal368_bufferBytes
__literal369_buffer Buffer_t 13 , -1, 0, __literal369_bufferBytes
__literal370_buffer Buffer_t 11 , -1, 0, __literal370_bufferBytes
__literal371_buffer Buffer_t 14 , -1, 0, __literal371_bufferBytes
__literal372_buffer Buffer_t 7 , -1, 0, __literal372_bufferBytes
__literal373_buffer Buffer_t 9 , -1, 0, __literal373_bufferBytes
__literal374_buffer Buffer_t 10 , -1, 0, __literal374_bufferBytes
__literal375_buffer Buffer_t 9 , -1, 0, __literal375_bufferBytes
__literal376_buffer Buffer_t 10 , -1, 0, __literal376_bufferBytes
__literal377_buffer Buffer_t 13 , -1, 0, __literal377_bufferBytes
__literal378_buffer Buffer_t 11 , -1, 0, __literal378_bufferBytes
__literal379_buffer Buffer_t 12 , -1, 0, __literal379_bufferBytes
__literal380_buffer Buffer_t 15 , -1, 0, __literal380_bufferBytes
__literal381_buffer Buffer_t 9 , -1, 0, __literal381_bufferBytes
__literal382_buffer Buffer_t 12 , -1, 0, __literal382_bufferBytes
__literal383_buffer Buffer_t 15 , -1, 0, __literal383_bufferBytes
__literal384_buffer Buffer_t 18 , -1, 0, __literal384_bufferBytes
__literal385_buffer Buffer_t 10 , -1, 0, __literal385_bufferBytes
__literal386_buffer Buffer_t 10 , -1, 0, __literal386_bufferBytes
__literal387_buffer Buffer_t 8 , -1, 0, __literal387_bufferBytes
__literal388_buffer Buffer_t 10 , -1, 0, __literal388_bufferBytes
__literal389_buffer Buffer_t 9 , -1, 0, __literal389_bufferBytes
__literal390_buffer Buffer_t 30 , -1, 0, __literal390_bufferBytes
__literal391_buffer Buffer_t 26 , -1, 0, __literal391_bufferBytes
__literal392_buffer Buffer_t 18 , -1, 0, __literal392_bufferBytes
__literal393_buffer Buffer_t 20 , -1, 0, __literal393_bufferBytes
__literal394_buffer Buffer_t 28 , -1, 0, __literal394_bufferBytes
__literal395_buffer Buffer_t 20 , -1, 0, __literal395_bufferBytes
__literal396_buffer Buffer_t 13 , -1, 0, __literal396_bufferBytes
__literal397_buffer Buffer_t 16 , -1, 0, __literal397_bufferBytes
__literal398_buffer Buffer_t 16 , -1, 0, __literal398_bufferBytes
__literal399_buffer Buffer_t 27 , -1, 0, __literal399_bufferBytes
__literal400_buffer Buffer_t 18 , -1, 0, __literal400_bufferBytes
__literal401_buffer Buffer_t 15 , -1, 0, __literal401_bufferBytes
__literal402_buffer Buffer_t 19 , -1, 0, __literal402_bufferBytes
__literal403_buffer Buffer_t 12 , -1, 0, __literal403_bufferBytes
__literal404_buffer Buffer_t 18 , -1, 0, __literal404_bufferBytes
__literal405_buffer Buffer_t 14 , -1, 0, __literal405_bufferBytes
__literal406_buffer Buffer_t 7 , -1, 0, __literal406_bufferBytes
__literal407_buffer Buffer_t 12 , -1, 0, __literal407_bufferBytes
__literal408_buffer Buffer_t 2 , -1, 0, __literal408_bufferBytes
__literal409_buffer Buffer_t 3 , -1, 0, __literal409_bufferBytes
__literal410_buffer Buffer_t 3 , -1, 0, __literal410_bufferBytes
__literal411_buffer Buffer_t 2 , -1, 0, __literal411_bufferBytes
__literal412_buffer Buffer_t 3 , -1, 0, __literal412_bufferBytes
__literal413_buffer Buffer_t 6 , -1, 0, __literal413_bufferBytes
__literal414_buffer Buffer_t 7 , -1, 0, __literal414_bufferBytes
__literal415_buffer Buffer_t 7 , -1, 0, __literal415_bufferBytes
__literal416_buffer Buffer_t 9 , -1, 0, __literal416_bufferBytes
__literal417_buffer Buffer_t 8 , -1, 0, __literal417_bufferBytes
__literal418_buffer Buffer_t 10 , -1, 0, __literal418_bufferBytes
__literal419_buffer Buffer_t 4 , -1, 0, __literal419_bufferBytes
__literal420_buffer Buffer_t 10 , -1, 0, __literal420_bufferBytes
__literal421_buffer Buffer_t 12 , -1, 0, __literal421_bufferBytes
__literal422_buffer Buffer_t 5 , -1, 0, __literal422_bufferBytes
__literal423_buffer Buffer_t 4 , -1, 0, __literal423_bufferBytes
__literal424_buffer Buffer_t 5 , -1, 0, __literal424_bufferBytes
__literal425_buffer Buffer_t 6 , -1, 0, __literal425_bufferBytes
__literal426_buffer Buffer_t 8 , -1, 0, __literal426_bufferBytes
__literal427_buffer Buffer_t 8 , -1, 0, __literal427_bufferBytes
__literal428_buffer Buffer_t 12 , -1, 0, __literal428_bufferBytes
__literal429_buffer Buffer_t 5 , -1, 0, __literal429_bufferBytes
__literal430_buffer Buffer_t 10 , -1, 0, __literal430_bufferBytes
__literal431_buffer Buffer_t 6 , -1, 0, __literal431_bufferBytes
__literal432_buffer Buffer_t 5 , -1, 0, __literal432_bufferBytes
__literal433_buffer Buffer_t 7 , -1, 0, __literal433_bufferBytes
__literal434_buffer Buffer_t 9 , -1, 0, __literal434_bufferBytes
__literal435_buffer Buffer_t 5 , -1, 0, __literal435_bufferBytes
__literal436_buffer Buffer_t 5 , -1, 0, __literal436_bufferBytes
__literal437_buffer Buffer_t 5 , -1, 0, __literal437_bufferBytes
__literal438_buffer Buffer_t 5 , -1, 0, __literal438_bufferBytes
__literal439_buffer Buffer_t 7 , -1, 0, __literal439_bufferBytes
__literal440_buffer Buffer_t 12 , -1, 0, __literal440_bufferBytes
__literal441_buffer Buffer_t 2 , -1, 0, __literal441_bufferBytes
__literal442_buffer Buffer_t 2 , -1, 0, __literal442_bufferBytes
__literal443_buffer Buffer_t 4 , -1, 0, __literal443_bufferBytes
__literal444_buffer Buffer_t 3 , -1, 0, __literal444_bufferBytes
__literal445_buffer Buffer_t 3 , -1, 0, __literal445_bufferBytes
__literal446_buffer Buffer_t 5 , -1, 0, __literal446_bufferBytes
__literal447_buffer Buffer_t 2 , -1, 0, __literal447_bufferBytes
__literal448_buffer Buffer_t 3 , -1, 0, __literal448_bufferBytes
__literal449_buffer Buffer_t 2 , -1, 0, __literal449_bufferBytes
__literal450_buffer Buffer_t 3 , -1, 0, __literal450_bufferBytes
__literal451_buffer Buffer_t 19 , -1, 0, __literal451_bufferBytes
__literal452_buffer Buffer_t 137 , -1, 0, __literal452_bufferBytes
__literal453_buffer Buffer_t 2 , -1, 0, __literal453_bufferBytes
__literal454_buffer Buffer_t 5 , -1, 0, __literal454_bufferBytes
__literal455_buffer Buffer_t 5 , -1, 0, __literal455_bufferBytes
__literal456_buffer Buffer_t 6 , -1, 0, __literal456_bufferBytes
__literal457_buffer Buffer_t 11 , -1, 0, __literal457_bufferBytes
__literal458_buffer Buffer_t 6 , -1, 0, __literal458_bufferBytes
__literal459_buffer Buffer_t 9 , -1, 0, __literal459_bufferBytes
__literal460_buffer Buffer_t 34 , -1, 0, __literal460_bufferBytes
__literal461_buffer Buffer_t 10 , -1, 0, __literal461_bufferBytes
__literal462_buffer Buffer_t 4 , -1, 0, __literal462_bufferBytes
__literal463_buffer Buffer_t 15 , -1, 0, __literal463_bufferBytes
__literal464_buffer Buffer_t 19 , -1, 0, __literal464_bufferBytes
__literal465_buffer Buffer_t 23 , -1, 0, __literal465_bufferBytes
__literal466_buffer Buffer_t 50 , -1, 0, __literal466_bufferBytes
__literal467_buffer Buffer_t 9 , -1, 0, __literal467_bufferBytes
__literal468_buffer Buffer_t 11 , -1, 0, __literal468_bufferBytes
__literal469_buffer Buffer_t 7 , -1, 0, __literal469_bufferBytes
__literal470_buffer Buffer_t 6 , -1, 0, __literal470_bufferBytes
__literal471_buffer Buffer_t 13 , -1, 0, __literal471_bufferBytes
__literal472_buffer Buffer_t 16 , -1, 0, __literal472_bufferBytes
__literal473_buffer Buffer_t 13 , -1, 0, __literal473_bufferBytes
__literal474_buffer Buffer_t 5 , -1, 0, __literal474_bufferBytes
__literal475_buffer Buffer_t 2 , -1, 0, __literal475_bufferBytes
__literal476_buffer Buffer_t 13 , -1, 0, __literal476_bufferBytes
__literal477_buffer Buffer_t 15 , -1, 0, __literal477_bufferBytes
__literal478_buffer Buffer_t 18 , -1, 0, __literal478_bufferBytes
__literal479_buffer Buffer_t 21 , -1, 0, __literal479_bufferBytes
__literal480_buffer Buffer_t 20 , -1, 0, __literal480_bufferBytes
__literal481_buffer Buffer_t 18 , -1, 0, __literal481_bufferBytes
__literal482_buffer Buffer_t 47 , -1, 0, __literal482_bufferBytes
__literal483_buffer Buffer_t 46 , -1, 0, __literal483_bufferBytes
__literal484_buffer Buffer_t 40 , -1, 0, __literal484_bufferBytes
__literal485_buffer Buffer_t 42 , -1, 0, __literal485_bufferBytes
__literal486_buffer Buffer_t 40 , -1, 0, __literal486_bufferBytes
__literal487_buffer Buffer_t 41 , -1, 0, __literal487_bufferBytes
__literal488_buffer Buffer_t 40 , -1, 0, __literal488_bufferBytes
__literal489_buffer Buffer_t 49 , -1, 0, __literal489_bufferBytes
__literal490_buffer Buffer_t 45 , -1, 0, __literal490_bufferBytes
__literal491_buffer Buffer_t 37 , -1, 0, __literal491_bufferBytes
__literal492_buffer Buffer_t 45 , -1, 0, __literal492_bufferBytes
__literal493_buffer Buffer_t 42 , -1, 0, __literal493_bufferBytes
__literal494_buffer Buffer_t 36 , -1, 0, __literal494_bufferBytes
__literal495_buffer Buffer_t 36 , -1, 0, __literal495_bufferBytes
__literal496_buffer Buffer_t 43 , -1, 0, __literal496_bufferBytes
__literal497_buffer Buffer_t 36 , -1, 0, __literal497_bufferBytes
__literal498_buffer Buffer_t 36 , -1, 0, __literal498_bufferBytes
__literal499_buffer Buffer_t 36 , -1, 0, __literal499_bufferBytes
__literal500_buffer Buffer_t 37 , -1, 0, __literal500_bufferBytes
__literal501_buffer Buffer_t 42 , -1, 0, __literal501_bufferBytes
__literal502_buffer Buffer_t 43 , -1, 0, __literal502_bufferBytes
__literal503_buffer Buffer_t 42 , -1, 0, __literal503_bufferBytes
__literal504_buffer Buffer_t 42 , -1, 0, __literal504_bufferBytes
__literal505_buffer Buffer_t 42 , -1, 0, __literal505_bufferBytes
__literal506_buffer Buffer_t 42 , -1, 0, __literal506_bufferBytes
__literal507_buffer Buffer_t 40 , -1, 0, __literal507_bufferBytes
__literal508_buffer Buffer_t 39 , -1, 0, __literal508_bufferBytes
__literal509_buffer Buffer_t 46 , -1, 0, __literal509_bufferBytes
__literal510_buffer Buffer_t 44 , -1, 0, __literal510_bufferBytes
__literal511_buffer Buffer_t 45 , -1, 0, __literal511_bufferBytes
__literal512_buffer Buffer_t 43 , -1, 0, __literal512_bufferBytes
__literal513_buffer Buffer_t 52 , -1, 0, __literal513_bufferBytes
__literal514_buffer Buffer_t 50 , -1, 0, __literal514_bufferBytes
__literal515_buffer Buffer_t 45 , -1, 0, __literal515_bufferBytes
__literal516_buffer Buffer_t 40 , -1, 0, __literal516_bufferBytes
__literal517_buffer Buffer_t 49 , -1, 0, __literal517_bufferBytes
__literal518_buffer Buffer_t 43 , -1, 0, __literal518_bufferBytes
__literal519_buffer Buffer_t 48 , -1, 0, __literal519_bufferBytes
__literal520_buffer Buffer_t 45 , -1, 0, __literal520_bufferBytes
__literal521_buffer Buffer_t 48 , -1, 0, __literal521_bufferBytes
__literal522_buffer Buffer_t 39 , -1, 0, __literal522_bufferBytes
__literal523_buffer Buffer_t 56 , -1, 0, __literal523_bufferBytes
__literal524_buffer Buffer_t 55 , -1, 0, __literal524_bufferBytes
__literal525_buffer Buffer_t 47 , -1, 0, __literal525_bufferBytes
__literal526_buffer Buffer_t 49 , -1, 0, __literal526_bufferBytes
__literal527_buffer Buffer_t 46 , -1, 0, __literal527_bufferBytes
__literal528_buffer Buffer_t 50 , -1, 0, __literal528_bufferBytes
__literal529_buffer Buffer_t 19 , -1, 0, __literal529_bufferBytes
__literal530_buffer Buffer_t 4 , -1, 0, __literal530_bufferBytes
__literal531_buffer Buffer_t 18 , -1, 0, __literal531_bufferBytes
__literal532_buffer Buffer_t 22 , -1, 0, __literal532_bufferBytes
__literal533_buffer Buffer_t 16 , -1, 0, __literal533_bufferBytes
__literal534_buffer Buffer_t 30 , -1, 0, __literal534_bufferBytes
__literal535_buffer Buffer_t 12 , -1, 0, __literal535_bufferBytes
__literal536_buffer Buffer_t 36 , -1, 0, __literal536_bufferBytes
__literal537_buffer Buffer_t 19 , -1, 0, __literal537_bufferBytes
__literal538_buffer Buffer_t 29 , -1, 0, __literal538_bufferBytes
__literal539_buffer Buffer_t 35 , -1, 0, __literal539_bufferBytes
__literal540_buffer Buffer_t 12 , -1, 0, __literal540_bufferBytes
__literal541_buffer Buffer_t 14 , -1, 0, __literal541_bufferBytes
__literal542_buffer Buffer_t 16 , -1, 0, __literal542_bufferBytes
__literal543_buffer Buffer_t 13 , -1, 0, __literal543_bufferBytes
__literal544_buffer Buffer_t 7 , -1, 0, __literal544_bufferBytes
__literal545_buffer Buffer_t 30 , -1, 0, __literal545_bufferBytes
__literal546_buffer Buffer_t 8 , -1, 0, __literal546_bufferBytes
__literal547_buffer Buffer_t 24 , -1, 0, __literal547_bufferBytes
__literal548_buffer Buffer_t 15 , -1, 0, __literal548_bufferBytes
__literal549_buffer Buffer_t 23 , -1, 0, __literal549_bufferBytes
__literal550_buffer Buffer_t 6 , -1, 0, __literal550_bufferBytes
__literal551_buffer Buffer_t 22 , -1, 0, __literal551_bufferBytes
__literal552_buffer Buffer_t 24 , -1, 0, __literal552_bufferBytes
__literal553_buffer Buffer_t 38 , -1, 0, __literal553_bufferBytes
__literal554_buffer Buffer_t 8 , -1, 0, __literal554_bufferBytes
__literal555_buffer Buffer_t 16 , -1, 0, __literal555_bufferBytes
__literal556_buffer Buffer_t 25 , -1, 0, __literal556_bufferBytes
__literal557_buffer Buffer_t 4 , -1, 0, __literal557_bufferBytes
__literal558_buffer Buffer_t 8 , -1, 0, __literal558_bufferBytes
__literal559_buffer Buffer_t 30 , -1, 0, __literal559_bufferBytes
__literal560_buffer Buffer_t 4 , -1, 0, __literal560_bufferBytes
__literal561_buffer Buffer_t 48 , -1, 0, __literal561_bufferBytes
__literal562_buffer Buffer_t 22 , -1, 0, __literal562_bufferBytes
__literal563_buffer Buffer_t 5 , -1, 0, __literal563_bufferBytes
__literal564_buffer Buffer_t 5 , -1, 0, __literal564_bufferBytes
__literal565_buffer Buffer_t 22 , -1, 0, __literal565_bufferBytes
__literal566_buffer Buffer_t 29 , -1, 0, __literal566_bufferBytes
__literal567_buffer Buffer_t 13 , -1, 0, __literal567_bufferBytes
__literal568_buffer Buffer_t 17 , -1, 0, __literal568_bufferBytes
__literal569_buffer Buffer_t 11 , -1, 0, __literal569_bufferBytes
__literal570_buffer Buffer_t 6 , -1, 0, __literal570_bufferBytes
__literal571_buffer Buffer_t 13 , -1, 0, __literal571_bufferBytes
__literal572_buffer Buffer_t 21 , -1, 0, __literal572_bufferBytes
__literal573_buffer Buffer_t 19 , -1, 0, __literal573_bufferBytes
__literal574_buffer Buffer_t 14 , -1, 0, __literal574_bufferBytes
__literal575_buffer Buffer_t 8 , -1, 0, __literal575_bufferBytes
__literal576_buffer Buffer_t 4 , -1, 0, __literal576_bufferBytes
__literal577_buffer Buffer_t 13 , -1, 0, __literal577_bufferBytes
__literal578_buffer Buffer_t 5 , -1, 0, __literal578_bufferBytes
__literal579_buffer Buffer_t 5 , -1, 0, __literal579_bufferBytes
__literal580_buffer Buffer_t 11 , -1, 0, __literal580_bufferBytes
__literal581_buffer Buffer_t 5 , -1, 0, __literal581_bufferBytes
__literal582_buffer Buffer_t 4 , -1, 0, __literal582_bufferBytes
__literal583_buffer Buffer_t 4 , -1, 0, __literal583_bufferBytes
__literal584_buffer Buffer_t 4 , -1, 0, __literal584_bufferBytes
__literal585_buffer Buffer_t 12 , -1, 0, __literal585_bufferBytes
__literal586_buffer Buffer_t 4 , -1, 0, __literal586_bufferBytes
__literal587_buffer Buffer_t 4 , -1, 0, __literal587_bufferBytes
__literal588_buffer Buffer_t 4 , -1, 0, __literal588_bufferBytes
__literal589_buffer Buffer_t 5 , -1, 0, __literal589_bufferBytes
__literal590_buffer Buffer_t 13 , -1, 0, __literal590_bufferBytes
__literal591_buffer Buffer_t 11 , -1, 0, __literal591_bufferBytes
__literal592_buffer Buffer_t 10 , -1, 0, __literal592_bufferBytes
__literal593_buffer Buffer_t 11 , -1, 0, __literal593_bufferBytes
__literal594_buffer Buffer_t 22 , -1, 0, __literal594_bufferBytes
__literal595_buffer Buffer_t 13 , -1, 0, __literal595_bufferBytes
__literal596_buffer Buffer_t 12 , -1, 0, __literal596_bufferBytes
__literal597_buffer Buffer_t 21 , -1, 0, __literal597_bufferBytes
__literal598_buffer Buffer_t 22 , -1, 0, __literal598_bufferBytes
__literal599_buffer Buffer_t 24 , -1, 0, __literal599_bufferBytes
__literal600_buffer Buffer_t 23 , -1, 0, __literal600_bufferBytes
__literal601_buffer Buffer_t 7 , -1, 0, __literal601_bufferBytes
__literal602_buffer Buffer_t 7 , -1, 0, __literal602_bufferBytes
__literal603_buffer Buffer_t 7 , -1, 0, __literal603_bufferBytes
__literal604_buffer Buffer_t 7 , -1, 0, __literal604_bufferBytes
__literal605_buffer Buffer_t 7 , -1, 0, __literal605_bufferBytes
__literal606_buffer Buffer_t 7 , -1, 0, __literal606_bufferBytes
__literal607_buffer Buffer_t 8 , -1, 0, __literal607_bufferBytes
__literal608_buffer Buffer_t 27 , -1, 0, __literal608_bufferBytes
__literal609_buffer Buffer_t 11 , -1, 0, __literal609_bufferBytes
__literal610_buffer Buffer_t 9 , -1, 0, __literal610_bufferBytes
__literal611_buffer Buffer_t 12 , -1, 0, __literal611_bufferBytes
__literal612_buffer Buffer_t 10 , -1, 0, __literal612_bufferBytes
__literal613_buffer Buffer_t 54 , -1, 0, __literal613_bufferBytes
__literal614_buffer Buffer_t 14 , -1, 0, __literal614_bufferBytes
__literal615_buffer Buffer_t 13 , -1, 0, __literal615_bufferBytes
__literal616_buffer Buffer_t 12 , -1, 0, __literal616_bufferBytes
__literal617_buffer Buffer_t 30 , -1, 0, __literal617_bufferBytes
__literal618_buffer Buffer_t 12 , -1, 0, __literal618_bufferBytes
__literal619_buffer Buffer_t 10 , -1, 0, __literal619_bufferBytes
__literal620_buffer Buffer_t 10 , -1, 0, __literal620_bufferBytes
__literal621_buffer Buffer_t 7 , -1, 0, __literal621_bufferBytes
__literal622_buffer Buffer_t 17 , -1, 0, __literal622_bufferBytes
__literal623_buffer Buffer_t 9 , -1, 0, __literal623_bufferBytes
__literal624_buffer Buffer_t 10 , -1, 0, __literal624_bufferBytes
__literal625_buffer Buffer_t 11 , -1, 0, __literal625_bufferBytes
__literal626_buffer Buffer_t 25 , -1, 0, __literal626_bufferBytes
__literal627_buffer Buffer_t 15 , -1, 0, __literal627_bufferBytes
__literal628_buffer Buffer_t 13 , -1, 0, __literal628_bufferBytes
__literal629_buffer Buffer_t 11 , -1, 0, __literal629_bufferBytes
__literal630_buffer Buffer_t 13 , -1, 0, __literal630_bufferBytes
__literal631_buffer Buffer_t 10 , -1, 0, __literal631_bufferBytes
__literal632_buffer Buffer_t 10 , -1, 0, __literal632_bufferBytes
__literal633_buffer Buffer_t 12 , -1, 0, __literal633_bufferBytes
__literal634_buffer Buffer_t 30 , -1, 0, __literal634_bufferBytes
__literal635_buffer Buffer_t 7 , -1, 0, __literal635_bufferBytes
__literal636_buffer Buffer_t 17 , -1, 0, __literal636_bufferBytes
__literal637_buffer Buffer_t 51 , -1, 0, __literal637_bufferBytes
__literal638_buffer Buffer_t 6 , -1, 0, __literal638_bufferBytes
__literal639_buffer Buffer_t 13 , -1, 0, __literal639_bufferBytes
__literal640_buffer Buffer_t 6 , -1, 0, __literal640_bufferBytes
__literal641_buffer Buffer_t 4 , -1, 0, __literal641_bufferBytes
__literal642_buffer Buffer_t 2 , -1, 0, __literal642_bufferBytes
__literal643_buffer Buffer_t 2 , -1, 0, __literal643_bufferBytes
__literal644_buffer Buffer_t 10 , -1, 0, __literal644_bufferBytes
__literal645_buffer Buffer_t 11 , -1, 0, __literal645_bufferBytes
__literal646_buffer Buffer_t 5 , -1, 0, __literal646_bufferBytes
__literal647_buffer Buffer_t 10 , -1, 0, __literal647_bufferBytes
__literal648_buffer Buffer_t 9 , -1, 0, __literal648_bufferBytes
__literal649_buffer Buffer_t 15 , -1, 0, __literal649_bufferBytes
__literal650_buffer Buffer_t 2 , -1, 0, __literal650_bufferBytes
__literal651_buffer Buffer_t 4 , -1, 0, __literal651_bufferBytes
__literal652_buffer Buffer_t 18 , -1, 0, __literal652_bufferBytes
__literal653_buffer Buffer_t 20 , -1, 0, __literal653_bufferBytes
__literal654_buffer Buffer_t 16 , -1, 0, __literal654_bufferBytes
__literal655_buffer Buffer_t 7 , -1, 0, __literal655_bufferBytes
__literal656_buffer Buffer_t 4 , -1, 0, __literal656_bufferBytes
__literal657_buffer Buffer_t 7 , -1, 0, __literal657_bufferBytes
__literal658_buffer Buffer_t 6 , -1, 0, __literal658_bufferBytes
__literal659_buffer Buffer_t 7 , -1, 0, __literal659_bufferBytes
__literal660_buffer Buffer_t 8 , -1, 0, __literal660_bufferBytes
__literal661_buffer Buffer_t 4 , -1, 0, __literal661_bufferBytes
__literal662_buffer Buffer_t 4 , -1, 0, __literal662_bufferBytes
__literal663_buffer Buffer_t 3 , -1, 0, __literal663_bufferBytes
__literal664_buffer Buffer_t 13 , -1, 0, __literal664_bufferBytes
__literal665_buffer Buffer_t 13 , -1, 0, __literal665_bufferBytes
__literal666_buffer Buffer_t 26 , -1, 0, __literal666_bufferBytes
__literal667_buffer Buffer_t 14 , -1, 0, __literal667_bufferBytes
__literal668_buffer Buffer_t 29 , -1, 0, __literal668_bufferBytes
__literal669_buffer Buffer_t 3 , -1, 0, __literal669_bufferBytes
__literal670_buffer Buffer_t 4 , -1, 0, __literal670_bufferBytes
__literal671_buffer Buffer_t 31 , -1, 0, __literal671_bufferBytes
__literal672_buffer Buffer_t 8 , -1, 0, __literal672_bufferBytes
__literal673_buffer Buffer_t 30 , -1, 0, __literal673_bufferBytes
__literal674_buffer Buffer_t 29 , -1, 0, __literal674_bufferBytes
__literal675_buffer Buffer_t 29 , -1, 0, __literal675_bufferBytes
__literal676_buffer Buffer_t 28 , -1, 0, __literal676_bufferBytes
__literal677_buffer Buffer_t 2 , -1, 0, __literal677_bufferBytes
__literal678_buffer Buffer_t 2 , -1, 0, __literal678_bufferBytes
__literal679_buffer Buffer_t 30 , -1, 0, __literal679_bufferBytes
__literal680_buffer Buffer_t 39 , -1, 0, __literal680_bufferBytes
__literal681_buffer Buffer_t 13 , -1, 0, __literal681_bufferBytes
__literal682_buffer Buffer_t 9 , -1, 0, __literal682_bufferBytes
__literal683_buffer Buffer_t 9 , -1, 0, __literal683_bufferBytes
__literal684_buffer Buffer_t 9 , -1, 0, __literal684_bufferBytes
__literal685_buffer Buffer_t 13 , -1, 0, __literal685_bufferBytes
__literal686_buffer Buffer_t 5 , -1, 0, __literal686_bufferBytes
__literal687_buffer Buffer_t 4 , -1, 0, __literal687_bufferBytes
__literal688_buffer Buffer_t 3 , -1, 0, __literal688_bufferBytes
__literal689_buffer Buffer_t 16 , -1, 0, __literal689_bufferBytes
__literal690_buffer Buffer_t 3 , -1, 0, __literal690_bufferBytes
__literal691_buffer Buffer_t 3 , -1, 0, __literal691_bufferBytes
__literal692_buffer Buffer_t 3 , -1, 0, __literal692_bufferBytes
__literal693_buffer Buffer_t 13 , -1, 0, __literal693_bufferBytes
__literal694_buffer Buffer_t 14 , -1, 0, __literal694_bufferBytes
__literal695_buffer Buffer_t 22 , -1, 0, __literal695_bufferBytes
__literal696_buffer Buffer_t 11 , -1, 0, __literal696_bufferBytes
__literal697_buffer Buffer_t 14 , -1, 0, __literal697_bufferBytes
__literal698_buffer Buffer_t 5 , -1, 0, __literal698_bufferBytes
__literal699_buffer Buffer_t 19 , -1, 0, __literal699_bufferBytes
__literal700_buffer Buffer_t 19 , -1, 0, __literal700_bufferBytes
__literal701_buffer Buffer_t 6 , -1, 0, __literal701_bufferBytes
__literal702_buffer Buffer_t 7 , -1, 0, __literal702_bufferBytes
__literal703_buffer Buffer_t 19 , -1, 0, __literal703_bufferBytes
__literal704_buffer Buffer_t 19 , -1, 0, __literal704_bufferBytes
__literal705_buffer Buffer_t 15 , -1, 0, __literal705_bufferBytes
__literal706_buffer Buffer_t 17 , -1, 0, __literal706_bufferBytes
__literal707_buffer Buffer_t 17 , -1, 0, __literal707_bufferBytes
__literal708_buffer Buffer_t 3 , -1, 0, __literal708_bufferBytes
__literal709_buffer Buffer_t 7 , -1, 0, __literal709_bufferBytes
__literal710_buffer Buffer_t 19 , -1, 0, __literal710_bufferBytes
__literal711_buffer Buffer_t 19 , -1, 0, __literal711_bufferBytes
__literal712_buffer Buffer_t 4 , -1, 0, __literal712_bufferBytes
__literal713_buffer Buffer_t 14 , -1, 0, __literal713_bufferBytes
__literal714_buffer Buffer_t 3 , -1, 0, __literal714_bufferBytes
__literal715_buffer Buffer_t 19 , -1, 0, __literal715_bufferBytes
__literal716_buffer Buffer_t 19 , -1, 0, __literal716_bufferBytes
__literal717_buffer Buffer_t 23 , -1, 0, __literal717_bufferBytes
__literal718_buffer Buffer_t 29 , -1, 0, __literal718_bufferBytes
__literal719_buffer Buffer_t 28 , -1, 0, __literal719_bufferBytes
__literal720_buffer Buffer_t 6 , -1, 0, __literal720_bufferBytes
__literal721_buffer Buffer_t 24 , -1, 0, __literal721_bufferBytes
__literal722_buffer Buffer_t 18 , -1, 0, __literal722_bufferBytes
__literal723_buffer Buffer_t 21 , -1, 0, __literal723_bufferBytes
__literal724_buffer Buffer_t 81 , -1, 0, __literal724_bufferBytes
__literal725_buffer Buffer_t 47 , -1, 0, __literal725_bufferBytes
__literal726_buffer Buffer_t 41 , -1, 0, __literal726_bufferBytes
__literal727_buffer Buffer_t 31 , -1, 0, __literal727_bufferBytes
__literal728_buffer Buffer_t 22 , -1, 0, __literal728_bufferBytes
__literal729_buffer Buffer_t 2 , -1, 0, __literal729_bufferBytes
__literal730_buffer Buffer_t 5 , -1, 0, __literal730_bufferBytes
__literal731_buffer Buffer_t 6 , -1, 0, __literal731_bufferBytes
__literal732_buffer Buffer_t 13 , -1, 0, __literal732_bufferBytes
__literal733_buffer Buffer_t 12 , -1, 0, __literal733_bufferBytes
__literal734_buffer Buffer_t 23 , -1, 0, __literal734_bufferBytes
__literal735_buffer Buffer_t 11 , -1, 0, __literal735_bufferBytes
__literal736_buffer Buffer_t 12 , -1, 0, __literal736_bufferBytes
__literal737_buffer Buffer_t 11 , -1, 0, __literal737_bufferBytes
__literal738_buffer Buffer_t 13 , -1, 0, __literal738_bufferBytes
__literal739_buffer Buffer_t 14 , -1, 0, __literal739_bufferBytes
__literal740_buffer Buffer_t 7 , -1, 0, __literal740_bufferBytes
__literal741_buffer Buffer_t 13 , -1, 0, __literal741_bufferBytes
__literal742_buffer Buffer_t 13 , -1, 0, __literal742_bufferBytes
__literal743_buffer Buffer_t 31 , -1, 0, __literal743_bufferBytes
__literal744_buffer Buffer_t 11 , -1, 0, __literal744_bufferBytes
__literal745_buffer Buffer_t 8 , -1, 0, __literal745_bufferBytes
__literal746_buffer Buffer_t 15 , -1, 0, __literal746_bufferBytes
__literal747_buffer Buffer_t 29 , -1, 0, __literal747_bufferBytes
__literal748_buffer Buffer_t 14 , -1, 0, __literal748_bufferBytes
__literal749_buffer Buffer_t 31 , -1, 0, __literal749_bufferBytes
__literal750_buffer Buffer_t 10 , -1, 0, __literal750_bufferBytes
__literal751_buffer Buffer_t 10 , -1, 0, __literal751_bufferBytes
__literal752_buffer Buffer_t 10 , -1, 0, __literal752_bufferBytes
__literal753_buffer Buffer_t 19 , -1, 0, __literal753_bufferBytes
__literal754_buffer Buffer_t 10 , -1, 0, __literal754_bufferBytes
__literal755_buffer Buffer_t 19 , -1, 0, __literal755_bufferBytes
__literal756_buffer Buffer_t 10 , -1, 0, __literal756_bufferBytes
__literal757_buffer Buffer_t 20 , -1, 0, __literal757_bufferBytes
__literal758_buffer Buffer_t 7 , -1, 0, __literal758_bufferBytes
__literal759_buffer Buffer_t 10 , -1, 0, __literal759_bufferBytes
__literal760_buffer Buffer_t 26 , -1, 0, __literal760_bufferBytes
__literal761_buffer Buffer_t 26 , -1, 0, __literal761_bufferBytes
__literal762_buffer Buffer_t 23 , -1, 0, __literal762_bufferBytes
__literal763_buffer Buffer_t 20 , -1, 0, __literal763_bufferBytes
__literal764_buffer Buffer_t 11 , -1, 0, __literal764_bufferBytes
__literal765_buffer Buffer_t 20 , -1, 0, __literal765_bufferBytes
__literal766_buffer Buffer_t 20 , -1, 0, __literal766_bufferBytes
__literal767_buffer Buffer_t 6 , -1, 0, __literal767_bufferBytes
__literal768_buffer Buffer_t 11 , -1, 0, __literal768_bufferBytes
__literal769_buffer Buffer_t 15 , -1, 0, __literal769_bufferBytes
__literal770_buffer Buffer_t 13 , -1, 0, __literal770_bufferBytes
__literal771_buffer Buffer_t 2 , -1, 0, __literal771_bufferBytes
__literal772_buffer Buffer_t 13 , -1, 0, __literal772_bufferBytes
__literal773_buffer Buffer_t 3 , -1, 0, __literal773_bufferBytes
__literal774_buffer Buffer_t 13 , -1, 0, __literal774_bufferBytes
__literal775_buffer Buffer_t 13 , -1, 0, __literal775_bufferBytes
__literal776_buffer Buffer_t 13 , -1, 0, __literal776_bufferBytes
__literal777_buffer Buffer_t 2 , -1, 0, __literal777_bufferBytes
__literal778_buffer Buffer_t 13 , -1, 0, __literal778_bufferBytes
__literal779_buffer Buffer_t 10 , -1, 0, __literal779_bufferBytes
__literal780_buffer Buffer_t 10 , -1, 0, __literal780_bufferBytes
__literal781_buffer Buffer_t 10 , -1, 0, __literal781_bufferBytes
__literal782_buffer Buffer_t 19 , -1, 0, __literal782_bufferBytes
__literal783_buffer Buffer_t 10 , -1, 0, __literal783_bufferBytes
__literal784_buffer Buffer_t 19 , -1, 0, __literal784_bufferBytes
__literal785_buffer Buffer_t 10 , -1, 0, __literal785_bufferBytes
__literal786_buffer Buffer_t 20 , -1, 0, __literal786_bufferBytes
__literal787_buffer Buffer_t 7 , -1, 0, __literal787_bufferBytes
__literal788_buffer Buffer_t 10 , -1, 0, __literal788_bufferBytes
__literal789_buffer Buffer_t 26 , -1, 0, __literal789_bufferBytes
__literal790_buffer Buffer_t 26 , -1, 0, __literal790_bufferBytes
__literal791_buffer Buffer_t 11 , -1, 0, __literal791_bufferBytes
__literal792_buffer Buffer_t 20 , -1, 0, __literal792_bufferBytes
__literal793_buffer Buffer_t 20 , -1, 0, __literal793_bufferBytes
__literal794_buffer Buffer_t 6 , -1, 0, __literal794_bufferBytes
__literal795_buffer Buffer_t 11 , -1, 0, __literal795_bufferBytes
__literal796_buffer Buffer_t 15 , -1, 0, __literal796_bufferBytes
__literal797_buffer Buffer_t 13 , -1, 0, __literal797_bufferBytes
__literal798_buffer Buffer_t 13 , -1, 0, __literal798_bufferBytes
__literal799_buffer Buffer_t 13 , -1, 0, __literal799_bufferBytes
__literal800_buffer Buffer_t 13 , -1, 0, __literal800_bufferBytes
__literal801_buffer Buffer_t 13 , -1, 0, __literal801_bufferBytes
__literal802_buffer Buffer_t 13 , -1, 0, __literal802_bufferBytes
__literal803_buffer Buffer_t 12 , -1, 0, __literal803_bufferBytes
__literal804_buffer Buffer_t 45 , -1, 0, __literal804_bufferBytes
__literal805_buffer Buffer_t 12 , -1, 0, __literal805_bufferBytes
__literal806_buffer Buffer_t 16 , -1, 0, __literal806_bufferBytes
__literal807_buffer Buffer_t 22 , -1, 0, __literal807_bufferBytes
__literal808_buffer Buffer_t 16 , -1, 0, __literal808_bufferBytes
__literal809_buffer Buffer_t 12 , -1, 0, __literal809_bufferBytes
__literal810_buffer Buffer_t 22 , -1, 0, __literal810_bufferBytes
__literal811_buffer Buffer_t 12 , -1, 0, __literal811_bufferBytes
__literal812_buffer Buffer_t 22 , -1, 0, __literal812_bufferBytes
__literal813_buffer Buffer_t 12 , -1, 0, __literal813_bufferBytes
__literal814_buffer Buffer_t 22 , -1, 0, __literal814_bufferBytes
__literal815_buffer Buffer_t 13 , -1, 0, __literal815_bufferBytes
__literal816_buffer Buffer_t 26 , -1, 0, __literal816_bufferBytes
__literal817_buffer Buffer_t 26 , -1, 0, __literal817_bufferBytes
__literal818_buffer Buffer_t 22 , -1, 0, __literal818_bufferBytes
__literal819_buffer Buffer_t 20 , -1, 0, __literal819_bufferBytes
__literal820_buffer Buffer_t 15 , -1, 0, __literal820_bufferBytes
__literal821_buffer Buffer_t 15 , -1, 0, __literal821_bufferBytes
__literal822_buffer Buffer_t 15 , -1, 0, __literal822_bufferBytes
__literal823_buffer Buffer_t 15 , -1, 0, __literal823_bufferBytes
__literal824_buffer Buffer_t 3 , -1, 0, __literal824_bufferBytes
__literal825_buffer Buffer_t 15 , -1, 0, __literal825_bufferBytes
__literal826_buffer Buffer_t 15 , -1, 0, __literal826_bufferBytes
__literal827_buffer Buffer_t 3 , -1, 0, __literal827_bufferBytes
__literal828_buffer Buffer_t 12 , -1, 0, __literal828_bufferBytes
__literal829_buffer Buffer_t 18 , -1, 0, __literal829_bufferBytes
__literal830_buffer Buffer_t 12 , -1, 0, __literal830_bufferBytes
__literal831_buffer Buffer_t 11 , -1, 0, __literal831_bufferBytes
__literal832_buffer Buffer_t 18 , -1, 0, __literal832_bufferBytes
__literal833_buffer Buffer_t 12 , -1, 0, __literal833_bufferBytes
__literal834_buffer Buffer_t 18 , -1, 0, __literal834_bufferBytes
__literal835_buffer Buffer_t 12 , -1, 0, __literal835_bufferBytes
__literal836_buffer Buffer_t 18 , -1, 0, __literal836_bufferBytes
__literal837_buffer Buffer_t 12 , -1, 0, __literal837_bufferBytes
__literal838_buffer Buffer_t 18 , -1, 0, __literal838_bufferBytes
__literal839_buffer Buffer_t 13 , -1, 0, __literal839_bufferBytes
__literal840_buffer Buffer_t 27 , -1, 0, __literal840_bufferBytes
__literal841_buffer Buffer_t 15 , -1, 0, __literal841_bufferBytes
__literal842_buffer Buffer_t 14 , -1, 0, __literal842_bufferBytes
__literal843_buffer Buffer_t 24 , -1, 0, __literal843_bufferBytes
__literal844_buffer Buffer_t 15 , -1, 0, __literal844_bufferBytes
__literal845_buffer Buffer_t 14 , -1, 0, __literal845_bufferBytes
__literal846_buffer Buffer_t 24 , -1, 0, __literal846_bufferBytes
__literal847_buffer Buffer_t 15 , -1, 0, __literal847_bufferBytes
__literal848_buffer Buffer_t 24 , -1, 0, __literal848_bufferBytes
__literal849_buffer Buffer_t 15 , -1, 0, __literal849_bufferBytes
__literal850_buffer Buffer_t 24 , -1, 0, __literal850_bufferBytes
__literal851_buffer Buffer_t 15 , -1, 0, __literal851_bufferBytes
__literal852_buffer Buffer_t 15 , -1, 0, __literal852_bufferBytes
__literal853_buffer Buffer_t 25 , -1, 0, __literal853_bufferBytes
__literal854_buffer Buffer_t 21 , -1, 0, __literal854_bufferBytes
__literal855_buffer Buffer_t 13 , -1, 0, __literal855_bufferBytes
__literal856_buffer Buffer_t 19 , -1, 0, __literal856_bufferBytes
__literal857_buffer Buffer_t 14 , -1, 0, __literal857_bufferBytes
__literal858_buffer Buffer_t 11 , -1, 0, __literal858_bufferBytes
__literal859_buffer Buffer_t 19 , -1, 0, __literal859_bufferBytes
__literal860_buffer Buffer_t 18 , -1, 0, __literal860_bufferBytes
__literal861_buffer Buffer_t 17 , -1, 0, __literal861_bufferBytes
__literal862_buffer Buffer_t 3 , -1, 0, __literal862_bufferBytes
__literal863_buffer Buffer_t 18 , -1, 0, __literal863_bufferBytes
__literal864_buffer Buffer_t 17 , -1, 0, __literal864_bufferBytes
__literal865_buffer Buffer_t 3 , -1, 0, __literal865_bufferBytes
__literal866_buffer Buffer_t 18 , -1, 0, __literal866_bufferBytes
__literal867_buffer Buffer_t 3 , -1, 0, __literal867_bufferBytes
__literal868_buffer Buffer_t 18 , -1, 0, __literal868_bufferBytes
__literal869_buffer Buffer_t 3 , -1, 0, __literal869_bufferBytes
__literal870_buffer Buffer_t 18 , -1, 0, __literal870_bufferBytes
__literal871_buffer Buffer_t 18 , -1, 0, __literal871_bufferBytes
__literal872_buffer Buffer_t 11 , -1, 0, __literal872_bufferBytes
__literal873_buffer Buffer_t 11 , -1, 0, __literal873_bufferBytes
__literal874_buffer Buffer_t 16 , -1, 0, __literal874_bufferBytes
__literal875_buffer Buffer_t 5 , -1, 0, __literal875_bufferBytes
__literal876_buffer Buffer_t 16 , -1, 0, __literal876_bufferBytes
__literal877_buffer Buffer_t 16 , -1, 0, __literal877_bufferBytes
__literal878_buffer Buffer_t 16 , -1, 0, __literal878_bufferBytes
__literal879_buffer Buffer_t 16 , -1, 0, __literal879_bufferBytes
__literal880_buffer Buffer_t 16 , -1, 0, __literal880_bufferBytes
__literal881_buffer Buffer_t 16 , -1, 0, __literal881_bufferBytes
__literal882_buffer Buffer_t 16 , -1, 0, __literal882_bufferBytes
__literal883_buffer Buffer_t 16 , -1, 0, __literal883_bufferBytes
__literal884_buffer Buffer_t 16 , -1, 0, __literal884_bufferBytes
__literal885_buffer Buffer_t 16 , -1, 0, __literal885_bufferBytes
__literal886_buffer Buffer_t 16 , -1, 0, __literal886_bufferBytes
__literal887_buffer Buffer_t 16 , -1, 0, __literal887_bufferBytes
__literal888_buffer Buffer_t 19 , -1, 0, __literal888_bufferBytes
__literal889_buffer Buffer_t 20 , -1, 0, __literal889_bufferBytes
__literal890_buffer Buffer_t 5 , -1, 0, __literal890_bufferBytes
__literal891_buffer Buffer_t 17 , -1, 0, __literal891_bufferBytes
__literal892_buffer Buffer_t 17 , -1, 0, __literal892_bufferBytes
__literal893_buffer Buffer_t 16 , -1, 0, __literal893_bufferBytes
__literal894_buffer Buffer_t 11 , -1, 0, __literal894_bufferBytes
__literal895_buffer Buffer_t 11 , -1, 0, __literal895_bufferBytes
__literal896_buffer Buffer_t 15 , -1, 0, __literal896_bufferBytes
__literal897_buffer Buffer_t 17 , -1, 0, __literal897_bufferBytes
__literal898_buffer Buffer_t 16 , -1, 0, __literal898_bufferBytes
__literal899_buffer Buffer_t 15 , -1, 0, __literal899_bufferBytes
__literal900_buffer Buffer_t 10 , -1, 0, __literal900_bufferBytes
__literal901_buffer Buffer_t 10 , -1, 0, __literal901_bufferBytes
__literal902_buffer Buffer_t 14 , -1, 0, __literal902_bufferBytes
__literal903_buffer Buffer_t 14 , -1, 0, __literal903_bufferBytes
__literal904_buffer Buffer_t 16 , -1, 0, __literal904_bufferBytes
__literal905_buffer Buffer_t 14 , -1, 0, __literal905_bufferBytes
__literal906_buffer Buffer_t 18 , -1, 0, __literal906_bufferBytes
__literal907_buffer Buffer_t 18 , -1, 0, __literal907_bufferBytes
__literal908_buffer Buffer_t 18 , -1, 0, __literal908_bufferBytes
__literal909_buffer Buffer_t 5 , -1, 0, __literal909_bufferBytes
__literal910_buffer Buffer_t 18 , -1, 0, __literal910_bufferBytes
__literal911_buffer Buffer_t 6 , -1, 0, __literal911_bufferBytes
__literal912_buffer Buffer_t 18 , -1, 0, __literal912_bufferBytes
__literal913_buffer Buffer_t 5 , -1, 0, __literal913_bufferBytes
__literal914_buffer Buffer_t 18 , -1, 0, __literal914_bufferBytes
__literal915_buffer Buffer_t 6 , -1, 0, __literal915_bufferBytes
__literal916_buffer Buffer_t 22 , -1, 0, __literal916_bufferBytes
__literal917_buffer Buffer_t 30 , -1, 0, __literal917_bufferBytes
__literal918_buffer Buffer_t 11 , -1, 0, __literal918_bufferBytes
__literal919_buffer Buffer_t 10 , -1, 0, __literal919_bufferBytes
__literal920_buffer Buffer_t 12 , -1, 0, __literal920_bufferBytes
__literal921_buffer Buffer_t 28 , -1, 0, __literal921_bufferBytes
__literal922_buffer Buffer_t 46 , -1, 0, __literal922_bufferBytes
__literal923_buffer Buffer_t 10 , -1, 0, __literal923_bufferBytes
__literal924_buffer Buffer_t 13 , -1, 0, __literal924_bufferBytes
__literal925_buffer Buffer_t 12 , -1, 0, __literal925_bufferBytes
__literal926_buffer Buffer_t 27 , -1, 0, __literal926_bufferBytes
__literal927_buffer Buffer_t 11 , -1, 0, __literal927_bufferBytes
__literal928_buffer Buffer_t 19 , -1, 0, __literal928_bufferBytes
__literal929_buffer Buffer_t 43 , -1, 0, __literal929_bufferBytes
__literal930_buffer Buffer_t 4 , -1, 0, __literal930_bufferBytes
__literal931_buffer Buffer_t 23 , -1, 0, __literal931_bufferBytes
__literal932_buffer Buffer_t 18 , -1, 0, __literal932_bufferBytes
__literal933_buffer Buffer_t 12 , -1, 0, __literal933_bufferBytes
__literal934_buffer Buffer_t 15 , -1, 0, __literal934_bufferBytes
__literal935_buffer Buffer_t 14 , -1, 0, __literal935_bufferBytes
__literal936_buffer Buffer_t 48 , -1, 0, __literal936_bufferBytes
__literal937_buffer Buffer_t 12 , -1, 0, __literal937_bufferBytes
__literal938_buffer Buffer_t 20 , -1, 0, __literal938_bufferBytes
__literal939_buffer Buffer_t 21 , -1, 0, __literal939_bufferBytes
__literal940_buffer Buffer_t 34 , -1, 0, __literal940_bufferBytes
__literal941_buffer Buffer_t 22 , -1, 0, __literal941_bufferBytes
__literal942_buffer Buffer_t 25 , -1, 0, __literal942_bufferBytes
__literal943_buffer Buffer_t 9 , -1, 0, __literal943_bufferBytes
__literal944_buffer Buffer_t 22 , -1, 0, __literal944_bufferBytes
__literal945_buffer Buffer_t 25 , -1, 0, __literal945_bufferBytes
__literal946_buffer Buffer_t 8 , -1, 0, __literal946_bufferBytes
__literal947_buffer Buffer_t 35 , -1, 0, __literal947_bufferBytes
__literal948_buffer Buffer_t 20 , -1, 0, __literal948_bufferBytes
__literal949_buffer Buffer_t 22 , -1, 0, __literal949_bufferBytes
__literal950_buffer Buffer_t 24 , -1, 0, __literal950_bufferBytes
__literal951_buffer Buffer_t 34 , -1, 0, __literal951_bufferBytes
__literal952_buffer Buffer_t 22 , -1, 0, __literal952_bufferBytes
__literal953_buffer Buffer_t 50 , -1, 0, __literal953_bufferBytes
__literal954_buffer Buffer_t 19 , -1, 0, __literal954_bufferBytes
__literal955_buffer Buffer_t 22 , -1, 0, __literal955_bufferBytes
__literal956_buffer Buffer_t 50 , -1, 0, __literal956_bufferBytes
__literal957_buffer Buffer_t 19 , -1, 0, __literal957_bufferBytes
__literal958_buffer Buffer_t 13 , -1, 0, __literal958_bufferBytes
__literal959_buffer Buffer_t 13 , -1, 0, __literal959_bufferBytes
__literal960_buffer Buffer_t 35 , -1, 0, __literal960_bufferBytes
__literal961_buffer Buffer_t 23 , -1, 0, __literal961_bufferBytes
__literal962_buffer Buffer_t 8 , -1, 0, __literal962_bufferBytes
__literal963_buffer Buffer_t 46 , -1, 0, __literal963_bufferBytes
__literal964_buffer Buffer_t 22 , -1, 0, __literal964_bufferBytes
__literal965_buffer Buffer_t 46 , -1, 0, __literal965_bufferBytes
__literal966_buffer Buffer_t 22 , -1, 0, __literal966_bufferBytes
__literal967_buffer Buffer_t 24 , -1, 0, __literal967_bufferBytes
__literal968_buffer Buffer_t 44 , -1, 0, __literal968_bufferBytes
__literal969_buffer Buffer_t 20 , -1, 0, __literal969_bufferBytes
__literal970_buffer Buffer_t 9 , -1, 0, __literal970_bufferBytes
__literal971_buffer Buffer_t 23 , -1, 0, __literal971_bufferBytes
__literal972_buffer Buffer_t 7 , -1, 0, __literal972_bufferBytes
__literal973_buffer Buffer_t 21 , -1, 0, __literal973_bufferBytes
__literal974_buffer Buffer_t 7 , -1, 0, __literal974_bufferBytes
__literal975_buffer Buffer_t 24 , -1, 0, __literal975_bufferBytes
__literal976_buffer Buffer_t 21 , -1, 0, __literal976_bufferBytes
__literal977_buffer Buffer_t 7 , -1, 0, __literal977_bufferBytes
__literal978_buffer Buffer_t 6 , -1, 0, __literal978_bufferBytes
__literal979_buffer Buffer_t 16 , -1, 0, __literal979_bufferBytes
__literal980_buffer Buffer_t 16 , -1, 0, __literal980_bufferBytes
__literal981_buffer Buffer_t 26 , -1, 0, __literal981_bufferBytes
__literal982_buffer Buffer_t 24 , -1, 0, __literal982_bufferBytes
__literal983_buffer Buffer_t 24 , -1, 0, __literal983_bufferBytes
__literal984_buffer Buffer_t 13 , -1, 0, __literal984_bufferBytes
__literal985_buffer Buffer_t 8 , -1, 0, __literal985_bufferBytes
__literal986_buffer Buffer_t 17 , -1, 0, __literal986_bufferBytes
__literal987_buffer Buffer_t 18 , -1, 0, __literal987_bufferBytes
__literal988_buffer Buffer_t 40 , -1, 0, __literal988_bufferBytes
__literal989_buffer Buffer_t 7 , -1, 0, __literal989_bufferBytes
__literal990_buffer Buffer_t 13 , -1, 0, __literal990_bufferBytes
__literal991_buffer Buffer_t 26 , -1, 0, __literal991_bufferBytes
__literal992_buffer Buffer_t 26 , -1, 0, __literal992_bufferBytes
__literal993_buffer Buffer_t 36 , -1, 0, __literal993_bufferBytes
__literal994_buffer Buffer_t 32 , -1, 0, __literal994_bufferBytes
__literal995_buffer Buffer_t 12 , -1, 0, __literal995_bufferBytes
__literal996_buffer Buffer_t 11 , -1, 0, __literal996_bufferBytes
__literal997_buffer Buffer_t 24 , -1, 0, __literal997_bufferBytes
__literal998_buffer Buffer_t 40 , -1, 0, __literal998_bufferBytes
__literal999_buffer Buffer_t 10 , -1, 0, __literal999_bufferBytes
__literal1000_buffer Buffer_t 15 , -1, 0, __literal1000_bufferBytes
__literal1001_buffer Buffer_t 15 , -1, 0, __literal1001_bufferBytes
__literal1002_buffer Buffer_t 55 , -1, 0, __literal1002_bufferBytes
__literal1003_buffer Buffer_t 10 , -1, 0, __literal1003_bufferBytes
__literal1004_buffer Buffer_t 6 , -1, 0, __literal1004_bufferBytes
__literal1005_buffer Buffer_t 8 , -1, 0, __literal1005_bufferBytes
__literal1006_buffer Buffer_t 11 , -1, 0, __literal1006_bufferBytes
__literal1007_buffer Buffer_t 16 , -1, 0, __literal1007_bufferBytes
__literal1008_buffer Buffer_t 12 , -1, 0, __literal1008_bufferBytes
__literal1009_buffer Buffer_t 5 , -1, 0, __literal1009_bufferBytes
__literal1010_buffer Buffer_t 38 , -1, 0, __literal1010_bufferBytes
__literal1011_buffer Buffer_t 30 , -1, 0, __literal1011_bufferBytes
__literal1012_buffer Buffer_t 14 , -1, 0, __literal1012_bufferBytes
__literal1013_buffer Buffer_t 7 , -1, 0, __literal1013_bufferBytes
__literal1014_buffer Buffer_t 60 , -1, 0, __literal1014_bufferBytes
__literal1015_buffer Buffer_t 7 , -1, 0, __literal1015_bufferBytes
__literal1016_buffer Buffer_t 34 , -1, 0, __literal1016_bufferBytes
__literal1017_buffer Buffer_t 4 , -1, 0, __literal1017_bufferBytes
__literal1018_buffer Buffer_t 27 , -1, 0, __literal1018_bufferBytes
__literal1019_buffer Buffer_t 9 , -1, 0, __literal1019_bufferBytes
__literal1020_buffer Buffer_t 9 , -1, 0, __literal1020_bufferBytes
__literal1021_buffer Buffer_t 26 , -1, 0, __literal1021_bufferBytes
__literal1022_buffer Buffer_t 24 , -1, 0, __literal1022_bufferBytes
__literal1023_buffer Buffer_t 20 , -1, 0, __literal1023_bufferBytes
__literal1024_buffer Buffer_t 27 , -1, 0, __literal1024_bufferBytes
__literal1025_buffer Buffer_t 17 , -1, 0, __literal1025_bufferBytes
__literal1026_buffer Buffer_t 18 , -1, 0, __literal1026_bufferBytes
__literal1027_buffer Buffer_t 25 , -1, 0, __literal1027_bufferBytes
__literal1028_buffer Buffer_t 18 , -1, 0, __literal1028_bufferBytes
__literal1029_buffer Buffer_t 33 , -1, 0, __literal1029_bufferBytes
__literal1030_buffer Buffer_t 30 , -1, 0, __literal1030_bufferBytes
__literal1031_buffer Buffer_t 28 , -1, 0, __literal1031_bufferBytes
__literal1032_buffer Buffer_t 28 , -1, 0, __literal1032_bufferBytes
__literal1033_buffer Buffer_t 27 , -1, 0, __literal1033_bufferBytes
__literal1034_buffer Buffer_t 34 , -1, 0, __literal1034_bufferBytes
__literal1035_buffer Buffer_t 26 , -1, 0, __literal1035_bufferBytes
__literal1036_buffer Buffer_t 35 , -1, 0, __literal1036_bufferBytes
__literal1037_buffer Buffer_t 17 , -1, 0, __literal1037_bufferBytes
__literal1038_buffer Buffer_t 26 , -1, 0, __literal1038_bufferBytes
__literal1039_buffer Buffer_t 6 , -1, 0, __literal1039_bufferBytes
__literal1040_buffer Buffer_t 26 , -1, 0, __literal1040_bufferBytes
__literal1041_buffer Buffer_t 18 , -1, 0, __literal1041_bufferBytes
__literal1042_buffer Buffer_t 47 , -1, 0, __literal1042_bufferBytes
__literal1043_buffer Buffer_t 40 , -1, 0, __literal1043_bufferBytes
__literal1044_buffer Buffer_t 25 , -1, 0, __literal1044_bufferBytes
__literal1045_buffer Buffer_t 14 , -1, 0, __literal1045_bufferBytes
__literal1046_buffer Buffer_t 14 , -1, 0, __literal1046_bufferBytes
__literal1047_buffer Buffer_t 19 , -1, 0, __literal1047_bufferBytes
__literal1048_buffer Buffer_t 6 , -1, 0, __literal1048_bufferBytes
__literal1049_buffer Buffer_t 6 , -1, 0, __literal1049_bufferBytes
__literal1050_buffer Buffer_t 31 , -1, 0, __literal1050_bufferBytes
__literal1051_buffer Buffer_t 56 , -1, 0, __literal1051_bufferBytes
__literal1052_buffer Buffer_t 31 , -1, 0, __literal1052_bufferBytes
__literal1053_buffer Buffer_t 12 , -1, 0, __literal1053_bufferBytes
__literal1054_buffer Buffer_t 12 , -1, 0, __literal1054_bufferBytes
__literal1055_buffer Buffer_t 5 , -1, 0, __literal1055_bufferBytes
__literal1056_buffer Buffer_t 7 , -1, 0, __literal1056_bufferBytes
__literal1057_buffer Buffer_t 14 , -1, 0, __literal1057_bufferBytes
__literal1058_buffer Buffer_t 6 , -1, 0, __literal1058_bufferBytes
__literal1059_buffer Buffer_t 10 , -1, 0, __literal1059_bufferBytes
__literal1060_buffer Buffer_t 10 , -1, 0, __literal1060_bufferBytes
__literal1061_buffer Buffer_t 8 , -1, 0, __literal1061_bufferBytes
__literal1062_buffer Buffer_t 15 , -1, 0, __literal1062_bufferBytes
__literal1063_buffer Buffer_t 15 , -1, 0, __literal1063_bufferBytes
__literal1064_buffer Buffer_t 10 , -1, 0, __literal1064_bufferBytes
__literal1065_buffer Buffer_t 24 , -1, 0, __literal1065_bufferBytes
__literal1066_buffer Buffer_t 48 , -1, 0, __literal1066_bufferBytes
__literal1067_buffer Buffer_t 48 , -1, 0, __literal1067_bufferBytes
__literal1068_buffer Buffer_t 30 , -1, 0, __literal1068_bufferBytes
__literal1069_buffer Buffer_t 47 , -1, 0, __literal1069_bufferBytes
__literal1070_buffer Buffer_t 31 , -1, 0, __literal1070_bufferBytes
__literal1071_buffer Buffer_t 13 , -1, 0, __literal1071_bufferBytes
__literal1072_buffer Buffer_t 8 , -1, 0, __literal1072_bufferBytes
__literal1073_buffer Buffer_t 32 , -1, 0, __literal1073_bufferBytes
__literal1074_buffer Buffer_t 4 , -1, 0, __literal1074_bufferBytes
__literal1075_buffer Buffer_t 6 , -1, 0, __literal1075_bufferBytes
__literal1076_buffer Buffer_t 43 , -1, 0, __literal1076_bufferBytes
__literal1077_buffer Buffer_t 16 , -1, 0, __literal1077_bufferBytes
__literal1078_buffer Buffer_t 18 , -1, 0, __literal1078_bufferBytes
__literal1079_buffer Buffer_t 37 , -1, 0, __literal1079_bufferBytes
__literal1080_buffer Buffer_t 5 , -1, 0, __literal1080_bufferBytes
__literal1081_buffer Buffer_t 50 , -1, 0, __literal1081_bufferBytes
__literal1082_buffer Buffer_t 47 , -1, 0, __literal1082_bufferBytes
__literal1083_buffer Buffer_t 43 , -1, 0, __literal1083_bufferBytes
__literal1084_buffer Buffer_t 23 , -1, 0, __literal1084_bufferBytes
__literal1085_buffer Buffer_t 24 , -1, 0, __literal1085_bufferBytes
__literal1086_buffer Buffer_t 7 , -1, 0, __literal1086_bufferBytes
__literal1087_buffer Buffer_t 11 , -1, 0, __literal1087_bufferBytes
__literal1088_buffer Buffer_t 8 , -1, 0, __literal1088_bufferBytes
__literal1089_buffer Buffer_t 9 , -1, 0, __literal1089_bufferBytes
__literal1090_buffer Buffer_t 9 , -1, 0, __literal1090_bufferBytes
__literal1091_buffer Buffer_t 19 , -1, 0, __literal1091_bufferBytes
__literal1092_buffer Buffer_t 10 , -1, 0, __literal1092_bufferBytes
__literal1093_buffer Buffer_t 10 , -1, 0, __literal1093_bufferBytes
__literal1094_buffer Buffer_t 10 , -1, 0, __literal1094_bufferBytes
__literal1095_buffer Buffer_t 18 , -1, 0, __literal1095_bufferBytes
__literal1096_buffer Buffer_t 8 , -1, 0, __literal1096_bufferBytes
__literal1097_buffer Buffer_t 32 , -1, 0, __literal1097_bufferBytes
__literal1098_buffer Buffer_t 14 , -1, 0, __literal1098_bufferBytes
__literal1099_buffer Buffer_t 8 , -1, 0, __literal1099_bufferBytes
__literal1100_buffer Buffer_t 45 , -1, 0, __literal1100_bufferBytes
__literal1101_buffer Buffer_t 17 , -1, 0, __literal1101_bufferBytes
__literal1102_buffer Buffer_t 10 , -1, 0, __literal1102_bufferBytes
__literal1103_buffer Buffer_t 14 , -1, 0, __literal1103_bufferBytes
__literal1104_buffer Buffer_t 14 , -1, 0, __literal1104_bufferBytes
__literal1105_buffer Buffer_t 14 , -1, 0, __literal1105_bufferBytes
__literal1106_buffer Buffer_t 14 , -1, 0, __literal1106_bufferBytes
__literal1107_buffer Buffer_t 12 , -1, 0, __literal1107_bufferBytes
__literal1108_buffer Buffer_t 26 , -1, 0, __literal1108_bufferBytes
__literal1109_buffer Buffer_t 11 , -1, 0, __literal1109_bufferBytes
__literal1110_buffer Buffer_t 9 , -1, 0, __literal1110_bufferBytes
__literal1111_buffer Buffer_t 12 , -1, 0, __literal1111_bufferBytes
__literal1112_buffer Buffer_t 7 , -1, 0, __literal1112_bufferBytes
__literal1113_buffer Buffer_t 8 , -1, 0, __literal1113_bufferBytes
__literal1114_buffer Buffer_t 7 , -1, 0, __literal1114_bufferBytes
__literal1115_buffer Buffer_t 7 , -1, 0, __literal1115_bufferBytes
__literal1116_buffer Buffer_t 7 , -1, 0, __literal1116_bufferBytes
__literal1117_buffer Buffer_t 7 , -1, 0, __literal1117_bufferBytes
__literal1118_buffer Buffer_t 7 , -1, 0, __literal1118_bufferBytes
__literal1119_buffer Buffer_t 12 , -1, 0, __literal1119_bufferBytes
__literal1120_buffer Buffer_t 14 , -1, 0, __literal1120_bufferBytes
__literal1121_buffer Buffer_t 12 , -1, 0, __literal1121_bufferBytes
__literal1122_buffer Buffer_t 12 , -1, 0, __literal1122_bufferBytes
__literal1123_buffer Buffer_t 13 , -1, 0, __literal1123_bufferBytes
__literal1124_buffer Buffer_t 12 , -1, 0, __literal1124_bufferBytes
__literal1125_buffer Buffer_t 13 , -1, 0, __literal1125_bufferBytes
__literal1126_buffer Buffer_t 13 , -1, 0, __literal1126_bufferBytes
__literal1127_buffer Buffer_t 14 , -1, 0, __literal1127_bufferBytes
__literal1128_buffer Buffer_t 13 , -1, 0, __literal1128_bufferBytes
__literal1129_buffer Buffer_t 15 , -1, 0, __literal1129_bufferBytes
__literal1130_buffer Buffer_t 13 , -1, 0, __literal1130_bufferBytes
__literal1131_buffer Buffer_t 5 , -1, 0, __literal1131_bufferBytes
__literal1132_buffer Buffer_t 13 , -1, 0, __literal1132_bufferBytes
__literal1133_buffer Buffer_t 14 , -1, 0, __literal1133_bufferBytes
__literal1134_buffer Buffer_t 6 , -1, 0, __literal1134_bufferBytes
__literal1135_buffer Buffer_t 12 , -1, 0, __literal1135_bufferBytes
__literal1136_buffer Buffer_t 5 , -1, 0, __literal1136_bufferBytes
__literal1137_buffer Buffer_t 10 , -1, 0, __literal1137_bufferBytes
__literal1138_buffer Buffer_t 5 , -1, 0, __literal1138_bufferBytes
__literal1139_buffer Buffer_t 7 , -1, 0, __literal1139_bufferBytes
__literal1140_buffer Buffer_t 4 , -1, 0, __literal1140_bufferBytes
__literal1141_buffer Buffer_t 5 , -1, 0, __literal1141_bufferBytes
__literal1142_buffer Buffer_t 7 , -1, 0, __literal1142_bufferBytes
__literal1143_buffer Buffer_t 15 , -1, 0, __literal1143_bufferBytes
__literal1144_buffer Buffer_t 10 , -1, 0, __literal1144_bufferBytes
__literal1145_buffer Buffer_t 10 , -1, 0, __literal1145_bufferBytes
__literal1146_buffer Buffer_t 10 , -1, 0, __literal1146_bufferBytes
__literal1147_buffer Buffer_t 9 , -1, 0, __literal1147_bufferBytes
__literal1148_buffer Buffer_t 18 , -1, 0, __literal1148_bufferBytes
__literal1149_buffer Buffer_t 15 , -1, 0, __literal1149_bufferBytes
__literal1150_buffer Buffer_t 11 , -1, 0, __literal1150_bufferBytes
__literal1151_buffer Buffer_t 13 , -1, 0, __literal1151_bufferBytes
__literal1152_buffer Buffer_t 7 , -1, 0, __literal1152_bufferBytes
__literal1153_buffer Buffer_t 63 , -1, 0, __literal1153_bufferBytes
__literal1154_buffer Buffer_t 12 , -1, 0, __literal1154_bufferBytes
__literal1155_buffer Buffer_t 3 , -1, 0, __literal1155_bufferBytes
__literal1156_buffer Buffer_t 9 , -1, 0, __literal1156_bufferBytes
__literal1157_buffer Buffer_t 42 , -1, 0, __literal1157_bufferBytes
__literal1158_buffer Buffer_t 48 , -1, 0, __literal1158_bufferBytes
__literal1159_buffer Buffer_t 6 , -1, 0, __literal1159_bufferBytes
__literal1160_buffer Buffer_t 4 , -1, 0, __literal1160_bufferBytes
__literal1161_buffer Buffer_t 7 , -1, 0, __literal1161_bufferBytes
__literal1162_buffer Buffer_t 5 , -1, 0, __literal1162_bufferBytes
__literal1163_buffer Buffer_t 6 , -1, 0, __literal1163_bufferBytes
__literal1164_buffer Buffer_t 7 , -1, 0, __literal1164_bufferBytes
__literal1165_buffer Buffer_t 5 , -1, 0, __literal1165_bufferBytes
__literal1166_buffer Buffer_t 6 , -1, 0, __literal1166_bufferBytes
__literal1167_buffer Buffer_t 4 , -1, 0, __literal1167_bufferBytes
__literal1168_buffer Buffer_t 10 , -1, 0, __literal1168_bufferBytes
__literal1169_buffer Buffer_t 8 , -1, 0, __literal1169_bufferBytes
__literal1170_buffer Buffer_t 16 , -1, 0, __literal1170_bufferBytes
__literal1171_buffer Buffer_t 14 , -1, 0, __literal1171_bufferBytes
__literal1172_buffer Buffer_t 15 , -1, 0, __literal1172_bufferBytes
__literal1173_buffer Buffer_t 8 , -1, 0, __literal1173_bufferBytes
__literal1174_buffer Buffer_t 4 , -1, 0, __literal1174_bufferBytes
__literal1175_buffer Buffer_t 4 , -1, 0, __literal1175_bufferBytes
__literal1176_buffer Buffer_t 4 , -1, 0, __literal1176_bufferBytes
__literal1177_buffer Buffer_t 4 , -1, 0, __literal1177_bufferBytes
__literal1178_buffer Buffer_t 11 , -1, 0, __literal1178_bufferBytes
__literal1179_buffer Buffer_t 26 , -1, 0, __literal1179_bufferBytes
__literal1180_buffer Buffer_t 18 , -1, 0, __literal1180_bufferBytes
__literal1181_buffer Buffer_t 50 , -1, 0, __literal1181_bufferBytes
__literal1182_buffer Buffer_t 21 , -1, 0, __literal1182_bufferBytes
__literal1183_buffer Buffer_t 21 , -1, 0, __literal1183_bufferBytes
__literal1184_buffer Buffer_t 25 , -1, 0, __literal1184_bufferBytes
__literal1185_buffer Buffer_t 18 , -1, 0, __literal1185_bufferBytes
__literal1186_buffer Buffer_t 24 , -1, 0, __literal1186_bufferBytes
__literal1187_buffer Buffer_t 22 , -1, 0, __literal1187_bufferBytes
__literal1188_buffer Buffer_t 45 , -1, 0, __literal1188_bufferBytes
__literal1189_buffer Buffer_t 20 , -1, 0, __literal1189_bufferBytes
__literal1190_buffer Buffer_t 50 , -1, 0, __literal1190_bufferBytes
__literal1191_buffer Buffer_t 19 , -1, 0, __literal1191_bufferBytes
__literal1192_buffer Buffer_t 25 , -1, 0, __literal1192_bufferBytes
__literal1193_buffer Buffer_t 42 , -1, 0, __literal1193_bufferBytes
__literal1194_buffer Buffer_t 28 , -1, 0, __literal1194_bufferBytes
__literal1195_buffer Buffer_t 24 , -1, 0, __literal1195_bufferBytes
__literal1196_buffer Buffer_t 27 , -1, 0, __literal1196_bufferBytes
__literal1197_buffer Buffer_t 24 , -1, 0, __literal1197_bufferBytes
__literal1198_buffer Buffer_t 16 , -1, 0, __literal1198_bufferBytes
__literal1199_buffer Buffer_t 14 , -1, 0, __literal1199_bufferBytes
__literal1200_buffer Buffer_t 13 , -1, 0, __literal1200_bufferBytes
__literal1201_buffer Buffer_t 19 , -1, 0, __literal1201_bufferBytes
__literal1202_buffer Buffer_t 23 , -1, 0, __literal1202_bufferBytes
; iter 2
GrammarProductionsLUT_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 558 ; itemsCnt
dw 30, 2, 142, 0, 2, 139, 0, 1, 139, 0, 1, 138, 0, 0, 138, 31, 1, 141, 0, 2, 140, 0, 1, 140, 56, 1, 137, 42, 1, 137, 0, 1, 137, 0, 1, 137, 32, 1, 137, 33, 1, 137, 40, 1, 137, 44, 1, 137, 43, 1, 137, 45, 1, 137, 46, 1, 137, 47, 1, 137, 48, 1, 137, 49, 1, 137, 0, 2, 135, 0, 2, 135, 0, 2, 135, 0, 6, 135, 0, 6, 135, 0, 3, 136, 0, 4, 136, 0, 4, 136, 0, 6, 115, 0, 4, 115, 42, 4, 134, 0, 1, 112, 0, 0, 112, 0, 5, 132, 0, 1, 111, 0, 0, 111, 31, 2, 114, 0, 2, 109, 0, 2, 108, 0, 1, 108, 0, 1, 107, 0, 0, 107, 0, 1, 110, 0, 2, 110, 0, 3, 122, 0, 1, 122, 0, 3, 113, 0, 4, 113, 0, 2, 113, 0, 2, 113, 0, 1, 113, 0, 1, 113, 0, 5, 106, 0, 6, 106, 0, 2, 106, 0, 2, 106, 0, 3, 106, 0, 1, 106, 4, 1, 105, 0, 3, 103, 0, 4, 103, 0, 2, 103, 0, 2, 103, 0, 1, 103, 0, 1, 103, 42, 5, 101, 42, 5, 100, 0, 2, 99, 0, 4, 99, 0, 4, 131, 0, 1, 97, 0, 1, 97, 0, 2, 96, 0, 1, 96, 0, 1, 95, 0, 0, 95, 36, 6, 133, 34, 5, 98, 34, 4, 98, 37, 5, 94, 52, 1, 93, 0, 1, 121, 0, 1, 121, 0, 1, 121, 0, 1, 121, 0, 1, 121, 0, 1, 121, 0, 1, 121, 65, 3, 121, 58, 3, 121, 59, 3, 121, 60, 3, 121, 61, 3, 121, 64, 3, 121, 57, 2, 121, 0, 3, 121, 0, 1, 91, 74, 2, 91, 66, 3, 91, 67, 3, 91, 70, 3, 91, 71, 3, 91, 68, 3, 91, 69, 3, 91, 0, 1, 90, 0, 3, 90, 0, 3, 90, 72, 3, 90, 73, 3, 90, 72, 4, 88, 0, 1, 87, 0, 1, 87, 73, 4, 88, 0, 1, 86, 0, 1, 86, 0, 1, 85, 0, 1, 85, 0, 3, 85, 0, 2, 130, 40, 2, 83, 0, 4, 84, 0, 6, 84, 0, 4, 84, 0, 9, 129, 0, 1, 81, 0, 0, 81, 1, 1, 82, 0, 2, 82, 0, 7, 127, 0, 7, 126, 0, 7, 124, 0, 9, 125, 0, 9, 123, 0, 5, 128, 54, 4, 92, 54, 4, 92, 55, 4, 92, 55, 3, 92, 0, 1, 119, 0, 1, 119, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 0, 1, 120, 9, 3, 78, 10, 3, 77, 0, 1, 76, 0, 0, 76, 9, 1, 117, 0, 3, 75, 0, 2, 75, 20, 1, 80, 52, 1, 118, 4, 1, 79, 0, 3, 102, 0, 3, 102, 0, 3, 102, 0, 3, 102, 0, 3, 102, 0, 3, 102, 0, 2, 102, 0, 3, 102, 0, 1, 102, 0, 1, 102, 0, 1, 102, 0, 1, 102, 0, 1, 102, 1, 1, 116, 3, 1, 116, 4, 1, 116, 8, 1, 116, 0, 1, 74, 0, 1, 73, 0, 1, 104, 0, 1, 104, 5, 1, 89, 5, 1, 89, 0, 1, 72
SymbolsGreedyLUT_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 143 ; itemsCnt
db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
ParserActionsLUT_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 231 ; itemsCnt
ParserActionsLUT_0 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
ParserActionsLUT_1 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_1_buffer
ParserActionsLUT_2 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_3 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_3_buffer
; Reuse already emitted buffer
ParserActionsLUT_4 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
ParserActionsLUT_5 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_5_buffer
ParserActionsLUT_6 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_6_buffer
ParserActionsLUT_7 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_7_buffer
ParserActionsLUT_8 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_8_buffer
ParserActionsLUT_9 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_9_buffer
; Reuse already emitted buffer
ParserActionsLUT_10 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_11 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_11_buffer
ParserActionsLUT_12 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_13 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_14 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserActionsLUT_15 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_15_buffer
; Reuse already emitted buffer
ParserActionsLUT_16 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_17 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_18 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_18_buffer
ParserActionsLUT_19 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_19_buffer
ParserActionsLUT_20 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_20_buffer
ParserActionsLUT_21 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_21_buffer
ParserActionsLUT_22 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_22_buffer
ParserActionsLUT_23 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_23_buffer
ParserActionsLUT_24 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_24_buffer
ParserActionsLUT_25 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_25_buffer
; Reuse already emitted buffer
ParserActionsLUT_26 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_23_buffer
ParserActionsLUT_27 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_27_buffer
; Reuse already emitted buffer
ParserActionsLUT_28 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserActionsLUT_29 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_29_buffer
ParserActionsLUT_30 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_30_buffer
; Reuse already emitted buffer
ParserActionsLUT_31 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_32 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserActionsLUT_33 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_33_buffer
; Reuse already emitted buffer
ParserActionsLUT_34 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserActionsLUT_35 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserActionsLUT_36 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserActionsLUT_37 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_37_buffer
; Reuse already emitted buffer
ParserActionsLUT_38 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_39 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_40 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_41 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_42 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_42_buffer
ParserActionsLUT_43 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_43_buffer
; Reuse already emitted buffer
ParserActionsLUT_44 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_45 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_46 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_47 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_48 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_48_buffer
ParserActionsLUT_49 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_49_buffer
; Reuse already emitted buffer
ParserActionsLUT_50 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_51 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_52 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_53 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_54 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_55 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_56 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_57 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_57_buffer
ParserActionsLUT_58 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_58_buffer
ParserActionsLUT_59 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_59_buffer
; Reuse already emitted buffer
ParserActionsLUT_60 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
ParserActionsLUT_61 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_61_buffer
ParserActionsLUT_62 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_62_buffer
; Reuse already emitted buffer
ParserActionsLUT_63 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_15_buffer
; Reuse already emitted buffer
ParserActionsLUT_64 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_49_buffer
; Reuse already emitted buffer
ParserActionsLUT_65 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_49_buffer
ParserActionsLUT_66 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_66_buffer
ParserActionsLUT_67 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_67_buffer
ParserActionsLUT_68 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_68_buffer
ParserActionsLUT_69 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_69_buffer
ParserActionsLUT_70 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_70_buffer
ParserActionsLUT_71 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_71_buffer
; Reuse already emitted buffer
ParserActionsLUT_72 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_71_buffer
; Reuse already emitted buffer
ParserActionsLUT_73 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_74 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_74_buffer
ParserActionsLUT_75 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_75_buffer
ParserActionsLUT_76 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_76_buffer
ParserActionsLUT_77 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_77_buffer
ParserActionsLUT_78 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_78_buffer
ParserActionsLUT_79 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_79_buffer
; Reuse already emitted buffer
ParserActionsLUT_80 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_24_buffer
ParserActionsLUT_81 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_81_buffer
ParserActionsLUT_82 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_82_buffer
; Reuse already emitted buffer
ParserActionsLUT_83 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_8_buffer
; Reuse already emitted buffer
ParserActionsLUT_84 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_8_buffer
; Reuse already emitted buffer
ParserActionsLUT_85 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_8_buffer
; Reuse already emitted buffer
ParserActionsLUT_86 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_15_buffer
ParserActionsLUT_87 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_87_buffer
ParserActionsLUT_88 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_88_buffer
; Reuse already emitted buffer
ParserActionsLUT_89 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
ParserActionsLUT_90 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_90_buffer
; Reuse already emitted buffer
ParserActionsLUT_91 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_90_buffer
; Reuse already emitted buffer
ParserActionsLUT_92 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_90_buffer
ParserActionsLUT_93 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_93_buffer
ParserActionsLUT_94 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_94_buffer
ParserActionsLUT_95 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_95_buffer
ParserActionsLUT_96 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_96_buffer
ParserActionsLUT_97 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_97_buffer
; Reuse already emitted buffer
ParserActionsLUT_98 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_33_buffer
ParserActionsLUT_99 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_99_buffer
; Reuse already emitted buffer
ParserActionsLUT_100 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_87_buffer
; Reuse already emitted buffer
ParserActionsLUT_101 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_87_buffer
ParserActionsLUT_102 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_102_buffer
; Reuse already emitted buffer
ParserActionsLUT_103 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_104 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_104_buffer
; Reuse already emitted buffer
ParserActionsLUT_105 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_104_buffer
; Reuse already emitted buffer
ParserActionsLUT_106 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_104_buffer
; Reuse already emitted buffer
ParserActionsLUT_107 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_104_buffer
; Reuse already emitted buffer
ParserActionsLUT_108 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_104_buffer
; Reuse already emitted buffer
ParserActionsLUT_109 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
ParserActionsLUT_110 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_110_buffer
; Reuse already emitted buffer
ParserActionsLUT_111 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_61_buffer
; Reuse already emitted buffer
ParserActionsLUT_112 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_66_buffer
ParserActionsLUT_113 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_113_buffer
; Reuse already emitted buffer
ParserActionsLUT_114 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_19_buffer
ParserActionsLUT_115 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_115_buffer
; Reuse already emitted buffer
ParserActionsLUT_116 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
; Reuse already emitted buffer
ParserActionsLUT_117 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_8_buffer
ParserActionsLUT_118 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_118_buffer
; Reuse already emitted buffer
ParserActionsLUT_119 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_15_buffer
; Reuse already emitted buffer
ParserActionsLUT_120 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_121 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserActionsLUT_122 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserActionsLUT_123 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_123_buffer
ParserActionsLUT_124 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_124_buffer
; Reuse already emitted buffer
ParserActionsLUT_125 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
; Reuse already emitted buffer
ParserActionsLUT_126 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_127 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_127_buffer
; Reuse already emitted buffer
ParserActionsLUT_128 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_78_buffer
; Reuse already emitted buffer
ParserActionsLUT_129 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
; Reuse already emitted buffer
ParserActionsLUT_130 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_131 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_131_buffer
ParserActionsLUT_132 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_132_buffer
ParserActionsLUT_133 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_133_buffer
ParserActionsLUT_134 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_134_buffer
ParserActionsLUT_135 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_135_buffer
ParserActionsLUT_136 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_136_buffer
; Reuse already emitted buffer
ParserActionsLUT_137 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_15_buffer
ParserActionsLUT_138 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_138_buffer
; Reuse already emitted buffer
ParserActionsLUT_139 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_140 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_141 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_142 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_142_buffer
; Reuse already emitted buffer
ParserActionsLUT_143 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_19_buffer
ParserActionsLUT_144 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_144_buffer
ParserActionsLUT_145 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_145_buffer
ParserActionsLUT_146 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_146_buffer
ParserActionsLUT_147 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_147_buffer
ParserActionsLUT_148 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_148_buffer
ParserActionsLUT_149 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_149_buffer
ParserActionsLUT_150 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_150_buffer
; Reuse already emitted buffer
ParserActionsLUT_151 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
ParserActionsLUT_152 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_152_buffer
ParserActionsLUT_153 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_153_buffer
ParserActionsLUT_154 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_154_buffer
ParserActionsLUT_155 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_155_buffer
; Reuse already emitted buffer
ParserActionsLUT_156 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_157 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_8_buffer
; Reuse already emitted buffer
ParserActionsLUT_158 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_159 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_8_buffer
; Reuse already emitted buffer
ParserActionsLUT_160 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_161 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_162 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_163 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_163_buffer
ParserActionsLUT_164 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_164_buffer
ParserActionsLUT_165 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_165_buffer
ParserActionsLUT_166 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
ParserActionsLUT_167 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_167_buffer
; Reuse already emitted buffer
ParserActionsLUT_168 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_164_buffer
; Reuse already emitted buffer
ParserActionsLUT_169 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_170 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
ParserActionsLUT_171 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_171_buffer
ParserActionsLUT_172 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_172_buffer
ParserActionsLUT_173 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_173_buffer
; Reuse already emitted buffer
ParserActionsLUT_174 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_8_buffer
; Reuse already emitted buffer
ParserActionsLUT_175 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_146_buffer
; Reuse already emitted buffer
ParserActionsLUT_176 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_71_buffer
; Reuse already emitted buffer
ParserActionsLUT_177 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_71_buffer
; Reuse already emitted buffer
ParserActionsLUT_178 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_179 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_179_buffer
; Reuse already emitted buffer
ParserActionsLUT_180 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
; Reuse already emitted buffer
ParserActionsLUT_181 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_23_buffer
; Reuse already emitted buffer
ParserActionsLUT_182 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_183 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_183_buffer
ParserActionsLUT_184 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_184_buffer
; Reuse already emitted buffer
ParserActionsLUT_185 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_183_buffer
ParserActionsLUT_186 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_186_buffer
; Reuse already emitted buffer
ParserActionsLUT_187 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_183_buffer
; Reuse already emitted buffer
ParserActionsLUT_188 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_189 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
ParserActionsLUT_190 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_190_buffer
ParserActionsLUT_191 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_191_buffer
; Reuse already emitted buffer
ParserActionsLUT_192 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_164_buffer
; Reuse already emitted buffer
ParserActionsLUT_193 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_164_buffer
; Reuse already emitted buffer
ParserActionsLUT_194 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_164_buffer
; Reuse already emitted buffer
ParserActionsLUT_195 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_164_buffer
; Reuse already emitted buffer
ParserActionsLUT_196 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_164_buffer
; Reuse already emitted buffer
ParserActionsLUT_197 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_164_buffer
ParserActionsLUT_198 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_198_buffer
ParserActionsLUT_199 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_199_buffer
ParserActionsLUT_200 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_200_buffer
; Reuse already emitted buffer
ParserActionsLUT_201 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_8_buffer
ParserActionsLUT_202 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_202_buffer
; Reuse already emitted buffer
ParserActionsLUT_203 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_202_buffer
; Reuse already emitted buffer
ParserActionsLUT_204 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_205 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_206 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_206_buffer
ParserActionsLUT_207 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_207_buffer
ParserActionsLUT_208 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_208_buffer
; Reuse already emitted buffer
ParserActionsLUT_209 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_210 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_210_buffer
; Reuse already emitted buffer
ParserActionsLUT_211 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
ParserActionsLUT_212 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_212_buffer
; Reuse already emitted buffer
ParserActionsLUT_213 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
; Reuse already emitted buffer
ParserActionsLUT_214 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_164_buffer
ParserActionsLUT_215 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_215_buffer
; Reuse already emitted buffer
ParserActionsLUT_216 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_215_buffer
; Reuse already emitted buffer
ParserActionsLUT_217 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_215_buffer
; Reuse already emitted buffer
ParserActionsLUT_218 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
; Reuse already emitted buffer
ParserActionsLUT_219 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_199_buffer
; Reuse already emitted buffer
ParserActionsLUT_220 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_199_buffer
; Reuse already emitted buffer
ParserActionsLUT_221 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
; Reuse already emitted buffer
ParserActionsLUT_222 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_0_buffer
; Reuse already emitted buffer
ParserActionsLUT_223 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_2_buffer
; Reuse already emitted buffer
ParserActionsLUT_224 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_183_buffer
; Reuse already emitted buffer
ParserActionsLUT_225 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_183_buffer
; Reuse already emitted buffer
ParserActionsLUT_226 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_166_buffer
ParserActionsLUT_227 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_227_buffer
; Reuse already emitted buffer
ParserActionsLUT_228 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_12_buffer
ParserActionsLUT_229 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_229_buffer
ParserActionsLUT_230 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_230_buffer
ParserGotoLUT_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 231 ; itemsCnt
ParserGotoLUT_0 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_0_buffer
; Reuse already emitted buffer
ParserGotoLUT_1 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_2 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_2_buffer
; Reuse already emitted buffer
ParserGotoLUT_3 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_4 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_4_buffer
; Reuse already emitted buffer
ParserGotoLUT_5 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_6 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_7 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_8 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_8_buffer
; Reuse already emitted buffer
ParserGotoLUT_9 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_10 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_10_buffer
; Reuse already emitted buffer
ParserGotoLUT_11 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_12 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_13 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_13_buffer
; Reuse already emitted buffer
ParserGotoLUT_14 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_15 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_15_buffer
ParserGotoLUT_16 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_16_buffer
ParserGotoLUT_17 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_17_buffer
; Reuse already emitted buffer
ParserGotoLUT_18 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_19 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_19_buffer
; Reuse already emitted buffer
ParserGotoLUT_20 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_21 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_22 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_23 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_23_buffer
ParserGotoLUT_24 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_24_buffer
; Reuse already emitted buffer
ParserGotoLUT_25 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_26 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_26_buffer
ParserGotoLUT_27 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_27_buffer
; Reuse already emitted buffer
ParserGotoLUT_28 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_29 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_30 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_31 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_31_buffer
; Reuse already emitted buffer
ParserGotoLUT_32 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_33 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_34 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_35 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_36 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_37 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_38 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_38_buffer
ParserGotoLUT_39 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_39_buffer
ParserGotoLUT_40 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_40_buffer
ParserGotoLUT_41 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_41_buffer
ParserGotoLUT_42 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_42_buffer
ParserGotoLUT_43 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_43_buffer
ParserGotoLUT_44 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_44_buffer
ParserGotoLUT_45 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_45_buffer
ParserGotoLUT_46 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_46_buffer
ParserGotoLUT_47 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_47_buffer
; Reuse already emitted buffer
ParserGotoLUT_48 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_49 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_50 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_51 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_51_buffer
ParserGotoLUT_52 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_52_buffer
ParserGotoLUT_53 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_53_buffer
ParserGotoLUT_54 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_54_buffer
ParserGotoLUT_55 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_55_buffer
ParserGotoLUT_56 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_56_buffer
; Reuse already emitted buffer
ParserGotoLUT_57 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_58 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_59 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_60 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_61 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_62 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_63 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_63_buffer
; Reuse already emitted buffer
ParserGotoLUT_64 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_65 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_66 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_66_buffer
; Reuse already emitted buffer
ParserGotoLUT_67 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_68 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_69 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_70 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_71 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_71_buffer
ParserGotoLUT_72 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_72_buffer
ParserGotoLUT_73 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_73_buffer
; Reuse already emitted buffer
ParserGotoLUT_74 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_75 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_76 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_77 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_78 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_79 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_80 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_80_buffer
; Reuse already emitted buffer
ParserGotoLUT_81 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_82 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_83 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_83_buffer
ParserGotoLUT_84 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_84_buffer
ParserGotoLUT_85 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_85_buffer
ParserGotoLUT_86 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_86_buffer
; Reuse already emitted buffer
ParserGotoLUT_87 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_88 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_42_buffer
; Reuse already emitted buffer
ParserGotoLUT_89 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_90 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_91 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_92 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_93 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_94 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_95 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_96 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_97 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_98 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_99 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_100 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_101 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_102 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_102_buffer
ParserGotoLUT_103 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_103_buffer
; Reuse already emitted buffer
ParserGotoLUT_104 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_105 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_106 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_107 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_108 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_109 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_110 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_110_buffer
; Reuse already emitted buffer
ParserGotoLUT_111 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_112 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_112_buffer
; Reuse already emitted buffer
ParserGotoLUT_113 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_114 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_114_buffer
; Reuse already emitted buffer
ParserGotoLUT_115 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_116 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_116_buffer
ParserGotoLUT_117 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_117_buffer
; Reuse already emitted buffer
ParserGotoLUT_118 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_119 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_119_buffer
ParserGotoLUT_120 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_120_buffer
; Reuse already emitted buffer
ParserGotoLUT_121 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_122 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_123 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_124 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_125 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_125_buffer
ParserGotoLUT_126 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_126_buffer
ParserGotoLUT_127 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_127_buffer
; Reuse already emitted buffer
ParserGotoLUT_128 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_129 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_129_buffer
ParserGotoLUT_130 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_130_buffer
; Reuse already emitted buffer
ParserGotoLUT_131 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_132 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_133 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_134 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_135 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_136 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_137 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_137_buffer
ParserGotoLUT_138 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_138_buffer
; Reuse already emitted buffer
ParserGotoLUT_139 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_140 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_141 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_141_buffer
; Reuse already emitted buffer
ParserGotoLUT_142 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_143 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_143_buffer
; Reuse already emitted buffer
ParserGotoLUT_144 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_145 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_146 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_146_buffer
; Reuse already emitted buffer
ParserGotoLUT_147 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_148 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_71_buffer
; Reuse already emitted buffer
ParserGotoLUT_149 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_72_buffer
; Reuse already emitted buffer
ParserGotoLUT_150 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_151 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_152 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_153 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_153_buffer
ParserGotoLUT_154 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_154_buffer
; Reuse already emitted buffer
ParserGotoLUT_155 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_156 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_156_buffer
ParserGotoLUT_157 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_157_buffer
ParserGotoLUT_158 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_158_buffer
ParserGotoLUT_159 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_159_buffer
ParserGotoLUT_160 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_160_buffer
ParserGotoLUT_161 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_161_buffer
ParserGotoLUT_162 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_162_buffer
; Reuse already emitted buffer
ParserGotoLUT_163 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_164 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_164_buffer
; Reuse already emitted buffer
ParserGotoLUT_165 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_166 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_167 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_167_buffer
ParserGotoLUT_168 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_168_buffer
; Reuse already emitted buffer
ParserGotoLUT_169 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_170 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_170_buffer
; Reuse already emitted buffer
ParserGotoLUT_171 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_172 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_173 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_174 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_174_buffer
ParserGotoLUT_175 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_175_buffer
ParserGotoLUT_176 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_176_buffer
ParserGotoLUT_177 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_177_buffer
ParserGotoLUT_178 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_178_buffer
; Reuse already emitted buffer
ParserGotoLUT_179 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_180 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_180_buffer
ParserGotoLUT_181 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_181_buffer
ParserGotoLUT_182 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_182_buffer
ParserGotoLUT_183 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_183_buffer
; Reuse already emitted buffer
ParserGotoLUT_184 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_185 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_185_buffer
; Reuse already emitted buffer
ParserGotoLUT_186 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_187 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_187_buffer
; Reuse already emitted buffer
ParserGotoLUT_188 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_189 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_190 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_191 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_191_buffer
ParserGotoLUT_192 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_192_buffer
ParserGotoLUT_193 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_193_buffer
ParserGotoLUT_194 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_194_buffer
ParserGotoLUT_195 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_195_buffer
ParserGotoLUT_196 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_196_buffer
ParserGotoLUT_197 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_197_buffer
; Reuse already emitted buffer
ParserGotoLUT_198 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_199 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_200 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_201 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_201_buffer
; Reuse already emitted buffer
ParserGotoLUT_202 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_203 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_204 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_205 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_205_buffer
; Reuse already emitted buffer
ParserGotoLUT_206 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_207 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_207_buffer
; Reuse already emitted buffer
ParserGotoLUT_208 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_209 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_209_buffer
; Reuse already emitted buffer
ParserGotoLUT_210 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_211 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_211_buffer
; Reuse already emitted buffer
ParserGotoLUT_212 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_213 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_214 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_214_buffer
; Reuse already emitted buffer
ParserGotoLUT_215 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_216 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_217 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_218 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_219 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_220 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_221 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserGotoLUT_222 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_222_buffer
ParserGotoLUT_223 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_223_buffer
ParserGotoLUT_224 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_224_buffer
ParserGotoLUT_225 Variant_t VARIANT_ARRAY, 0, ParserGotoLUT_225_buffer
; Reuse already emitted buffer
ParserGotoLUT_226 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_227 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_228 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_229 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
; Reuse already emitted buffer
ParserGotoLUT_230 Variant_t VARIANT_ARRAY, 0, ParserActionsLUT_14_buffer
ParserActionsDefaultLUT_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 231 ; itemsCnt
dw 4, 86, -1, -1, 3, -1, -1, 143, -1, 84, -1, 87, -1, -1, 83, 34, -1, -1, -1, -1, -1, -1, 89, -1, 155, 85, -1, -1, 88, 98, 160, -1, 86, 143, 84, 87, 85, 99, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 47, -1, -1, -1, -1, -1, -1, 143, 89, 88, 52, 33, -1, 53, 22, 23, 77, -1, -1, 69, -1, -1, -1, -1, -1, 89, 88, -1, 154, -1, 59, -1, -1, -1, -1, -1, 34, 96, -1, 27, 93, 94, 95, 143, -1, -1, -1, 161, 90, 143, 91, 92, -1, -1, 100, 101, 105, 103, 104, 102, -1, 50, 76, -1, -1, -1, 4, 37, -1, 34, -1, 109, 110, -1, 89, 4, -1, -1, 57, 4, -1, -1, -1, -1, -1, -1, -1, 34, -1, 46, 48, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 66, -1, 49, 4, -1, 31, 44, -1, 42, -1, -1, -1, -1, 4, -1, -1, 4, -1, 4, -1, 4, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, 64, 168, -1, -1, 112, 115, 54, -1, -1, 127, -1, -1, -1, -1, -1, 61, -1, 164, 165, 167, 166, 162, 163, 55, 4, -1, 4, 4, 62, -1, 129, -1, -1
LexerSelectLUT_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 0 ; itemsCnt
LexerIndexBaseLUT_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
LexerIndexBaseLUT_0 Variant_t VARIANT_INTEGER, 0, 0
LexerIndexLUT_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
LexerIndexLUT_0 Variant_t VARIANT_ARRAY, 0, LexerIndexLUT_0_buffer
LexerCharsLUT_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 2710 ; itemsCnt
dw 32, 32, 34, 34, 35, 35, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 57, 58, 58, 60, 60, 61, 61, 62, 62, 64, 64, 91, 91, 93, 93, 97, 97, 99, 99, 101, 101, 102, 102, 103, 103, 105, 105, 107, 107, 109, 109, 110, 110, 111, 111, 112, 112, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 123, 123, 125, 125, 126, 126, 10, 10, 13, 13, 65, 90, 95, 95, 98, 98, 100, 100, 104, 104, 106, 106, 108, 108, 113, 113, 120, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, -1, -1, 46, 46, -1, -1, 42, 42, 47, 47, -1, -1, 46, 46, 48, 57, 120, 120, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1, 61, 61, -1, -1, 97, 97, 98, 98, 65, 90, 99, 122, -1, -1, -1, -1, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 13, 13, -1, -1, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 255, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 65, 90, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 65, 90, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 34, 34, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 255, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 255, -1, -1, 46, 46, 48, 57, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 108, 108, 111, 111, 48, 57, 65, 90, 95, 95, 97, 107, 109, 110, 112, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 255, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 255, -1, -1, 42, 42, 0, 41, 43, 255, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 108, 108, 110, 110, 120, 120, 48, 57, 65, 90, 95, 95, 97, 107, 109, 109, 111, 119, 121, 122, -1, -1, 39, 39, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 255, -1, -1, 65, 90, 97, 122, -1, -1, 97, 97, 111, 111, 114, 114, 117, 117, 48, 57, 65, 90, 95, 95, 98, 110, 112, 113, 115, 116, 118, 122, -1, -1, 42, 42, 0, 41, 43, 255, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 48, 57, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 102, 102, 109, 109, 110, 110, 115, 115, 48, 57, 65, 90, 95, 95, 97, 101, 103, 108, 111, 114, 116, 122, -1, -1, 48, 57, 65, 70, 97, 102, -1, -1, 111, 111, 65, 90, 97, 110, 112, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 33, 35, 255, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 101, 101, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 97, 100, 102, 110, 112, 116, 118, 122, -1, -1, 10, 10, 13, 13, 0, 9, 11, 12, 14, 38, 40, 255, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 42, 42, 47, 47, 0, 41, 43, 46, 48, 255, -1, -1, 108, 108, 65, 90, 97, 107, 109, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 65, 90, 98, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 65, 90, 97, 114, 116, 122, -1, -1, 111, 111, 114, 114, 48, 57, 65, 90, 95, 95, 97, 110, 112, 113, 115, 122, -1, -1, 105, 105, 65, 90, 97, 104, 106, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 104, 104, 114, 114, 48, 57, 65, 90, 95, 95, 97, 103, 105, 113, 115, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 105, 105, 115, 115, 48, 57, 65, 90, 95, 95, 97, 104, 106, 114, 116, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 121, 121, 48, 57, 65, 90, 95, 95, 97, 120, 122, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 119, 119, 48, 57, 65, 90, 95, 95, 97, 118, 120, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 99, 99, 102, 102, 105, 105, 109, 109, 119, 119, 48, 57, 65, 90, 95, 95, 97, 98, 100, 101, 103, 104, 106, 108, 110, 118, 120, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 109, 109, 48, 57, 65, 90, 95, 95, 97, 108, 110, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 98, 98, 48, 57, 65, 90, 95, 95, 97, 97, 99, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 109, 109, 48, 57, 65, 90, 95, 95, 97, 108, 110, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 111, 111, 117, 117, 48, 57, 65, 90, 95, 95, 97, 110, 112, 116, 118, 122, -1, -1, 102, 102, 48, 57, 65, 90, 95, 95, 97, 101, 103, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 120, 120, 48, 57, 65, 90, 95, 95, 97, 119, 121, 122, -1, -1, 112, 112, 48, 57, 65, 90, 95, 95, 97, 111, 113, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 114, 114, 65, 90, 97, 113, 115, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 109, 109, 48, 57, 65, 90, 95, 95, 97, 108, 110, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 102, 102, 65, 90, 97, 101, 103, 122, -1, -1, 116, 116, 65, 90, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 114, 114, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 100, 100, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 115, 115, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 101, 101, 65, 90, 97, 100, 102, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 115, 115, 65, 90, 97, 114, 116, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 97, 97, 48, 57, 65, 90, 95, 95, 98, 122, -1, -1, 117, 117, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, -1, -1, 104, 104, 48, 57, 65, 90, 95, 95, 97, 103, 105, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 111, 111, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 108, 108, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 101, 101, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, -1, -1, 105, 105, 48, 57, 65, 90, 95, 95, 97, 104, 106, 122, -1, -1, 116, 116, 48, 57, 65, 90, 95, 95, 97, 115, 117, 122, -1, -1, 99, 99, 48, 57, 65, 90, 95, 95, 97, 98, 100, 122, -1, -1, 110, 110, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122, -1, -1
LexerTransLUT_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 1355 ; itemsCnt
dw 1, 71, 77, 82, 2, 3, 4, 5, 6, 7, 8, 9, 10, 73, 11, 12, 13, 14, 15, 16, 17, 18, 75, 81, 84, 87, 90, 93, 150, 96, 99, 102, 164, 104, 106, 146, 108, 109, 19, 20, 21, 22, 22, 110, 110, 110, 110, 110, 110, 110, 110, 110, -1, -1, -1, -1, -1, -1, -1, 25, -1, 26, -1, 85, 27, -1, 88, 73, 91, -1, -1, 28, -1, -1, 29, -1, 74, 80, 83, 83, -1, -1, -1, 111, 110, 110, 110, 110, 110, -1, -1, -1, -1, 22, 22, -1, -1, 24, 24, 94, 94, 94, 94, -1, -1, -1, -1, -1, -1, 110, 110, 110, 110, -1, 191, 110, 110, 110, 110, 110, -1, 135, 110, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 35, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 83, 83, -1, 110, 110, 110, 110, -1, 83, 83, -1, 110, 110, 110, 110, -1, 23, 24, 24, 71, 71, 71, 71, -1, 72, 72, 77, 77, 77, -1, 88, 73, -1, 86, 83, 83, 83, -1, 112, 160, 110, 110, 110, 110, 110, 110, -1, 76, 76, 97, 97, 97, 97, -1, 72, 72, 77, 77, 77, -1, 100, 85, 85, -1, 79, 79, 79, -1, 147, 83, 83, 83, -1, 113, 114, 205, 110, 110, 110, 110, 110, 110, 110, -1, 23, 76, 76, 82, 82, 82, 82, -1, 83, 83, -1, 149, 115, 116, 171, 110, 110, 110, 110, 110, 110, 110, -1, 100, 85, 85, -1, 89, 83, 83, 83, -1, 155, 110, 110, 110, 110, 110, -1, 35, -1, 95, 83, 83, 83, -1, 30, 117, 31, 32, 110, 110, 110, 110, 110, 110, 110, -1, 79, 79, 79, -1, 98, 83, 83, 83, -1, 118, 110, 110, 110, 110, 110, -1, 24, 24, 94, 94, 94, 94, -1, 101, 83, 83, 83, -1, 120, 121, 163, 110, 110, 110, 110, 110, 110, 110, -1, 76, 76, 97, 97, 97, 97, -1, 204, 83, 83, 83, -1, 33, 110, 110, 110, 110, 110, -1, 100, 78, 85, 85, 85, -1, 103, 83, 83, 83, -1, 122, 110, 110, 110, 110, 110, -1, 105, 83, 83, -1, 173, 110, 110, 110, 110, 110, -1, 148, 83, 83, 83, -1, 34, 123, 110, 110, 110, 110, 110, 110, -1, 151, 83, 83, 83, -1, 172, 110, 110, 110, 110, -1, 125, 126, 110, 110, 110, 110, 110, 110, -1, 110, 110, 110, 110, -1, 36, 110, 110, 110, 110, 110, -1, 127, 110, 110, 110, 110, -1, 129, 180, 110, 110, 110, 110, 110, 110, -1, 130, 110, 110, 110, 110, 110, -1, 37, 110, 110, 110, 110, 110, -1, 132, 110, 110, 110, 110, 110, -1, 167, 110, 110, 110, 110, 110, -1, 136, 110, 110, 110, 110, 110, -1, 137, 110, 110, 110, 110, 110, -1, 38, 110, 110, 110, 110, 110, -1, 39, 110, 110, 110, 110, 110, -1, 178, 110, 110, 110, 110, 110, -1, 193, 110, 110, 110, 110, 110, -1, 139, 110, 110, 110, 110, 110, -1, 211, 110, 110, 110, 110, 110, -1, 213, 110, 110, 110, 110, 110, -1, 140, 110, 110, 110, 110, 110, -1, 156, 110, 110, 110, 110, 110, -1, 40, 110, 110, 110, 110, 110, -1, 214, 141, 142, 220, 143, 110, 110, 110, 110, 110, 110, 110, 110, 110, -1, 195, 110, 110, 110, 110, 110, -1, 42, 110, 110, 110, 110, 110, -1, 168, 110, 110, 110, 110, 110, -1, 207, 110, 110, 110, 110, 110, -1, 43, 110, 110, 110, 110, 110, -1, 44, 110, 110, 110, 110, 110, -1, 175, 110, 110, 110, 110, 110, -1, 47, 110, 110, 110, 110, 110, -1, 145, 110, 110, 110, 110, 110, -1, 49, 110, 110, 110, 110, 110, -1, 165, 224, 110, 110, 110, 110, 110, 110, -1, 51, 110, 110, 110, 110, 110, -1, 157, 110, 110, 110, 110, 110, -1, 199, 110, 110, 110, 110, 110, -1, 217, 110, 110, 110, 110, 110, -1, 124, 110, 110, 110, 110, 110, -1, 92, 83, 83, 83, -1, 67, 83, 83, 83, -1, 131, 110, 110, 110, 110, 110, -1, 119, 110, 110, 110, 110, 110, -1, 206, 83, 83, 83, -1, 183, 110, 110, 110, 110, 110, -1, 154, 110, 110, 110, 110, -1, 46, 110, 110, 110, 110, 110, -1, 134, 110, 110, 110, 110, 110, -1, 50, 110, 110, 110, 110, 110, -1, 218, 110, 110, 110, 110, 110, -1, 60, 110, 110, 110, 110, 110, -1, 202, 110, 110, 110, 110, 110, -1, 128, 110, 110, 110, 110, 110, -1, 107, 83, 83, 83, -1, 69, 83, 83, 83, -1, 179, 110, 110, 110, 110, 110, -1, 153, 110, 110, 110, 110, 110, -1, 56, 110, 110, 110, 110, 110, -1, 177, 110, 110, 110, 110, 110, -1, 152, 110, 110, 110, 110, 110, -1, 169, 110, 110, 110, 110, 110, -1, 182, 110, 110, 110, 110, 110, -1, 189, 110, 110, 110, 110, 110, -1, 133, 110, 110, 110, 110, 110, -1, 209, 110, 110, 110, 110, 110, -1, 138, 110, 110, 110, 110, 110, -1, 59, 110, 110, 110, 110, 110, -1, 174, 110, 110, 110, 110, 110, -1, 53, 110, 110, 110, 110, 110, -1, 61, 110, 110, 110, 110, 110, -1, 176, 110, 110, 110, 110, 110, -1, 45, 110, 110, 110, 110, 110, -1, 41, 110, 110, 110, 110, 110, -1, 66, 110, 110, 110, 110, 110, -1, 190, 110, 110, 110, 110, 110, -1, 58, 110, 110, 110, 110, 110, -1, 62, 110, 110, 110, 110, 110, -1, 166, 110, 110, 110, 110, 110, -1, 185, 110, 110, 110, 110, 110, -1, 70, 110, 110, 110, 110, 110, -1, 181, 110, 110, 110, 110, 110, -1, 63, 110, 110, 110, 110, 110, -1, 65, 110, 110, 110, 110, 110, -1, 144, 110, 110, 110, 110, 110, -1, 215, 110, 110, 110, 110, 110, -1, 48, 110, 110, 110, 110, 110, -1, 68, 110, 110, 110, 110, 110, -1, 52, 110, 110, 110, 110, 110, -1, 158, 110, 110, 110, 110, 110, -1, 54, 110, 110, 110, 110, 110, -1, 55, 110, 110, 110, 110, 110, -1, 184, 110, 110, 110, 110, 110, -1, 159, 110, 110, 110, 110, 110, -1, 64, 110, 110, 110, 110, 110, -1, 192, 110, 110, 110, 110, 110, -1, 187, 110, 110, 110, 110, 110, -1, 161, 83, 83, 83, -1, 186, 110, 110, 110, 110, 110, -1, 162, 83, 83, 83, -1, 216, 110, 110, 110, 110, -1, 170, 110, 110, 110, 110, -1, 196, 110, 110, 110, 110, 110, -1, 188, 110, 110, 110, 110, 110, -1, 197, 110, 110, 110, 110, 110, -1, 194, 110, 110, 110, 110, 110, -1, 198, 110, 110, 110, 110, 110, -1, 208, 110, 110, 110, 110, 110, -1, 203, 110, 110, 110, 110, 110, -1, 57, 110, 110, 110, 110, 110, -1, 200, 110, 110, 110, 110, 110, -1, 201, 110, 110, 110, 110, 110, -1, 210, 110, 110, 110, 110, 110, -1, 219, 110, 110, 110, 110, 110, -1, 212, 110, 110, 110, 110, 110, -1, 221, 110, 110, 110, 110, 110, -1, 222, 110, 110, 110, 110, 110, -1, 223, 110, 110, 110, 110, 110, -1
LexerAcceptLUT_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
LexerAcceptLUT_0 Variant_t VARIANT_ARRAY, 0, LexerAcceptLUT_0_buffer
__literal0_bufferBytes StringHead_t 6
 db  "opcode" , 0
__literal1_bufferBytes StringHead_t 5
 db  "value" , 0
__literal2_bufferBytes StringHead_t 2
 db  "id" , 0
__literal3_bufferBytes StringHead_t 8
 db  "children" , 0
__literal4_bufferBytes StringHead_t 6
 db  "parent" , 0
__literal5_bufferBytes StringHead_t 4
 db  "next" , 0
__literal6_bufferBytes StringHead_t 0
 db  "" , 0
__literal7_bufferBytes StringHead_t 2
 db  ".." , 0
__literal8_bufferBytes StringHead_t 1
 db  "#" , 0
__literal9_bufferBytes StringHead_t 34
 db  "----------------------------------" , 0
__literal10_bufferBytes StringHead_t 21
 db  " Abstract Syntax Tree" , 0
__literal11_bufferBytes StringHead_t 12
 db  "constantsMap" , 0
__literal12_bufferBytes StringHead_t 8
 db  "filePath" , 0
__literal13_bufferBytes StringHead_t 1
 db  ":" , 0
__literal14_bufferBytes StringHead_t 9
 db  ": error: " , 0
__literal15_bufferBytes StringHead_t 12
 db  "syntax error" , 0
__literal16_bufferBytes StringHead_t 5
 db  "print" , 0
__literal17_bufferBytes StringHead_t 6
 db  "global" , 0
__literal18_bufferBytes StringHead_t 6
 db  "import" , 0
__literal19_bufferBytes StringHead_t 27
 db  "__mold_arrayInsertAfterLast" , 0
__literal20_bufferBytes StringHead_t 28
 db  "__mold_arrayInsertBeforeLast" , 0
__literal21_bufferBytes StringHead_t 29
 db  "redeclaration of a constant '" , 0
__literal22_bufferBytes StringHead_t 1
 db  "'" , 0
__literal23_bufferBytes StringHead_t 4
 db  "read" , 0
__literal24_bufferBytes StringHead_t 5
 db  "write" , 0
__literal25_bufferBytes StringHead_t 4
 db  "name" , 0
__literal26_bufferBytes StringHead_t 8
 db  "baseName" , 0
__literal27_bufferBytes StringHead_t 20
 db  "__this_placeholder__" , 0
__literal28_bufferBytes StringHead_t 56
 db  "only constant values can be inserted into constant array" , 0
__literal29_bufferBytes StringHead_t 19
 db  "unterminated string" , 0
__literal30_bufferBytes StringHead_t 4
 db  "line" , 0
__literal31_bufferBytes StringHead_t 6
 db  "column" , 0
__literal32_bufferBytes StringHead_t 18
 db  "MAX ITERS reached!" , 0
AST_DataTypeNames_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
; Reuse already emitted buffer
AST_DataTypeNames_0 Variant_t VARIANT_STRING, 0, __literal89_buffer
; Reuse already emitted buffer
AST_DataTypeNames_1 Variant_t VARIANT_STRING, 0, __literal33_buffer
; Reuse already emitted buffer
AST_DataTypeNames_2 Variant_t VARIANT_STRING, 0, __literal34_buffer
; Reuse already emitted buffer
AST_DataTypeNames_3 Variant_t VARIANT_STRING, 0, __literal34_buffer
; Reuse already emitted buffer
AST_DataTypeNames_4 Variant_t VARIANT_STRING, 0, __literal161_buffer
; Reuse already emitted buffer
AST_DataTypeNames_5 Variant_t VARIANT_STRING, 0, __literal35_buffer
AST_DataTypeNames_6 Variant_t VARIANT_STRING, 0, AST_DataTypeNames_6_buffer
; Reuse already emitted buffer
AST_DataTypeNames_7 Variant_t VARIANT_STRING, 0, __literal80_buffer
; Reuse already emitted buffer
AST_DataTypeNames_8 Variant_t VARIANT_STRING, 0, __literal301_buffer
; Reuse already emitted buffer
AST_DataTypeNames_9 Variant_t VARIANT_STRING, 0, __literal120_buffer
; Reuse already emitted buffer
AST_DataTypeNames_10 Variant_t VARIANT_STRING, 0, __literal121_buffer
AST_DataTypeForMIR_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 11 ; itemsCnt
; Reuse already emitted buffer
AST_DataTypeForMIR_0 Variant_t VARIANT_STRING, 0, __literal138_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_1 Variant_t VARIANT_STRING, 0, __literal155_buffer
AST_DataTypeForMIR_2 Variant_t VARIANT_STRING, 0, AST_DataTypeForMIR_2_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_3 Variant_t VARIANT_STRING, 0, __literal159_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_4 Variant_t VARIANT_STRING, 0, __literal161_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_5 Variant_t VARIANT_STRING, 0, __literal160_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_6 Variant_t VARIANT_STRING, 0, __literal130_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_7 Variant_t VARIANT_STRING, 0, __literal138_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_8 Variant_t VARIANT_STRING, 0, __literal130_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_9 Variant_t VARIANT_STRING, 0, __literal130_buffer
; Reuse already emitted buffer
AST_DataTypeForMIR_10 Variant_t VARIANT_STRING, 0, __literal130_buffer
__literal33_bufferBytes StringHead_t 7
 db  "integer" , 0
__literal34_bufferBytes StringHead_t 5
 db  "float" , 0
__literal35_bufferBytes StringHead_t 7
 db  "boolean" , 0
__literal36_bufferBytes StringHead_t 7
 db  "PROGRAM" , 0
__literal37_bufferBytes StringHead_t 5
 db  "BLOCK" , 0
__literal38_bufferBytes StringHead_t 8
 db  "FUNCTION" , 0
__literal39_bufferBytes StringHead_t 5
 db  "CLASS" , 0
__literal40_bufferBytes StringHead_t 6
 db  "METHOD" , 0
__literal41_bufferBytes StringHead_t 2
 db  "IF" , 0
__literal42_bufferBytes StringHead_t 3
 db  "FOR" , 0
__literal43_bufferBytes StringHead_t 5
 db  "WHILE" , 0
__literal44_bufferBytes StringHead_t 4
 db  "CALL" , 0
__literal45_bufferBytes StringHead_t 18
 db  "REFERENCE_BY_INDEX" , 0
__literal46_bufferBytes StringHead_t 16
 db  "REFERENCE_BY_KEY" , 0
__literal47_bufferBytes StringHead_t 7
 db  "INTEGER" , 0
__literal48_bufferBytes StringHead_t 6
 db  "STRING" , 0
__literal49_bufferBytes StringHead_t 5
 db  "FLOAT" , 0
__literal50_bufferBytes StringHead_t 6
 db  "DOUBLE" , 0
__literal51_bufferBytes StringHead_t 4
 db  "BOOL" , 0
__literal52_bufferBytes StringHead_t 5
 db  "ARRAY" , 0
__literal53_bufferBytes StringHead_t 3
 db  "MAP" , 0
__literal54_bufferBytes StringHead_t 9
 db  "UNDEFINED" , 0
__literal55_bufferBytes StringHead_t 8
 db  "BOOL_AND" , 0
__literal56_bufferBytes StringHead_t 7
 db  "BOOL_OR" , 0
__literal57_bufferBytes StringHead_t 3
 db  "NEG" , 0
__literal58_bufferBytes StringHead_t 3
 db  "ADD" , 0
__literal59_bufferBytes StringHead_t 11
 db  "STRING_JOIN" , 0
__literal60_bufferBytes StringHead_t 3
 db  "SUB" , 0
__literal61_bufferBytes StringHead_t 3
 db  "MUL" , 0
__literal62_bufferBytes StringHead_t 3
 db  "DIV" , 0
__literal63_bufferBytes StringHead_t 4
 db  "IDIV" , 0
__literal64_bufferBytes StringHead_t 6
 db  "CMP_EQ" , 0
__literal65_bufferBytes StringHead_t 6
 db  "CMP_NE" , 0
__literal66_bufferBytes StringHead_t 6
 db  "CMP_LT" , 0
__literal67_bufferBytes StringHead_t 6
 db  "CMP_LE" , 0
__literal68_bufferBytes StringHead_t 6
 db  "CMP_GT" , 0
__literal69_bufferBytes StringHead_t 6
 db  "CMP_GE" , 0
__literal70_bufferBytes StringHead_t 17
 db  "DECLARE_OR_ASSIGN" , 0
__literal71_bufferBytes StringHead_t 8
 db  "VARIABLE" , 0
__literal72_bufferBytes StringHead_t 3
 db  "NOP" , 0
__literal73_bufferBytes StringHead_t 9
 db  "TYPE_CAST" , 0
__literal74_bufferBytes StringHead_t 8
 db  "CALL_NEW" , 0
__literal75_bufferBytes StringHead_t 5
 db  "VCALL" , 0
__literal76_bufferBytes StringHead_t 10
 db  "[UNKNOWN: " , 0
__literal77_bufferBytes StringHead_t 1
 db  "]" , 0
__literal78_bufferBytes StringHead_t 2
 db  "&i" , 0
__literal79_bufferBytes StringHead_t 2
 db  "&s" , 0
__literal80_bufferBytes StringHead_t 4
 db  "null" , 0
__literal81_bufferBytes StringHead_t 1
 db  "i" , 0
__literal82_bufferBytes StringHead_t 1
 db  "s" , 0
__literal83_bufferBytes StringHead_t 1
 db  "f" , 0
__literal84_bufferBytes StringHead_t 1
 db  "b" , 0
__literal85_bufferBytes StringHead_t 1
 db  "a" , 0
__literal86_bufferBytes StringHead_t 1
 db  "m" , 0
__literal87_bufferBytes StringHead_t 3
 db  "and" , 0
__literal88_bufferBytes StringHead_t 2
 db  "or" , 0
__literal89_bufferBytes StringHead_t 1
 db  "-" , 0
__literal90_bufferBytes StringHead_t 1
 db  "+" , 0
__literal91_bufferBytes StringHead_t 1
 db  "~" , 0
__literal92_bufferBytes StringHead_t 1
 db  "*" , 0
__literal93_bufferBytes StringHead_t 1
 db  "/" , 0
__literal94_bufferBytes StringHead_t 2
 db  "//" , 0
__literal95_bufferBytes StringHead_t 2
 db  "eq" , 0
__literal96_bufferBytes StringHead_t 2
 db  "ne" , 0
__literal97_bufferBytes StringHead_t 2
 db  "lt" , 0
__literal98_bufferBytes StringHead_t 2
 db  "le" , 0
__literal99_bufferBytes StringHead_t 2
 db  "gt" , 0
__literal100_bufferBytes StringHead_t 2
 db  "ge" , 0
__literal101_bufferBytes StringHead_t 1
 db  "v" , 0
__literal102_bufferBytes StringHead_t 4
 db  "call" , 0
__literal103_bufferBytes StringHead_t 3
 db  "new" , 0
__literal104_bufferBytes StringHead_t 5
 db  "vcall" , 0
__literal105_bufferBytes StringHead_t 5
 db  "block" , 0
__literal106_bufferBytes StringHead_t 1
 db  "=" , 0
__literal107_bufferBytes StringHead_t 3
 db  "for" , 0
__literal108_bufferBytes StringHead_t 5
 db  "while" , 0
__literal109_bufferBytes StringHead_t 2
 db  "if" , 0
__literal110_bufferBytes StringHead_t 5
 db  "for_v" , 0
__literal111_bufferBytes StringHead_t 5
 db  "for_k" , 0
__literal112_bufferBytes StringHead_t 5
 db  "for_i" , 0
__literal113_bufferBytes StringHead_t 6
 db  "for_iv" , 0
__literal114_bufferBytes StringHead_t 6
 db  "for_kv" , 0
__literal115_bufferBytes StringHead_t 4
 db  "cast" , 0
__literal116_bufferBytes StringHead_t 3
 db  "nop" , 0
__literal117_bufferBytes StringHead_t 5
 db  "error" , 0
__literal118_bufferBytes StringHead_t 25
 db  "error: unhandled opcode: " , 0
__literal119_bufferBytes StringHead_t 46
 db  "error: unhandled opcode in AST_InvertBoolean: " , 0
__literal120_bufferBytes StringHead_t 5
 db  "array" , 0
__literal121_bufferBytes StringHead_t 3
 db  "map" , 0
__literal122_bufferBytes StringHead_t 14
 db  "__mold_syscall" , 0
__literal123_bufferBytes StringHead_t 9
 db  "sysCallId" , 0
__literal124_bufferBytes StringHead_t 4
 db  "hash" , 0
__literal125_bufferBytes StringHead_t 1
 db  "@" , 0
__literal126_bufferBytes StringHead_t 11
 db  "storedValue" , 0
__literal127_bufferBytes StringHead_t 1
 db  "," , 0
__literal128_bufferBytes StringHead_t 5
 db  "cast," , 0
__literal129_bufferBytes StringHead_t 11
 db  "astDataType" , 0
__literal130_bufferBytes StringHead_t 7
 db  "variant" , 0
__literal131_bufferBytes StringHead_t 18
 db  "_cachedAstDataType" , 0
__literal132_bufferBytes StringHead_t 10
 db  "symbolInfo" , 0
__literal133_bufferBytes StringHead_t 7
 db  "astType" , 0
__literal134_bufferBytes StringHead_t 12
 db  "astInnerType" , 0
__literal135_bufferBytes StringHead_t 5
 db  "proto" , 0
__literal136_bufferBytes StringHead_t 13
 db  "astTypeRetVal" , 0
__literal137_bufferBytes StringHead_t 57
 db  "error: unset AST data type at AST_GetDataType() at node #" , 0
__literal138_bufferBytes StringHead_t 7
 db  "[error]" , 0
__literal139_bufferBytes StringHead_t 5
 db  "local" , 0
__literal140_bufferBytes StringHead_t 5
 db  "param" , 0
__literal141_bufferBytes StringHead_t 2
 db  "rv" , 0
__literal142_bufferBytes StringHead_t 5
 db  "const" , 0
__literal143_bufferBytes StringHead_t 5
 db  "label" , 0
__literal144_bufferBytes StringHead_t 8
 db  "function" , 0
__literal145_bufferBytes StringHead_t 5
 db  "class" , 0
__literal146_bufferBytes StringHead_t 6
 db  "method" , 0
__literal147_bufferBytes StringHead_t 18
 db  "Created new object" , 0
__literal148_bufferBytes StringHead_t 3
 db  "app" , 0
__literal149_bufferBytes StringHead_t 7
 db  "deepIdx" , 0
__literal150_bufferBytes StringHead_t 7
 db  "deepMax" , 0
__literal151_bufferBytes StringHead_t 9
 db  "loopLevel" , 0
__literal152_bufferBytes StringHead_t 9
 db  "procLevel" , 0
__literal153_bufferBytes StringHead_t 8
 db  "literals" , 0
__literal154_bufferBytes StringHead_t 14
 db  "poolOfTempVars" , 0
__literal155_bufferBytes StringHead_t 5
 db  "int32" , 0
__literal156_bufferBytes StringHead_t 3
 db  "cnt" , 0
__literal157_bufferBytes StringHead_t 4
 db  "pool" , 0
__literal158_bufferBytes StringHead_t 5
 db  "int64" , 0
__literal159_bufferBytes StringHead_t 7
 db  "float64" , 0
__literal160_bufferBytes StringHead_t 6
 db  "bool32" , 0
__literal161_bufferBytes StringHead_t 6
 db  "string" , 0
__literal162_bufferBytes StringHead_t 11
 db  "globalTable" , 0
__literal163_bufferBytes StringHead_t 7
 db  "symbols" , 0
__literal164_bufferBytes StringHead_t 15
 db  "[ SymbolTable ]" , 0
__literal165_bufferBytes StringHead_t 17
 db  "attemp to assign " , 0
__literal166_bufferBytes StringHead_t 4
 db  " to " , 0
__literal167_bufferBytes StringHead_t 12
 db  "usedAsNumber" , 0
__literal168_bufferBytes StringHead_t 27
 db  "' was used as number before" , 0
__literal169_bufferBytes StringHead_t 18
 db  "redeclaration of '" , 0
__literal170_bufferBytes StringHead_t 9
 db  "writeHits" , 0
__literal171_bufferBytes StringHead_t 8
 db  "readHits" , 0
__literal172_bufferBytes StringHead_t 4
 db  "kind" , 0
__literal173_bufferBytes StringHead_t 32
 db  "' was not declared in this scope" , 0
__literal174_bufferBytes StringHead_t 11
 db  "Enter scope" , 0
__literal175_bufferBytes StringHead_t 10
 db  "too deep (" , 0
__literal176_bufferBytes StringHead_t 1
 db  ")" , 0
__literal177_bufferBytes StringHead_t 12
 db  "functionName" , 0
__literal178_bufferBytes StringHead_t 11
 db  "Leave scope" , 0
__literal179_bufferBytes StringHead_t 21
 db  "unmatched scope leave" , 0
__literal180_bufferBytes StringHead_t 19
 db  "' is not a function" , 0
__literal181_bufferBytes StringHead_t 7
 db  "builtIn" , 0
__literal182_bufferBytes StringHead_t 6
 db  "params" , 0
__literal183_bufferBytes StringHead_t 10
 db  "function '" , 0
__literal184_bufferBytes StringHead_t 19
 db  "' requires exactly " , 0
__literal185_bufferBytes StringHead_t 17
 db  " parameters, but " , 0
__literal186_bufferBytes StringHead_t 12
 db  " were passed" , 0
__literal187_bufferBytes StringHead_t 25
 db  "' does not return a value" , 0
__literal188_bufferBytes StringHead_t 24
 db  "unused return value of '" , 0
__literal189_bufferBytes StringHead_t 10
 db  "' function" , 0
__literal190_bufferBytes StringHead_t 16
 db  "' is not a class" , 0
__literal191_bufferBytes StringHead_t 43
 db  "attemp to declare local within global table" , 0
__literal192_bufferBytes StringHead_t 37
 db  "global directive used in global space" , 0
__literal193_bufferBytes StringHead_t 32
 db  "conflicting declaration 'global " , 0
__literal194_bufferBytes StringHead_t 9
 db  "__literal" , 0
__literal195_bufferBytes StringHead_t 7
 db  "__const" , 0
__literal196_bufferBytes StringHead_t 4
 db  "node" , 0
__literal197_bufferBytes StringHead_t 15
 db  "isAstTypeFrozen" , 0
__literal198_bufferBytes StringHead_t 4
 db  "type" , 0
__literal199_bufferBytes StringHead_t 17
 db  "Assign AST type [" , 0
__literal200_bufferBytes StringHead_t 15
 db  "] to variable [" , 0
__literal201_bufferBytes StringHead_t 42
 db  "Ignored ineffective AST type change from [" , 0
__literal202_bufferBytes StringHead_t 6
 db  "] to [" , 0
__literal203_bufferBytes StringHead_t 16
 db  "] for variable [" , 0
__literal204_bufferBytes StringHead_t 23
 db  "Removed unused symbol [" , 0
__literal205_bufferBytes StringHead_t 1
 db  "l" , 0
__literal206_bufferBytes StringHead_t 10
 db  "__jmptable" , 0
__literal207_bufferBytes StringHead_t 6
 db  "labels" , 0
__literal208_bufferBytes StringHead_t 14
 db  "Get temp var [" , 0
__literal209_bufferBytes StringHead_t 13
 db  "] from pool (" , 0
__literal210_bufferBytes StringHead_t 3
 db  "tmp" , 0
__literal211_bufferBytes StringHead_t 6
 db  "isTemp" , 0
__literal212_bufferBytes StringHead_t 24
 db  "Allocated new temp var [" , 0
__literal213_bufferBytes StringHead_t 3
 db  "] (" , 0
__literal214_bufferBytes StringHead_t 18
 db  "Release temp var [" , 0
__literal215_bufferBytes StringHead_t 11
 db  "] to pool (" , 0
__literal216_bufferBytes StringHead_t 15
 db  "importedModules" , 0
__literal217_bufferBytes StringHead_t 6
 db  "parser" , 0
__literal218_bufferBytes StringHead_t 18
 db  "Resolving module [" , 0
__literal219_bufferBytes StringHead_t 4
 db  "]..." , 0
__literal220_bufferBytes StringHead_t 23
 db  "[ ASTSymbolsCollector ]" , 0
__literal221_bufferBytes StringHead_t 11
 db  "symbolTable" , 0
__literal222_bufferBytes StringHead_t 30
 db  "string type cannot be modified" , 0
__literal223_bufferBytes StringHead_t 6
 db  "vtable" , 0
__literal224_bufferBytes StringHead_t 8
 db  "fullName" , 0
__literal225_bufferBytes StringHead_t 2
 db  "__" , 0
__literal226_bufferBytes StringHead_t 1
 db  "_" , 0
__literal227_bufferBytes StringHead_t 1
 db  "$" , 0
__literal228_bufferBytes StringHead_t 9
 db  "className" , 0
__literal229_bufferBytes StringHead_t 10
 db  "classProto" , 0
__literal230_bufferBytes StringHead_t 10
 db  "baseMethod" , 0
__literal231_bufferBytes StringHead_t 12
 db  "isOverloaded" , 0
__literal232_bufferBytes StringHead_t 18
 db  "propertyClassNames" , 0
__literal233_bufferBytes StringHead_t 4
 db  "this" , 0
__literal234_bufferBytes StringHead_t 13
 db  "astTypeParams" , 0
__literal235_bufferBytes StringHead_t 23
 db  "unset return variable '" , 0
__literal236_bufferBytes StringHead_t 6
 db  "' in '" , 0
__literal237_bufferBytes StringHead_t 4
 db  "argv" , 0
__literal238_bufferBytes StringHead_t 4
 db  "argc" , 0
__literal239_bufferBytes StringHead_t 19
 db  "__isUsedAsTypeofArg" , 0
__literal240_bufferBytes StringHead_t 51
 db  "Class mismatch while assigning new object at node #" , 0
__literal241_bufferBytes StringHead_t 18
 db  "attempted to use '" , 0
__literal242_bufferBytes StringHead_t 5
 db  "' as " , 0
__literal243_bufferBytes StringHead_t 17
 db  "; it was used as " , 0
__literal244_bufferBytes StringHead_t 7
 db  " before" , 0
__literal245_bufferBytes StringHead_t 28
 db  "' cannot be used as iterator" , 0
__literal246_bufferBytes StringHead_t 39
 db  "' is already defined in another context" , 0
__literal247_bufferBytes StringHead_t 14
 db  "usedAsIterator" , 0
__literal248_bufferBytes StringHead_t 5
 db  "super" , 0
__literal249_bufferBytes StringHead_t 33
 db  "Recursive call detected at node #" , 0
__literal250_bufferBytes StringHead_t 2
 db  " (" , 0
__literal251_bufferBytes StringHead_t 11
 db  "isRecursive" , 0
__literal252_bufferBytes StringHead_t 17
 db  "isUsedAsLeftValue" , 0
__literal253_bufferBytes StringHead_t 55
 db  "error: only block or program nodes can own symbol table" , 0
__literal254_bufferBytes StringHead_t 16
 db  "[ ASTEvaluator ]" , 0
__literal255_bufferBytes StringHead_t 8
 db  "__parent" , 0
__literal256_bufferBytes StringHead_t 9
 db  " method ", 34, "" , 0
__literal257_bufferBytes StringHead_t 1
 db  "." , 0
__literal258_bufferBytes StringHead_t 21
 db  "", 34, " has no return value" , 0
__literal259_bufferBytes StringHead_t 8
 db  "method ", 34, "" , 0
__literal260_bufferBytes StringHead_t 21
 db  "array or map expected" , 0
__literal261_bufferBytes StringHead_t 15
 db  "FileOpenForRead" , 0
__literal262_bufferBytes StringHead_t 16
 db  "FileOpenForWrite" , 0
__literal263_bufferBytes StringHead_t 17
 db  "FileOpenForCreate" , 0
__literal264_bufferBytes StringHead_t 9
 db  "FileClose" , 0
__literal265_bufferBytes StringHead_t 12
 db  "FileReadInt8" , 0
__literal266_bufferBytes StringHead_t 13
 db  "FileReadInt16" , 0
__literal267_bufferBytes StringHead_t 13
 db  "FileReadInt32" , 0
__literal268_bufferBytes StringHead_t 13
 db  "FileReadInt64" , 0
__literal269_bufferBytes StringHead_t 15
 db  "FileReadFloat32" , 0
__literal270_bufferBytes StringHead_t 15
 db  "FileReadFloat64" , 0
__literal271_bufferBytes StringHead_t 13
 db  "FileReadBool8" , 0
__literal272_bufferBytes StringHead_t 14
 db  "FileReadBool16" , 0
__literal273_bufferBytes StringHead_t 14
 db  "FileReadBool32" , 0
__literal274_bufferBytes StringHead_t 14
 db  "FileReadBool64" , 0
__literal275_bufferBytes StringHead_t 12
 db  "FileReadChar" , 0
__literal276_bufferBytes StringHead_t 13
 db  "FileWriteInt8" , 0
__literal277_bufferBytes StringHead_t 13
 db  "FileWriteChar" , 0
__literal278_bufferBytes StringHead_t 14
 db  "FileWriteInt16" , 0
__literal279_bufferBytes StringHead_t 14
 db  "FileWriteInt32" , 0
__literal280_bufferBytes StringHead_t 14
 db  "FileWriteInt64" , 0
__literal281_bufferBytes StringHead_t 16
 db  "FileWriteFloat64" , 0
__literal282_bufferBytes StringHead_t 8
 db  "FileLoad" , 0
__literal283_bufferBytes StringHead_t 3
 db  "ord" , 0
__literal284_bufferBytes StringHead_t 3
 db  "asc" , 0
__literal285_bufferBytes StringHead_t 12
 db  "ParseInteger" , 0
__literal286_bufferBytes StringHead_t 10
 db  "ParseFloat" , 0
__literal287_bufferBytes StringHead_t 6
 db  "bitand" , 0
__literal288_bufferBytes StringHead_t 5
 db  "bitor" , 0
__literal289_bufferBytes StringHead_t 6
 db  "bitxor" , 0
__literal290_bufferBytes StringHead_t 6
 db  "bitnot" , 0
__literal291_bufferBytes StringHead_t 4
 db  "exit" , 0
__literal292_bufferBytes StringHead_t 3
 db  "die" , 0
__literal293_bufferBytes StringHead_t 3
 db  "str" , 0
__literal294_bufferBytes StringHead_t 3
 db  "len" , 0
__literal295_bufferBytes StringHead_t 6
 db  "typeof" , 0
__literal296_bufferBytes StringHead_t 23
 db  "__mold_printToStdOutput" , 0
__literal297_bufferBytes StringHead_t 14
 db  "__mold_warning" , 0
__literal298_bufferBytes StringHead_t 29
 db  "__mold_arrayInsertBeforeFirst" , 0
__literal299_bufferBytes StringHead_t 19
 db  "[ ASTPreprocessor ]" , 0
__literal300_bufferBytes StringHead_t 7
 db  "defined" , 0
__literal301_bufferBytes StringHead_t 9
 db  "undefined" , 0
__literal302_bufferBytes StringHead_t 9
 db  "built-in " , 0
__literal303_bufferBytes StringHead_t 27
 db  " function requires exactly " , 0
__literal304_bufferBytes StringHead_t 19
 db  " parameter(s), but " , 0
__literal305_bufferBytes StringHead_t 5
 db  "@last" , 0
__literal306_bufferBytes StringHead_t 6
 db  "@first" , 0
__literal307_bufferBytes StringHead_t 22
 db  "unsupported selector '" , 0
__literal308_bufferBytes StringHead_t 17
 db  "not implemented: " , 0
__literal309_bufferBytes StringHead_t 7
 db  "globals" , 0
__literal310_bufferBytes StringHead_t 22
 db  "[ ASTConstantFolding ]" , 0
__literal311_bufferBytes StringHead_t 10
 db  "Set node #" , 0
__literal312_bufferBytes StringHead_t 9
 db  " to imm ", 34, "" , 0
__literal313_bufferBytes StringHead_t 3
 db  "", 34, " (" , 0
__literal314_bufferBytes StringHead_t 45
 db  "error: unhandled result in constant folding: " , 0
__literal315_bufferBytes StringHead_t 1
 db  " " , 0
__literal316_bufferBytes StringHead_t 6
 db  "nextId" , 0
__literal317_bufferBytes StringHead_t 5
 db  "__cse" , 0
__literal318_bufferBytes StringHead_t 19
 db  "[ ASTOptimizerCSE ]" , 0
__literal319_bufferBytes StringHead_t 29
 db  "Useless self-assign at node #" , 0
__literal320_bufferBytes StringHead_t 26
 db  "Expression found at node #" , 0
__literal321_bufferBytes StringHead_t 3
 db  ", (" , 0
__literal322_bufferBytes StringHead_t 32
 db  "Common subexpression at nodes (#" , 0
__literal323_bufferBytes StringHead_t 3
 db  ", #" , 0
__literal324_bufferBytes StringHead_t 3
 db  ") (" , 0
__literal325_bufferBytes StringHead_t 32
 db  "error: cse found, but not emited" , 0
__literal326_bufferBytes StringHead_t 30
 db  "[ ASTOptimizerDeadCodeRemove ]" , 0
__literal327_bufferBytes StringHead_t 13
 db  "Remove node #" , 0
__literal328_bufferBytes StringHead_t 16
 db  "Replacing node #" , 0
__literal329_bufferBytes StringHead_t 5
 db  " by #" , 0
__literal330_bufferBytes StringHead_t 71
 db  "error: unset symbol table at ASTOptimizerDeadCodeRemove::_processNode()" , 0
__literal331_bufferBytes StringHead_t 63
 db  "error: unset node at ASTOptimizerDeadCodeRemove::_processNode()" , 0
__literal332_bufferBytes StringHead_t 24
 db  "Empty for loop at node #" , 0
__literal333_bufferBytes StringHead_t 26
 db  "Empty while loop at node #" , 0
__literal334_bufferBytes StringHead_t 24
 db  "While false {} at node #" , 0
__literal335_bufferBytes StringHead_t 24
 db  "Remove empty else node #" , 0
__literal336_bufferBytes StringHead_t 27
 db  "Remove empty if body node #" , 0
__literal337_bufferBytes StringHead_t 29
 db  "Invert condition at if node #" , 0
__literal338_bufferBytes StringHead_t 18
 db  "Empty if at node #" , 0
__literal339_bufferBytes StringHead_t 23
 db  "if true {...} at node #" , 0
__literal340_bufferBytes StringHead_t 35
 db  "if false {...} else {...} at node #" , 0
__literal341_bufferBytes StringHead_t 24
 db  "if false {...} at node #" , 0
__literal342_bufferBytes StringHead_t 14
 db  "hasSideEffects" , 0
__literal343_bufferBytes StringHead_t 24
 db  "Useless assign at node #" , 0
__literal344_bufferBytes StringHead_t 34
 db  "Reduced nested type cast at node #" , 0
__literal345_bufferBytes StringHead_t 31
 db  "Useless function call at node #" , 0
__literal346_bufferBytes StringHead_t 21
 db  "[ ASTOptimizerVCall ]" , 0
__literal347_bufferBytes StringHead_t 15
 db  "Skipped vcall [" , 0
__literal348_bufferBytes StringHead_t 11
 db  "] at node #" , 0
__literal349_bufferBytes StringHead_t 15
 db  "Changed vcall [" , 0
__literal350_bufferBytes StringHead_t 28
 db  "] to ordinary call at node #" , 0
__literal351_bufferBytes StringHead_t 18
 db  "[ ASTOptimizerIf ]" , 0
__literal352_bufferBytes StringHead_t 13
 db  "arrayOfValues" , 0
__literal353_bufferBytes StringHead_t 8
 db  "valueMin" , 0
__literal354_bufferBytes StringHead_t 8
 db  "valueMax" , 0
__literal355_bufferBytes StringHead_t 16
 db  "symbolsCollector" , 0
__literal356_bufferBytes StringHead_t 22
 db  "[ ASTOptimizerInline ]" , 0
__literal357_bufferBytes StringHead_t 32
 db  "Skipped recursive call at node #" , 0
__literal358_bufferBytes StringHead_t 8
 db  "__inline" , 0
__literal359_bufferBytes StringHead_t 22
 db  "Inject function body (" , 0
__literal360_bufferBytes StringHead_t 11
 db  ") at node #" , 0
__literal361_bufferBytes StringHead_t 15
 db  "[ ASTTypeCast ]" , 0
__literal362_bufferBytes StringHead_t 45
 db  "Type mismatch at arithmetic expression node #" , 0
__literal363_bufferBytes StringHead_t 4
 db  " vs " , 0
__literal364_bufferBytes StringHead_t 61
 db  "runtime error: implicit type conversion not supported anymore" , 0
__literal365_bufferBytes StringHead_t 4
 db  "code" , 0
__literal366_bufferBytes StringHead_t 7
 db  "codeCnt" , 0
__literal367_bufferBytes StringHead_t 9
 db  "labelsCnt" , 0
__literal368_bufferBytes StringHead_t 9
 db  "targetIps" , 0
__literal369_bufferBytes StringHead_t 12
 db  "targetIpsCnt" , 0
__literal370_bufferBytes StringHead_t 10
 db  "procedures" , 0
__literal371_bufferBytes StringHead_t 13
 db  "proceduresCnt" , 0
__literal372_bufferBytes StringHead_t 6
 db  "tmpMax" , 0
__literal373_bufferBytes StringHead_t 8
 db  "localMax" , 0
__literal374_bufferBytes StringHead_t 9
 db  "globalMax" , 0
__literal375_bufferBytes StringHead_t 8
 db  "classMap" , 0
__literal376_bufferBytes StringHead_t 9
 db  "classList" , 0
__literal377_bufferBytes StringHead_t 12
 db  "classListCnt" , 0
__literal378_bufferBytes StringHead_t 10
 db  "methodsMap" , 0
__literal379_bufferBytes StringHead_t 11
 db  "methodsList" , 0
__literal380_bufferBytes StringHead_t 14
 db  "methodsListCnt" , 0
__literal381_bufferBytes StringHead_t 8
 db  "comments" , 0
__literal382_bufferBytes StringHead_t 11
 db  "commentsCnt" , 0
__literal383_bufferBytes StringHead_t 14
 db  "unresolvedJmps" , 0
__literal384_bufferBytes StringHead_t 17
 db  "unresolvedJmpsCnt" , 0
__literal385_bufferBytes StringHead_t 9
 db  "startAddr" , 0
__literal386_bufferBytes StringHead_t 9
 db  "paramsCnt" , 0
__literal387_bufferBytes StringHead_t 7
 db  "endAddr" , 0
__literal388_bufferBytes StringHead_t 9
 db  "localsCnt" , 0
__literal389_bufferBytes StringHead_t 8
 db  "tempsCnt" , 0
__literal390_bufferBytes StringHead_t 29
 db  "error: jmp to undefined label" , 0
__literal391_bufferBytes StringHead_t 25
 db  "error: invalid label id '" , 0
__literal392_bufferBytes StringHead_t 17
 db  "error: label id '" , 0
__literal393_bufferBytes StringHead_t 19
 db  "' is already emited" , 0
__literal394_bufferBytes StringHead_t 27
 db  "astOptimizerConstantFolding" , 0
__literal395_bufferBytes StringHead_t 19
 db  "astSymbolsCollector" , 0
__literal396_bufferBytes StringHead_t 12
 db  "astEvaluator" , 0
__literal397_bufferBytes StringHead_t 15
 db  "astPreprocessor" , 0
__literal398_bufferBytes StringHead_t 15
 db  "astOptimizerCSE" , 0
__literal399_bufferBytes StringHead_t 26
 db  "astOptimizerDeadCodeRemove" , 0
__literal400_bufferBytes StringHead_t 17
 db  "astOptimizerVCall" , 0
__literal401_bufferBytes StringHead_t 14
 db  "astOptimizerIf" , 0
__literal402_bufferBytes StringHead_t 18
 db  "astOptimizerInline" , 0
__literal403_bufferBytes StringHead_t 11
 db  "astTypeCast" , 0
__literal404_bufferBytes StringHead_t 17
 db  "astModuleResolver" , 0
__literal405_bufferBytes StringHead_t 13
 db  "Ready to work" , 0
__literal406_bufferBytes StringHead_t 6
 db  "logCtx" , 0
__literal407_bufferBytes StringHead_t 11
 db  "[ AppMold ]" , 0
__literal408_bufferBytes StringHead_t 1
 db  "(" , 0
__literal409_bufferBytes StringHead_t 2
 db  "  " , 0
__literal410_bufferBytes StringHead_t 2
 db  ", " , 0
__literal411_bufferBytes StringHead_t 1
 db  "[" , 0
__literal412_bufferBytes StringHead_t 2
 db  "{}" , 0
__literal413_bufferBytes StringHead_t 5
 db  "[map]" , 0
__literal414_bufferBytes StringHead_t 6
 db  " const" , 0
__literal415_bufferBytes StringHead_t 6
 db  "class " , 0
__literal416_bufferBytes StringHead_t 8
 db  "endclass" , 0
__literal417_bufferBytes StringHead_t 7
 db  "method " , 0
__literal418_bufferBytes StringHead_t 9
 db  "function " , 0
__literal419_bufferBytes StringHead_t 3
 db  " ->" , 0
__literal420_bufferBytes StringHead_t 9
 db  "endmethod" , 0
__literal421_bufferBytes StringHead_t 11
 db  "endfunction" , 0
__literal422_bufferBytes StringHead_t 4
 db  "new " , 0
__literal423_bufferBytes StringHead_t 3
 db  "if " , 0
__literal424_bufferBytes StringHead_t 4
 db  "else" , 0
__literal425_bufferBytes StringHead_t 5
 db  "endif" , 0
__literal426_bufferBytes StringHead_t 7
 db  "switch " , 0
__literal427_bufferBytes StringHead_t 7
 db  "  when " , 0
__literal428_bufferBytes StringHead_t 11
 db  "  otherwise" , 0
__literal429_bufferBytes StringHead_t 4
 db  "    " , 0
__literal430_bufferBytes StringHead_t 9
 db  "endswitch" , 0
__literal431_bufferBytes StringHead_t 5
 db  "conv_" , 0
__literal432_bufferBytes StringHead_t 4
 db  "_to_" , 0
__literal433_bufferBytes StringHead_t 6
 db  "while " , 0
__literal434_bufferBytes StringHead_t 8
 db  "endwhile" , 0
__literal435_bufferBytes StringHead_t 4
 db  "for " , 0
__literal436_bufferBytes StringHead_t 4
 db  " in " , 0
__literal437_bufferBytes StringHead_t 4
 db  " .. " , 0
__literal438_bufferBytes StringHead_t 4
 db  " by " , 0
__literal439_bufferBytes StringHead_t 6
 db  "endfor" , 0
__literal440_bufferBytes StringHead_t 11
 db  "for values " , 0
__literal441_bufferBytes StringHead_t 1
 db  "{" , 0
__literal442_bufferBytes StringHead_t 1
 db  "}" , 0
__literal443_bufferBytes StringHead_t 3
 db  " = " , 0
__literal444_bufferBytes StringHead_t 2
 db  "- " , 0
__literal445_bufferBytes StringHead_t 2
 db  "is" , 0
__literal446_bufferBytes StringHead_t 4
 db  "isnt" , 0
__literal447_bufferBytes StringHead_t 1
 db  ">" , 0
__literal448_bufferBytes StringHead_t 2
 db  ">=" , 0
__literal449_bufferBytes StringHead_t 1
 db  "<" , 0
__literal450_bufferBytes StringHead_t 2
 db  "<=" , 0
__literal451_bufferBytes StringHead_t 18
 db  "<table border=", 34, "1", 34, ">" , 0
__literal452_bufferBytes StringHead_t 136
 db  "<tr><th>var</th><th>write</th><th>read</th><th>init value</th><th>kind</th><th>data type</th><th>loop level</th><th>class name</th></tr>" , 0
__literal453_bufferBytes StringHead_t 1
 db  "", 34, "" , 0
__literal454_bufferBytes StringHead_t 4
 db  "<tr>" , 0
__literal455_bufferBytes StringHead_t 4
 db  "<td>" , 0
__literal456_bufferBytes StringHead_t 5
 db  "</td>" , 0
__literal457_bufferBytes StringHead_t 10
 db  "<td>-</td>" , 0
__literal458_bufferBytes StringHead_t 5
 db  "</tr>" , 0
__literal459_bufferBytes StringHead_t 8
 db  "</table>" , 0
__literal460_bufferBytes StringHead_t 33
 db  "<table style=", 34, "border: solid 1px", 34, ">" , 0
__literal461_bufferBytes StringHead_t 9
 db  "<tr><td>#" , 0
__literal462_bufferBytes StringHead_t 3
 db  "<b>" , 0
__literal463_bufferBytes StringHead_t 14
 db  "</b></td></tr>" , 0
__literal464_bufferBytes StringHead_t 18
 db  "<tr><td><small><i>" , 0
__literal465_bufferBytes StringHead_t 22
 db  "</i></small></td></tr>" , 0
__literal466_bufferBytes StringHead_t 49
 db  "<tr><td><small>has side effects</small></td></tr>" , 0
__literal467_bufferBytes StringHead_t 8
 db  "<tr><td>" , 0
__literal468_bufferBytes StringHead_t 10
 db  "</td></tr>" , 0
__literal469_bufferBytes StringHead_t 6
 db  "' <i>(" , 0
__literal470_bufferBytes StringHead_t 5
 db  ")</i>" , 0
__literal471_bufferBytes StringHead_t 12
 db  "<tr><td><i>(" , 0
__literal472_bufferBytes StringHead_t 15
 db  ")</i></td></tr>" , 0
__literal473_bufferBytes StringHead_t 12
 db  "<tr><td><hr>" , 0
__literal474_bufferBytes StringHead_t 4
 db  "<br>" , 0
__literal475_bufferBytes StringHead_t 1
 db  "?" , 0
__literal476_bufferBytes StringHead_t 12
 db  "<html><body>" , 0
__literal477_bufferBytes StringHead_t 14
 db  "</body></html>" , 0
__literal478_bufferBytes StringHead_t 17
 db  "currentClassProto" , 0
__literal479_bufferBytes StringHead_t 20
 db  "currentFunctionProto" , 0
__literal480_bufferBytes StringHead_t 19
 db  "symbolTableForTemps" , 0
__literal481_bufferBytes StringHead_t 17
 db  "[ ASTTranslator ]" , 0
__literal482_bufferBytes StringHead_t 46
 db  "not implemented: ASTTranslator._loadArgsVector" , 0
__literal483_bufferBytes StringHead_t 45
 db  "not implemented: ASTTranslator._loadArgsCount" , 0
__literal484_bufferBytes StringHead_t 39
 db  "not implemented: ASTTranslator._syscall" , 0
__literal485_bufferBytes StringHead_t 41
 db  "not implemented: ASTTranslator._loadArray" , 0
__literal486_bufferBytes StringHead_t 39
 db  "not implemented: ASTTranslator._loadMap" , 0
__literal487_bufferBytes StringHead_t 40
 db  "not implemented: ASTTranslator._loadNull" , 0
__literal488_bufferBytes StringHead_t 39
 db  "not implemented: ASTTranslator._loadImm" , 0
__literal489_bufferBytes StringHead_t 48
 db  "not implemented: ASTTranslator._loadImmAsVariant" , 0
__literal490_bufferBytes StringHead_t 44
 db  "not implemented: ASTTranslator._loadVariable" , 0
__literal491_bufferBytes StringHead_t 36
 db  "not implemented: ASTTranslator._call" , 0
__literal492_bufferBytes StringHead_t 44
 db  "not implemented: ASTTranslator._invokeMethod" , 0
__literal493_bufferBytes StringHead_t 41
 db  "not implemented: ASTTranslator._callPrint" , 0
__literal494_bufferBytes StringHead_t 35
 db  "not implemented: ASTTranslator._neg" , 0
__literal495_bufferBytes StringHead_t 35
 db  "not implemented: ASTTranslator._add" , 0
__literal496_bufferBytes StringHead_t 42
 db  "not implemented: ASTTranslator._stringJoin" , 0
__literal497_bufferBytes StringHead_t 35
 db  "not implemented: ASTTranslator._sub" , 0
__literal498_bufferBytes StringHead_t 35
 db  "not implemented: ASTTranslator._mul" , 0
__literal499_bufferBytes StringHead_t 35
 db  "not implemented: ASTTranslator._div" , 0
__literal500_bufferBytes StringHead_t 36
 db  "not implemented: ASTTranslator._idiv" , 0
__literal501_bufferBytes StringHead_t 41
 db  "not implemented: ASTTranslator._compareEQ" , 0
__literal502_bufferBytes StringHead_t 42
 db  "not implemented: ASTTranslator._compareNEQ" , 0
__literal503_bufferBytes StringHead_t 41
 db  "not implemented: ASTTranslator._compareLT" , 0
__literal504_bufferBytes StringHead_t 41
 db  "not implemented: ASTTranslator._compareLE" , 0
__literal505_bufferBytes StringHead_t 41
 db  "not implemented: ASTTranslator._compareGT" , 0
__literal506_bufferBytes StringHead_t 41
 db  "not implemented: ASTTranslator._compareGE" , 0
__literal507_bufferBytes StringHead_t 39
 db  "not implemented: ASTTranslator._boolAnd" , 0
__literal508_bufferBytes StringHead_t 38
 db  "not implemented: ASTTranslator._boolOr" , 0
__literal509_bufferBytes StringHead_t 45
 db  "not implemented: ASTTranslator._loadFromIndex" , 0
__literal510_bufferBytes StringHead_t 43
 db  "not implemented: ASTTranslator._loadFromKey" , 0
__literal511_bufferBytes StringHead_t 44
 db  "not implemented: ASTTranslator._storeAtIndex" , 0
__literal512_bufferBytes StringHead_t 42
 db  "not implemented: ASTTranslator._storeAtKey" , 0
__literal513_bufferBytes StringHead_t 51
 db  "not implemented: ASTTranslator._storeAtIndexAndDrop" , 0
__literal514_bufferBytes StringHead_t 49
 db  "not implemented: ASTTranslator._storeAtKeyAndDrop" , 0
__literal515_bufferBytes StringHead_t 44
 db  "not implemented: ASTTranslator._createObject" , 0
__literal516_bufferBytes StringHead_t 39
 db  "not implemented: ASTTranslator._convert" , 0
__literal517_bufferBytes StringHead_t 48
 db  "not implemented: ASTTranslator._emitFunctionBody" , 0
__literal518_bufferBytes StringHead_t 42
 db  "not implemented: ASTTranslator._dropRetVal" , 0
__literal519_bufferBytes StringHead_t 47
 db  "not implemented: ASTTranslator._declareFunction" , 0
__literal520_bufferBytes StringHead_t 44
 db  "not implemented: ASTTranslator._declareClass" , 0
__literal521_bufferBytes StringHead_t 47
 db  "not implemented: ASTTranslator._declareVariable" , 0
__literal522_bufferBytes StringHead_t 38
 db  "not implemented: ASTTranslator._assign" , 0
__literal523_bufferBytes StringHead_t 55
 db  "not implemented: ASTTranslator._evaluateNodeLazyBoolAnd" , 0
__literal524_bufferBytes StringHead_t 54
 db  "not implemented: ASTTranslator._evaluateNodeLazyBoolOr" , 0
__literal525_bufferBytes StringHead_t 46
 db  "not implemented: ASTTranslator._executeNodeFor" , 0
__literal526_bufferBytes StringHead_t 48
 db  "not implemented: ASTTranslator._executeNodeWhile" , 0
__literal527_bufferBytes StringHead_t 45
 db  "not implemented: ASTTranslator._executeNodeIf" , 0
__literal528_bufferBytes StringHead_t 49
 db  "not implemented: ASTTranslator._executeNodeSwitch" , 0
__literal529_bufferBytes StringHead_t 18
 db  "Emitting function " , 0
__literal530_bufferBytes StringHead_t 3
 db  "..." , 0
__literal531_bufferBytes StringHead_t 17
 db  "Function emited: " , 0
__literal532_bufferBytes StringHead_t 21
 db  "Going to emit globals" , 0
__literal533_bufferBytes StringHead_t 15
 db  "Globals emmited" , 0
__literal534_bufferBytes StringHead_t 29
 db  "super called outside of class" , 0
__literal535_bufferBytes StringHead_t 11
 db  "constructor" , 0
__literal536_bufferBytes StringHead_t 35
 db  "super called outside of constructor" , 0
__literal537_bufferBytes StringHead_t 18
 db  " has no base class" , 0
__literal538_bufferBytes StringHead_t 28
 db  " has no constructor declared" , 0
__literal539_bufferBytes StringHead_t 34
 db  "base constructor requires exactly " , 0
__literal540_bufferBytes StringHead_t 11
 db  "__mold_this" , 0
__literal541_bufferBytes StringHead_t 13
 db  "isConstructor" , 0
__literal542_bufferBytes StringHead_t 15
 db  "_evaluateNode: " , 0
__literal543_bufferBytes StringHead_t 12
 db  "isTranslated" , 0
__literal544_bufferBytes StringHead_t 6
 db  "node #" , 0
__literal545_bufferBytes StringHead_t 29
 db  " is already translated (eval)" , 0
__literal546_bufferBytes StringHead_t 7
 db  "tempVar" , 0
__literal547_bufferBytes StringHead_t 23
 db  "unexpected rvalue node " , 0
__literal548_bufferBytes StringHead_t 14
 db  "_executeNode: " , 0
__literal549_bufferBytes StringHead_t 22
 db  " is already translated" , 0
__literal550_bufferBytes StringHead_t 5
 db  "start" , 0
__literal551_bufferBytes StringHead_t 21
 db  "duplicateOnFirstWrite" , 0
__literal552_bufferBytes StringHead_t 23
 db  "unexpected lvalue node " , 0
__literal553_bufferBytes StringHead_t 37
 db  "global directive expects string, but " , 0
__literal554_bufferBytes StringHead_t 7
 db  " passed" , 0
__literal555_bufferBytes StringHead_t 15
 db  "unknown opcode " , 0
__literal556_bufferBytes StringHead_t 24
 db  "unexpected symbol kind '" , 0
__literal557_bufferBytes StringHead_t 3
 db  "' (" , 0
__literal558_bufferBytes StringHead_t 7
 db  "labelId" , 0
__literal559_bufferBytes StringHead_t 29
 db  "Going to emit function body ", 34, "" , 0
__literal560_bufferBytes StringHead_t 3
 db  "ptr" , 0
__literal561_bufferBytes StringHead_t 47
 db  "-----------------------------------------------" , 0
__literal562_bufferBytes StringHead_t 21
 db  "Function body emmited" , 0
__literal563_bufferBytes StringHead_t 4
 db  "data" , 0
__literal564_bufferBytes StringHead_t 4
 db  "size" , 0
__literal565_bufferBytes StringHead_t 21
 db  "error: stack is empty" , 0
__literal566_bufferBytes StringHead_t 28
 db  "error: peek from empty stack" , 0
__literal567_bufferBytes StringHead_t 12
 db  "error: peek " , 0
__literal568_bufferBytes StringHead_t 16
 db  " item, but only " , 0
__literal569_bufferBytes StringHead_t 10
 db  " available" , 0
__literal570_bufferBytes StringHead_t 5
 db  "stack" , 0
__literal571_bufferBytes StringHead_t 12
 db  "outputObject" , 0
__literal572_bufferBytes StringHead_t 20
 db  "arrayOfCalledMethods" , 0
__literal573_bufferBytes StringHead_t 18
 db  "mapOfCalledMethods" , 0
__literal574_bufferBytes StringHead_t 13
 db  "methodEmitted" , 0
__literal575_bufferBytes StringHead_t 7
 db  "comment" , 0
__literal576_bufferBytes StringHead_t 3
 db  "jmp" , 0
__literal577_bufferBytes StringHead_t 12
 db  "jmp_by_table" , 0
__literal578_bufferBytes StringHead_t 4
 db  "move" , 0
__literal579_bufferBytes StringHead_t 4
 db  "proc" , 0
__literal580_bufferBytes StringHead_t 10
 db  "init_frame" , 0
__literal581_bufferBytes StringHead_t 4
 db  "endp" , 0
__literal582_bufferBytes StringHead_t 3
 db  "ret" , 0
__literal583_bufferBytes StringHead_t 3
 db  "neg" , 0
__literal584_bufferBytes StringHead_t 3
 db  "add" , 0
__literal585_bufferBytes StringHead_t 11
 db  "string_join" , 0
__literal586_bufferBytes StringHead_t 3
 db  "sub" , 0
__literal587_bufferBytes StringHead_t 3
 db  "mul" , 0
__literal588_bufferBytes StringHead_t 3
 db  "div" , 0
__literal589_bufferBytes StringHead_t 4
 db  "idiv" , 0
__literal590_bufferBytes StringHead_t 12
 db  "create_array" , 0
__literal591_bufferBytes StringHead_t 10
 db  "create_map" , 0
__literal592_bufferBytes StringHead_t 9
 db  "load_null" , 0
__literal593_bufferBytes StringHead_t 10
 db  "load_int32" , 0
__literal594_bufferBytes StringHead_t 21
 db  "conv_int64_to_variant" , 0
__literal595_bufferBytes StringHead_t 12
 db  "load_float64" , 0
__literal596_bufferBytes StringHead_t 11
 db  "load_bool32" , 0
__literal597_bufferBytes StringHead_t 20
 db  "unhandled imm type: " , 0
__literal598_bufferBytes StringHead_t 21
 db  "conv_int32_to_variant" , 0
__literal599_bufferBytes StringHead_t 23
 db  "conv_float64_to_variant" , 0
__literal600_bufferBytes StringHead_t 22
 db  "conv_bool32_to_variant" , 0
__literal601_bufferBytes StringHead_t 6
 db  "cmp_eq" , 0
__literal602_bufferBytes StringHead_t 6
 db  "cmp_ne" , 0
__literal603_bufferBytes StringHead_t 6
 db  "cmp_lt" , 0
__literal604_bufferBytes StringHead_t 6
 db  "cmp_le" , 0
__literal605_bufferBytes StringHead_t 6
 db  "cmp_gt" , 0
__literal606_bufferBytes StringHead_t 6
 db  "cmp_ge" , 0
__literal607_bufferBytes StringHead_t 7
 db  "syscall" , 0
__literal608_bufferBytes StringHead_t 26
 db  "print_array_of_variants_ln" , 0
__literal609_bufferBytes StringHead_t 10
 db  "load_index" , 0
__literal610_bufferBytes StringHead_t 8
 db  "load_key" , 0
__literal611_bufferBytes StringHead_t 11
 db  "store_index" , 0
__literal612_bufferBytes StringHead_t 9
 db  "store_key" , 0
__literal613_bufferBytes StringHead_t 53
 db  "error: missing classProto in MIR_OPCODE_CREATE_OBJECT" , 0
__literal614_bufferBytes StringHead_t 13
 db  "create_object" , 0
__literal615_bufferBytes StringHead_t 12
 db  "jmp_if_false" , 0
__literal616_bufferBytes StringHead_t 11
 db  "jmp_if_true" , 0
__literal617_bufferBytes StringHead_t 29
 db  "-----------------------------" , 0
__literal618_bufferBytes StringHead_t 11
 db  "BEGIN: for " , 0
__literal619_bufferBytes StringHead_t 9
 db  "jmp_if_ge" , 0
__literal620_bufferBytes StringHead_t 9
 db  "END: for " , 0
__literal621_bufferBytes StringHead_t 6
 db  " step " , 0
__literal622_bufferBytes StringHead_t 16
 db  "BEGIN: for keys " , 0
__literal623_bufferBytes StringHead_t 8
 db  " values " , 0
__literal624_bufferBytes StringHead_t 9
 db  "inner_ret" , 0
__literal625_bufferBytes StringHead_t 10
 db  "__TrashBin" , 0
__literal626_bufferBytes StringHead_t 24
 db  "__MOLD_ForDriver_Generic" , 0
__literal627_bufferBytes StringHead_t 14
 db  "END: for keys " , 0
__literal628_bufferBytes StringHead_t 12
 db  "BEGIN: while" , 0
__literal629_bufferBytes StringHead_t 10
 db  "END: while" , 0
__literal630_bufferBytes StringHead_t 12
 db  "defaultLabel" , 0
__literal631_bufferBytes StringHead_t 9
 db  "jmp_if_lt" , 0
__literal632_bufferBytes StringHead_t 9
 db  "jmp_if_gt" , 0
__literal633_bufferBytes StringHead_t 11
 db  "entry point" , 0
__literal634_bufferBytes StringHead_t 29
 db  "error: object has no method '" , 0
__literal635_bufferBytes StringHead_t 6
 db  "buffer" , 0
__literal636_bufferBytes StringHead_t 16
 db  "bufferingEnabled" , 0
__literal637_bufferBytes StringHead_t 50
 db  "error: _replaceLastItem() called without buffering" , 0
__literal638_bufferBytes StringHead_t 5
 db  "quads" , 0
__literal639_bufferBytes StringHead_t 12
 db  "currentFrame" , 0
__literal640_bufferBytes StringHead_t 5
 db  "    ;" , 0
__literal641_bufferBytes StringHead_t 3
 db  "var" , 0
__literal642_bufferBytes StringHead_t 1
 db  "W" , 0
__literal643_bufferBytes StringHead_t 1
 db  "R" , 0
__literal644_bufferBytes StringHead_t 9
 db  "data type" , 0
__literal645_bufferBytes StringHead_t 10
 db  "----------" , 0
__literal646_bufferBytes StringHead_t 4
 db  "----" , 0
__literal647_bufferBytes StringHead_t 9
 db  "---------" , 0
__literal648_bufferBytes StringHead_t 8
 db  "--------" , 0
__literal649_bufferBytes StringHead_t 14
 db  "    init_frame" , 0
__literal650_bufferBytes StringHead_t 1
 db  ";" , 0
__literal651_bufferBytes StringHead_t 3
 db  "   " , 0
__literal652_bufferBytes StringHead_t 17
 db  "isProfilerEnabled" , 0
__literal653_bufferBytes StringHead_t 19
 db  "mapOfEmittedBuffers" , 0
__literal654_bufferBytes StringHead_t 15
 db  "isBufferEmitted" , 0
__literal655_bufferBytes StringHead_t 6
 db  "  lea " , 0
__literal656_bufferBytes StringHead_t 3
 db  ", [" , 0
__literal657_bufferBytes StringHead_t 6
 db  "  push" , 0
__literal658_bufferBytes StringHead_t 5
 db  "  pop" , 0
__literal659_bufferBytes StringHead_t 6
 db  "  mov " , 0
__literal660_bufferBytes StringHead_t 7
 db  "  call " , 0
__literal661_bufferBytes StringHead_t 3
 db  "rcx" , 0
__literal662_bufferBytes StringHead_t 3
 db  "rdx" , 0
__literal663_bufferBytes StringHead_t 2
 db  "r8" , 0
__literal664_bufferBytes StringHead_t 12
 db  "  lea rcx, [" , 0
__literal665_bufferBytes StringHead_t 12
 db  "  lea rdx, [" , 0
__literal666_bufferBytes StringHead_t 25
 db  "  call __MOLD_VariantMove" , 0
__literal667_bufferBytes StringHead_t 13
 db  "  lea  rcx, [" , 0
__literal668_bufferBytes StringHead_t 28
 db  "  call __MOLD_VariantDestroy" , 0
__literal669_bufferBytes StringHead_t 2
 db  "r9" , 0
__literal670_bufferBytes StringHead_t 3
 db  "rax" , 0
__literal671_bufferBytes StringHead_t 30
 db  "; Reuse already emitted buffer" , 0
__literal672_bufferBytes StringHead_t 7
 db  "_buffer" , 0
__literal673_bufferBytes StringHead_t 29
 db  "Variant_t VARIANT_INTEGER, 0," , 0
__literal674_bufferBytes StringHead_t 28
 db  "Variant_t VARIANT_DOUBLE, 0," , 0
__literal675_bufferBytes StringHead_t 28
 db  "Variant_t VARIANT_STRING, 0," , 0
__literal676_bufferBytes StringHead_t 27
 db  "Variant_t VARIANT_ARRAY, 0," , 0
__literal677_bufferBytes StringHead_t 1
 db  "1" , 0
__literal678_bufferBytes StringHead_t 1
 db  "0" , 0
__literal679_bufferBytes StringHead_t 29
 db  "Variant_t VARIANT_BOOLEAN, 0," , 0
__literal680_bufferBytes StringHead_t 38
 db  "Variant_t [error: unhandled type], ???" , 0
__literal681_bufferBytes StringHead_t 12
 db  "_bufferBytes" , 0
__literal682_bufferBytes StringHead_t 8
 db  "Buffer_t" , 0
__literal683_bufferBytes StringHead_t 8
 db  ", -1, 0," , 0
__literal684_bufferBytes StringHead_t 8
 db  "", 34, ", 34, ", 34, "" , 0
__literal685_bufferBytes StringHead_t 12
 db  "StringHead_t" , 0
__literal686_bufferBytes StringHead_t 4
 db  " db " , 0
__literal687_bufferBytes StringHead_t 3
 db  ", 0" , 0
__literal688_bufferBytes StringHead_t 2
 db  "db" , 0
__literal689_bufferBytes StringHead_t 15
 db  "VARIANT_INTEGER" , 0
__literal690_bufferBytes StringHead_t 2
 db  "dq" , 0
__literal691_bufferBytes StringHead_t 2
 db  "dd" , 0
__literal692_bufferBytes StringHead_t 2
 db  "dw" , 0
__literal693_bufferBytes StringHead_t 12
 db  "; inner type" , 0
__literal694_bufferBytes StringHead_t 13
 db  " ; inner size" , 0
__literal695_bufferBytes StringHead_t 21
 db  "db ?, ?, ? ; reserved" , 0
__literal696_bufferBytes StringHead_t 10
 db  "; itemsCnt" , 0
__literal697_bufferBytes StringHead_t 13
 db  "  mov dword [" , 0
__literal698_bufferBytes StringHead_t 4
 db  "], 0" , 0
__literal699_bufferBytes StringHead_t 18
 db  "  mov rcx, qword [" , 0
__literal700_bufferBytes StringHead_t 18
 db  "  cmp rcx, qword [" , 0
__literal701_bufferBytes StringHead_t 5
 db  "  set" , 0
__literal702_bufferBytes StringHead_t 6
 db  "byte [" , 0
__literal703_bufferBytes StringHead_t 18
 db  "  mov ecx, dword [" , 0
__literal704_bufferBytes StringHead_t 18
 db  "  cmp ecx, dword [" , 0
__literal705_bufferBytes StringHead_t 14
 db  "  xor eax, eax" , 0
__literal706_bufferBytes StringHead_t 16
 db  "  movq   xmm0, [" , 0
__literal707_bufferBytes StringHead_t 16
 db  "  comisd xmm0, [" , 0
__literal708_bufferBytes StringHead_t 2
 db  "al" , 0
__literal709_bufferBytes StringHead_t 6
 db  "], eax" , 0
__literal710_bufferBytes StringHead_t 18
 db  "  mov rax, qword [" , 0
__literal711_bufferBytes StringHead_t 18
 db  "  cmp rax, qword [" , 0
__literal712_bufferBytes StringHead_t 3
 db  "  j" , 0
__literal713_bufferBytes StringHead_t 13
 db  "  cmp dword [" , 0
__literal714_bufferBytes StringHead_t 2
 db  "]," , 0
__literal715_bufferBytes StringHead_t 18
 db  "  mov eax, dword [" , 0
__literal716_bufferBytes StringHead_t 18
 db  "  cmp eax, dword [" , 0
__literal717_bufferBytes StringHead_t 22
 db  "  lea r8, [__TrashBin]" , 0
__literal718_bufferBytes StringHead_t 28
 db  "  call __MOLD_VariantCompare" , 0
__literal719_bufferBytes StringHead_t 27
 db  "  cmp dword [__TrashBin], 0" , 0
__literal720_bufferBytes StringHead_t 5
 db  "  jnz" , 0
__literal721_bufferBytes StringHead_t 23
 db  "format PE64 console 5.0" , 0
__literal722_bufferBytes StringHead_t 17
 db  "entry __MOLD_Main" , 0
__literal723_bufferBytes StringHead_t 20
 db  "include 'win64a.inc'" , 0
__literal724_bufferBytes StringHead_t 80
 db  "; ------------------------------------------------------------------------------" , 0
__literal725_bufferBytes StringHead_t 46
 db  ";                                 Code section" , 0
__literal726_bufferBytes StringHead_t 40
 db  "section '.text' code readable executable" , 0
__literal727_bufferBytes StringHead_t 30
 db  "stack 1024*1024*4, 1024*1024*4" , 0
__literal728_bufferBytes StringHead_t 21
 db  "include 'Variant.asm'" , 0
__literal729_bufferBytes StringHead_t 1
 db  "c" , 0
__literal730_bufferBytes StringHead_t 4
 db  "_by_" , 0
__literal731_bufferBytes StringHead_t 5
 db  "  nop" , 0
__literal732_bufferBytes StringHead_t 12
 db  "move_variant" , 0
__literal733_bufferBytes StringHead_t 11
 db  "move_string" , 0
__literal734_bufferBytes StringHead_t 22
 db  "conv_string_to_variant" , 0
__literal735_bufferBytes StringHead_t 10
 db  "move_int32" , 0
__literal736_bufferBytes StringHead_t 11
 db  "move_bool32" , 0
__literal737_bufferBytes StringHead_t 10
 db  "move_int64" , 0
__literal738_bufferBytes StringHead_t 12
 db  "move_float64" , 0
__literal739_bufferBytes StringHead_t 13
 db  "  mov qword [" , 0
__literal740_bufferBytes StringHead_t 6
 db  "], rax" , 0
__literal741_bufferBytes StringHead_t 12
 db  "typeof_int64" , 0
__literal742_bufferBytes StringHead_t 12
 db  "typeof_int32" , 0
__literal743_bufferBytes StringHead_t 30
 db  "  movdqu xmm0, [StringInteger]" , 0
__literal744_bufferBytes StringHead_t 10
 db  "  movdqu [" , 0
__literal745_bufferBytes StringHead_t 7
 db  "], xmm0" , 0
__literal746_bufferBytes StringHead_t 14
 db  "typeof_float64" , 0
__literal747_bufferBytes StringHead_t 28
 db  "  movdqu xmm0, [StringFloat]" , 0
__literal748_bufferBytes StringHead_t 13
 db  "typeof_bool32" , 0
__literal749_bufferBytes StringHead_t 30
 db  "  movdqu xmm0, [StringBoolean]" , 0
__literal750_bufferBytes StringHead_t 9
 db  "neg_int64" , 0
__literal751_bufferBytes StringHead_t 9
 db  "  neg rax" , 0
__literal752_bufferBytes StringHead_t 9
 db  "add_int64" , 0
__literal753_bufferBytes StringHead_t 18
 db  "  add rax, qword [" , 0
__literal754_bufferBytes StringHead_t 9
 db  "sub_int64" , 0
__literal755_bufferBytes StringHead_t 18
 db  "  sub rax, qword [" , 0
__literal756_bufferBytes StringHead_t 9
 db  "mul_int64" , 0
__literal757_bufferBytes StringHead_t 19
 db  "  imul rcx, qword [" , 0
__literal758_bufferBytes StringHead_t 6
 db  "], rcx" , 0
__literal759_bufferBytes StringHead_t 9
 db  "div_int64" , 0
__literal760_bufferBytes StringHead_t 25
 db  "  cvtsi2sd  xmm0, qword [" , 0
__literal761_bufferBytes StringHead_t 25
 db  "  cvtsi2sd  xmm1, qword [" , 0
__literal762_bufferBytes StringHead_t 22
 db  "  divsd     xmm0, xmm1" , 0
__literal763_bufferBytes StringHead_t 19
 db  "  movq      qword [" , 0
__literal764_bufferBytes StringHead_t 10
 db  "idiv_int64" , 0
__literal765_bufferBytes StringHead_t 19
 db  "  mov  rax, qword [" , 0
__literal766_bufferBytes StringHead_t 19
 db  "  mov  rcx, qword [" , 0
__literal767_bufferBytes StringHead_t 5
 db  "  cqo" , 0
__literal768_bufferBytes StringHead_t 10
 db  "  idiv rcx" , 0
__literal769_bufferBytes StringHead_t 14
 db  "  mov  qword [" , 0
__literal770_bufferBytes StringHead_t 12
 db  "cmp_eq_int64" , 0
__literal771_bufferBytes StringHead_t 1
 db  "z" , 0
__literal772_bufferBytes StringHead_t 12
 db  "cmp_ne_int64" , 0
__literal773_bufferBytes StringHead_t 2
 db  "nz" , 0
__literal774_bufferBytes StringHead_t 12
 db  "cmp_lt_int64" , 0
__literal775_bufferBytes StringHead_t 12
 db  "cmp_le_int64" , 0
__literal776_bufferBytes StringHead_t 12
 db  "cmp_gt_int64" , 0
__literal777_bufferBytes StringHead_t 1
 db  "g" , 0
__literal778_bufferBytes StringHead_t 12
 db  "cmp_ge_int64" , 0
__literal779_bufferBytes StringHead_t 9
 db  "neg_int32" , 0
__literal780_bufferBytes StringHead_t 9
 db  "  neg eax" , 0
__literal781_bufferBytes StringHead_t 9
 db  "add_int32" , 0
__literal782_bufferBytes StringHead_t 18
 db  "  add eax, dword [" , 0
__literal783_bufferBytes StringHead_t 9
 db  "sub_int32" , 0
__literal784_bufferBytes StringHead_t 18
 db  "  sub eax, dword [" , 0
__literal785_bufferBytes StringHead_t 9
 db  "mul_int32" , 0
__literal786_bufferBytes StringHead_t 19
 db  "  imul ecx, dword [" , 0
__literal787_bufferBytes StringHead_t 6
 db  "], ecx" , 0
__literal788_bufferBytes StringHead_t 9
 db  "div_int32" , 0
__literal789_bufferBytes StringHead_t 25
 db  "  cvtsi2sd  xmm0, dword [" , 0
__literal790_bufferBytes StringHead_t 25
 db  "  cvtsi2sd  xmm1, dword [" , 0
__literal791_bufferBytes StringHead_t 10
 db  "idiv_int32" , 0
__literal792_bufferBytes StringHead_t 19
 db  "  mov  eax, dword [" , 0
__literal793_bufferBytes StringHead_t 19
 db  "  mov  ecx, dword [" , 0
__literal794_bufferBytes StringHead_t 5
 db  "  cdq" , 0
__literal795_bufferBytes StringHead_t 10
 db  "  idiv ecx" , 0
__literal796_bufferBytes StringHead_t 14
 db  "  mov  dword [" , 0
__literal797_bufferBytes StringHead_t 12
 db  "cmp_eq_int32" , 0
__literal798_bufferBytes StringHead_t 12
 db  "cmp_ne_int32" , 0
__literal799_bufferBytes StringHead_t 12
 db  "cmp_lt_int32" , 0
__literal800_bufferBytes StringHead_t 12
 db  "cmp_le_int32" , 0
__literal801_bufferBytes StringHead_t 12
 db  "cmp_gt_int32" , 0
__literal802_bufferBytes StringHead_t 12
 db  "cmp_ge_int32" , 0
__literal803_bufferBytes StringHead_t 11
 db  "neg_float64" , 0
__literal804_bufferBytes StringHead_t 44
 db  "  xor rax, qword [__MOLD_VariantNeg.signBit]" , 0
__literal805_bufferBytes StringHead_t 11
 db  "add_float64" , 0
__literal806_bufferBytes StringHead_t 15
 db  "  movq  xmm0, [" , 0
__literal807_bufferBytes StringHead_t 21
 db  "  addsd xmm0, qword [" , 0
__literal808_bufferBytes StringHead_t 15
 db  "  movq  qword [" , 0
__literal809_bufferBytes StringHead_t 11
 db  "sub_float64" , 0
__literal810_bufferBytes StringHead_t 21
 db  "  subsd xmm0, qword [" , 0
__literal811_bufferBytes StringHead_t 11
 db  "mul_float64" , 0
__literal812_bufferBytes StringHead_t 21
 db  "  mulsd xmm0, qword [" , 0
__literal813_bufferBytes StringHead_t 11
 db  "div_float64" , 0
__literal814_bufferBytes StringHead_t 21
 db  "  divsd xmm0, qword [" , 0
__literal815_bufferBytes StringHead_t 12
 db  "idiv_float64" , 0
__literal816_bufferBytes StringHead_t 25
 db  "  movq      xmm0, qword [" , 0
__literal817_bufferBytes StringHead_t 25
 db  "  movq      xmm1, qword [" , 0
__literal818_bufferBytes StringHead_t 21
 db  "  cvttsd2si rax, xmm0" , 0
__literal819_bufferBytes StringHead_t 19
 db  "  mov       qword [" , 0
__literal820_bufferBytes StringHead_t 14
 db  "cmp_eq_float64" , 0
__literal821_bufferBytes StringHead_t 14
 db  "cmp_ne_float64" , 0
__literal822_bufferBytes StringHead_t 14
 db  "cmp_lt_float64" , 0
__literal823_bufferBytes StringHead_t 14
 db  "cmp_le_float64" , 0
__literal824_bufferBytes StringHead_t 2
 db  "be" , 0
__literal825_bufferBytes StringHead_t 14
 db  "cmp_gt_float64" , 0
__literal826_bufferBytes StringHead_t 14
 db  "cmp_ge_float64" , 0
__literal827_bufferBytes StringHead_t 2
 db  "ae" , 0
__literal828_bufferBytes StringHead_t 11
 db  "neg_variant" , 0
__literal829_bufferBytes StringHead_t 17
 db  "__MOLD_VariantNeg" , 0
__literal830_bufferBytes StringHead_t 11
 db  "add_variant" , 0
__literal831_bufferBytes StringHead_t 10
 db  "add_string" , 0
__literal832_bufferBytes StringHead_t 17
 db  "__MOLD_VariantAdd" , 0
__literal833_bufferBytes StringHead_t 11
 db  "sub_variant" , 0
__literal834_bufferBytes StringHead_t 17
 db  "__MOLD_VariantSub" , 0
__literal835_bufferBytes StringHead_t 11
 db  "mul_variant" , 0
__literal836_bufferBytes StringHead_t 17
 db  "__MOLD_VariantMul" , 0
__literal837_bufferBytes StringHead_t 11
 db  "div_variant" , 0
__literal838_bufferBytes StringHead_t 17
 db  "__MOLD_VariantDiv" , 0
__literal839_bufferBytes StringHead_t 12
 db  "idiv_variant" , 0
__literal840_bufferBytes StringHead_t 26
 db  "__MOLD_VariantDivAsInteger" , 0
__literal841_bufferBytes StringHead_t 14
 db  "cmp_eq_variant" , 0
__literal842_bufferBytes StringHead_t 13
 db  "cmp_eq_string" , 0
__literal843_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareEQ" , 0
__literal844_bufferBytes StringHead_t 14
 db  "cmp_ne_variant" , 0
__literal845_bufferBytes StringHead_t 13
 db  "cmp_ne_string" , 0
__literal846_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareNE" , 0
__literal847_bufferBytes StringHead_t 14
 db  "cmp_lt_variant" , 0
__literal848_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareLT" , 0
__literal849_bufferBytes StringHead_t 14
 db  "cmp_le_variant" , 0
__literal850_bufferBytes StringHead_t 23
 db  "__MOLD_VariantCompareLE" , 0
__literal851_bufferBytes StringHead_t 14
 db  "cmp_gt_variant" , 0
__literal852_bufferBytes StringHead_t 14
 db  "cmp_ge_variant" , 0
__literal853_bufferBytes StringHead_t 24
 db  "__MOLD_VariantStringJoin" , 0
__literal854_bufferBytes StringHead_t 20
 db  "jmp_by_table_variant" , 0
__literal855_bufferBytes StringHead_t 12
 db  "  mov rax, [" , 0
__literal856_bufferBytes StringHead_t 18
 db  "+ Variant_t.value]" , 0
__literal857_bufferBytes StringHead_t 13
 db  "  jmp qword [" , 0
__literal858_bufferBytes StringHead_t 10
 db  "+ rax * 8]" , 0
__literal859_bufferBytes StringHead_t 18
 db  "jmp_by_table_int32" , 0
__literal860_bufferBytes StringHead_t 17
 db  "jmp_if_eq_variant" , 0
__literal861_bufferBytes StringHead_t 16
 db  "jmp_if_eq_string" , 0
__literal862_bufferBytes StringHead_t 2
 db  "EQ" , 0
__literal863_bufferBytes StringHead_t 17
 db  "jmp_if_ne_variant" , 0
__literal864_bufferBytes StringHead_t 16
 db  "jmp_if_ne_string" , 0
__literal865_bufferBytes StringHead_t 2
 db  "NE" , 0
__literal866_bufferBytes StringHead_t 17
 db  "jmp_if_lt_variant" , 0
__literal867_bufferBytes StringHead_t 2
 db  "LT" , 0
__literal868_bufferBytes StringHead_t 17
 db  "jmp_if_le_variant" , 0
__literal869_bufferBytes StringHead_t 2
 db  "LE" , 0
__literal870_bufferBytes StringHead_t 17
 db  "jmp_if_gt_variant" , 0
__literal871_bufferBytes StringHead_t 17
 db  "jmp_if_ge_variant" , 0
__literal872_bufferBytes StringHead_t 10
 db  "load_int64" , 0
__literal873_bufferBytes StringHead_t 10
 db  "  mov rax," , 0
__literal874_bufferBytes StringHead_t 15
 db  "  db 0x48, 0xb8" , 0
__literal875_bufferBytes StringHead_t 4
 db  "  dq" , 0
__literal876_bufferBytes StringHead_t 15
 db  "jmp_if_eq_int64" , 0
__literal877_bufferBytes StringHead_t 15
 db  "jmp_if_ne_int64" , 0
__literal878_bufferBytes StringHead_t 15
 db  "jmp_if_lt_int64" , 0
__literal879_bufferBytes StringHead_t 15
 db  "jmp_if_le_int64" , 0
__literal880_bufferBytes StringHead_t 15
 db  "jmp_if_gt_int64" , 0
__literal881_bufferBytes StringHead_t 15
 db  "jmp_if_ge_int64" , 0
__literal882_bufferBytes StringHead_t 15
 db  "jmp_if_eq_int32" , 0
__literal883_bufferBytes StringHead_t 15
 db  "jmp_if_ne_int32" , 0
__literal884_bufferBytes StringHead_t 15
 db  "jmp_if_lt_int32" , 0
__literal885_bufferBytes StringHead_t 15
 db  "jmp_if_le_int32" , 0
__literal886_bufferBytes StringHead_t 15
 db  "jmp_if_gt_int32" , 0
__literal887_bufferBytes StringHead_t 15
 db  "jmp_if_ge_int32" , 0
__literal888_bufferBytes StringHead_t 18
 db  "jmp_if_true_bool32" , 0
__literal889_bufferBytes StringHead_t 19
 db  "jmp_if_false_bool32" , 0
__literal890_bufferBytes StringHead_t 4
 db  "  jz" , 0
__literal891_bufferBytes StringHead_t 16
 db  "jmp_if_eq_bool32" , 0
__literal892_bufferBytes StringHead_t 16
 db  "  xor   eax, eax" , 0
__literal893_bufferBytes StringHead_t 15
 db  "  or    dword [" , 0
__literal894_bufferBytes StringHead_t 10
 db  "  setnz cl" , 0
__literal895_bufferBytes StringHead_t 10
 db  "  setz  al" , 0
__literal896_bufferBytes StringHead_t 14
 db  "  xor   al, cl" , 0
__literal897_bufferBytes StringHead_t 16
 db  "jmp_if_ne_bool32" , 0
__literal898_bufferBytes StringHead_t 15
 db  "  xor  eax, eax" , 0
__literal899_bufferBytes StringHead_t 14
 db  "  or   dword [" , 0
__literal900_bufferBytes StringHead_t 9
 db  "  setz cl" , 0
__literal901_bufferBytes StringHead_t 9
 db  "  setz al" , 0
__literal902_bufferBytes StringHead_t 13
 db  "  xor  al, cl" , 0
__literal903_bufferBytes StringHead_t 13
 db  "cmp_eq_bool32" , 0
__literal904_bufferBytes StringHead_t 15
 db  "  mov   dword [" , 0
__literal905_bufferBytes StringHead_t 13
 db  "cmp_ne_bool32" , 0
__literal906_bufferBytes StringHead_t 17
 db  "jmp_if_eq_float64" , 0
__literal907_bufferBytes StringHead_t 17
 db  "jmp_if_ne_float64" , 0
__literal908_bufferBytes StringHead_t 17
 db  "jmp_if_lt_float64" , 0
__literal909_bufferBytes StringHead_t 4
 db  "  jb" , 0
__literal910_bufferBytes StringHead_t 17
 db  "jmp_if_le_float64" , 0
__literal911_bufferBytes StringHead_t 5
 db  "  jbe" , 0
__literal912_bufferBytes StringHead_t 17
 db  "jmp_if_gt_float64" , 0
__literal913_bufferBytes StringHead_t 4
 db  "  ja" , 0
__literal914_bufferBytes StringHead_t 17
 db  "jmp_if_ge_float64" , 0
__literal915_bufferBytes StringHead_t 5
 db  "  jae" , 0
__literal916_bufferBytes StringHead_t 21
 db  "__MOLD_PrintVariantLn" , 0
__literal917_bufferBytes StringHead_t 29
 db  "__MOLD_PrintArrayOfVariantsLn" , 0
__literal918_bufferBytes StringHead_t 10
 db  "  add rsp," , 0
__literal919_bufferBytes StringHead_t 9
 db  "str_int64" , 0
__literal920_bufferBytes StringHead_t 11
 db  "  mov r9, [" , 0
__literal921_bufferBytes StringHead_t 27
 db  "  mov r10d, VARIANT_INTEGER" , 0
__literal922_bufferBytes StringHead_t 45
 db  "  call __MOLD_VariantConvertPrimitiveToString" , 0
__literal923_bufferBytes StringHead_t 9
 db  "str_int32" , 0
__literal924_bufferBytes StringHead_t 12
 db  "  mov r9d, [" , 0
__literal925_bufferBytes StringHead_t 11
 db  "str_float64" , 0
__literal926_bufferBytes StringHead_t 26
 db  "  mov r10d, VARIANT_DOUBLE" , 0
__literal927_bufferBytes StringHead_t 10
 db  "str_bool32" , 0
__literal928_bufferBytes StringHead_t 18
 db  "  mov r9d, dword [" , 0
__literal929_bufferBytes StringHead_t 42
 db  "  call __MOLD_VariantConvertBool64ToString" , 0
__literal930_bufferBytes StringHead_t 3
 db  "rdi" , 0
__literal931_bufferBytes StringHead_t 22
 db  "[rdi + Variant_t.type]" , 0
__literal932_bufferBytes StringHead_t 17
 db  "VARIANT_UNDEFINED" , 0
__literal933_bufferBytes StringHead_t 11
 db  "  mov eax, " , 0
__literal934_bufferBytes StringHead_t 14
 db  "__MOLD_SysCall" , 0
__literal935_bufferBytes StringHead_t 13
 db  "  lea  rdi, [" , 0
__literal936_bufferBytes StringHead_t 47
 db  "  mov [rdi + Variant_t.type], VARIANT_UNDEFINED" , 0
__literal937_bufferBytes StringHead_t 11
 db  "  mov  eax," , 0
__literal938_bufferBytes StringHead_t 19
 db  "  call __MOLD_VCall" , 0
__literal939_bufferBytes StringHead_t 20
 db  "  lea  rdx, [vtable_" , 0
__literal940_bufferBytes StringHead_t 33
 db  "  call __MOLD_VariantObjectCreate" , 0
__literal941_bufferBytes StringHead_t 21
 db  "conv_int32_to_float64" , 0
__literal942_bufferBytes StringHead_t 24
 db  "  cvtsi2sd xmm0, dword [" , 0
__literal943_bufferBytes StringHead_t 8
 db  "  movq [" , 0
__literal944_bufferBytes StringHead_t 21
 db  "conv_int64_to_float64" , 0
__literal945_bufferBytes StringHead_t 24
 db  "  cvtsi2sd xmm0, qword [" , 0
__literal946_bufferBytes StringHead_t 7
 db  "  mov [" , 0
__literal947_bufferBytes StringHead_t 34
 db  "+ Variant_t.type], VARIANT_INTEGER" , 0
__literal948_bufferBytes StringHead_t 19
 db  "+ Variant_t.value]," , 0
__literal949_bufferBytes StringHead_t 21
 db  "  movsxd rax, dword [" , 0
__literal950_bufferBytes StringHead_t 23
 db  "+ Variant_t.value], rax" , 0
__literal951_bufferBytes StringHead_t 33
 db  "+ Variant_t.type], VARIANT_DOUBLE" , 0
__literal952_bufferBytes StringHead_t 21
 db  "conv_float64_to_int32" , 0
__literal953_bufferBytes StringHead_t 49
 db  "error: convert imm float64 to int32 not supported" , 0
__literal954_bufferBytes StringHead_t 18
 db  "  cvttsd2si eax, [" , 0
__literal955_bufferBytes StringHead_t 21
 db  "conv_float64_to_int64" , 0
__literal956_bufferBytes StringHead_t 49
 db  "error: convert imm float64 to int64 not supported" , 0
__literal957_bufferBytes StringHead_t 18
 db  "  cvttsd2si rax, [" , 0
__literal958_bufferBytes StringHead_t 12
 db  "  mov eax, 1" , 0
__literal959_bufferBytes StringHead_t 12
 db  "  mov eax, 0" , 0
__literal960_bufferBytes StringHead_t 34
 db  "+ Variant_t.type], VARIANT_BOOLEAN" , 0
__literal961_bufferBytes StringHead_t 22
 db  "conv_variant_to_bool32" , 0
__literal962_bufferBytes StringHead_t 7
 db  "  cmp [" , 0
__literal963_bufferBytes StringHead_t 45
 db  "  jnz __MOLD_PrintErrorAndDie.booleanExpected" , 0
__literal964_bufferBytes StringHead_t 21
 db  "conv_variant_to_int32" , 0
__literal965_bufferBytes StringHead_t 45
 db  "  jnz __MOLD_PrintErrorAndDie.integerExpected" , 0
__literal966_bufferBytes StringHead_t 21
 db  "conv_variant_to_int64" , 0
__literal967_bufferBytes StringHead_t 23
 db  "conv_variant_to_float64" , 0
__literal968_bufferBytes StringHead_t 43
 db  "  jnz __MOLD_PrintErrorAndDie.floatExpected" , 0
__literal969_bufferBytes StringHead_t 19
 db  "jmp_if_true_variant" , 0
__literal970_bufferBytes StringHead_t 8
 db  "  cmp  [" , 0
__literal971_bufferBytes StringHead_t 22
 db  " + Variant_t.value], 0" , 0
__literal972_bufferBytes StringHead_t 6
 db  "  jnz " , 0
__literal973_bufferBytes StringHead_t 20
 db  "jmp_if_false_variant" , 0
__literal974_bufferBytes StringHead_t 6
 db  "  jz  " , 0
__literal975_bufferBytes StringHead_t 23
 db  "jmp_if_variant_ge_int64" , 0
__literal976_bufferBytes StringHead_t 20
 db  " + Variant_t.value]," , 0
__literal977_bufferBytes StringHead_t 6
 db  "  jge " , 0
__literal978_bufferBytes StringHead_t 5
 db  "  ret" , 0
__literal979_bufferBytes StringHead_t 15
 db  "  ; clean frame" , 0
__literal980_bufferBytes StringHead_t 15
 db  "  ; -----------" , 0
__literal981_bufferBytes StringHead_t 25
 db  "  ; Skipped loop iterator" , 0
__literal982_bufferBytes StringHead_t 23
 db  "  ; leave profiler code" , 0
__literal983_bufferBytes StringHead_t 23
 db  "  ; -------------------" , 0
__literal984_bufferBytes StringHead_t 12
 db  "  push   rdx" , 0
__literal985_bufferBytes StringHead_t 7
 db  "  rdtsc" , 0
__literal986_bufferBytes StringHead_t 16
 db  "  shl    rdx, 32" , 0
__literal987_bufferBytes StringHead_t 17
 db  "  add    rdx, rax" , 0
__literal988_bufferBytes StringHead_t 39
 db  "  add    qword [__profilerCounterEntry_" , 0
__literal989_bufferBytes StringHead_t 6
 db  "], rdx" , 0
__literal990_bufferBytes StringHead_t 12
 db  "  pop    rdx" , 0
__literal991_bufferBytes StringHead_t 25
 db  "  ; print profiler result" , 0
__literal992_bufferBytes StringHead_t 25
 db  "  ; ---------------------" , 0
__literal993_bufferBytes StringHead_t 35
 db  "  lea  rcx, [__profilerCounterData]" , 0
__literal994_bufferBytes StringHead_t 31
 db  "  call __MOLD_PrintProfilerData" , 0
__literal995_bufferBytes StringHead_t 11
 db  "  add  rsp," , 0
__literal996_bufferBytes StringHead_t 10
 db  "  pop  rbp" , 0
__literal997_bufferBytes StringHead_t 23
 db  "  ; enter profiler code" , 0
__literal998_bufferBytes StringHead_t 39
 db  "  sub    qword [__profilerCounterEntry_" , 0
__literal999_bufferBytes StringHead_t 9
 db  "  restore" , 0
__literal1000_bufferBytes StringHead_t 14
 db  "  ; init frame" , 0
__literal1001_bufferBytes StringHead_t 14
 db  "  ; ----------" , 0
__literal1002_bufferBytes StringHead_t 54
 db  "error: unhandled operand type while setting up frame: " , 0
__literal1003_bufferBytes StringHead_t 9
 db  "EQU rbp -" , 0
__literal1004_bufferBytes StringHead_t 5
 db  "bytes" , 0
__literal1005_bufferBytes StringHead_t 7
 db  "EQU rdi" , 0
__literal1006_bufferBytes StringHead_t 10
 db  "  push rbp" , 0
__literal1007_bufferBytes StringHead_t 15
 db  "  mov  rbp, rsp" , 0
__literal1008_bufferBytes StringHead_t 11
 db  "  sub  rsp," , 0
__literal1009_bufferBytes StringHead_t 4
 db  "item" , 0
__literal1010_bufferBytes StringHead_t 37
 db  " + Variant_t.type], VARIANT_UNDEFINED" , 0
__literal1011_bufferBytes StringHead_t 29
 db  "  mov    rax, [rbp + 16 + 8 *" , 0
__literal1012_bufferBytes StringHead_t 13
 db  "  movdqu xmm0" , 0
__literal1013_bufferBytes StringHead_t 6
 db  "  or [" , 0
__literal1014_bufferBytes StringHead_t 59
 db  " + Variant_t.flags ], VARIANT_FLAG_DUPLICATE_ON_FIRST_WRITE" , 0
__literal1015_bufferBytes StringHead_t 6
 db  "bool64" , 0
__literal1016_bufferBytes StringHead_t 33
 db  "error: unhandled type for param '" , 0
__literal1017_bufferBytes StringHead_t 3
 db  "': " , 0
__literal1018_bufferBytes StringHead_t 26
 db  "  ; skipped unused param [" , 0
__literal1019_bufferBytes StringHead_t 8
 db  "  ; code" , 0
__literal1020_bufferBytes StringHead_t 8
 db  "  ; ----" , 0
__literal1021_bufferBytes StringHead_t 25
 db  "__MOLD_VariantArrayCreate" , 0
__literal1022_bufferBytes StringHead_t 23
 db  "__MOLD_VariantMapCreate" , 0
__literal1023_bufferBytes StringHead_t 19
 db  "store_index_variant" , 0
__literal1024_bufferBytes StringHead_t 26
 db  "__MOLD_VariantStoreAtIndex" , 0
__literal1025_bufferBytes StringHead_t 16
 db  "store_key_string" , 0
__literal1026_bufferBytes StringHead_t 17
 db  "store_key_variant" , 0
__literal1027_bufferBytes StringHead_t 24
 db  "__MOLD_VariantStoreAtKey" , 0
__literal1028_bufferBytes StringHead_t 17
 db  "store_index_int32" , 0
__literal1029_bufferBytes StringHead_t 32
 db  "__MOLD_VariantStoreAtIndex_int32" , 0
__literal1030_bufferBytes StringHead_t 29
 db  "load_index_variant_by_variant" , 0
__literal1031_bufferBytes StringHead_t 27
 db  "__MOLD_VariantLoadFromIndex" , 0
__literal1032_bufferBytes StringHead_t 27
 db  "load_index_variant_by_int32" , 0
__literal1033_bufferBytes StringHead_t 26
 db  "load_index_string_by_int32" , 0
__literal1034_bufferBytes StringHead_t 33
 db  "__MOLD_VariantLoadFromIndex_int32" , 0
__literal1035_bufferBytes StringHead_t 25
 db  "load_index_int32_by_int32" , 0
__literal1036_bufferBytes StringHead_t 34
 db  "__MOLD_VariantLoadFromIndex_native" , 0
__literal1037_bufferBytes StringHead_t 16
 db  "load_key_variant" , 0
__literal1038_bufferBytes StringHead_t 25
 db  "__MOLD_VariantLoadFromKey" , 0
__literal1039_bufferBytes StringHead_t 5
 db  "  jmp" , 0
__literal1040_bufferBytes StringHead_t 25
 db  "error: unhandled opcode ", 34, "" , 0
__literal1041_bufferBytes StringHead_t 17
 db  "endOfCodeSection:" , 0
__literal1042_bufferBytes StringHead_t 46
 db  ";                                 Data section" , 0
__literal1043_bufferBytes StringHead_t 39
 db  "section '.data' data readable writeable" , 0
__literal1044_bufferBytes StringHead_t 24
 db  "include 'CommonData.asm'" , 0
__literal1045_bufferBytes StringHead_t 13
 db  "; Global vars" , 0
__literal1046_bufferBytes StringHead_t 13
 db  "; -----------" , 0
__literal1047_bufferBytes StringHead_t 18
 db  " Variant_t 0, 0, 0" , 0
__literal1048_bufferBytes StringHead_t 5
 db  " dq 0" , 0
__literal1049_bufferBytes StringHead_t 5
 db  " dd 0" , 0
__literal1050_bufferBytes StringHead_t 30
 db  "error: unhandled global type: " , 0
__literal1051_bufferBytes StringHead_t 55
 db  ";                     Constant (read-only) data section" , 0
__literal1052_bufferBytes StringHead_t 30
 db  "section '.rdata' data readable" , 0
__literal1053_bufferBytes StringHead_t 11
 db  "; Constants" , 0
__literal1054_bufferBytes StringHead_t 11
 db  "; ---------" , 0
__literal1055_bufferBytes StringHead_t 4
 db  "db ?" , 0
__literal1056_bufferBytes StringHead_t 6
 db  "; iter" , 0
__literal1057_bufferBytes StringHead_t 13
 db  "; Jump tables" , 0
__literal1058_bufferBytes StringHead_t 5
 db  "  dq " , 0
__literal1059_bufferBytes StringHead_t 9
 db  "; vtables" , 0
__literal1060_bufferBytes StringHead_t 9
 db  "; -------" , 0
__literal1061_bufferBytes StringHead_t 7
 db  "vtable_" , 0
__literal1062_bufferBytes StringHead_t 14
 db  ".offset dd 8 *" , 0
__literal1063_bufferBytes StringHead_t 14
 db  ".length dd 8 *" , 0
__literal1064_bufferBytes StringHead_t 9
 db  ".entries:" , 0
__literal1065_bufferBytes StringHead_t 23
 db  "__MOLD_NullMethodCalled" , 0
__literal1066_bufferBytes StringHead_t 47
 db  ";                               Imports section" , 0
__literal1067_bufferBytes StringHead_t 47
 db  "section '.idata' import data readable writeable" , 0
__literal1068_bufferBytes StringHead_t 29
 db  "  include 'CommonImports.asm'" , 0
__literal1069_bufferBytes StringHead_t 46
 db  ";                                Debug section" , 0
__literal1070_bufferBytes StringHead_t 30
 db  "section '.debug' data readable" , 0
__literal1071_bufferBytes StringHead_t 12
 db  "SymbolTable:" , 0
__literal1072_bufferBytes StringHead_t 7
 db  "dq 0, 0" , 0
__literal1073_bufferBytes StringHead_t 31
 db  "include 'SymbolTableCommon.asm'" , 0
__literal1074_bufferBytes StringHead_t 3
 db  "dq " , 0
__literal1075_bufferBytes StringHead_t 5
 db  "name_" , 0
__literal1076_bufferBytes StringHead_t 42
 db  "dq endOfCodeSection, name_endOfCodeSection" , 0
__literal1077_bufferBytes StringHead_t 15
 db  "SymbolTableEnd:" , 0
__literal1078_bufferBytes StringHead_t 17
 db  "SymbolTableNames:" , 0
__literal1079_bufferBytes StringHead_t 36
 db  "include 'SymbolTableCommonNames.asm'" , 0
__literal1080_bufferBytes StringHead_t 4
 db  "', 0" , 0
__literal1081_bufferBytes StringHead_t 49
 db  "name_endOfCodeSection db 'out of code section', 0" , 0
__literal1082_bufferBytes StringHead_t 46
 db  ";                              Profile section" , 0
__literal1083_bufferBytes StringHead_t 42
 db  "section '.profile' data readable writeable" , 0
__literal1084_bufferBytes StringHead_t 22
 db  "__profilerCounterData:" , 0
__literal1085_bufferBytes StringHead_t 23
 db  "__profilerCounterEntry_" , 0
__literal1086_bufferBytes StringHead_t 6
 db  " dq 0," , 0
__literal1087_bufferBytes StringHead_t 10
 db  "lastOpcode" , 0
__literal1088_bufferBytes StringHead_t 7
 db  "lastDst" , 0
__literal1089_bufferBytes StringHead_t 8
 db  "lastSrc1" , 0
__literal1090_bufferBytes StringHead_t 8
 db  "lastSrc2" , 0
__literal1091_bufferBytes StringHead_t 18
 db  "cmpXxJmpIfFalseMap" , 0
__literal1092_bufferBytes StringHead_t 9
 db  "jmp_if_ne" , 0
__literal1093_bufferBytes StringHead_t 9
 db  "jmp_if_eq" , 0
__literal1094_bufferBytes StringHead_t 9
 db  "jmp_if_le" , 0
__literal1095_bufferBytes StringHead_t 17
 db  "cmpXxJmpIfTrueMap" , 0
__literal1096_bufferBytes StringHead_t 7
 db  "codeObj" , 0
__literal1097_bufferBytes StringHead_t 31
 db  "runtime error: integer expected" , 0
__literal1098_bufferBytes StringHead_t 13
 db  "__mold_vtable" , 0
__literal1099_bufferBytes StringHead_t 7
 db  "error: " , 0
__literal1100_bufferBytes StringHead_t 44
 db  "error: unsupported number of syscall params:" , 0
__literal1101_bufferBytes StringHead_t 16
 db  "unknown opcode '" , 0
__literal1102_bufferBytes StringHead_t 9
 db  "load.null" , 0
__literal1103_bufferBytes StringHead_t 13
 db  "load.string '" , 0
__literal1104_bufferBytes StringHead_t 13
 db  "load.string ", 34, "" , 0
__literal1105_bufferBytes StringHead_t 13
 db  "load.boolean " , 0
__literal1106_bufferBytes StringHead_t 13
 db  "load.integer " , 0
__literal1107_bufferBytes StringHead_t 11
 db  "load.float " , 0
__literal1108_bufferBytes StringHead_t 25
 db  "error: unhandled imm type" , 0
__literal1109_bufferBytes StringHead_t 10
 db  "load.array" , 0
__literal1110_bufferBytes StringHead_t 8
 db  "load.map" , 0
__literal1111_bufferBytes StringHead_t 11
 db  "string.join" , 0
__literal1112_bufferBytes StringHead_t 6
 db  "cmp.eq" , 0
__literal1113_bufferBytes StringHead_t 7
 db  "cmp.neq" , 0
__literal1114_bufferBytes StringHead_t 6
 db  "cmp.lt" , 0
__literal1115_bufferBytes StringHead_t 6
 db  "cmp.le" , 0
__literal1116_bufferBytes StringHead_t 6
 db  "cmp.gt" , 0
__literal1117_bufferBytes StringHead_t 6
 db  "cmp.ge" , 0
__literal1118_bufferBytes StringHead_t 6
 db  "print " , 0
__literal1119_bufferBytes StringHead_t 11
 db  "load.local " , 0
__literal1120_bufferBytes StringHead_t 13
 db  "load.by.index" , 0
__literal1121_bufferBytes StringHead_t 11
 db  "load.by.key" , 0
__literal1122_bufferBytes StringHead_t 11
 db  "load.param " , 0
__literal1123_bufferBytes StringHead_t 12
 db  "load.global " , 0
__literal1124_bufferBytes StringHead_t 11
 db  "load.retval" , 0
__literal1125_bufferBytes StringHead_t 12
 db  "store.local " , 0
__literal1126_bufferBytes StringHead_t 12
 db  "store.param " , 0
__literal1127_bufferBytes StringHead_t 13
 db  "store.global " , 0
__literal1128_bufferBytes StringHead_t 12
 db  "store.retval" , 0
__literal1129_bufferBytes StringHead_t 14
 db  "store.by.index" , 0
__literal1130_bufferBytes StringHead_t 12
 db  "store.by.key" , 0
__literal1131_bufferBytes StringHead_t 4
 db  "jmp " , 0
__literal1132_bufferBytes StringHead_t 12
 db  "jmp.if.true " , 0
__literal1133_bufferBytes StringHead_t 13
 db  "jmp.if.false " , 0
__literal1134_bufferBytes StringHead_t 5
 db  "call " , 0
__literal1135_bufferBytes StringHead_t 11
 db  "init.frame " , 0
__literal1136_bufferBytes StringHead_t 4
 db  "ret " , 0
__literal1137_bufferBytes StringHead_t 9
 db  "inner.ret" , 0
__literal1138_bufferBytes StringHead_t 4
 db  "drop" , 0
__literal1139_bufferBytes StringHead_t 6
 db  "dropn " , 0
__literal1140_bufferBytes StringHead_t 3
 db  "dup" , 0
__literal1141_bufferBytes StringHead_t 4
 db  "over" , 0
__literal1142_bufferBytes StringHead_t 6
 db  "vcall " , 0
__literal1143_bufferBytes StringHead_t 14
 db  "create.object " , 0
__literal1144_bufferBytes StringHead_t 9
 db  "move.back" , 0
__literal1145_bufferBytes StringHead_t 9
 db  "load.argc" , 0
__literal1146_bufferBytes StringHead_t 9
 db  "load.argv" , 0
__literal1147_bufferBytes StringHead_t 8
 db  "syscall " , 0
__literal1148_bufferBytes StringHead_t 17
 db  "for.each.indexes " , 0
__literal1149_bufferBytes StringHead_t 14
 db  "for.each.keys " , 0
__literal1150_bufferBytes StringHead_t 10
 db  "0.4.200803" , 0
__literal1151_bufferBytes StringHead_t 12
 db  "Mold version" , 0
__literal1152_bufferBytes StringHead_t 6
 db  "Usage:" , 0
__literal1153_bufferBytes StringHead_t 62
 db  "  mold [-c] [--asm] [--mir0] [--mir] [--profiler] <input.mold>" , 0
__literal1154_bufferBytes StringHead_t 11
 db  "interpreter" , 0
__literal1155_bufferBytes StringHead_t 2
 db  "-c" , 0
__literal1156_bufferBytes StringHead_t 8
 db  "compiler" , 0
__literal1157_bufferBytes StringHead_t 41
 db  "Error: compiler mode not implemented yet." , 0
__literal1158_bufferBytes StringHead_t 47
 db  "Try --asm option and assemble result on by own." , 0
__literal1159_bufferBytes StringHead_t 5
 db  "--asm" , 0
__literal1160_bufferBytes StringHead_t 3
 db  "asm" , 0
__literal1161_bufferBytes StringHead_t 6
 db  "--mir0" , 0
__literal1162_bufferBytes StringHead_t 4
 db  "mir0" , 0
__literal1163_bufferBytes StringHead_t 5
 db  "--mir" , 0
__literal1164_bufferBytes StringHead_t 6
 db  "--mir1" , 0
__literal1165_bufferBytes StringHead_t 4
 db  "mir1" , 0
__literal1166_bufferBytes StringHead_t 5
 db  "--ast" , 0
__literal1167_bufferBytes StringHead_t 3
 db  "ast" , 0
__literal1168_bufferBytes StringHead_t 9
 db  "--astjson" , 0
__literal1169_bufferBytes StringHead_t 7
 db  "astjson" , 0
__literal1170_bufferBytes StringHead_t 15
 db  "--prettyPrinter" , 0
__literal1171_bufferBytes StringHead_t 13
 db  "prettyPrinter" , 0
__literal1172_bufferBytes StringHead_t 14
 db  "--debug-parser" , 0
__literal1173_bufferBytes StringHead_t 7
 db  "--debug" , 0
__literal1174_bufferBytes StringHead_t 3
 db  "-O0" , 0
__literal1175_bufferBytes StringHead_t 3
 db  "-O1" , 0
__literal1176_bufferBytes StringHead_t 3
 db  "-O2" , 0
__literal1177_bufferBytes StringHead_t 3
 db  "-O3" , 0
__literal1178_bufferBytes StringHead_t 10
 db  "--profiler" , 0
__literal1179_bufferBytes StringHead_t 25
 db  "Creating parser object..." , 0
__literal1180_bufferBytes StringHead_t 17
 db  "Parsing source..." , 0
__literal1181_bufferBytes StringHead_t 49
 db  "temporary disabled due to missing object printing" , 0
__literal1182_bufferBytes StringHead_t 20
 db  "Resolving imports..." , 0
__literal1183_bufferBytes StringHead_t 20
 db  "Preprocessing AST..." , 0
__literal1184_bufferBytes StringHead_t 24
 db  "Building symbol table..." , 0
__literal1185_bufferBytes StringHead_t 17
 db  "Optimizing AST..." , 0
__literal1186_bufferBytes StringHead_t 23
 db  "Evaluating AST nodes..." , 0
__literal1187_bufferBytes StringHead_t 21
 db  "VCall optimization..." , 0
__literal1188_bufferBytes StringHead_t 44
 db  "Inline optimization... (TEMPORARY DISABLED!)" , 0
__literal1189_bufferBytes StringHead_t 19
 db  "Constant folding..." , 0
__literal1190_bufferBytes StringHead_t 49
 db  "If optimization... (TEMPORARY DISABLED FOR MIR0!)" , 0
__literal1191_bufferBytes StringHead_t 18
 db  "If optimization..." , 0
__literal1192_bufferBytes StringHead_t 24
 db  "Dead code elimination..." , 0
__literal1193_bufferBytes StringHead_t 41
 db  "Common subexpression elimination (CSE)..." , 0
__literal1194_bufferBytes StringHead_t 27
 db  "error: optimization level #" , 0
__literal1195_bufferBytes StringHead_t 23
 db  " is not implemented yet" , 0
__literal1196_bufferBytes StringHead_t 26
 db  "Translating AST to MIR0..." , 0
__literal1197_bufferBytes StringHead_t 23
 db  "Loading MIR0 into VM..." , 0
__literal1198_bufferBytes StringHead_t 15
 db  "Dumping code..." , 0
__literal1199_bufferBytes StringHead_t 13
 db  "Running VM..." , 0
__literal1200_bufferBytes StringHead_t 12
 db  "Type cast..." , 0
__literal1201_bufferBytes StringHead_t 18
 db  "Translating AST..." , 0
__literal1202_bufferBytes StringHead_t 22
 db  "Generating x64 code..." , 0
; iter 3
ParserActionsLUT_0_buffer Buffer_t 1168 , -1, 0, ParserActionsLUT_0_bufferBytes
ParserActionsLUT_1_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_1_bufferBytes
ParserActionsLUT_2_buffer Buffer_t 688 , -1, 0, ParserActionsLUT_2_bufferBytes
ParserActionsLUT_3_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_3_bufferBytes
ParserActionsLUT_5_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_5_bufferBytes
ParserActionsLUT_6_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_6_bufferBytes
ParserActionsLUT_7_buffer Buffer_t 448 , -1, 0, ParserActionsLUT_7_bufferBytes
ParserActionsLUT_8_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_8_bufferBytes
ParserActionsLUT_9_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_9_bufferBytes
ParserActionsLUT_11_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_11_bufferBytes
ParserActionsLUT_12_buffer Buffer_t 304 , -1, 0, ParserActionsLUT_12_bufferBytes
ParserActionsLUT_14_buffer Buffer_t 16 , -1, 0, ParserActionsLUT_14_bufferBytes
ParserActionsLUT_15_buffer Buffer_t 736 , -1, 0, ParserActionsLUT_15_bufferBytes
ParserActionsLUT_18_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_18_bufferBytes
ParserActionsLUT_19_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_19_bufferBytes
ParserActionsLUT_20_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_20_bufferBytes
ParserActionsLUT_21_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_21_bufferBytes
ParserActionsLUT_22_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_22_bufferBytes
ParserActionsLUT_23_buffer Buffer_t 688 , -1, 0, ParserActionsLUT_23_bufferBytes
ParserActionsLUT_24_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_24_bufferBytes
ParserActionsLUT_25_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_25_bufferBytes
ParserActionsLUT_27_buffer Buffer_t 208 , -1, 0, ParserActionsLUT_27_bufferBytes
ParserActionsLUT_29_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_29_bufferBytes
ParserActionsLUT_30_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_30_bufferBytes
ParserActionsLUT_33_buffer Buffer_t 448 , -1, 0, ParserActionsLUT_33_bufferBytes
ParserActionsLUT_37_buffer Buffer_t 736 , -1, 0, ParserActionsLUT_37_bufferBytes
ParserActionsLUT_42_buffer Buffer_t 832 , -1, 0, ParserActionsLUT_42_bufferBytes
ParserActionsLUT_43_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_43_bufferBytes
ParserActionsLUT_48_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_48_bufferBytes
ParserActionsLUT_49_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_49_bufferBytes
ParserActionsLUT_57_buffer Buffer_t 496 , -1, 0, ParserActionsLUT_57_bufferBytes
ParserActionsLUT_58_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_58_bufferBytes
ParserActionsLUT_59_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_59_bufferBytes
ParserActionsLUT_61_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_61_bufferBytes
ParserActionsLUT_62_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_62_bufferBytes
ParserActionsLUT_66_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_66_bufferBytes
ParserActionsLUT_67_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_67_bufferBytes
ParserActionsLUT_68_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_68_bufferBytes
ParserActionsLUT_69_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_69_bufferBytes
ParserActionsLUT_70_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_70_bufferBytes
ParserActionsLUT_71_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_71_bufferBytes
ParserActionsLUT_74_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_74_bufferBytes
ParserActionsLUT_75_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_75_bufferBytes
ParserActionsLUT_76_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_76_bufferBytes
ParserActionsLUT_77_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_77_bufferBytes
ParserActionsLUT_78_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_78_bufferBytes
ParserActionsLUT_79_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_79_bufferBytes
ParserActionsLUT_81_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_81_bufferBytes
ParserActionsLUT_82_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_82_bufferBytes
ParserActionsLUT_87_buffer Buffer_t 352 , -1, 0, ParserActionsLUT_87_bufferBytes
ParserActionsLUT_88_buffer Buffer_t 736 , -1, 0, ParserActionsLUT_88_bufferBytes
ParserActionsLUT_90_buffer Buffer_t 208 , -1, 0, ParserActionsLUT_90_bufferBytes
ParserActionsLUT_93_buffer Buffer_t 496 , -1, 0, ParserActionsLUT_93_bufferBytes
ParserActionsLUT_94_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_94_bufferBytes
ParserActionsLUT_95_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_95_bufferBytes
ParserActionsLUT_96_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_96_bufferBytes
ParserActionsLUT_97_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_97_bufferBytes
ParserActionsLUT_99_buffer Buffer_t 496 , -1, 0, ParserActionsLUT_99_bufferBytes
ParserActionsLUT_102_buffer Buffer_t 304 , -1, 0, ParserActionsLUT_102_bufferBytes
ParserActionsLUT_104_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_104_bufferBytes
ParserActionsLUT_110_buffer Buffer_t 736 , -1, 0, ParserActionsLUT_110_bufferBytes
ParserActionsLUT_113_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_113_bufferBytes
ParserActionsLUT_115_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_115_bufferBytes
ParserActionsLUT_118_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_118_bufferBytes
ParserActionsLUT_123_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_123_bufferBytes
ParserActionsLUT_124_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_124_bufferBytes
ParserActionsLUT_127_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_127_bufferBytes
ParserActionsLUT_131_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_131_bufferBytes
ParserActionsLUT_132_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_132_bufferBytes
ParserActionsLUT_133_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_133_bufferBytes
ParserActionsLUT_134_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_134_bufferBytes
ParserActionsLUT_135_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_135_bufferBytes
ParserActionsLUT_136_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_136_bufferBytes
ParserActionsLUT_138_buffer Buffer_t 496 , -1, 0, ParserActionsLUT_138_bufferBytes
ParserActionsLUT_142_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_142_bufferBytes
ParserActionsLUT_144_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_144_bufferBytes
ParserActionsLUT_145_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_145_bufferBytes
ParserActionsLUT_146_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_146_bufferBytes
ParserActionsLUT_147_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_147_bufferBytes
ParserActionsLUT_148_buffer Buffer_t 208 , -1, 0, ParserActionsLUT_148_bufferBytes
ParserActionsLUT_149_buffer Buffer_t 208 , -1, 0, ParserActionsLUT_149_bufferBytes
ParserActionsLUT_150_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_150_bufferBytes
ParserActionsLUT_152_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_152_bufferBytes
ParserActionsLUT_153_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_153_bufferBytes
ParserActionsLUT_154_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_154_bufferBytes
ParserActionsLUT_155_buffer Buffer_t 352 , -1, 0, ParserActionsLUT_155_bufferBytes
ParserActionsLUT_163_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_163_bufferBytes
ParserActionsLUT_164_buffer Buffer_t 400 , -1, 0, ParserActionsLUT_164_bufferBytes
ParserActionsLUT_165_buffer Buffer_t 160 , -1, 0, ParserActionsLUT_165_bufferBytes
ParserActionsLUT_166_buffer Buffer_t 304 , -1, 0, ParserActionsLUT_166_bufferBytes
ParserActionsLUT_167_buffer Buffer_t 448 , -1, 0, ParserActionsLUT_167_bufferBytes
ParserActionsLUT_171_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_171_bufferBytes
ParserActionsLUT_172_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_172_bufferBytes
ParserActionsLUT_173_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_173_bufferBytes
ParserActionsLUT_179_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_179_bufferBytes
ParserActionsLUT_183_buffer Buffer_t 1456 , -1, 0, ParserActionsLUT_183_bufferBytes
ParserActionsLUT_184_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_184_bufferBytes
ParserActionsLUT_186_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_186_bufferBytes
ParserActionsLUT_190_buffer Buffer_t 352 , -1, 0, ParserActionsLUT_190_bufferBytes
ParserActionsLUT_191_buffer Buffer_t 448 , -1, 0, ParserActionsLUT_191_bufferBytes
ParserActionsLUT_198_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_198_bufferBytes
ParserActionsLUT_199_buffer Buffer_t 208 , -1, 0, ParserActionsLUT_199_bufferBytes
ParserActionsLUT_200_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_200_bufferBytes
ParserActionsLUT_202_buffer Buffer_t 112 , -1, 0, ParserActionsLUT_202_bufferBytes
ParserActionsLUT_206_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_206_bufferBytes
ParserActionsLUT_207_buffer Buffer_t 400 , -1, 0, ParserActionsLUT_207_bufferBytes
ParserActionsLUT_208_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_208_bufferBytes
ParserActionsLUT_210_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_210_bufferBytes
ParserActionsLUT_212_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_212_bufferBytes
ParserActionsLUT_215_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_215_bufferBytes
ParserActionsLUT_227_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_227_bufferBytes
ParserActionsLUT_229_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_229_bufferBytes
ParserActionsLUT_230_buffer Buffer_t 64 , -1, 0, ParserActionsLUT_230_bufferBytes
ParserGotoLUT_0_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_0_bufferBytes
ParserGotoLUT_2_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_2_bufferBytes
ParserGotoLUT_4_buffer Buffer_t 1648 , -1, 0, ParserGotoLUT_4_bufferBytes
ParserGotoLUT_8_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_8_bufferBytes
ParserGotoLUT_10_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_10_bufferBytes
ParserGotoLUT_13_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_13_bufferBytes
ParserGotoLUT_15_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_15_bufferBytes
ParserGotoLUT_16_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_16_bufferBytes
ParserGotoLUT_17_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_17_bufferBytes
ParserGotoLUT_19_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_19_bufferBytes
ParserGotoLUT_23_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_23_bufferBytes
ParserGotoLUT_24_buffer Buffer_t 256 , -1, 0, ParserGotoLUT_24_bufferBytes
ParserGotoLUT_26_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_26_bufferBytes
ParserGotoLUT_27_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_27_bufferBytes
ParserGotoLUT_31_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_31_bufferBytes
ParserGotoLUT_38_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_38_bufferBytes
ParserGotoLUT_39_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_39_bufferBytes
ParserGotoLUT_40_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_40_bufferBytes
ParserGotoLUT_41_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_41_bufferBytes
ParserGotoLUT_42_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_42_bufferBytes
ParserGotoLUT_43_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_43_bufferBytes
ParserGotoLUT_44_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_44_bufferBytes
ParserGotoLUT_45_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_45_bufferBytes
ParserGotoLUT_46_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_46_bufferBytes
ParserGotoLUT_47_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_47_bufferBytes
ParserGotoLUT_51_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_51_bufferBytes
ParserGotoLUT_52_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_52_bufferBytes
ParserGotoLUT_53_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_53_bufferBytes
ParserGotoLUT_54_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_54_bufferBytes
ParserGotoLUT_55_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_55_bufferBytes
ParserGotoLUT_56_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_56_bufferBytes
ParserGotoLUT_63_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_63_bufferBytes
ParserGotoLUT_66_buffer Buffer_t 208 , -1, 0, ParserGotoLUT_66_bufferBytes
ParserGotoLUT_71_buffer Buffer_t 112 , -1, 0, ParserGotoLUT_71_bufferBytes
ParserGotoLUT_72_buffer Buffer_t 112 , -1, 0, ParserGotoLUT_72_bufferBytes
ParserGotoLUT_73_buffer Buffer_t 928 , -1, 0, ParserGotoLUT_73_bufferBytes
ParserGotoLUT_80_buffer Buffer_t 208 , -1, 0, ParserGotoLUT_80_bufferBytes
ParserGotoLUT_83_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_83_bufferBytes
ParserGotoLUT_84_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_84_bufferBytes
ParserGotoLUT_85_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_85_bufferBytes
ParserGotoLUT_86_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_86_bufferBytes
ParserGotoLUT_102_buffer Buffer_t 352 , -1, 0, ParserGotoLUT_102_bufferBytes
ParserGotoLUT_103_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_103_bufferBytes
ParserGotoLUT_110_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_110_bufferBytes
ParserGotoLUT_112_buffer Buffer_t 112 , -1, 0, ParserGotoLUT_112_bufferBytes
ParserGotoLUT_114_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_114_bufferBytes
ParserGotoLUT_116_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_116_bufferBytes
ParserGotoLUT_117_buffer Buffer_t 160 , -1, 0, ParserGotoLUT_117_bufferBytes
ParserGotoLUT_119_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_119_bufferBytes
ParserGotoLUT_120_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_120_bufferBytes
ParserGotoLUT_125_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_125_bufferBytes
ParserGotoLUT_126_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_126_bufferBytes
ParserGotoLUT_127_buffer Buffer_t 160 , -1, 0, ParserGotoLUT_127_bufferBytes
ParserGotoLUT_129_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_129_bufferBytes
ParserGotoLUT_130_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_130_bufferBytes
ParserGotoLUT_137_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_137_bufferBytes
ParserGotoLUT_138_buffer Buffer_t 352 , -1, 0, ParserGotoLUT_138_bufferBytes
ParserGotoLUT_141_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_141_bufferBytes
ParserGotoLUT_143_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_143_bufferBytes
ParserGotoLUT_146_buffer Buffer_t 208 , -1, 0, ParserGotoLUT_146_bufferBytes
ParserGotoLUT_153_buffer Buffer_t 160 , -1, 0, ParserGotoLUT_153_bufferBytes
ParserGotoLUT_154_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_154_bufferBytes
ParserGotoLUT_156_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_156_bufferBytes
ParserGotoLUT_157_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_157_bufferBytes
ParserGotoLUT_158_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_158_bufferBytes
ParserGotoLUT_159_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_159_bufferBytes
ParserGotoLUT_160_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_160_bufferBytes
ParserGotoLUT_161_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_161_bufferBytes
ParserGotoLUT_162_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_162_bufferBytes
ParserGotoLUT_164_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_164_bufferBytes
ParserGotoLUT_167_buffer Buffer_t 352 , -1, 0, ParserGotoLUT_167_bufferBytes
ParserGotoLUT_168_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_168_bufferBytes
ParserGotoLUT_170_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_170_bufferBytes
ParserGotoLUT_174_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_174_bufferBytes
ParserGotoLUT_175_buffer Buffer_t 112 , -1, 0, ParserGotoLUT_175_bufferBytes
ParserGotoLUT_176_buffer Buffer_t 208 , -1, 0, ParserGotoLUT_176_bufferBytes
ParserGotoLUT_177_buffer Buffer_t 208 , -1, 0, ParserGotoLUT_177_bufferBytes
ParserGotoLUT_178_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_178_bufferBytes
ParserGotoLUT_180_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_180_bufferBytes
ParserGotoLUT_181_buffer Buffer_t 976 , -1, 0, ParserGotoLUT_181_bufferBytes
ParserGotoLUT_182_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_182_bufferBytes
ParserGotoLUT_183_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_183_bufferBytes
ParserGotoLUT_185_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_185_bufferBytes
ParserGotoLUT_187_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_187_bufferBytes
ParserGotoLUT_191_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_191_bufferBytes
ParserGotoLUT_192_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_192_bufferBytes
ParserGotoLUT_193_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_193_bufferBytes
ParserGotoLUT_194_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_194_bufferBytes
ParserGotoLUT_195_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_195_bufferBytes
ParserGotoLUT_196_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_196_bufferBytes
ParserGotoLUT_197_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_197_bufferBytes
ParserGotoLUT_201_buffer Buffer_t 64 , -1, 0, ParserGotoLUT_201_bufferBytes
ParserGotoLUT_205_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_205_bufferBytes
ParserGotoLUT_207_buffer Buffer_t 112 , -1, 0, ParserGotoLUT_207_bufferBytes
ParserGotoLUT_209_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_209_bufferBytes
ParserGotoLUT_211_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_211_bufferBytes
ParserGotoLUT_214_buffer Buffer_t 304 , -1, 0, ParserGotoLUT_214_bufferBytes
ParserGotoLUT_222_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_222_bufferBytes
ParserGotoLUT_223_buffer Buffer_t 880 , -1, 0, ParserGotoLUT_223_bufferBytes
ParserGotoLUT_224_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_224_bufferBytes
ParserGotoLUT_225_buffer Buffer_t 1792 , -1, 0, ParserGotoLUT_225_bufferBytes
LexerIndexLUT_0_buffer Buffer_t 3600 , -1, 0, LexerIndexLUT_0_bufferBytes
LexerAcceptLUT_0_buffer Buffer_t 3600 , -1, 0, LexerAcceptLUT_0_bufferBytes
AST_DataTypeNames_6_buffer Buffer_t 7 , -1, 0, AST_DataTypeNames_6_bufferBytes
AST_DataTypeForMIR_2_buffer Buffer_t 8 , -1, 0, AST_DataTypeForMIR_2_bufferBytes
; iter 4
ParserActionsLUT_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 73 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 5, 23, 2, 12, 27, 2, 16, 26, 2, 18, 82, 3, 24, 20, 2, 31, 19, 2, 33, 8, 2, 36, 10, 2, 37, 17, 2, 38, 16, 2, 39, 2, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 30, 2, 53, 7, 3, 56, 24, 2, 62, 13, 2, 64, 15, 2, 69, 31, 2, -1
ParserActionsLUT_1_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 10, 1, -1
ParserActionsLUT_2_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 39, 2, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 30, 2, 56, 24, 2, 62, 13, 2, 64, 15, 2, 69, 31, 2, -1
ParserActionsLUT_3_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 0, 0, 3, -1
ParserActionsLUT_5_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 6, 3, -1
ParserActionsLUT_6_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 71, 38, 2, -1
ParserActionsLUT_7_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
db 46, 41, 2, 56, 45, 2, 57, 44, 2, 58, 43, 2, 64, 42, 2, 67, 40, 2, 68, 39, 2, 69, 47, 2, 70, 46, 2, -1
ParserActionsLUT_8_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 52, 160, 3, -1
ParserActionsLUT_9_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 71, 140, 1, -1
ParserActionsLUT_11_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 11, 1, -1
ParserActionsLUT_12_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
db 17, 56, 2, 42, 53, 2, 43, 54, 2, 44, 52, 2, 45, 51, 2, 65, 55, 2, -1
ParserActionsLUT_14_bufferBytes dd 0 ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 1 ; itemsCnt
ParserActionsLUT_14_0 Variant_t VARIANT_INTEGER, 0, -1
ParserActionsLUT_15_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 39, 2, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 30, 2, 53, 63, 2, 56, 24, 2, 62, 13, 2, 64, 15, 2, 69, 31, 2, -1
ParserActionsLUT_18_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 66, 2, -1
ParserActionsLUT_19_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 52, 68, 2, -1
ParserActionsLUT_20_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 52, 69, 2, -1
ParserActionsLUT_21_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 52, 70, 2, -1
ParserActionsLUT_22_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 40, 72, 2, 41, 71, 2, -1
ParserActionsLUT_23_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 43 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 39, 2, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 30, 2, 56, 24, 2, 62, 73, 2, 64, 15, 2, 69, 31, 2, -1
ParserActionsLUT_24_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 49, 185, 3, 50, 181, 3, 53, 80, 2, -1
ParserActionsLUT_25_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 71, 141, 1, -1
ParserActionsLUT_27_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 6, 85, 2, 7, 84, 2, 27, 83, 2, 52, 160, 3, -1
ParserActionsLUT_29_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 40, 106, 1, 41, 106, 1, -1
ParserActionsLUT_30_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 62, 86, 2, -1
ParserActionsLUT_33_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
db 46, 41, 2, 56, 45, 2, 57, 44, 2, 58, 43, 2, 64, 88, 2, 67, 40, 2, 68, 39, 2, 69, 47, 2, 70, 46, 2, -1
ParserActionsLUT_37_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
db 17, 88, 1, 42, 88, 1, 43, 88, 1, 44, 88, 1, 45, 88, 1, 46, 88, 1, 56, 88, 1, 57, 88, 1, 58, 88, 1, 64, 88, 1, 65, 88, 1, 67, 88, 1, 68, 88, 1, 69, 88, 1, 70, 88, 1, -1
ParserActionsLUT_42_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 52 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 34, 95, 2, 35, 94, 2, 39, 2, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 51, 159, 3, 52, 30, 2, 56, 24, 2, 62, 13, 2, 64, 15, 2, 69, 31, 2, -1
ParserActionsLUT_43_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 52, 97, 2, -1
ParserActionsLUT_48_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 71, 102, 2, -1
ParserActionsLUT_49_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 60, 103, 2, -1
ParserActionsLUT_57_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
db 46, 41, 2, 56, 45, 2, 57, 44, 2, 58, 43, 2, 61, 97, 3, 64, 88, 2, 67, 40, 2, 68, 39, 2, 69, 47, 2, 70, 46, 2, -1
ParserActionsLUT_58_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 40, 72, 2, 41, 71, 2, 61, 108, 3, -1
ParserActionsLUT_59_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 61, 107, 3, -1
ParserActionsLUT_61_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 53, 51, 3, 60, 110, 2, -1
ParserActionsLUT_62_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 63, 152, 3, -1
ParserActionsLUT_66_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 19, 115, 2, 21, 114, 2, 53, 73, 3, -1
ParserActionsLUT_67_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 116, 2, -1
ParserActionsLUT_68_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 62, 117, 2, -1
ParserActionsLUT_69_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 23, 118, 2, -1
ParserActionsLUT_70_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 62, 119, 2, -1
ParserActionsLUT_71_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 62, 120, 2, -1
ParserActionsLUT_74_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 125, 2, -1
ParserActionsLUT_75_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
db 40, 72, 2, 41, 71, 2, 53, 118, 1, -1
ParserActionsLUT_76_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 117, 1, -1
ParserActionsLUT_77_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 59, 126, 2, -1
ParserActionsLUT_78_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 53, 56, 3, 60, 127, 2, -1
ParserActionsLUT_79_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 55, 153, 3, -1
ParserActionsLUT_81_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 53, 129, 2, -1
ParserActionsLUT_82_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 11, 130, 2, -1
ParserActionsLUT_87_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
db 46, 41, 2, 56, 45, 2, 57, 44, 2, 58, 43, 2, 64, 88, 2, 67, 40, 2, 68, 39, 2, -1
ParserActionsLUT_88_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 39, 2, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 51, 159, 3, 52, 30, 2, 56, 24, 2, 62, 13, 2, 64, 15, 2, 69, 31, 2, -1
ParserActionsLUT_90_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 56, 45, 2, 57, 44, 2, 58, 43, 2, 64, 88, 2, -1
ParserActionsLUT_93_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 46, 41, 2, 56, 45, 2, 57, 44, 2, 58, 43, 2, 63, 136, 3, 64, 88, 2, 67, 40, 2, 68, 39, 2, 69, 47, 2, 70, 46, 2, -1
ParserActionsLUT_94_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 63, 135, 2, -1
ParserActionsLUT_95_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 63, 136, 2, -1
ParserActionsLUT_96_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 63, 137, 3, -1
ParserActionsLUT_97_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 62, 137, 2, -1
ParserActionsLUT_99_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 46, 41, 2, 55, 138, 3, 56, 45, 2, 57, 44, 2, 58, 43, 2, 64, 88, 2, 67, 40, 2, 68, 39, 2, 69, 47, 2, 70, 46, 2, -1
ParserActionsLUT_102_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 3, 178, 3, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 64, 138, 2, -1
ParserActionsLUT_104_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 17, 56, 2, -1
ParserActionsLUT_110_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 46 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 18, 82, 3, 39, 2, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 30, 2, 53, 141, 2, 56, 24, 2, 62, 13, 2, 64, 15, 2, 69, 31, 2, -1
ParserActionsLUT_113_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 22, 71, 3, -1
ParserActionsLUT_115_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 21, 143, 2, -1
ParserActionsLUT_118_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 52, 70, 3, -1
ParserActionsLUT_123_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 61, 119, 3, -1
ParserActionsLUT_124_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 40, 149, 2, 41, 148, 2, 61, 108, 3, -1
ParserActionsLUT_127_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 49, 185, 3, 50, 181, 3, 53, 153, 2, -1
ParserActionsLUT_131_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 11, 156, 2, -1
ParserActionsLUT_132_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 11, 158, 2, 27, 157, 2, -1
ParserActionsLUT_133_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 11, 160, 2, 27, 159, 2, -1
ParserActionsLUT_134_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 61, 32, 3, -1
ParserActionsLUT_135_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 71, 161, 2, -1
ParserActionsLUT_136_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 71, 162, 2, -1
ParserActionsLUT_138_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 31 ; itemsCnt
dw 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 174, 3, 53, 167, 2, 62, 164, 2, 63, 158, 3, 64, 138, 2, 69, 168, 2, -1
ParserActionsLUT_142_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 53, 170, 2, -1
ParserActionsLUT_144_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 30, 35, 3, -1
ParserActionsLUT_145_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 61, 172, 2, -1
ParserActionsLUT_146_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 60, 173, 2, -1
ParserActionsLUT_147_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 61, 81, 3, -1
ParserActionsLUT_148_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 53, 176, 2, 62, 120, 2, -1
ParserActionsLUT_149_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 53, 177, 2, 62, 120, 2, -1
ParserActionsLUT_150_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 4, 135, 3, -1
ParserActionsLUT_152_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 59, 178, 2, -1
ParserActionsLUT_153_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 49, 185, 3, 50, 181, 3, -1
ParserActionsLUT_154_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 13, 180, 2, 14, 122, 3, 15, 181, 2, -1
ParserActionsLUT_155_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 10, 182, 2, 17, 56, 2, 42, 53, 2, 43, 54, 2, 44, 52, 2, 45, 51, 2, 65, 55, 2, -1
ParserActionsLUT_163_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 61, 78, 3, -1
ParserActionsLUT_164_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
dw 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 174, 3, 62, 164, 2, 64, 138, 2, 69, 168, 2, -1
ParserActionsLUT_165_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 53, 63, 3, 60, 191, 2, 63, 157, 3, -1
ParserActionsLUT_166_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 46, 194, 2, 57, 195, 2, 67, 193, 2, 68, 192, 2, 69, 197, 2, 70, 196, 2, -1
ParserActionsLUT_167_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 174, 3, 53, 167, 2, 62, 164, 2, 64, 138, 2, 69, 168, 2, -1
ParserActionsLUT_171_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 80, 3, -1
ParserActionsLUT_172_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 32, 201, 2, -1
ParserActionsLUT_173_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 53, 45, 3, -1
ParserActionsLUT_179_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 59, 205, 2, -1
ParserActionsLUT_183_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 91 ; itemsCnt
dw 1, 184, 3, 2, 183, 3, 3, 178, 3, 5, 23, 2, 12, 27, 2, 16, 26, 2, 17, 56, 2, 18, 82, 3, 24, 20, 2, 31, 19, 2, 33, 8, 2, 36, 10, 2, 37, 17, 2, 38, 16, 2, 39, 2, 2, 42, 53, 2, 43, 54, 2, 44, 52, 2, 45, 51, 2, 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 30, 2, 53, 7, 3, 56, 24, 2, 62, 13, 2, 64, 15, 2, 65, 55, 2, 69, 31, 2, -1
ParserActionsLUT_184_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 11, 209, 2, -1
ParserActionsLUT_186_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 11, 211, 2, -1
ParserActionsLUT_190_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 46, 194, 2, 57, 195, 2, 61, 169, 3, 67, 193, 2, 68, 192, 2, 69, 197, 2, 70, 196, 2, -1
ParserActionsLUT_191_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 28 ; itemsCnt
dw 47, 179, 3, 48, 180, 3, 49, 185, 3, 50, 181, 3, 52, 174, 3, 53, 214, 2, 62, 164, 2, 64, 138, 2, 69, 168, 2, -1
ParserActionsLUT_198_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 53, 63, 3, 60, 191, 2, -1
ParserActionsLUT_199_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 46, 194, 2, 57, 195, 2, 67, 193, 2, 68, 192, 2, -1
ParserActionsLUT_200_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 20, 79, 3, -1
ParserActionsLUT_202_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 40, 149, 2, 41, 148, 2, -1
ParserActionsLUT_206_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 14, 123, 3, -1
ParserActionsLUT_207_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 25 ; itemsCnt
dw 8, 223, 2, 17, 56, 2, 42, 53, 2, 43, 54, 2, 44, 52, 2, 45, 51, 2, 53, 128, 3, 65, 55, 2, -1
ParserActionsLUT_208_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 9, 130, 3, -1
ParserActionsLUT_210_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 9, 131, 3, -1
ParserActionsLUT_212_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 9, 132, 3, -1
ParserActionsLUT_215_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 57, 195, 2, -1
ParserActionsLUT_227_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 9, 125, 3, -1
ParserActionsLUT_229_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 9, 133, 3, -1
ParserActionsLUT_230_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 9, 134, 3, -1
ParserGotoLUT_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 3, 2, -1
ParserGotoLUT_2_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 37, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_4_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 103 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 140, 1, 3, -1
ParserGotoLUT_8_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 118, 48, 2, -1
ParserGotoLUT_10_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 50, 2, 121, 33, 2, 122, 49, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_13_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 58, 2, 91, 59, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 57, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_15_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 112, 62, 2, 113, 61, 2, 116, 14, 2, 118, 34, 2, 120, 60, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_16_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 50, 2, 121, 33, 2, 122, 64, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_17_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 50, 2, 121, 33, 2, 122, 65, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_19_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 115, 67, 2, -1
ParserGotoLUT_23_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 85, 74, 2, 89, 29, 2, 90, 75, 2, 91, 76, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_24_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 16 ; itemsCnt
dw 72, 182, 3, 76, 79, 2, 104, 60, 3, 105, 77, 2, 106, 78, 2, -1
ParserGotoLUT_26_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 84, 120, 3, 85, 81, 2, 89, 29, 2, 90, 75, 2, 91, 76, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_27_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 118, 82, 2, -1
ParserGotoLUT_31_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 87, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_38_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 89, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_39_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 90, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_40_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 91, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_41_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 92, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_42_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 80, 96, 2, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 93, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_43_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 79, 139, 3, -1
ParserGotoLUT_44_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 98, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_45_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 99, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_46_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 100, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_47_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 101, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_51_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 104, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_52_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 105, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_53_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 106, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_54_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 107, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_55_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 108, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_56_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 109, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_63_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 113, 111, 2, 116, 14, 2, 118, 34, 2, 120, 60, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_66_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
db 95, 113, 2, 96, 112, 2, 97, 75, 3, 98, 72, 3, -1
ParserGotoLUT_71_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 89, 106, 3, 90, 121, 2, -1
ParserGotoLUT_72_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 89, 106, 3, 90, 122, 2, -1
ParserGotoLUT_73_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 58 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 88, 123, 2, 89, 29, 2, 90, 124, 2, 91, 59, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 57, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_80_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 72, 182, 3, 104, 60, 3, 105, 77, 2, 106, 128, 2, -1
ParserGotoLUT_83_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 118, 131, 2, -1
ParserGotoLUT_84_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 118, 132, 2, -1
ParserGotoLUT_85_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 118, 133, 2, -1
ParserGotoLUT_86_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 112, 134, 2, 113, 61, 2, 116, 14, 2, 118, 34, 2, 120, 60, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_102_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 75, 156, 3, 104, 177, 3, 116, 29, 3, 117, 28, 3, -1
ParserGotoLUT_103_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 139, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_110_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 140, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_112_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
db 97, 74, 3, 98, 72, 3, -1
ParserGotoLUT_114_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 115, 142, 2, -1
ParserGotoLUT_116_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 144, 2, -1
ParserGotoLUT_117_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 111, 146, 2, 114, 145, 2, 118, 36, 3, -1
ParserGotoLUT_119_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 112, 147, 2, 113, 61, 2, 116, 14, 2, 118, 34, 2, 120, 60, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_120_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 58, 2, 91, 59, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_125_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 150, 2, -1
ParserGotoLUT_126_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 151, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_127_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 72, 182, 3, 104, 60, 3, 105, 152, 2, -1
ParserGotoLUT_129_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 154, 2, -1
ParserGotoLUT_130_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 155, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_137_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 112, 163, 2, 113, 61, 2, 116, 14, 2, 118, 34, 2, 120, 60, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_138_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 166, 2, 103, 165, 2, 104, 172, 3, -1
ParserGotoLUT_141_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 169, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_143_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 115, 171, 2, -1
ParserGotoLUT_146_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 107, 38, 3, 108, 175, 2, 109, 41, 3, 110, 174, 2, -1
ParserGotoLUT_153_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 10 ; itemsCnt
dw 72, 182, 3, 104, 60, 3, 105, 179, 2, -1
ParserGotoLUT_154_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 83, 124, 3, -1
ParserGotoLUT_156_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 183, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_157_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 118, 184, 2, -1
ParserGotoLUT_158_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 185, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_159_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
dw 118, 186, 2, -1
ParserGotoLUT_160_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 187, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_161_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 188, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_162_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 189, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_164_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 190, 2, 104, 172, 3, -1
ParserGotoLUT_167_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 22 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 166, 2, 103, 198, 2, 104, 172, 3, -1
ParserGotoLUT_168_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 199, 2, 104, 172, 3, -1
ParserGotoLUT_170_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 200, 2, -1
ParserGotoLUT_174_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 118, 39, 3, -1
ParserGotoLUT_175_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 109, 40, 3, 110, 174, 2, -1
ParserGotoLUT_176_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 87, 111, 3, 88, 113, 3, 89, 106, 3, 90, 202, 2, -1
ParserGotoLUT_177_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 13 ; itemsCnt
dw 86, 114, 3, 88, 116, 3, 89, 106, 3, 90, 203, 2, -1
ParserGotoLUT_178_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 204, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_180_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 206, 2, -1
ParserGotoLUT_181_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 61 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 84, 121, 3, 85, 81, 2, 89, 29, 2, 90, 75, 2, 91, 76, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 12, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_182_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 207, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_183_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 208, 2, -1
ParserGotoLUT_185_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 210, 2, -1
ParserGotoLUT_187_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 212, 2, -1
ParserGotoLUT_191_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 213, 2, 104, 172, 3, -1
ParserGotoLUT_192_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 215, 2, 104, 172, 3, -1
ParserGotoLUT_193_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 216, 2, 104, 172, 3, -1
ParserGotoLUT_194_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 217, 2, 104, 172, 3, -1
ParserGotoLUT_195_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 218, 2, 104, 172, 3, -1
ParserGotoLUT_196_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 219, 2, 104, 172, 3, -1
ParserGotoLUT_197_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 220, 2, 104, 172, 3, -1
ParserGotoLUT_201_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 4 ; itemsCnt
db 118, 30, 3, -1
ParserGotoLUT_205_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 221, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_207_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 7 ; itemsCnt
dw 81, 222, 2, 82, 126, 3, -1
ParserGotoLUT_209_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 224, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_211_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 225, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_214_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 19 ; itemsCnt
dw 72, 182, 3, 73, 171, 3, 74, 170, 3, 75, 173, 3, 102, 226, 2, 104, 172, 3, -1
ParserGotoLUT_222_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 227, 2, -1
ParserGotoLUT_223_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 55 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 36, 2, 93, 21, 2, 94, 145, 3, 104, 177, 3, 116, 14, 2, 118, 34, 2, 120, 228, 2, 121, 33, 2, 133, 35, 2, 134, 32, 2, -1
ParserGotoLUT_224_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 229, 2, -1
ParserGotoLUT_225_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 112 ; itemsCnt
dw 72, 182, 3, 73, 176, 3, 74, 175, 3, 77, 150, 3, 78, 149, 3, 89, 29, 2, 90, 22, 2, 91, 28, 2, 92, 25, 2, 93, 21, 2, 94, 145, 3, 99, 18, 2, 104, 177, 3, 116, 14, 2, 118, 9, 2, 119, 6, 2, 120, 12, 2, 121, 7, 2, 123, 21, 3, 124, 20, 3, 125, 19, 3, 126, 18, 3, 127, 17, 3, 128, 16, 3, 129, 15, 3, 130, 14, 3, 131, 13, 3, 132, 12, 3, 133, 11, 2, 134, 1, 2, 135, 9, 3, 136, 8, 3, 137, 5, 2, 138, 5, 3, 139, 4, 2, 140, 2, 3, 141, 230, 2, -1
LexerIndexLUT_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 1  ; inner size
db ?, ?, ? ; reserved
dq 225 ; itemsCnt
dw 0, 106, 108, 110, 112, 114, 116, 118, 122, 126, 132, 140, 142, 146, 148, 152, 162, 164, 166, 180, 182, 184, 186, 192, 194, 208, 210, 212, 214, 216, 218, 228, 242, 256, 266, 276, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 596, 606, 612, 622, 638, 650, 656, 666, 684, 698, 710, 718, 726, 736, 758, 774, 780, 804, 812, 822, 836, 840, 850, 874, 882, 892, 906, 920, 930, 952, 966, 976, 990, 1002, 1012, 1026, 1034, 1048, 1058, 1076, 1086, 1098, 1116, 1126, 1140, 1152, 1170, 1184, 1198, 1212, 1226, 1240, 1254, 1268, 1282, 1296, 1310, 1324, 1338, 1352, 1366, 1380, 1394, 1424, 1438, 1452, 1466, 1480, 1494, 1508, 1522, 1536, 1550, 1564, 1582, 1596, 1610, 1624, 1638, 1652, 1662, 1672, 1686, 1700, 1710, 1724, 1736, 1750, 1764, 1778, 1792, 1806, 1820, 1834, 1844, 1854, 1868, 1882, 1896, 1910, 1924, 1938, 1952, 1966, 1980, 1994, 2008, 2022, 2036, 2050, 2064, 2078, 2092, 2106, 2120, 2134, 2148, 2162, 2176, 2190, 2204, 2218, 2232, 2246, 2260, 2274, 2288, 2302, 2316, 2330, 2344, 2358, 2372, 2386, 2400, 2414, 2428, 2438, 2452, 2462, 2474, 2486, 2500, 2514, 2528, 2542, 2556, 2570, 2584, 2598, 2612, 2626, 2640, 2654, 2668, 2682, 2696
LexerAcceptLUT_0_bufferBytes dd VARIANT_INTEGER ; inner type
db 0  ; inner size
db ?, ?, ? ; reserved
dq 225 ; itemsCnt
db 0, 55, 63, 62, 69, 71, 61, 70, 59, 68, 48, 60, 18, 72, 66, 52, 65, 64, 53, 57, 56, 58, 54, 51, 50, 33, 11, 47, 44, 43, 17, 12, 46, 41, 26, 49, 42, 13, 19, 40, 16, 14, 29, 45, 8, 4, 30, 9, 3, 25, 34, 15, 2, 39, 6, 27, 10, 38, 37, 22, 28, 24, 7, 23, 5, 32, 21, 36, 31, 35, 20, 0, 55, 48, 52, 53, 50, 0, 55, 48, 52, 53, 0, 52, 53, 0, 52, 53, 0, 52, 53, 0, 52, 53, 0, 52, 53, 0, 52, 53, 0, 52, 53, 52, 53, 52, 53, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 53, 53, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 53, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53
AST_DataTypeNames_6_bufferBytes StringHead_t 6
 db  "object" , 0
AST_DataTypeForMIR_2_bufferBytes StringHead_t 7
 db  "float32" , 0
; iter 5
; iter 6
; iter 7
; iter 8
; iter 9
; iter 10
; iter 11
; iter 12
; iter 13
; iter 14
; iter 15

; Jump tables
; -----------
__jmptable1308:
  dq  l1307 ; 0
  dq  l1307 ; 1
  dq  l1307 ; 2
  dq  l1307 ; 3
  dq  l1307 ; 4
  dq  l1309 ; 5
  dq  l1307 ; 6
  dq  l1307 ; 7
  dq  l1307 ; 8
  dq  l1307 ; 9
  dq  l1307 ; 10
  dq  l1307 ; 11
  dq  l1307 ; 12
  dq  l1307 ; 13
  dq  l1307 ; 14
  dq  l1307 ; 15
  dq  l1307 ; 16
  dq  l1307 ; 17
  dq  l1307 ; 18
  dq  l1307 ; 19
  dq  l1307 ; 20
  dq  l1307 ; 21
  dq  l1310 ; 22
  dq  l1311 ; 23
  dq  l1312 ; 24
  dq  l1313 ; 25
  dq  l1314 ; 26
  dq  l1307 ; 27
  dq  l1307 ; 28
  dq  l1315 ; 29
  dq  l1307 ; 30
  dq  l1307 ; 31
  dq  l1307 ; 32
  dq  l1307 ; 33
  dq  l1307 ; 34
  dq  l1319 ; 35
  dq  l1307 ; 36
  dq  l1307 ; 37
  dq  l1307 ; 38
  dq  l1307 ; 39
  dq  l1307 ; 40
  dq  l1307 ; 41
  dq  l1307 ; 42
  dq  l1307 ; 43
  dq  l1307 ; 44
  dq  l1307 ; 45
  dq  l1307 ; 46
  dq  l1307 ; 47
  dq  l1307 ; 48
  dq  l1307 ; 49
  dq  l1307 ; 50
  dq  l1307 ; 51
  dq  l1307 ; 52
  dq  l1307 ; 53
  dq  l1307 ; 54
  dq  l1307 ; 55
  dq  l1307 ; 56
  dq  l1307 ; 57
  dq  l1307 ; 58
  dq  l1307 ; 59
  dq  l1307 ; 60
  dq  l1320 ; 61
  dq  l1320 ; 62
  dq  l1307 ; 63
  dq  l1321 ; 64
  dq  l1322 ; 65
  dq  l1307 ; 66
  dq  l1323 ; 67
  dq  l1324 ; 68
  dq  l1325 ; 69
  dq  l1326 ; 70
  dq  l1307 ; 71
  dq  l1307 ; 72
  dq  l1307 ; 73
  dq  l1307 ; 74
  dq  l1307 ; 75
  dq  l1307 ; 76
  dq  l1307 ; 77
  dq  l1319 ; 78
  dq  l1319 ; 79
  dq  l1327 ; 80
  dq  l1319 ; 81
  dq  l1328 ; 82
  dq  l1307 ; 83
  dq  l1307 ; 84
  dq  l1307 ; 85
  dq  l1307 ; 86
  dq  l1307 ; 87
  dq  l1307 ; 88
  dq  l1307 ; 89
  dq  l1307 ; 90
  dq  l1307 ; 91
  dq  l1307 ; 92
  dq  l1307 ; 93
  dq  l1307 ; 94
  dq  l1307 ; 95
  dq  l1307 ; 96
  dq  l1307 ; 97
  dq  l1307 ; 98
  dq  l1307 ; 99
  dq  l1307 ; 100
  dq  l1307 ; 101
  dq  l1307 ; 102
  dq  l1307 ; 103
  dq  l1307 ; 104
  dq  l1307 ; 105
  dq  l1307 ; 106
  dq  l1327 ; 107
  dq  l1327 ; 108
  dq  l1307 ; 109
  dq  l1307 ; 110
  dq  l1307 ; 111
  dq  l1307 ; 112
  dq  l1307 ; 113
  dq  l1307 ; 114
  dq  l1307 ; 115
  dq  l1307 ; 116
  dq  l1307 ; 117
  dq  l1307 ; 118
  dq  l1327 ; 119
  dq  l1307 ; 120
  dq  l1307 ; 121
  dq  l1307 ; 122
  dq  l1307 ; 123
  dq  l1307 ; 124
  dq  l1307 ; 125
  dq  l1307 ; 126
  dq  l1307 ; 127
  dq  l1329 ; 128
  dq  l1307 ; 129
  dq  l1307 ; 130
  dq  l1307 ; 131
  dq  l1307 ; 132
  dq  l1307 ; 133
  dq  l1307 ; 134
  dq  l1307 ; 135
  dq  l1307 ; 136
  dq  l1307 ; 137
  dq  l1307 ; 138
  dq  l1307 ; 139
  dq  l1307 ; 140
  dq  l1307 ; 141
  dq  l1307 ; 142
  dq  l1307 ; 143
  dq  l1307 ; 144
  dq  l1307 ; 145
  dq  l1307 ; 146
  dq  l1307 ; 147
  dq  l1307 ; 148
  dq  l1307 ; 149
  dq  l1307 ; 150
  dq  l1307 ; 151
  dq  l1307 ; 152
  dq  l1307 ; 153
  dq  l1307 ; 154
  dq  l1307 ; 155
  dq  l1307 ; 156
  dq  l1327 ; 157
  dq  l1330 ; 158
  dq  l1307 ; 159
  dq  l1307 ; 160
  dq  l1307 ; 161
  dq  l1331 ; 162
  dq  l1332 ; 163
  dq  l1333 ; 164
  dq  l1334 ; 165
  dq  l1335 ; 166
  dq  l1336 ; 167
  dq  l1337 ; 168
  dq  l1327 ; 169
  dq  l1307 ; 170
  dq  l1307 ; 171
  dq  l1307 ; 172
  dq  l1307 ; 173
  dq  l1338 ; 174
  dq  l1307 ; 175
  dq  l1307 ; 176
  dq  l1307 ; 177
  dq  l1309 ; 178
  dq  l1341 ; 179
  dq  l1342 ; 180
  dq  l1343 ; 181
  dq  l1307 ; 182
  dq  l1345 ; 183
  dq  l1346 ; 184
  dq  l1347 ; 185
__jmptable1397:
  dq  l1396 ; 0
  dq  l1409 ; 1
  dq  l1411 ; 2
  dq  l1412 ; 3
  dq  l1410 ; 4
  dq  l1413 ; 5
  dq  l1396 ; 6
  dq  l1396 ; 7
  dq  l1416 ; 8
  dq  l1414 ; 9
  dq  l1415 ; 10
  dq  l1396 ; 11
  dq  l1396 ; 12
  dq  l1396 ; 13
  dq  l1396 ; 14
  dq  l1396 ; 15
  dq  l1396 ; 16
  dq  l1396 ; 17
  dq  l1396 ; 18
  dq  l1396 ; 19
  dq  l1396 ; 20
  dq  l1396 ; 21
  dq  l1396 ; 22
  dq  l1396 ; 23
  dq  l1396 ; 24
  dq  l1396 ; 25
  dq  l1396 ; 26
  dq  l1396 ; 27
  dq  l1396 ; 28
  dq  l1396 ; 29
  dq  l1398 ; 30
  dq  l1399 ; 31
  dq  l1400 ; 32
  dq  l1401 ; 33
  dq  l1402 ; 34
  dq  l1396 ; 35
  dq  l1437 ; 36
  dq  l1436 ; 37
  dq  l1396 ; 38
  dq  l1396 ; 39
  dq  l1403 ; 40
  dq  l1396 ; 41
  dq  l1406 ; 42
  dq  l1405 ; 43
  dq  l1404 ; 44
  dq  l1396 ; 45
  dq  l1396 ; 46
  dq  l1396 ; 47
  dq  l1396 ; 48
  dq  l1396 ; 49
  dq  l1396 ; 50
  dq  l1396 ; 51
  dq  l1433 ; 52
  dq  l1396 ; 53
  dq  l1407 ; 54
  dq  l1408 ; 55
  dq  l1432 ; 56
  dq  l1419 ; 57
  dq  l1420 ; 58
  dq  l1422 ; 59
  dq  l1423 ; 60
  dq  l1424 ; 61
  dq  l1396 ; 62
  dq  l1396 ; 63
  dq  l1425 ; 64
  dq  l1421 ; 65
  dq  l1426 ; 66
  dq  l1427 ; 67
  dq  l1430 ; 68
  dq  l1431 ; 69
  dq  l1428 ; 70
  dq  l1429 ; 71
  dq  l1417 ; 72
  dq  l1418 ; 73
  dq  l1396 ; 74
  dq  l1435 ; 75
  dq  l1434 ; 76
__jmptable1444:
  dq  l1443 ; 0
  dq  l1448 ; 1
  dq  l1450 ; 2
  dq  l1450 ; 3
  dq  l1449 ; 4
  dq  l1451 ; 5
  dq  l1443 ; 6
  dq  l1443 ; 7
  dq  l1447 ; 8
  dq  l1452 ; 9
  dq  l1453 ; 10
  dq  l1443 ; 11
  dq  l1443 ; 12
  dq  l1443 ; 13
  dq  l1443 ; 14
  dq  l1443 ; 15
  dq  l1443 ; 16
  dq  l1443 ; 17
  dq  l1443 ; 18
  dq  l1443 ; 19
  dq  l1443 ; 20
  dq  l1443 ; 21
  dq  l1443 ; 22
  dq  l1443 ; 23
  dq  l1443 ; 24
  dq  l1443 ; 25
  dq  l1443 ; 26
  dq  l1443 ; 27
  dq  l1443 ; 28
  dq  l1443 ; 29
  dq  l1443 ; 30
  dq  l1472 ; 31
  dq  l1443 ; 32
  dq  l1443 ; 33
  dq  l1443 ; 34
  dq  l1443 ; 35
  dq  l1471 ; 36
  dq  l1470 ; 37
  dq  l1443 ; 38
  dq  l1443 ; 39
  dq  l1476 ; 40
  dq  l1443 ; 41
  dq  l1469 ; 42
  dq  l1475 ; 43
  dq  l1474 ; 44
  dq  l1477 ; 45
  dq  l1478 ; 46
  dq  l1481 ; 47
  dq  l1479 ; 48
  dq  l1480 ; 49
  dq  l1443 ; 50
  dq  l1443 ; 51
  dq  l1468 ; 52
  dq  l1443 ; 53
  dq  l1445 ; 54
  dq  l1446 ; 55
  dq  l1473 ; 56
  dq  l1456 ; 57
  dq  l1457 ; 58
  dq  l1456 ; 59
  dq  l1459 ; 60
  dq  l1460 ; 61
  dq  l1443 ; 62
  dq  l1443 ; 63
  dq  l1461 ; 64
  dq  l1458 ; 65
  dq  l1462 ; 66
  dq  l1463 ; 67
  dq  l1466 ; 68
  dq  l1467 ; 69
  dq  l1464 ; 70
  dq  l1465 ; 71
  dq  l1454 ; 72
  dq  l1455 ; 73
  dq  l1443 ; 74
  dq  l1482 ; 75
  dq  l1483 ; 76
__jmptable1686:
  dq  l1685 ; 0
  dq  l1685 ; 1
  dq  l1685 ; 2
  dq  l1685 ; 3
  dq  l1685 ; 4
  dq  l1685 ; 5
  dq  l1685 ; 6
  dq  l1685 ; 7
  dq  l1703 ; 8
  dq  l1685 ; 9
  dq  l1685 ; 10
  dq  l1685 ; 11
  dq  l1685 ; 12
  dq  l1685 ; 13
  dq  l1685 ; 14
  dq  l1685 ; 15
  dq  l1685 ; 16
  dq  l1685 ; 17
  dq  l1685 ; 18
  dq  l1685 ; 19
  dq  l1685 ; 20
  dq  l1685 ; 21
  dq  l1685 ; 22
  dq  l1685 ; 23
  dq  l1685 ; 24
  dq  l1685 ; 25
  dq  l1685 ; 26
  dq  l1685 ; 27
  dq  l1685 ; 28
  dq  l1685 ; 29
  dq  l1685 ; 30
  dq  l1685 ; 31
  dq  l1685 ; 32
  dq  l1685 ; 33
  dq  l1685 ; 34
  dq  l1685 ; 35
  dq  l1685 ; 36
  dq  l1702 ; 37
  dq  l1685 ; 38
  dq  l1685 ; 39
  dq  l1685 ; 40
  dq  l1685 ; 41
  dq  l1697 ; 42
  dq  l1685 ; 43
  dq  l1685 ; 44
  dq  l1685 ; 45
  dq  l1685 ; 46
  dq  l1685 ; 47
  dq  l1685 ; 48
  dq  l1685 ; 49
  dq  l1685 ; 50
  dq  l1685 ; 51
  dq  l1687 ; 52
  dq  l1685 ; 53
  dq  l1692 ; 54
  dq  l1685 ; 55
  dq  l1685 ; 56
  dq  l1685 ; 57
  dq  l1685 ; 58
  dq  l1685 ; 59
  dq  l1685 ; 60
  dq  l1685 ; 61
  dq  l1685 ; 62
  dq  l1685 ; 63
  dq  l1685 ; 64
  dq  l1685 ; 65
  dq  l1685 ; 66
  dq  l1685 ; 67
  dq  l1685 ; 68
  dq  l1685 ; 69
  dq  l1685 ; 70
  dq  l1685 ; 71
  dq  l1685 ; 72
  dq  l1685 ; 73
  dq  l1685 ; 74
  dq  l1691 ; 75
__jmptable2187:
  dq  l2186 ; 0
  dq  l2186 ; 1
  dq  l2186 ; 2
  dq  l2186 ; 3
  dq  l2191 ; 4
  dq  l2186 ; 5
  dq  l2186 ; 6
  dq  l2186 ; 7
  dq  l2186 ; 8
  dq  l2186 ; 9
  dq  l2186 ; 10
  dq  l2186 ; 11
  dq  l2186 ; 12
  dq  l2186 ; 13
  dq  l2186 ; 14
  dq  l2186 ; 15
  dq  l2186 ; 16
  dq  l2186 ; 17
  dq  l2186 ; 18
  dq  l2186 ; 19
  dq  l2186 ; 20
  dq  l2186 ; 21
  dq  l2186 ; 22
  dq  l2186 ; 23
  dq  l2186 ; 24
  dq  l2186 ; 25
  dq  l2186 ; 26
  dq  l2186 ; 27
  dq  l2186 ; 28
  dq  l2186 ; 29
  dq  l2188 ; 30
  dq  l2186 ; 31
  dq  l2186 ; 32
  dq  l2195 ; 33
__jmptable2238:
  dq  l2237 ; 0
  dq  l2237 ; 1
  dq  l2237 ; 2
  dq  l2237 ; 3
  dq  l2237 ; 4
  dq  l2237 ; 5
  dq  l2237 ; 6
  dq  l2237 ; 7
  dq  l2237 ; 8
  dq  l2237 ; 9
  dq  l2237 ; 10
  dq  l2237 ; 11
  dq  l2237 ; 12
  dq  l2237 ; 13
  dq  l2237 ; 14
  dq  l2237 ; 15
  dq  l2237 ; 16
  dq  l2237 ; 17
  dq  l2237 ; 18
  dq  l2237 ; 19
  dq  l2237 ; 20
  dq  l2237 ; 21
  dq  l2237 ; 22
  dq  l2237 ; 23
  dq  l2237 ; 24
  dq  l2237 ; 25
  dq  l2237 ; 26
  dq  l2237 ; 27
  dq  l2237 ; 28
  dq  l2237 ; 29
  dq  l2237 ; 30
  dq  l2239 ; 31
  dq  l2237 ; 32
  dq  l2237 ; 33
  dq  l2237 ; 34
  dq  l2237 ; 35
  dq  l2237 ; 36
  dq  l2237 ; 37
  dq  l2237 ; 38
  dq  l2237 ; 39
  dq  l2283 ; 40
  dq  l2237 ; 41
  dq  l2237 ; 42
  dq  l2237 ; 43
  dq  l2313 ; 44
  dq  l2237 ; 45
  dq  l2237 ; 46
  dq  l2237 ; 47
  dq  l2237 ; 48
  dq  l2237 ; 49
  dq  l2237 ; 50
  dq  l2237 ; 51
  dq  l2246 ; 52
  dq  l2237 ; 53
  dq  l2252 ; 54
  dq  l2259 ; 55
  dq  l2264 ; 56
__jmptable3059:
  dq  l3058 ; 0
  dq  l3058 ; 1
  dq  l3058 ; 2
  dq  l3058 ; 3
  dq  l3058 ; 4
  dq  l3058 ; 5
  dq  l3058 ; 6
  dq  l3058 ; 7
  dq  l3058 ; 8
  dq  l3058 ; 9
  dq  l3058 ; 10
  dq  l3058 ; 11
  dq  l3058 ; 12
  dq  l3058 ; 13
  dq  l3058 ; 14
  dq  l3058 ; 15
  dq  l3058 ; 16
  dq  l3058 ; 17
  dq  l3058 ; 18
  dq  l3058 ; 19
  dq  l3058 ; 20
  dq  l3058 ; 21
  dq  l3058 ; 22
  dq  l3058 ; 23
  dq  l3058 ; 24
  dq  l3058 ; 25
  dq  l3058 ; 26
  dq  l3058 ; 27
  dq  l3058 ; 28
  dq  l3058 ; 29
  dq  l3058 ; 30
  dq  l3058 ; 31
  dq  l3097 ; 32
  dq  l3058 ; 33
  dq  l3058 ; 34
  dq  l3058 ; 35
  dq  l3058 ; 36
  dq  l3058 ; 37
  dq  l3058 ; 38
  dq  l3058 ; 39
  dq  l3066 ; 40
  dq  l3058 ; 41
  dq  l3058 ; 42
  dq  l3060 ; 43
  dq  l3058 ; 44
  dq  l3058 ; 45
  dq  l3058 ; 46
  dq  l3058 ; 47
  dq  l3058 ; 48
  dq  l3058 ; 49
  dq  l3058 ; 50
  dq  l3058 ; 51
  dq  l3058 ; 52
  dq  l3058 ; 53
  dq  l3058 ; 54
  dq  l3058 ; 55
  dq  l3087 ; 56

; vtables
; -------
vtable_AST:
.offset dd 8 * 167
.length dd 8 * 0
.entries:
  dq __AST_printTree$0 ; printTree ( 167 )

vtable_Parser:
.offset dd 8 * 6
.length dd 8 * 0
.entries:
  dq __Parser_parseFile$0 ; parseFile ( 6 )

vtable_SymbolTable:
.offset dd 8 * 2
.length dd 8 * 161
.entries:
  dq __SymbolTable_insert$0 ; insert ( 2 )
  dq __SymbolTable__lookupInternal$0 ; _lookupInternal ( 3 )
  dq __SymbolTable_lookup$0 ; lookup ( 4 )
  dq __MOLD_NullMethodCalled ; logDebug ( 5 )
  dq __MOLD_NullMethodCalled ; parseFile ( 6 )
  dq __MOLD_NullMethodCalled ; setLogContext ( 7 )
  dq __SymbolTable_insertLiteral$0 ; insertLiteral ( 8 )
  dq __SymbolTable_lookupClass$0 ; lookupClass ( 9 )
  dq __SymbolTable_insertClass$0 ; insertClass ( 10 )
  dq __SymbolTable_insertFunction$0 ; insertFunction ( 11 )
  dq __SymbolTable_enterScopeForProcedure$0 ; enterScopeForProcedure ( 12 )
  dq __SymbolTable_insertParam$0 ; insertParam ( 13 )
  dq __SymbolTable_assignType$0 ; assignType ( 14 )
  dq __SymbolTable_freezeType$0 ; freezeType ( 15 )
  dq __SymbolTable_isset$0 ; isset ( 16 )
  dq __SymbolTable_enterScope$0 ; enterScope ( 17 )
  dq __SymbolTable_importExternalVariable$0 ; importExternalVariable ( 18 )
  dq __SymbolTable_leaveScope$0 ; leaveScope ( 19 )
  dq __SymbolTable_lookupForWrite$0 ; lookupForWrite ( 20 )
  dq __SymbolTable_lookupForRead$0 ; lookupForRead ( 21 )
  dq __SymbolTable_useAsTypeofArg$0 ; useAsTypeofArg ( 22 )
  dq __SymbolTable_useAsArray$0 ; useAsArray ( 23 )
  dq __SymbolTable_useAsArrayOrString$0 ; useAsArrayOrString ( 24 )
  dq __SymbolTable_useAsIndex$0 ; useAsIndex ( 25 )
  dq __SymbolTable_useAsMapOrObject$0 ; useAsMapOrObject ( 26 )
  dq __SymbolTable_useAsKey$0 ; useAsKey ( 27 )
  dq __SymbolTable_insertConst$0 ; insertConst ( 28 )
  dq __SymbolTable_lookupForWriteOrInsert$0 ; lookupForWriteOrInsert ( 29 )
  dq __SymbolTable_assignNode$0 ; assignNode ( 30 )
  dq __SymbolTable_assignValue$0 ; assignValue ( 31 )
  dq __SymbolTable_exportSymbols$0 ; exportSymbols ( 32 )
  dq __SymbolTable_remove$0 ; remove ( 33 )
  dq __SymbolTable_enterScopeForLoop$0 ; enterScopeForLoop ( 34 )
  dq __SymbolTable_insertLocal$0 ; insertLocal ( 35 )
  dq __SymbolTable_lookupForReadAndWrite$0 ; lookupForReadAndWrite ( 36 )
  dq __SymbolTable_lookupForCall$0 ; lookupForCall ( 37 )
  dq __SymbolTable_getCurrentFunctionName$0 ; getCurrentFunctionName ( 38 )
  dq __SymbolTable_importGlobal$0 ; importGlobal ( 39 )
  dq __SymbolTable_useAsInteger$0 ; useAsInteger ( 40 )
  dq __SymbolTable_useAsFloat$0 ; useAsFloat ( 41 )
  dq __SymbolTable_useAsNumber$0 ; useAsNumber ( 42 )
  dq __SymbolTable_decreaseWriteHits$0 ; decreaseWriteHits ( 43 )
  dq __SymbolTable_removeUnusedSymbols$0 ; removeUnusedSymbols ( 44 )
  dq __MOLD_NullMethodCalled ; getAstSymbolsCollector ( 45 )
  dq __MOLD_NullMethodCalled ; _collectSymbols ( 46 )
  dq __SymbolTable_getTempVarForReadAndWrite$0 ; getTempVarForReadAndWrite ( 47 )
  dq __SymbolTable_releaseTempVar$0 ; releaseTempVar ( 48 )
  dq __MOLD_NullMethodCalled ; _declareFunction ( 49 )
  dq __MOLD_NullMethodCalled ; _emitFunctionBody ( 50 )
  dq __MOLD_NullMethodCalled ; _declareClass ( 51 )
  dq __MOLD_NullMethodCalled ; _call ( 52 )
  dq __MOLD_NullMethodCalled ; _assign ( 53 )
  dq __MOLD_NullMethodCalled ; _loadArgsVector ( 54 )
  dq __MOLD_NullMethodCalled ; _loadArgsCount ( 55 )
  dq __MOLD_NullMethodCalled ; _loadVariable ( 56 )
  dq __SymbolTable_assignMirType$0 ; assignMirType ( 57 )
  dq __MOLD_NullMethodCalled ; _convert ( 58 )
  dq __MOLD_NullMethodCalled ; _loadNull ( 59 )
  dq __MOLD_NullMethodCalled ; _loadImm ( 60 )
  dq __MOLD_NullMethodCalled ; _loadArray ( 61 )
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant ( 62 )
  dq __MOLD_NullMethodCalled ; _storeAtIndex ( 63 )
  dq __MOLD_NullMethodCalled ; _loadMap ( 64 )
  dq __MOLD_NullMethodCalled ; _storeAtKey ( 65 )
  dq __MOLD_NullMethodCalled ; _neg ( 66 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd ( 67 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr ( 68 )
  dq __MOLD_NullMethodCalled ; _createObject ( 69 )
  dq __MOLD_NullMethodCalled ; _loadFromIndex ( 70 )
  dq __MOLD_NullMethodCalled ; _loadFromKey ( 71 )
  dq __MOLD_NullMethodCalled ; _compareEQ ( 72 )
  dq __MOLD_NullMethodCalled ; _compareNEQ ( 73 )
  dq __MOLD_NullMethodCalled ; _compareGT ( 74 )
  dq __MOLD_NullMethodCalled ; _compareGE ( 75 )
  dq __MOLD_NullMethodCalled ; _compareLT ( 76 )
  dq __MOLD_NullMethodCalled ; _compareLE ( 77 )
  dq __MOLD_NullMethodCalled ; _add ( 78 )
  dq __MOLD_NullMethodCalled ; _sub ( 79 )
  dq __MOLD_NullMethodCalled ; _mul ( 80 )
  dq __MOLD_NullMethodCalled ; _div ( 81 )
  dq __MOLD_NullMethodCalled ; _idiv ( 82 )
  dq __MOLD_NullMethodCalled ; _stringJoin ( 83 )
  dq __MOLD_NullMethodCalled ; _callPrint ( 84 )
  dq __MOLD_NullMethodCalled ; _syscall ( 85 )
  dq __SymbolTable_lookupFunction$0 ; lookupFunction ( 86 )
  dq __MOLD_NullMethodCalled ; _invokeMethod ( 87 )
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop ( 88 )
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop ( 89 )
  dq __MOLD_NullMethodCalled ; _executeNodeFor ( 90 )
  dq __MOLD_NullMethodCalled ; _executeNodeForEach ( 91 )
  dq __MOLD_NullMethodCalled ; _executeNodeWhile ( 92 )
  dq __MOLD_NullMethodCalled ; _executeNodeIf ( 93 )
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch ( 94 )
  dq __MOLD_NullMethodCalled ; _dropRetVal ( 95 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 96 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 97 )
  dq __MOLD_NullMethodCalled ; neg ( 98 )
  dq __MOLD_NullMethodCalled ; add ( 99 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 100 )
  dq __MOLD_NullMethodCalled ; sub ( 101 )
  dq __MOLD_NullMethodCalled ; mul ( 102 )
  dq __MOLD_NullMethodCalled ; div ( 103 )
  dq __MOLD_NullMethodCalled ; idiv ( 104 )
  dq __MOLD_NullMethodCalled ; loadArray ( 105 )
  dq __MOLD_NullMethodCalled ; loadMap ( 106 )
  dq __MOLD_NullMethodCalled ; loadNull ( 107 )
  dq __MOLD_NullMethodCalled ; loadImm ( 108 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 109 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 110 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 111 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 112 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 114 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 115 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 116 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 117 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 118 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 119 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 120 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 121 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 122 )
  dq __MOLD_NullMethodCalled ; syscall ( 123 )
  dq __MOLD_NullMethodCalled ; drop ( 124 )
  dq __MOLD_NullMethodCalled ; call ( 125 )
  dq __MOLD_NullMethodCalled ; callPrint ( 126 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 128 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 130 )
  dq __MOLD_NullMethodCalled ; createObject ( 131 )
  dq __SymbolTable_createLabel$0 ; createLabel ( 132 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 133 )
  dq __MOLD_NullMethodCalled ; moveBack ( 134 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 135 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 136 )
  dq __MOLD_NullMethodCalled ; vcall ( 137 )
  dq __MOLD_NullMethodCalled ; dup ( 138 )
  dq __MOLD_NullMethodCalled ; over ( 139 )
  dq __MOLD_NullMethodCalled ; jmp ( 140 )
  dq __MOLD_NullMethodCalled ; dropN ( 141 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 142 )
  dq __MOLD_NullMethodCalled ; innerRet ( 143 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 144 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; createClass ( 147 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 148 )
  dq __MOLD_NullMethodCalled ; comment ( 149 )
  dq __MOLD_NullMethodCalled ; beginProc ( 150 )
  dq __MOLD_NullMethodCalled ; initFrame ( 151 )
  dq __MOLD_NullMethodCalled ; ret ( 152 )
  dq __MOLD_NullMethodCalled ; endProc ( 153 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 154 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 155 )
  dq __MOLD_NullMethodCalled ; pop ( 156 )
  dq __MOLD_NullMethodCalled ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __SymbolTable_createConstFromValue$0 ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __SymbolTable_insertJmpTable$0 ; insertJmpTable ( 163 )

vtable_ASTModuleResolver:
.offset dd 8 * 168
.length dd 8 * 0
.entries:
  dq __ASTModuleResolver_resolveImports$0 ; resolveImports ( 168 )

vtable_ASTSymbolsCollector:
.offset dd 8 * 46
.length dd 8 * 125
.entries:
  dq __ASTSymbolsCollector__collectSymbols$0 ; _collectSymbols ( 46 )
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite ( 47 )
  dq __MOLD_NullMethodCalled ; releaseTempVar ( 48 )
  dq __MOLD_NullMethodCalled ; _declareFunction ( 49 )
  dq __MOLD_NullMethodCalled ; _emitFunctionBody ( 50 )
  dq __MOLD_NullMethodCalled ; _declareClass ( 51 )
  dq __MOLD_NullMethodCalled ; _call ( 52 )
  dq __MOLD_NullMethodCalled ; _assign ( 53 )
  dq __MOLD_NullMethodCalled ; _loadArgsVector ( 54 )
  dq __MOLD_NullMethodCalled ; _loadArgsCount ( 55 )
  dq __MOLD_NullMethodCalled ; _loadVariable ( 56 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 57 )
  dq __MOLD_NullMethodCalled ; _convert ( 58 )
  dq __MOLD_NullMethodCalled ; _loadNull ( 59 )
  dq __MOLD_NullMethodCalled ; _loadImm ( 60 )
  dq __MOLD_NullMethodCalled ; _loadArray ( 61 )
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant ( 62 )
  dq __MOLD_NullMethodCalled ; _storeAtIndex ( 63 )
  dq __MOLD_NullMethodCalled ; _loadMap ( 64 )
  dq __MOLD_NullMethodCalled ; _storeAtKey ( 65 )
  dq __MOLD_NullMethodCalled ; _neg ( 66 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd ( 67 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr ( 68 )
  dq __MOLD_NullMethodCalled ; _createObject ( 69 )
  dq __MOLD_NullMethodCalled ; _loadFromIndex ( 70 )
  dq __MOLD_NullMethodCalled ; _loadFromKey ( 71 )
  dq __MOLD_NullMethodCalled ; _compareEQ ( 72 )
  dq __MOLD_NullMethodCalled ; _compareNEQ ( 73 )
  dq __MOLD_NullMethodCalled ; _compareGT ( 74 )
  dq __MOLD_NullMethodCalled ; _compareGE ( 75 )
  dq __MOLD_NullMethodCalled ; _compareLT ( 76 )
  dq __MOLD_NullMethodCalled ; _compareLE ( 77 )
  dq __MOLD_NullMethodCalled ; _add ( 78 )
  dq __MOLD_NullMethodCalled ; _sub ( 79 )
  dq __MOLD_NullMethodCalled ; _mul ( 80 )
  dq __MOLD_NullMethodCalled ; _div ( 81 )
  dq __MOLD_NullMethodCalled ; _idiv ( 82 )
  dq __MOLD_NullMethodCalled ; _stringJoin ( 83 )
  dq __MOLD_NullMethodCalled ; _callPrint ( 84 )
  dq __MOLD_NullMethodCalled ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __MOLD_NullMethodCalled ; _invokeMethod ( 87 )
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop ( 88 )
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop ( 89 )
  dq __MOLD_NullMethodCalled ; _executeNodeFor ( 90 )
  dq __MOLD_NullMethodCalled ; _executeNodeForEach ( 91 )
  dq __MOLD_NullMethodCalled ; _executeNodeWhile ( 92 )
  dq __MOLD_NullMethodCalled ; _executeNodeIf ( 93 )
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch ( 94 )
  dq __MOLD_NullMethodCalled ; _dropRetVal ( 95 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 96 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 97 )
  dq __MOLD_NullMethodCalled ; neg ( 98 )
  dq __MOLD_NullMethodCalled ; add ( 99 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 100 )
  dq __MOLD_NullMethodCalled ; sub ( 101 )
  dq __MOLD_NullMethodCalled ; mul ( 102 )
  dq __MOLD_NullMethodCalled ; div ( 103 )
  dq __MOLD_NullMethodCalled ; idiv ( 104 )
  dq __MOLD_NullMethodCalled ; loadArray ( 105 )
  dq __MOLD_NullMethodCalled ; loadMap ( 106 )
  dq __MOLD_NullMethodCalled ; loadNull ( 107 )
  dq __MOLD_NullMethodCalled ; loadImm ( 108 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 109 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 110 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 111 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 112 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 114 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 115 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 116 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 117 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 118 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 119 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 120 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 121 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 122 )
  dq __MOLD_NullMethodCalled ; syscall ( 123 )
  dq __MOLD_NullMethodCalled ; drop ( 124 )
  dq __MOLD_NullMethodCalled ; call ( 125 )
  dq __MOLD_NullMethodCalled ; callPrint ( 126 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 128 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 130 )
  dq __MOLD_NullMethodCalled ; createObject ( 131 )
  dq __MOLD_NullMethodCalled ; createLabel ( 132 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 133 )
  dq __MOLD_NullMethodCalled ; moveBack ( 134 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 135 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 136 )
  dq __MOLD_NullMethodCalled ; vcall ( 137 )
  dq __MOLD_NullMethodCalled ; dup ( 138 )
  dq __MOLD_NullMethodCalled ; over ( 139 )
  dq __MOLD_NullMethodCalled ; jmp ( 140 )
  dq __MOLD_NullMethodCalled ; dropN ( 141 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 142 )
  dq __MOLD_NullMethodCalled ; innerRet ( 143 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 144 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; createClass ( 147 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 148 )
  dq __MOLD_NullMethodCalled ; comment ( 149 )
  dq __MOLD_NullMethodCalled ; beginProc ( 150 )
  dq __MOLD_NullMethodCalled ; initFrame ( 151 )
  dq __MOLD_NullMethodCalled ; ret ( 152 )
  dq __MOLD_NullMethodCalled ; endProc ( 153 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 154 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 155 )
  dq __MOLD_NullMethodCalled ; pop ( 156 )
  dq __MOLD_NullMethodCalled ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 163 )
  dq __MOLD_NullMethodCalled ; eat ( 164 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 165 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 166 )
  dq __MOLD_NullMethodCalled ; printTree ( 167 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 168 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 169 )
  dq __MOLD_NullMethodCalled ; processNode ( 170 )
  dq __ASTSymbolsCollector_buildSymbolTable$0 ; buildSymbolTable ( 171 )

vtable_ASTEvaluator:
.offset dd 8 * 170
.length dd 8 * 0
.entries:
  dq __ASTEvaluator_processNode$0 ; processNode ( 170 )

vtable_ASTPreprocessor:
.offset dd 8 * 170
.length dd 8 * 0
.entries:
  dq __ASTPreprocessor_processNode$0 ; processNode ( 170 )

vtable_ASTOptimizerConstantFolding:
.offset dd 8 * 170
.length dd 8 * 0
.entries:
  dq __ASTOptimizerConstantFolding_processNode$0 ; processNode ( 170 )

vtable_ASTOptimizerCSE:
.offset dd 8 * 170
.length dd 8 * 0
.entries:
  dq __ASTOptimizerCSE_processNode$0 ; processNode ( 170 )

vtable_ASTOptimizerDeadCodeRemove:
.offset dd 8 * 170
.length dd 8 * 0
.entries:
  dq __ASTOptimizerDeadCodeRemove_processNode$0 ; processNode ( 170 )

vtable_ASTOptimizerVCall:
.offset dd 8 * 170
.length dd 8 * 0
.entries:
  dq __ASTOptimizerVCall_processNode$0 ; processNode ( 170 )

vtable_ASTOptimizerIf:
.offset dd 8 * 170
.length dd 8 * 0
.entries:
  dq __ASTOptimizerIf_processNode$0 ; processNode ( 170 )

vtable_ASTOptimizerInline:
.offset dd 8 * 170
.length dd 8 * 0
.entries:
  dq __ASTOptimizerInline_processNode$0 ; processNode ( 170 )

vtable_ASTTypeCast:
.offset dd 8 * 170
.length dd 8 * 0
.entries:
  dq __ASTTypeCast_processNode$0 ; processNode ( 170 )

vtable_MIRCode:
.offset dd 8 * 96
.length dd 8 * 66
.entries:
  dq __MIRCode_loadArgv$0 ; loadArgv ( 96 )
  dq __MIRCode_loadArgc$0 ; loadArgc ( 97 )
  dq __MIRCode_neg$0 ; neg ( 98 )
  dq __MIRCode_add$0 ; add ( 99 )
  dq __MIRCode_stringJoin$0 ; stringJoin ( 100 )
  dq __MIRCode_sub$0 ; sub ( 101 )
  dq __MIRCode_mul$0 ; mul ( 102 )
  dq __MIRCode_div$0 ; div ( 103 )
  dq __MIRCode_idiv$0 ; idiv ( 104 )
  dq __MIRCode_loadArray$0 ; loadArray ( 105 )
  dq __MIRCode_loadMap$0 ; loadMap ( 106 )
  dq __MIRCode_loadNull$0 ; loadNull ( 107 )
  dq __MIRCode_loadImm$0 ; loadImm ( 108 )
  dq __MIRCode_cmpEQ$0 ; cmpEQ ( 109 )
  dq __MIRCode_cmpNEQ$0 ; cmpNEQ ( 110 )
  dq __MIRCode_cmpLT$0 ; cmpLT ( 111 )
  dq __MIRCode_cmpLE$0 ; cmpLE ( 112 )
  dq __MIRCode_cmpGT$0 ; cmpGT ( 113 )
  dq __MIRCode_cmpGE$0 ; cmpGE ( 114 )
  dq __MIRCode_loadLocal$0 ; loadLocal ( 115 )
  dq __MIRCode_loadGlobal$0 ; loadGlobal ( 116 )
  dq __MIRCode_loadParamN$0 ; loadParamN ( 117 )
  dq __MIRCode_loadRetVal$0 ; loadRetVal ( 118 )
  dq __MIRCode_storeLocal$0 ; storeLocal ( 119 )
  dq __MIRCode_storeGlobal$0 ; storeGlobal ( 120 )
  dq __MIRCode_storeParamN$0 ; storeParamN ( 121 )
  dq __MIRCode_storeRetVal$0 ; storeRetVal ( 122 )
  dq __MIRCode_syscall$0 ; syscall ( 123 )
  dq __MIRCode_drop$0 ; drop ( 124 )
  dq __MIRCode_call$0 ; call ( 125 )
  dq __MIRCode_callPrint$0 ; callPrint ( 126 )
  dq __MIRCode_loadFromIndex$0 ; loadFromIndex ( 127 )
  dq __MIRCode_loadFromKey$0 ; loadFromKey ( 128 )
  dq __MIRCode_storeAtIndex$0 ; storeAtIndex ( 129 )
  dq __MIRCode_storeAtKey$0 ; storeAtKey ( 130 )
  dq __MIRCode_createObject$0 ; createObject ( 131 )
  dq __MIRCode_createLabel$0 ; createLabel ( 132 )
  dq __MIRCode_jmpIfFalse$0 ; jmpIfFalse ( 133 )
  dq __MIRCode_moveBack$0 ; moveBack ( 134 )
  dq __MIRCode_emitLabel$0 ; emitLabel ( 135 )
  dq __MIRCode_jmpIfTrue$0 ; jmpIfTrue ( 136 )
  dq __MIRCode_vcall$0 ; vcall ( 137 )
  dq __MIRCode_dup$0 ; dup ( 138 )
  dq __MIRCode_over$0 ; over ( 139 )
  dq __MIRCode_jmp$0 ; jmp ( 140 )
  dq __MIRCode_dropN$0 ; dropN ( 141 )
  dq __MIRCode_allocateLocalId$0 ; allocateLocalId ( 142 )
  dq __MIRCode_innerRet$0 ; innerRet ( 143 )
  dq __MIRCode_resolveLabel$0 ; resolveLabel ( 144 )
  dq __MIRCode_forEachIndexes$0 ; forEachIndexes ( 145 )
  dq __MIRCode_forEachKeys$0 ; forEachKeys ( 146 )
  dq __MIRCode_createClass$0 ; createClass ( 147 )
  dq __MIRCode_createAndEmitLabel$0 ; createAndEmitLabel ( 148 )
  dq __MIRCode_comment$0 ; comment ( 149 )
  dq __MIRCode_beginProc$0 ; beginProc ( 150 )
  dq __MIRCode_initFrame$0 ; initFrame ( 151 )
  dq __MIRCode_ret$0 ; ret ( 152 )
  dq __MIRCode_endProc$0 ; endProc ( 153 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 154 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 155 )
  dq __MOLD_NullMethodCalled ; pop ( 156 )
  dq __MOLD_NullMethodCalled ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MIRCode_createMethod$0 ; createMethod ( 162 )

vtable_AppMold:
.offset dd 8 * 0
.length dd 8 * 180
.entries:
  dq __AppMold_logError$0 ; logError ( 0 )
  dq __AppMold_getSymbolTable$0 ; getSymbolTable ( 1 )
  dq __MOLD_NullMethodCalled ; insert ( 2 )
  dq __MOLD_NullMethodCalled ; _lookupInternal ( 3 )
  dq __MOLD_NullMethodCalled ; lookup ( 4 )
  dq __AppMold_logDebug$0 ; logDebug ( 5 )
  dq __MOLD_NullMethodCalled ; parseFile ( 6 )
  dq __AppMold_setLogContext$0 ; setLogContext ( 7 )
  dq __MOLD_NullMethodCalled ; insertLiteral ( 8 )
  dq __MOLD_NullMethodCalled ; lookupClass ( 9 )
  dq __MOLD_NullMethodCalled ; insertClass ( 10 )
  dq __MOLD_NullMethodCalled ; insertFunction ( 11 )
  dq __MOLD_NullMethodCalled ; enterScopeForProcedure ( 12 )
  dq __MOLD_NullMethodCalled ; insertParam ( 13 )
  dq __MOLD_NullMethodCalled ; assignType ( 14 )
  dq __MOLD_NullMethodCalled ; freezeType ( 15 )
  dq __MOLD_NullMethodCalled ; isset ( 16 )
  dq __MOLD_NullMethodCalled ; enterScope ( 17 )
  dq __MOLD_NullMethodCalled ; importExternalVariable ( 18 )
  dq __MOLD_NullMethodCalled ; leaveScope ( 19 )
  dq __MOLD_NullMethodCalled ; lookupForWrite ( 20 )
  dq __MOLD_NullMethodCalled ; lookupForRead ( 21 )
  dq __MOLD_NullMethodCalled ; useAsTypeofArg ( 22 )
  dq __MOLD_NullMethodCalled ; useAsArray ( 23 )
  dq __MOLD_NullMethodCalled ; useAsArrayOrString ( 24 )
  dq __MOLD_NullMethodCalled ; useAsIndex ( 25 )
  dq __MOLD_NullMethodCalled ; useAsMapOrObject ( 26 )
  dq __MOLD_NullMethodCalled ; useAsKey ( 27 )
  dq __MOLD_NullMethodCalled ; insertConst ( 28 )
  dq __MOLD_NullMethodCalled ; lookupForWriteOrInsert ( 29 )
  dq __MOLD_NullMethodCalled ; assignNode ( 30 )
  dq __MOLD_NullMethodCalled ; assignValue ( 31 )
  dq __MOLD_NullMethodCalled ; exportSymbols ( 32 )
  dq __MOLD_NullMethodCalled ; remove ( 33 )
  dq __MOLD_NullMethodCalled ; enterScopeForLoop ( 34 )
  dq __MOLD_NullMethodCalled ; insertLocal ( 35 )
  dq __MOLD_NullMethodCalled ; lookupForReadAndWrite ( 36 )
  dq __MOLD_NullMethodCalled ; lookupForCall ( 37 )
  dq __MOLD_NullMethodCalled ; getCurrentFunctionName ( 38 )
  dq __MOLD_NullMethodCalled ; importGlobal ( 39 )
  dq __MOLD_NullMethodCalled ; useAsInteger ( 40 )
  dq __MOLD_NullMethodCalled ; useAsFloat ( 41 )
  dq __MOLD_NullMethodCalled ; useAsNumber ( 42 )
  dq __MOLD_NullMethodCalled ; decreaseWriteHits ( 43 )
  dq __MOLD_NullMethodCalled ; removeUnusedSymbols ( 44 )
  dq __AppMold_getAstSymbolsCollector$0 ; getAstSymbolsCollector ( 45 )
  dq __MOLD_NullMethodCalled ; _collectSymbols ( 46 )
  dq __MOLD_NullMethodCalled ; getTempVarForReadAndWrite ( 47 )
  dq __MOLD_NullMethodCalled ; releaseTempVar ( 48 )
  dq __MOLD_NullMethodCalled ; _declareFunction ( 49 )
  dq __MOLD_NullMethodCalled ; _emitFunctionBody ( 50 )
  dq __MOLD_NullMethodCalled ; _declareClass ( 51 )
  dq __MOLD_NullMethodCalled ; _call ( 52 )
  dq __MOLD_NullMethodCalled ; _assign ( 53 )
  dq __MOLD_NullMethodCalled ; _loadArgsVector ( 54 )
  dq __MOLD_NullMethodCalled ; _loadArgsCount ( 55 )
  dq __MOLD_NullMethodCalled ; _loadVariable ( 56 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 57 )
  dq __MOLD_NullMethodCalled ; _convert ( 58 )
  dq __MOLD_NullMethodCalled ; _loadNull ( 59 )
  dq __MOLD_NullMethodCalled ; _loadImm ( 60 )
  dq __MOLD_NullMethodCalled ; _loadArray ( 61 )
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant ( 62 )
  dq __MOLD_NullMethodCalled ; _storeAtIndex ( 63 )
  dq __MOLD_NullMethodCalled ; _loadMap ( 64 )
  dq __MOLD_NullMethodCalled ; _storeAtKey ( 65 )
  dq __MOLD_NullMethodCalled ; _neg ( 66 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd ( 67 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr ( 68 )
  dq __MOLD_NullMethodCalled ; _createObject ( 69 )
  dq __MOLD_NullMethodCalled ; _loadFromIndex ( 70 )
  dq __MOLD_NullMethodCalled ; _loadFromKey ( 71 )
  dq __MOLD_NullMethodCalled ; _compareEQ ( 72 )
  dq __MOLD_NullMethodCalled ; _compareNEQ ( 73 )
  dq __MOLD_NullMethodCalled ; _compareGT ( 74 )
  dq __MOLD_NullMethodCalled ; _compareGE ( 75 )
  dq __MOLD_NullMethodCalled ; _compareLT ( 76 )
  dq __MOLD_NullMethodCalled ; _compareLE ( 77 )
  dq __MOLD_NullMethodCalled ; _add ( 78 )
  dq __MOLD_NullMethodCalled ; _sub ( 79 )
  dq __MOLD_NullMethodCalled ; _mul ( 80 )
  dq __MOLD_NullMethodCalled ; _div ( 81 )
  dq __MOLD_NullMethodCalled ; _idiv ( 82 )
  dq __MOLD_NullMethodCalled ; _stringJoin ( 83 )
  dq __MOLD_NullMethodCalled ; _callPrint ( 84 )
  dq __MOLD_NullMethodCalled ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __MOLD_NullMethodCalled ; _invokeMethod ( 87 )
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop ( 88 )
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop ( 89 )
  dq __MOLD_NullMethodCalled ; _executeNodeFor ( 90 )
  dq __MOLD_NullMethodCalled ; _executeNodeForEach ( 91 )
  dq __MOLD_NullMethodCalled ; _executeNodeWhile ( 92 )
  dq __MOLD_NullMethodCalled ; _executeNodeIf ( 93 )
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch ( 94 )
  dq __MOLD_NullMethodCalled ; _dropRetVal ( 95 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 96 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 97 )
  dq __MOLD_NullMethodCalled ; neg ( 98 )
  dq __MOLD_NullMethodCalled ; add ( 99 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 100 )
  dq __MOLD_NullMethodCalled ; sub ( 101 )
  dq __MOLD_NullMethodCalled ; mul ( 102 )
  dq __MOLD_NullMethodCalled ; div ( 103 )
  dq __MOLD_NullMethodCalled ; idiv ( 104 )
  dq __MOLD_NullMethodCalled ; loadArray ( 105 )
  dq __MOLD_NullMethodCalled ; loadMap ( 106 )
  dq __MOLD_NullMethodCalled ; loadNull ( 107 )
  dq __MOLD_NullMethodCalled ; loadImm ( 108 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 109 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 110 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 111 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 112 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 114 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 115 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 116 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 117 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 118 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 119 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 120 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 121 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 122 )
  dq __MOLD_NullMethodCalled ; syscall ( 123 )
  dq __MOLD_NullMethodCalled ; drop ( 124 )
  dq __MOLD_NullMethodCalled ; call ( 125 )
  dq __MOLD_NullMethodCalled ; callPrint ( 126 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 128 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 130 )
  dq __MOLD_NullMethodCalled ; createObject ( 131 )
  dq __MOLD_NullMethodCalled ; createLabel ( 132 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 133 )
  dq __MOLD_NullMethodCalled ; moveBack ( 134 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 135 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 136 )
  dq __MOLD_NullMethodCalled ; vcall ( 137 )
  dq __MOLD_NullMethodCalled ; dup ( 138 )
  dq __MOLD_NullMethodCalled ; over ( 139 )
  dq __MOLD_NullMethodCalled ; jmp ( 140 )
  dq __MOLD_NullMethodCalled ; dropN ( 141 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 142 )
  dq __MOLD_NullMethodCalled ; innerRet ( 143 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 144 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; createClass ( 147 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 148 )
  dq __MOLD_NullMethodCalled ; comment ( 149 )
  dq __MOLD_NullMethodCalled ; beginProc ( 150 )
  dq __MOLD_NullMethodCalled ; initFrame ( 151 )
  dq __MOLD_NullMethodCalled ; ret ( 152 )
  dq __MOLD_NullMethodCalled ; endProc ( 153 )
  dq __AppMold_getMir1Code$0 ; getMir1Code ( 154 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 155 )
  dq __MOLD_NullMethodCalled ; pop ( 156 )
  dq __MOLD_NullMethodCalled ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 163 )
  dq __MOLD_NullMethodCalled ; eat ( 164 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 165 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 166 )
  dq __MOLD_NullMethodCalled ; printTree ( 167 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 168 )
  dq __AppMold_getAstPreprocessor$0 ; getAstPreprocessor ( 169 )
  dq __MOLD_NullMethodCalled ; processNode ( 170 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 171 )
  dq __AppMold_getAstEvaluator$0 ; getAstEvaluator ( 172 )
  dq __AppMold_getAstOptimizerVCall$0 ; getAstOptimizerVCall ( 173 )
  dq __AppMold_getAstOptimizerConstantFolding$0 ; getAstOptimizerConstantFolding ( 174 )
  dq __AppMold_getAstOptimizerIf$0 ; getAstOptimizerIf ( 175 )
  dq __AppMold_getAstOptimizerDeadCodeRemove$0 ; getAstOptimizerDeadCodeRemove ( 176 )
  dq __AppMold_getAstOptimizerCSE$0 ; getAstOptimizerCSE ( 177 )
  dq __MOLD_NullMethodCalled ; run ( 178 )
  dq __MOLD_NullMethodCalled ; connectTo ( 179 )
  dq __AppMold_getAstTypeCast$0 ; getAstTypeCast ( 180 )

vtable_ASTPrinterText:
.offset dd 8 * 0
.length dd 8 * 0

vtable_ASTPrinterHtml:
.offset dd 8 * 0
.length dd 8 * 0

vtable_ASTTranslator:
.offset dd 8 * 49
.length dd 8 * 129
.entries:
  dq __ASTTranslator__declareFunction$0 ; _declareFunction ( 49 )
  dq __ASTTranslator__emitFunctionBody$0 ; _emitFunctionBody ( 50 )
  dq __ASTTranslator__declareClass$0 ; _declareClass ( 51 )
  dq __ASTTranslator__call$0 ; _call ( 52 )
  dq __ASTTranslator__assign$0 ; _assign ( 53 )
  dq __ASTTranslator__loadArgsVector$0 ; _loadArgsVector ( 54 )
  dq __ASTTranslator__loadArgsCount$0 ; _loadArgsCount ( 55 )
  dq __ASTTranslator__loadVariable$0 ; _loadVariable ( 56 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 57 )
  dq __ASTTranslator__convert$0 ; _convert ( 58 )
  dq __ASTTranslator__loadNull$0 ; _loadNull ( 59 )
  dq __ASTTranslator__loadImm$0 ; _loadImm ( 60 )
  dq __ASTTranslator__loadArray$0 ; _loadArray ( 61 )
  dq __ASTTranslator__loadImmAsVariant$0 ; _loadImmAsVariant ( 62 )
  dq __ASTTranslator__storeAtIndex$0 ; _storeAtIndex ( 63 )
  dq __ASTTranslator__loadMap$0 ; _loadMap ( 64 )
  dq __ASTTranslator__storeAtKey$0 ; _storeAtKey ( 65 )
  dq __ASTTranslator__neg$0 ; _neg ( 66 )
  dq __ASTTranslator__evaluateNodeLazyBoolAnd$0 ; _evaluateNodeLazyBoolAnd ( 67 )
  dq __ASTTranslator__evaluateNodeLazyBoolOr$0 ; _evaluateNodeLazyBoolOr ( 68 )
  dq __ASTTranslator__createObject$0 ; _createObject ( 69 )
  dq __ASTTranslator__loadFromIndex$0 ; _loadFromIndex ( 70 )
  dq __ASTTranslator__loadFromKey$0 ; _loadFromKey ( 71 )
  dq __ASTTranslator__compareEQ$0 ; _compareEQ ( 72 )
  dq __ASTTranslator__compareNEQ$0 ; _compareNEQ ( 73 )
  dq __ASTTranslator__compareGT$0 ; _compareGT ( 74 )
  dq __ASTTranslator__compareGE$0 ; _compareGE ( 75 )
  dq __ASTTranslator__compareLT$0 ; _compareLT ( 76 )
  dq __ASTTranslator__compareLE$0 ; _compareLE ( 77 )
  dq __ASTTranslator__add$0 ; _add ( 78 )
  dq __ASTTranslator__sub$0 ; _sub ( 79 )
  dq __ASTTranslator__mul$0 ; _mul ( 80 )
  dq __ASTTranslator__div$0 ; _div ( 81 )
  dq __ASTTranslator__idiv$0 ; _idiv ( 82 )
  dq __ASTTranslator__stringJoin$0 ; _stringJoin ( 83 )
  dq __ASTTranslator__callPrint$0 ; _callPrint ( 84 )
  dq __ASTTranslator__syscall$0 ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __ASTTranslator__invokeMethod$0 ; _invokeMethod ( 87 )
  dq __ASTTranslator__storeAtIndexAndDrop$0 ; _storeAtIndexAndDrop ( 88 )
  dq __ASTTranslator__storeAtKeyAndDrop$0 ; _storeAtKeyAndDrop ( 89 )
  dq __ASTTranslator__executeNodeFor$0 ; _executeNodeFor ( 90 )
  dq __MOLD_NullMethodCalled ; _executeNodeForEach ( 91 )
  dq __ASTTranslator__executeNodeWhile$0 ; _executeNodeWhile ( 92 )
  dq __ASTTranslator__executeNodeIf$0 ; _executeNodeIf ( 93 )
  dq __ASTTranslator__executeNodeSwitch$0 ; _executeNodeSwitch ( 94 )
  dq __ASTTranslator__dropRetVal$0 ; _dropRetVal ( 95 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 96 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 97 )
  dq __MOLD_NullMethodCalled ; neg ( 98 )
  dq __MOLD_NullMethodCalled ; add ( 99 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 100 )
  dq __MOLD_NullMethodCalled ; sub ( 101 )
  dq __MOLD_NullMethodCalled ; mul ( 102 )
  dq __MOLD_NullMethodCalled ; div ( 103 )
  dq __MOLD_NullMethodCalled ; idiv ( 104 )
  dq __MOLD_NullMethodCalled ; loadArray ( 105 )
  dq __MOLD_NullMethodCalled ; loadMap ( 106 )
  dq __MOLD_NullMethodCalled ; loadNull ( 107 )
  dq __MOLD_NullMethodCalled ; loadImm ( 108 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 109 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 110 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 111 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 112 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 114 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 115 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 116 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 117 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 118 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 119 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 120 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 121 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 122 )
  dq __MOLD_NullMethodCalled ; syscall ( 123 )
  dq __MOLD_NullMethodCalled ; drop ( 124 )
  dq __MOLD_NullMethodCalled ; call ( 125 )
  dq __MOLD_NullMethodCalled ; callPrint ( 126 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 128 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 130 )
  dq __MOLD_NullMethodCalled ; createObject ( 131 )
  dq __MOLD_NullMethodCalled ; createLabel ( 132 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 133 )
  dq __MOLD_NullMethodCalled ; moveBack ( 134 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 135 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 136 )
  dq __MOLD_NullMethodCalled ; vcall ( 137 )
  dq __MOLD_NullMethodCalled ; dup ( 138 )
  dq __MOLD_NullMethodCalled ; over ( 139 )
  dq __MOLD_NullMethodCalled ; jmp ( 140 )
  dq __MOLD_NullMethodCalled ; dropN ( 141 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 142 )
  dq __MOLD_NullMethodCalled ; innerRet ( 143 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 144 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; createClass ( 147 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 148 )
  dq __MOLD_NullMethodCalled ; comment ( 149 )
  dq __MOLD_NullMethodCalled ; beginProc ( 150 )
  dq __MOLD_NullMethodCalled ; initFrame ( 151 )
  dq __MOLD_NullMethodCalled ; ret ( 152 )
  dq __MOLD_NullMethodCalled ; endProc ( 153 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 154 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 155 )
  dq __MOLD_NullMethodCalled ; pop ( 156 )
  dq __MOLD_NullMethodCalled ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 163 )
  dq __MOLD_NullMethodCalled ; eat ( 164 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 165 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 166 )
  dq __MOLD_NullMethodCalled ; printTree ( 167 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 168 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 169 )
  dq __MOLD_NullMethodCalled ; processNode ( 170 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 171 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 172 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 173 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 177 )
  dq __ASTTranslator_run$0 ; run ( 178 )

vtable_ASTTranslatorMIR0:
.offset dd 8 * 49
.length dd 8 * 129
.entries:
  dq __ASTTranslatorMIR0__declareFunction$0 ; _declareFunction ( 49 )
  dq __ASTTranslatorMIR0__emitFunctionBody$0 ; _emitFunctionBody ( 50 )
  dq __ASTTranslatorMIR0__declareClass$0 ; _declareClass ( 51 )
  dq __ASTTranslatorMIR0__call$0 ; _call ( 52 )
  dq __ASTTranslatorMIR0__assign$0 ; _assign ( 53 )
  dq __ASTTranslatorMIR0__loadArgsVector$0 ; _loadArgsVector ( 54 )
  dq __ASTTranslatorMIR0__loadArgsCount$0 ; _loadArgsCount ( 55 )
  dq __ASTTranslatorMIR0__loadVariable$0 ; _loadVariable ( 56 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 57 )
  dq __ASTTranslatorMIR0__convert$0 ; _convert ( 58 )
  dq __ASTTranslatorMIR0__loadNull$0 ; _loadNull ( 59 )
  dq __ASTTranslatorMIR0__loadImm$0 ; _loadImm ( 60 )
  dq __ASTTranslatorMIR0__loadArray$0 ; _loadArray ( 61 )
  dq __ASTTranslatorMIR0__loadImmAsVariant$0 ; _loadImmAsVariant ( 62 )
  dq __ASTTranslatorMIR0__storeAtIndex$0 ; _storeAtIndex ( 63 )
  dq __ASTTranslatorMIR0__loadMap$0 ; _loadMap ( 64 )
  dq __ASTTranslatorMIR0__storeAtKey$0 ; _storeAtKey ( 65 )
  dq __ASTTranslatorMIR0__neg$0 ; _neg ( 66 )
  dq __ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$0 ; _evaluateNodeLazyBoolAnd ( 67 )
  dq __ASTTranslatorMIR0__evaluateNodeLazyBoolOr$0 ; _evaluateNodeLazyBoolOr ( 68 )
  dq __ASTTranslatorMIR0__createObject$0 ; _createObject ( 69 )
  dq __ASTTranslatorMIR0__loadFromIndex$0 ; _loadFromIndex ( 70 )
  dq __ASTTranslatorMIR0__loadFromKey$0 ; _loadFromKey ( 71 )
  dq __ASTTranslatorMIR0__compareEQ$0 ; _compareEQ ( 72 )
  dq __ASTTranslatorMIR0__compareNEQ$0 ; _compareNEQ ( 73 )
  dq __ASTTranslatorMIR0__compareGT$0 ; _compareGT ( 74 )
  dq __ASTTranslatorMIR0__compareGE$0 ; _compareGE ( 75 )
  dq __ASTTranslatorMIR0__compareLT$0 ; _compareLT ( 76 )
  dq __ASTTranslatorMIR0__compareLE$0 ; _compareLE ( 77 )
  dq __ASTTranslatorMIR0__add$0 ; _add ( 78 )
  dq __ASTTranslatorMIR0__sub$0 ; _sub ( 79 )
  dq __ASTTranslatorMIR0__mul$0 ; _mul ( 80 )
  dq __ASTTranslatorMIR0__div$0 ; _div ( 81 )
  dq __ASTTranslatorMIR0__idiv$0 ; _idiv ( 82 )
  dq __ASTTranslatorMIR0__stringJoin$0 ; _stringJoin ( 83 )
  dq __ASTTranslatorMIR0__callPrint$0 ; _callPrint ( 84 )
  dq __ASTTranslatorMIR0__syscall$0 ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __ASTTranslatorMIR0__invokeMethod$0 ; _invokeMethod ( 87 )
  dq __ASTTranslatorMIR0__storeAtIndexAndDrop$0 ; _storeAtIndexAndDrop ( 88 )
  dq __ASTTranslatorMIR0__storeAtKeyAndDrop$0 ; _storeAtKeyAndDrop ( 89 )
  dq __ASTTranslatorMIR0__executeNodeFor$0 ; _executeNodeFor ( 90 )
  dq __ASTTranslatorMIR0__executeNodeForEach$0 ; _executeNodeForEach ( 91 )
  dq __ASTTranslatorMIR0__executeNodeWhile$0 ; _executeNodeWhile ( 92 )
  dq __ASTTranslatorMIR0__executeNodeIf$0 ; _executeNodeIf ( 93 )
  dq __ASTTranslator__executeNodeSwitch$0 ; _executeNodeSwitch ( 94 )
  dq __ASTTranslatorMIR0__dropRetVal$0 ; _dropRetVal ( 95 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 96 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 97 )
  dq __MOLD_NullMethodCalled ; neg ( 98 )
  dq __MOLD_NullMethodCalled ; add ( 99 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 100 )
  dq __MOLD_NullMethodCalled ; sub ( 101 )
  dq __MOLD_NullMethodCalled ; mul ( 102 )
  dq __MOLD_NullMethodCalled ; div ( 103 )
  dq __MOLD_NullMethodCalled ; idiv ( 104 )
  dq __MOLD_NullMethodCalled ; loadArray ( 105 )
  dq __MOLD_NullMethodCalled ; loadMap ( 106 )
  dq __MOLD_NullMethodCalled ; loadNull ( 107 )
  dq __MOLD_NullMethodCalled ; loadImm ( 108 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 109 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 110 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 111 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 112 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 114 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 115 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 116 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 117 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 118 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 119 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 120 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 121 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 122 )
  dq __MOLD_NullMethodCalled ; syscall ( 123 )
  dq __MOLD_NullMethodCalled ; drop ( 124 )
  dq __MOLD_NullMethodCalled ; call ( 125 )
  dq __MOLD_NullMethodCalled ; callPrint ( 126 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 128 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 130 )
  dq __MOLD_NullMethodCalled ; createObject ( 131 )
  dq __MOLD_NullMethodCalled ; createLabel ( 132 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 133 )
  dq __MOLD_NullMethodCalled ; moveBack ( 134 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 135 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 136 )
  dq __MOLD_NullMethodCalled ; vcall ( 137 )
  dq __MOLD_NullMethodCalled ; dup ( 138 )
  dq __MOLD_NullMethodCalled ; over ( 139 )
  dq __MOLD_NullMethodCalled ; jmp ( 140 )
  dq __MOLD_NullMethodCalled ; dropN ( 141 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 142 )
  dq __MOLD_NullMethodCalled ; innerRet ( 143 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 144 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; createClass ( 147 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 148 )
  dq __MOLD_NullMethodCalled ; comment ( 149 )
  dq __MOLD_NullMethodCalled ; beginProc ( 150 )
  dq __MOLD_NullMethodCalled ; initFrame ( 151 )
  dq __MOLD_NullMethodCalled ; ret ( 152 )
  dq __MOLD_NullMethodCalled ; endProc ( 153 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 154 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 155 )
  dq __MOLD_NullMethodCalled ; pop ( 156 )
  dq __MOLD_NullMethodCalled ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 163 )
  dq __MOLD_NullMethodCalled ; eat ( 164 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 165 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 166 )
  dq __MOLD_NullMethodCalled ; printTree ( 167 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 168 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 169 )
  dq __MOLD_NullMethodCalled ; processNode ( 170 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 171 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 172 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 173 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 177 )
  dq __ASTTranslatorMIR0_run$0 ; run ( 178 )

vtable_Stack:
.offset dd 8 * 138
.length dd 8 * 28
.entries:
  dq __Stack_dup$0 ; dup ( 138 )
  dq __Stack_over$0 ; over ( 139 )
  dq __MOLD_NullMethodCalled ; jmp ( 140 )
  dq __MOLD_NullMethodCalled ; dropN ( 141 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 142 )
  dq __MOLD_NullMethodCalled ; innerRet ( 143 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 144 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; createClass ( 147 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 148 )
  dq __MOLD_NullMethodCalled ; comment ( 149 )
  dq __MOLD_NullMethodCalled ; beginProc ( 150 )
  dq __MOLD_NullMethodCalled ; initFrame ( 151 )
  dq __MOLD_NullMethodCalled ; ret ( 152 )
  dq __MOLD_NullMethodCalled ; endProc ( 153 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 154 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 155 )
  dq __Stack_pop$0 ; pop ( 156 )
  dq __Stack_push$0 ; push ( 157 )
  dq __Stack_peekN$0 ; peekN ( 158 )
  dq __Stack_eatN$0 ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 163 )
  dq __Stack_eat$0 ; eat ( 164 )
  dq __Stack_getByAbsoluteIdx$0 ; getByAbsoluteIdx ( 165 )
  dq __Stack_setByAbsoluteIdx$0 ; setByAbsoluteIdx ( 166 )

vtable_ASTTranslatorMIR1:
.offset dd 8 * 49
.length dd 8 * 130
.entries:
  dq __ASTTranslatorMIR1__declareFunction$0 ; _declareFunction ( 49 )
  dq __ASTTranslatorMIR1__emitFunctionBody$0 ; _emitFunctionBody ( 50 )
  dq __ASTTranslatorMIR1__declareClass$0 ; _declareClass ( 51 )
  dq __ASTTranslatorMIR1__call$0 ; _call ( 52 )
  dq __ASTTranslatorMIR1__assign$0 ; _assign ( 53 )
  dq __ASTTranslatorMIR1__loadArgsVector$0 ; _loadArgsVector ( 54 )
  dq __ASTTranslatorMIR1__loadArgsCount$0 ; _loadArgsCount ( 55 )
  dq __ASTTranslatorMIR1__loadVariable$0 ; _loadVariable ( 56 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 57 )
  dq __ASTTranslatorMIR1__convert$0 ; _convert ( 58 )
  dq __ASTTranslatorMIR1__loadNull$0 ; _loadNull ( 59 )
  dq __ASTTranslatorMIR1__loadImm$0 ; _loadImm ( 60 )
  dq __ASTTranslatorMIR1__loadArray$0 ; _loadArray ( 61 )
  dq __ASTTranslatorMIR1__loadImmAsVariant$0 ; _loadImmAsVariant ( 62 )
  dq __ASTTranslatorMIR1__storeAtIndex$0 ; _storeAtIndex ( 63 )
  dq __ASTTranslatorMIR1__loadMap$0 ; _loadMap ( 64 )
  dq __ASTTranslatorMIR1__storeAtKey$0 ; _storeAtKey ( 65 )
  dq __ASTTranslatorMIR1__neg$0 ; _neg ( 66 )
  dq __ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$0 ; _evaluateNodeLazyBoolAnd ( 67 )
  dq __ASTTranslatorMIR1__evaluateNodeLazyBoolOr$0 ; _evaluateNodeLazyBoolOr ( 68 )
  dq __ASTTranslatorMIR1__createObject$0 ; _createObject ( 69 )
  dq __ASTTranslatorMIR1__loadFromIndex$0 ; _loadFromIndex ( 70 )
  dq __ASTTranslatorMIR1__loadFromKey$0 ; _loadFromKey ( 71 )
  dq __ASTTranslatorMIR1__compareEQ$0 ; _compareEQ ( 72 )
  dq __ASTTranslatorMIR1__compareNEQ$0 ; _compareNEQ ( 73 )
  dq __ASTTranslatorMIR1__compareGT$0 ; _compareGT ( 74 )
  dq __ASTTranslatorMIR1__compareGE$0 ; _compareGE ( 75 )
  dq __ASTTranslatorMIR1__compareLT$0 ; _compareLT ( 76 )
  dq __ASTTranslatorMIR1__compareLE$0 ; _compareLE ( 77 )
  dq __ASTTranslatorMIR1__add$0 ; _add ( 78 )
  dq __ASTTranslatorMIR1__sub$0 ; _sub ( 79 )
  dq __ASTTranslatorMIR1__mul$0 ; _mul ( 80 )
  dq __ASTTranslatorMIR1__div$0 ; _div ( 81 )
  dq __ASTTranslatorMIR1__idiv$0 ; _idiv ( 82 )
  dq __ASTTranslatorMIR1__stringJoin$0 ; _stringJoin ( 83 )
  dq __ASTTranslatorMIR1__callPrint$0 ; _callPrint ( 84 )
  dq __ASTTranslatorMIR1__syscall$0 ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __ASTTranslatorMIR1__invokeMethod$0 ; _invokeMethod ( 87 )
  dq __ASTTranslatorMIR1__storeAtIndexAndDrop$0 ; _storeAtIndexAndDrop ( 88 )
  dq __ASTTranslatorMIR1__storeAtKeyAndDrop$0 ; _storeAtKeyAndDrop ( 89 )
  dq __ASTTranslatorMIR1__executeNodeFor$0 ; _executeNodeFor ( 90 )
  dq __ASTTranslatorMIR1__executeNodeForEach$0 ; _executeNodeForEach ( 91 )
  dq __ASTTranslatorMIR1__executeNodeWhile$0 ; _executeNodeWhile ( 92 )
  dq __ASTTranslatorMIR1__executeNodeIf$0 ; _executeNodeIf ( 93 )
  dq __ASTTranslatorMIR1__executeNodeSwitch$0 ; _executeNodeSwitch ( 94 )
  dq __ASTTranslatorMIR1__dropRetVal$0 ; _dropRetVal ( 95 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 96 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 97 )
  dq __MOLD_NullMethodCalled ; neg ( 98 )
  dq __MOLD_NullMethodCalled ; add ( 99 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 100 )
  dq __MOLD_NullMethodCalled ; sub ( 101 )
  dq __MOLD_NullMethodCalled ; mul ( 102 )
  dq __MOLD_NullMethodCalled ; div ( 103 )
  dq __MOLD_NullMethodCalled ; idiv ( 104 )
  dq __MOLD_NullMethodCalled ; loadArray ( 105 )
  dq __MOLD_NullMethodCalled ; loadMap ( 106 )
  dq __MOLD_NullMethodCalled ; loadNull ( 107 )
  dq __MOLD_NullMethodCalled ; loadImm ( 108 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 109 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 110 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 111 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 112 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 114 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 115 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 116 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 117 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 118 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 119 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 120 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 121 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 122 )
  dq __MOLD_NullMethodCalled ; syscall ( 123 )
  dq __MOLD_NullMethodCalled ; drop ( 124 )
  dq __MOLD_NullMethodCalled ; call ( 125 )
  dq __MOLD_NullMethodCalled ; callPrint ( 126 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 128 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 130 )
  dq __MOLD_NullMethodCalled ; createObject ( 131 )
  dq __MOLD_NullMethodCalled ; createLabel ( 132 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 133 )
  dq __MOLD_NullMethodCalled ; moveBack ( 134 )
  dq __ASTTranslatorMIR1_emitLabel$0 ; emitLabel ( 135 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 136 )
  dq __MOLD_NullMethodCalled ; vcall ( 137 )
  dq __MOLD_NullMethodCalled ; dup ( 138 )
  dq __MOLD_NullMethodCalled ; over ( 139 )
  dq __MOLD_NullMethodCalled ; jmp ( 140 )
  dq __MOLD_NullMethodCalled ; dropN ( 141 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 142 )
  dq __MOLD_NullMethodCalled ; innerRet ( 143 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 144 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; createClass ( 147 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 148 )
  dq __MOLD_NullMethodCalled ; comment ( 149 )
  dq __MOLD_NullMethodCalled ; beginProc ( 150 )
  dq __MOLD_NullMethodCalled ; initFrame ( 151 )
  dq __MOLD_NullMethodCalled ; ret ( 152 )
  dq __MOLD_NullMethodCalled ; endProc ( 153 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 154 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 155 )
  dq __MOLD_NullMethodCalled ; pop ( 156 )
  dq __ASTTranslatorMIR1_push$0 ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __ASTTranslatorMIR1_popForRead$0 ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 163 )
  dq __MOLD_NullMethodCalled ; eat ( 164 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 165 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 166 )
  dq __MOLD_NullMethodCalled ; printTree ( 167 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 168 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 169 )
  dq __MOLD_NullMethodCalled ; processNode ( 170 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 171 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 172 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 173 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 177 )
  dq __ASTTranslatorMIR1_run$0 ; run ( 178 )
  dq __ASTTranslatorMIR1_connectTo$0 ; connectTo ( 179 )

vtable_PipeAbstract:
.offset dd 8 * 155
.length dd 8 * 24
.entries:
  dq __PipeAbstract_processOneItem$0 ; processOneItem ( 155 )
  dq __MOLD_NullMethodCalled ; pop ( 156 )
  dq __MOLD_NullMethodCalled ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 163 )
  dq __MOLD_NullMethodCalled ; eat ( 164 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 165 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 166 )
  dq __MOLD_NullMethodCalled ; printTree ( 167 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 168 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 169 )
  dq __MOLD_NullMethodCalled ; processNode ( 170 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 171 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 172 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 173 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 177 )
  dq __MOLD_NullMethodCalled ; run ( 178 )
  dq __PipeAbstract_connectTo$0 ; connectTo ( 179 )

vtable_MIRQuadCollector:
.offset dd 8 * 155
.length dd 8 * 24
.entries:
  dq __MIRQuadCollector_processOneItem$0 ; processOneItem ( 155 )
  dq __MOLD_NullMethodCalled ; pop ( 156 )
  dq __MOLD_NullMethodCalled ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 163 )
  dq __MOLD_NullMethodCalled ; eat ( 164 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 165 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 166 )
  dq __MOLD_NullMethodCalled ; printTree ( 167 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 168 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 169 )
  dq __MOLD_NullMethodCalled ; processNode ( 170 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 171 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 172 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 173 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 177 )
  dq __MOLD_NullMethodCalled ; run ( 178 )
  dq __PipeAbstract_connectTo$0 ; connectTo ( 179 )

vtable_CodeGeneratorX64:
.offset dd 8 * 125
.length dd 8 * 53
.entries:
  dq __CodeGeneratorX64_call$0 ; call ( 125 )
  dq __MOLD_NullMethodCalled ; callPrint ( 126 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 128 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 130 )
  dq __MOLD_NullMethodCalled ; createObject ( 131 )
  dq __MOLD_NullMethodCalled ; createLabel ( 132 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 133 )
  dq __MOLD_NullMethodCalled ; moveBack ( 134 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 135 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 136 )
  dq __MOLD_NullMethodCalled ; vcall ( 137 )
  dq __MOLD_NullMethodCalled ; dup ( 138 )
  dq __MOLD_NullMethodCalled ; over ( 139 )
  dq __MOLD_NullMethodCalled ; jmp ( 140 )
  dq __MOLD_NullMethodCalled ; dropN ( 141 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 142 )
  dq __MOLD_NullMethodCalled ; innerRet ( 143 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 144 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; createClass ( 147 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 148 )
  dq __MOLD_NullMethodCalled ; comment ( 149 )
  dq __MOLD_NullMethodCalled ; beginProc ( 150 )
  dq __MOLD_NullMethodCalled ; initFrame ( 151 )
  dq __MOLD_NullMethodCalled ; ret ( 152 )
  dq __MOLD_NullMethodCalled ; endProc ( 153 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 154 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 155 )
  dq __CodeGeneratorX64_pop$0 ; pop ( 156 )
  dq __CodeGeneratorX64_push$0 ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 163 )
  dq __MOLD_NullMethodCalled ; eat ( 164 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 165 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 166 )
  dq __MOLD_NullMethodCalled ; printTree ( 167 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 168 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 169 )
  dq __MOLD_NullMethodCalled ; processNode ( 170 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 171 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 172 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 173 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 177 )
  dq __CodeGeneratorX64_run$0 ; run ( 178 )

vtable_MIRQuadOptimizer:
.offset dd 8 * 155
.length dd 8 * 24
.entries:
  dq __MIRQuadOptimizer_processOneItem$0 ; processOneItem ( 155 )
  dq __MOLD_NullMethodCalled ; pop ( 156 )
  dq __MOLD_NullMethodCalled ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 163 )
  dq __MOLD_NullMethodCalled ; eat ( 164 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 165 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 166 )
  dq __MOLD_NullMethodCalled ; printTree ( 167 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 168 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 169 )
  dq __MOLD_NullMethodCalled ; processNode ( 170 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 171 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 172 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 173 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 177 )
  dq __MOLD_NullMethodCalled ; run ( 178 )
  dq __PipeAbstract_connectTo$0 ; connectTo ( 179 )

vtable_VMachineStackObject:
.offset dd 8 * 0
.length dd 8 * 0

vtable_VMachineStack:
.offset dd 8 * 52
.length dd 8 * 126
.entries:
  dq __VMachineStack__call$0 ; _call ( 52 )
  dq __MOLD_NullMethodCalled ; _assign ( 53 )
  dq __MOLD_NullMethodCalled ; _loadArgsVector ( 54 )
  dq __MOLD_NullMethodCalled ; _loadArgsCount ( 55 )
  dq __MOLD_NullMethodCalled ; _loadVariable ( 56 )
  dq __MOLD_NullMethodCalled ; assignMirType ( 57 )
  dq __MOLD_NullMethodCalled ; _convert ( 58 )
  dq __MOLD_NullMethodCalled ; _loadNull ( 59 )
  dq __MOLD_NullMethodCalled ; _loadImm ( 60 )
  dq __MOLD_NullMethodCalled ; _loadArray ( 61 )
  dq __MOLD_NullMethodCalled ; _loadImmAsVariant ( 62 )
  dq __MOLD_NullMethodCalled ; _storeAtIndex ( 63 )
  dq __MOLD_NullMethodCalled ; _loadMap ( 64 )
  dq __MOLD_NullMethodCalled ; _storeAtKey ( 65 )
  dq __MOLD_NullMethodCalled ; _neg ( 66 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolAnd ( 67 )
  dq __MOLD_NullMethodCalled ; _evaluateNodeLazyBoolOr ( 68 )
  dq __MOLD_NullMethodCalled ; _createObject ( 69 )
  dq __MOLD_NullMethodCalled ; _loadFromIndex ( 70 )
  dq __MOLD_NullMethodCalled ; _loadFromKey ( 71 )
  dq __MOLD_NullMethodCalled ; _compareEQ ( 72 )
  dq __MOLD_NullMethodCalled ; _compareNEQ ( 73 )
  dq __MOLD_NullMethodCalled ; _compareGT ( 74 )
  dq __MOLD_NullMethodCalled ; _compareGE ( 75 )
  dq __MOLD_NullMethodCalled ; _compareLT ( 76 )
  dq __MOLD_NullMethodCalled ; _compareLE ( 77 )
  dq __MOLD_NullMethodCalled ; _add ( 78 )
  dq __MOLD_NullMethodCalled ; _sub ( 79 )
  dq __MOLD_NullMethodCalled ; _mul ( 80 )
  dq __MOLD_NullMethodCalled ; _div ( 81 )
  dq __MOLD_NullMethodCalled ; _idiv ( 82 )
  dq __MOLD_NullMethodCalled ; _stringJoin ( 83 )
  dq __MOLD_NullMethodCalled ; _callPrint ( 84 )
  dq __MOLD_NullMethodCalled ; _syscall ( 85 )
  dq __MOLD_NullMethodCalled ; lookupFunction ( 86 )
  dq __MOLD_NullMethodCalled ; _invokeMethod ( 87 )
  dq __MOLD_NullMethodCalled ; _storeAtIndexAndDrop ( 88 )
  dq __MOLD_NullMethodCalled ; _storeAtKeyAndDrop ( 89 )
  dq __MOLD_NullMethodCalled ; _executeNodeFor ( 90 )
  dq __MOLD_NullMethodCalled ; _executeNodeForEach ( 91 )
  dq __MOLD_NullMethodCalled ; _executeNodeWhile ( 92 )
  dq __MOLD_NullMethodCalled ; _executeNodeIf ( 93 )
  dq __MOLD_NullMethodCalled ; _executeNodeSwitch ( 94 )
  dq __MOLD_NullMethodCalled ; _dropRetVal ( 95 )
  dq __MOLD_NullMethodCalled ; loadArgv ( 96 )
  dq __MOLD_NullMethodCalled ; loadArgc ( 97 )
  dq __MOLD_NullMethodCalled ; neg ( 98 )
  dq __MOLD_NullMethodCalled ; add ( 99 )
  dq __MOLD_NullMethodCalled ; stringJoin ( 100 )
  dq __MOLD_NullMethodCalled ; sub ( 101 )
  dq __MOLD_NullMethodCalled ; mul ( 102 )
  dq __MOLD_NullMethodCalled ; div ( 103 )
  dq __MOLD_NullMethodCalled ; idiv ( 104 )
  dq __MOLD_NullMethodCalled ; loadArray ( 105 )
  dq __MOLD_NullMethodCalled ; loadMap ( 106 )
  dq __MOLD_NullMethodCalled ; loadNull ( 107 )
  dq __MOLD_NullMethodCalled ; loadImm ( 108 )
  dq __MOLD_NullMethodCalled ; cmpEQ ( 109 )
  dq __MOLD_NullMethodCalled ; cmpNEQ ( 110 )
  dq __MOLD_NullMethodCalled ; cmpLT ( 111 )
  dq __MOLD_NullMethodCalled ; cmpLE ( 112 )
  dq __MOLD_NullMethodCalled ; cmpGT ( 113 )
  dq __MOLD_NullMethodCalled ; cmpGE ( 114 )
  dq __MOLD_NullMethodCalled ; loadLocal ( 115 )
  dq __MOLD_NullMethodCalled ; loadGlobal ( 116 )
  dq __MOLD_NullMethodCalled ; loadParamN ( 117 )
  dq __MOLD_NullMethodCalled ; loadRetVal ( 118 )
  dq __MOLD_NullMethodCalled ; storeLocal ( 119 )
  dq __MOLD_NullMethodCalled ; storeGlobal ( 120 )
  dq __MOLD_NullMethodCalled ; storeParamN ( 121 )
  dq __MOLD_NullMethodCalled ; storeRetVal ( 122 )
  dq __MOLD_NullMethodCalled ; syscall ( 123 )
  dq __MOLD_NullMethodCalled ; drop ( 124 )
  dq __MOLD_NullMethodCalled ; call ( 125 )
  dq __MOLD_NullMethodCalled ; callPrint ( 126 )
  dq __MOLD_NullMethodCalled ; loadFromIndex ( 127 )
  dq __MOLD_NullMethodCalled ; loadFromKey ( 128 )
  dq __MOLD_NullMethodCalled ; storeAtIndex ( 129 )
  dq __MOLD_NullMethodCalled ; storeAtKey ( 130 )
  dq __MOLD_NullMethodCalled ; createObject ( 131 )
  dq __MOLD_NullMethodCalled ; createLabel ( 132 )
  dq __MOLD_NullMethodCalled ; jmpIfFalse ( 133 )
  dq __MOLD_NullMethodCalled ; moveBack ( 134 )
  dq __MOLD_NullMethodCalled ; emitLabel ( 135 )
  dq __MOLD_NullMethodCalled ; jmpIfTrue ( 136 )
  dq __MOLD_NullMethodCalled ; vcall ( 137 )
  dq __MOLD_NullMethodCalled ; dup ( 138 )
  dq __MOLD_NullMethodCalled ; over ( 139 )
  dq __MOLD_NullMethodCalled ; jmp ( 140 )
  dq __MOLD_NullMethodCalled ; dropN ( 141 )
  dq __MOLD_NullMethodCalled ; allocateLocalId ( 142 )
  dq __MOLD_NullMethodCalled ; innerRet ( 143 )
  dq __MOLD_NullMethodCalled ; resolveLabel ( 144 )
  dq __MOLD_NullMethodCalled ; forEachIndexes ( 145 )
  dq __MOLD_NullMethodCalled ; forEachKeys ( 146 )
  dq __MOLD_NullMethodCalled ; createClass ( 147 )
  dq __MOLD_NullMethodCalled ; createAndEmitLabel ( 148 )
  dq __MOLD_NullMethodCalled ; comment ( 149 )
  dq __MOLD_NullMethodCalled ; beginProc ( 150 )
  dq __MOLD_NullMethodCalled ; initFrame ( 151 )
  dq __MOLD_NullMethodCalled ; ret ( 152 )
  dq __MOLD_NullMethodCalled ; endProc ( 153 )
  dq __MOLD_NullMethodCalled ; getMir1Code ( 154 )
  dq __MOLD_NullMethodCalled ; processOneItem ( 155 )
  dq __MOLD_NullMethodCalled ; pop ( 156 )
  dq __MOLD_NullMethodCalled ; push ( 157 )
  dq __MOLD_NullMethodCalled ; peekN ( 158 )
  dq __MOLD_NullMethodCalled ; eatN ( 159 )
  dq __MOLD_NullMethodCalled ; createConstFromValue ( 160 )
  dq __MOLD_NullMethodCalled ; popForRead ( 161 )
  dq __MOLD_NullMethodCalled ; createMethod ( 162 )
  dq __MOLD_NullMethodCalled ; insertJmpTable ( 163 )
  dq __MOLD_NullMethodCalled ; eat ( 164 )
  dq __MOLD_NullMethodCalled ; getByAbsoluteIdx ( 165 )
  dq __MOLD_NullMethodCalled ; setByAbsoluteIdx ( 166 )
  dq __MOLD_NullMethodCalled ; printTree ( 167 )
  dq __MOLD_NullMethodCalled ; resolveImports ( 168 )
  dq __MOLD_NullMethodCalled ; getAstPreprocessor ( 169 )
  dq __MOLD_NullMethodCalled ; processNode ( 170 )
  dq __MOLD_NullMethodCalled ; buildSymbolTable ( 171 )
  dq __MOLD_NullMethodCalled ; getAstEvaluator ( 172 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerVCall ( 173 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerConstantFolding ( 174 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerIf ( 175 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerDeadCodeRemove ( 176 )
  dq __MOLD_NullMethodCalled ; getAstOptimizerCSE ( 177 )
  dq __VMachineStack_run$0 ; run ( 178 )

; ------------------------------------------------------------------------------
;                               Imports section
; ------------------------------------------------------------------------------
section '.idata' import data readable writeable
  include 'CommonImports.asm'

; ------------------------------------------------------------------------------
;                                Debug section
; ------------------------------------------------------------------------------
section '.debug' data readable
SymbolTable:
dq 0, 0
include 'SymbolTableCommon.asm'
dq  __AST_constructor$0 , name___AST_constructor$0
dq  __AST__printTreeInternal$0 , name___AST__printTreeInternal$0
dq  __AST_printTree$0 , name___AST_printTree$0
dq  __Parser_constructor$0 , name___Parser_constructor$0
dq  __Parser__handleError$0 , name___Parser__handleError$0
dq  __Parser__parseInternal$0 , name___Parser__parseInternal$0
dq  __Parser_parseFile$0 , name___Parser_parseFile$0
dq  __Parser_parseText$0 , name___Parser_parseText$0
dq  AST_GetNextId , name_AST_GetNextId
dq  AST_CreateNodeInteger , name_AST_CreateNodeInteger
dq  AST_CreateNodeString , name_AST_CreateNodeString
dq  AST_GetOpcodeAsText , name_AST_GetOpcodeAsText
dq  AST_GetOpcodeAsShortText , name_AST_GetOpcodeAsShortText
dq  AST_InvertBoolean , name_AST_InvertBoolean
dq  AST_IsVar , name_AST_IsVar
dq  AST_IsImm , name_AST_IsImm
dq  AST_IsPrimitiveImm , name_AST_IsPrimitiveImm
dq  AST_IsImmWithValue , name_AST_IsImmWithValue
dq  AST_IsEmpty , name_AST_IsEmpty
dq  AST_IsImmOrVar , name_AST_IsImmOrVar
dq  AST_HasSideEffects , name_AST_HasSideEffects
dq  AST_GetHashInternal , name_AST_GetHashInternal
dq  AST_PrefetchHash , name_AST_PrefetchHash
dq  AST_GetHash , name_AST_GetHash
dq  AST_GetHashForCodeComparison , name_AST_GetHashForCodeComparison
dq  AST_IsDataNode , name_AST_IsDataNode
dq  AST_ConvertDataTypeToText , name_AST_ConvertDataTypeToText
dq  AST_ConvertDataTypeToMIR , name_AST_ConvertDataTypeToMIR
dq  AST_GetDataType , name_AST_GetDataType
dq  AST_TypeCast , name_AST_TypeCast
dq  AST_GetTopNodeInBlock , name_AST_GetTopNodeInBlock
dq  AST_GetParentBlock , name_AST_GetParentBlock
dq  AST_IsOkAsBox , name_AST_IsOkAsBox
dq  AST_CloneNode , name_AST_CloneNode
dq  SymbolTable_GetNextId , name_SymbolTable_GetNextId
dq  __SymbolTable_constructor$0 , name___SymbolTable_constructor$0
dq  __SymbolTable__debug$0 , name___SymbolTable__debug$0
dq  __SymbolTable__error$0 , name___SymbolTable__error$0
dq  __SymbolTable__errorTypeMismatch$0 , name___SymbolTable__errorTypeMismatch$0
dq  __SymbolTable__errorIfUsedAsNumber$0 , name___SymbolTable__errorIfUsedAsNumber$0
dq  __SymbolTable_getDeep$0 , name___SymbolTable_getDeep$0
dq  __SymbolTable_exportSymbols$0 , name___SymbolTable_exportSymbols$0
dq  __SymbolTable_insert$0 , name___SymbolTable_insert$0
dq  __SymbolTable_remove$0 , name___SymbolTable_remove$0
dq  __SymbolTable_importExternalVariable$0 , name___SymbolTable_importExternalVariable$0
dq  __SymbolTable_insertGlobal$0 , name___SymbolTable_insertGlobal$0
dq  __SymbolTable__lookupInternal$0 , name___SymbolTable__lookupInternal$0
dq  __SymbolTable_lookup$0 , name___SymbolTable_lookup$0
dq  __SymbolTable_lookupForRead$0 , name___SymbolTable_lookupForRead$0
dq  __SymbolTable_lookupForCall$0 , name___SymbolTable_lookupForCall$0
dq  __SymbolTable_lookupForWrite$0 , name___SymbolTable_lookupForWrite$0
dq  __SymbolTable_lookupForReadAndWrite$0 , name___SymbolTable_lookupForReadAndWrite$0
dq  __SymbolTable_lookupForWriteOrInsert$0 , name___SymbolTable_lookupForWriteOrInsert$0
dq  __SymbolTable_lookupGlobal$0 , name___SymbolTable_lookupGlobal$0
dq  __SymbolTable_decreaseReadHits$0 , name___SymbolTable_decreaseReadHits$0
dq  __SymbolTable_decreaseWriteHits$0 , name___SymbolTable_decreaseWriteHits$0
dq  __SymbolTable_isset$0 , name___SymbolTable_isset$0
dq  __SymbolTable_useAsArray$0 , name___SymbolTable_useAsArray$0
dq  __SymbolTable_useAsArrayOrString$0 , name___SymbolTable_useAsArrayOrString$0
dq  __SymbolTable_useAsMap$0 , name___SymbolTable_useAsMap$0
dq  __SymbolTable_useAsIndex$0 , name___SymbolTable_useAsIndex$0
dq  __SymbolTable_useAsInteger$0 , name___SymbolTable_useAsInteger$0
dq  __SymbolTable_useAsFloat$0 , name___SymbolTable_useAsFloat$0
dq  __SymbolTable_useAsString$0 , name___SymbolTable_useAsString$0
dq  __SymbolTable_useAsKey$0 , name___SymbolTable_useAsKey$0
dq  __SymbolTable_useAsObject$0 , name___SymbolTable_useAsObject$0
dq  __SymbolTable_useAsMapOrObject$0 , name___SymbolTable_useAsMapOrObject$0
dq  __SymbolTable_useAsTypeofArg$0 , name___SymbolTable_useAsTypeofArg$0
dq  __SymbolTable_useAsNumber$0 , name___SymbolTable_useAsNumber$0
dq  __SymbolTable_enterScope$0 , name___SymbolTable_enterScope$0
dq  __SymbolTable_enterScopeForLoop$0 , name___SymbolTable_enterScopeForLoop$0
dq  __SymbolTable_enterScopeForProcedure$0 , name___SymbolTable_enterScopeForProcedure$0
dq  __SymbolTable_leaveScope$0 , name___SymbolTable_leaveScope$0
dq  __SymbolTable_insertFunction$0 , name___SymbolTable_insertFunction$0
dq  __SymbolTable_lookupFunction$0 , name___SymbolTable_lookupFunction$0
dq  __SymbolTable_getCurrentFunctionName$0 , name___SymbolTable_getCurrentFunctionName$0
dq  __SymbolTable_insertClass$0 , name___SymbolTable_insertClass$0
dq  __SymbolTable_lookupClass$0 , name___SymbolTable_lookupClass$0
dq  __SymbolTable_insertLocal$0 , name___SymbolTable_insertLocal$0
dq  __SymbolTable_importGlobal$0 , name___SymbolTable_importGlobal$0
dq  __SymbolTable_insertParam$0 , name___SymbolTable_insertParam$0
dq  __SymbolTable_insertRetVal$0 , name___SymbolTable_insertRetVal$0
dq  __SymbolTable_insertConst$0 , name___SymbolTable_insertConst$0
dq  __SymbolTable_insertLiteral$0 , name___SymbolTable_insertLiteral$0
dq  __SymbolTable_createConstFromValue$0 , name___SymbolTable_createConstFromValue$0
dq  __SymbolTable_assignValue$0 , name___SymbolTable_assignValue$0
dq  __SymbolTable_assignNode$0 , name___SymbolTable_assignNode$0
dq  __SymbolTable_assignType$0 , name___SymbolTable_assignType$0
dq  __SymbolTable_freezeType$0 , name___SymbolTable_freezeType$0
dq  __SymbolTable_assignTypeAndFreeze$0 , name___SymbolTable_assignTypeAndFreeze$0
dq  __SymbolTable_assignMirType$0 , name___SymbolTable_assignMirType$0
dq  __SymbolTable_removeUnusedSymbols$0 , name___SymbolTable_removeUnusedSymbols$0
dq  __SymbolTable_createLabel$0 , name___SymbolTable_createLabel$0
dq  __SymbolTable_insertJmpTable$0 , name___SymbolTable_insertJmpTable$0
dq  __SymbolTable_getTempVar$0 , name___SymbolTable_getTempVar$0
dq  __SymbolTable_getTempVarForWrite$0 , name___SymbolTable_getTempVarForWrite$0
dq  __SymbolTable_getTempVarForReadAndWrite$0 , name___SymbolTable_getTempVarForReadAndWrite$0
dq  __SymbolTable_releaseTempVar$0 , name___SymbolTable_releaseTempVar$0
dq  __ASTModuleResolver_constructor$0 , name___ASTModuleResolver_constructor$0
dq  __ASTModuleResolver_resolveImports$0 , name___ASTModuleResolver_resolveImports$0
dq  __ASTSymbolsCollector_constructor$0 , name___ASTSymbolsCollector_constructor$0
dq  __ASTSymbolsCollector__debug$0 , name___ASTSymbolsCollector__debug$0
dq  __ASTSymbolsCollector__collectSymbolsFromLeftNode$0 , name___ASTSymbolsCollector__collectSymbolsFromLeftNode$0
dq  __ASTSymbolsCollector__collectSymbolsFromRightNode$0 , name___ASTSymbolsCollector__collectSymbolsFromRightNode$0
dq  __ASTSymbolsCollector__updateVariableSymbolInfo$0 , name___ASTSymbolsCollector__updateVariableSymbolInfo$0
dq  __ASTSymbolsCollector__collectSymbols$0 , name___ASTSymbolsCollector__collectSymbols$0
dq  __ASTSymbolsCollector_buildSymbolTable$0 , name___ASTSymbolsCollector_buildSymbolTable$0
dq  __ASTEvaluator_constructor$0 , name___ASTEvaluator_constructor$0
dq  __ASTEvaluator__debug$0 , name___ASTEvaluator__debug$0
dq  __ASTEvaluator__assignValue$0 , name___ASTEvaluator__assignValue$0
dq  __ASTEvaluator__getValue$0 , name___ASTEvaluator__getValue$0
dq  __ASTEvaluator__mergeValues$0 , name___ASTEvaluator__mergeValues$0
dq  __ASTEvaluator__processConditionalNode$0 , name___ASTEvaluator__processConditionalNode$0
dq  __ASTEvaluator__processTwoAlternativeNodes$0 , name___ASTEvaluator__processTwoAlternativeNodes$0
dq  __ASTEvaluator__getArrayOfValueNodes$0 , name___ASTEvaluator__getArrayOfValueNodes$0
dq  __ASTEvaluator__processNode$0 , name___ASTEvaluator__processNode$0
dq  __ASTEvaluator_processNode$0 , name___ASTEvaluator_processNode$0
dq  __ASTPreprocessor_constructor$0 , name___ASTPreprocessor_constructor$0
dq  __ASTPreprocessor__debug$0 , name___ASTPreprocessor__debug$0
dq  __ASTPreprocessor__processNode$0 , name___ASTPreprocessor__processNode$0
dq  __ASTPreprocessor_processNode$0 , name___ASTPreprocessor_processNode$0
dq  __ASTOptimizerConstantFolding_constructor$0 , name___ASTOptimizerConstantFolding_constructor$0
dq  __ASTOptimizerConstantFolding__debug$0 , name___ASTOptimizerConstantFolding__debug$0
dq  __ASTOptimizerConstantFolding__setToImm$0 , name___ASTOptimizerConstantFolding__setToImm$0
dq  __ASTOptimizerConstantFolding__processNodeArray$0 , name___ASTOptimizerConstantFolding__processNodeArray$0
dq  __ASTOptimizerConstantFolding__processNodeMap$0 , name___ASTOptimizerConstantFolding__processNodeMap$0
dq  __ASTOptimizerConstantFolding_processNode$0 , name___ASTOptimizerConstantFolding_processNode$0
dq  __ASTOptimizerConstantFolding_processNodeUntilNotChanged$0 , name___ASTOptimizerConstantFolding_processNodeUntilNotChanged$0
dq  __ASTOptimizerCSE_constructor$0 , name___ASTOptimizerCSE_constructor$0
dq  __ASTOptimizerCSE__getNextId$0 , name___ASTOptimizerCSE__getNextId$0
dq  __ASTOptimizerCSE__createNodeVariable$0 , name___ASTOptimizerCSE__createNodeVariable$0
dq  __ASTOptimizerCSE__debug$0 , name___ASTOptimizerCSE__debug$0
dq  __ASTOptimizerCSE__processInnerNode$0 , name___ASTOptimizerCSE__processInnerNode$0
dq  __ASTOptimizerCSE__processNode$0 , name___ASTOptimizerCSE__processNode$0
dq  __ASTOptimizerCSE_processNode$0 , name___ASTOptimizerCSE_processNode$0
dq  __ASTOptimizerDeadCodeRemove_constructor$0 , name___ASTOptimizerDeadCodeRemove_constructor$0
dq  __ASTOptimizerDeadCodeRemove__debug$0 , name___ASTOptimizerDeadCodeRemove__debug$0
dq  __ASTOptimizerDeadCodeRemove__removeNode$0 , name___ASTOptimizerDeadCodeRemove__removeNode$0
dq  __ASTOptimizerDeadCodeRemove__moveNode$0 , name___ASTOptimizerDeadCodeRemove__moveNode$0
dq  __ASTOptimizerDeadCodeRemove__processChildNodes$0 , name___ASTOptimizerDeadCodeRemove__processChildNodes$0
dq  __ASTOptimizerDeadCodeRemove__processNode$0 , name___ASTOptimizerDeadCodeRemove__processNode$0
dq  __ASTOptimizerDeadCodeRemove_processNode$0 , name___ASTOptimizerDeadCodeRemove_processNode$0
dq  __ASTOptimizerVCall_constructor$0 , name___ASTOptimizerVCall_constructor$0
dq  __ASTOptimizerVCall__debug$0 , name___ASTOptimizerVCall__debug$0
dq  __ASTOptimizerVCall__processNode$0 , name___ASTOptimizerVCall__processNode$0
dq  __ASTOptimizerVCall_processNode$0 , name___ASTOptimizerVCall_processNode$0
dq  __ASTOptimizerIf_constructor$0 , name___ASTOptimizerIf_constructor$0
dq  __ASTOptimizerIf__debug$0 , name___ASTOptimizerIf__debug$0
dq  __ASTOptimizerIf__processNode$0 , name___ASTOptimizerIf__processNode$0
dq  __ASTOptimizerIf_processNode$0 , name___ASTOptimizerIf_processNode$0
dq  __ASTOptimizerInline_constructor$0 , name___ASTOptimizerInline_constructor$0
dq  __ASTOptimizerInline__debug$0 , name___ASTOptimizerInline__debug$0
dq  __ASTOptimizerInline__resolveParamsForInline$0 , name___ASTOptimizerInline__resolveParamsForInline$0
dq  __ASTOptimizerInline__injectParamInit$0 , name___ASTOptimizerInline__injectParamInit$0
dq  __ASTOptimizerInline__injectFunctionBody$0 , name___ASTOptimizerInline__injectFunctionBody$0
dq  __ASTOptimizerInline__processNode_injectInlineFunctions$0 , name___ASTOptimizerInline__processNode_injectInlineFunctions$0
dq  __ASTOptimizerInline__processNode$0 , name___ASTOptimizerInline__processNode$0
dq  __ASTOptimizerInline_processNode$0 , name___ASTOptimizerInline_processNode$0
dq  __ASTTypeCast_constructor$0 , name___ASTTypeCast_constructor$0
dq  __ASTTypeCast__debug$0 , name___ASTTypeCast__debug$0
dq  __ASTTypeCast__processNode$0 , name___ASTTypeCast__processNode$0
dq  __ASTTypeCast_processNode$0 , name___ASTTypeCast_processNode$0
dq  __MIRCode_constructor$0 , name___MIRCode_constructor$0
dq  __MIRCode_beginProc$0 , name___MIRCode_beginProc$0
dq  __MIRCode_endProc$0 , name___MIRCode_endProc$0
dq  __MIRCode_resolveLabel$0 , name___MIRCode_resolveLabel$0
dq  __MIRCode__resolveJmps$0 , name___MIRCode__resolveJmps$0
dq  __MIRCode_comment$0 , name___MIRCode_comment$0
dq  __MIRCode_push0$0 , name___MIRCode_push0$0
dq  __MIRCode_push1$0 , name___MIRCode_push1$0
dq  __MIRCode_push2$0 , name___MIRCode_push2$0
dq  __MIRCode_push3$0 , name___MIRCode_push3$0
dq  __MIRCode_nop$0 , name___MIRCode_nop$0
dq  __MIRCode_neg$0 , name___MIRCode_neg$0
dq  __MIRCode_add$0 , name___MIRCode_add$0
dq  __MIRCode_sub$0 , name___MIRCode_sub$0
dq  __MIRCode_mul$0 , name___MIRCode_mul$0
dq  __MIRCode_div$0 , name___MIRCode_div$0
dq  __MIRCode_idiv$0 , name___MIRCode_idiv$0
dq  __MIRCode_stringJoin$0 , name___MIRCode_stringJoin$0
dq  __MIRCode_loadNull$0 , name___MIRCode_loadNull$0
dq  __MIRCode_loadArray$0 , name___MIRCode_loadArray$0
dq  __MIRCode_loadMap$0 , name___MIRCode_loadMap$0
dq  __MIRCode_loadImm$0 , name___MIRCode_loadImm$0
dq  __MIRCode_cmpEQ$0 , name___MIRCode_cmpEQ$0
dq  __MIRCode_cmpNEQ$0 , name___MIRCode_cmpNEQ$0
dq  __MIRCode_cmpGT$0 , name___MIRCode_cmpGT$0
dq  __MIRCode_cmpGE$0 , name___MIRCode_cmpGE$0
dq  __MIRCode_cmpLT$0 , name___MIRCode_cmpLT$0
dq  __MIRCode_cmpLE$0 , name___MIRCode_cmpLE$0
dq  __MIRCode_loadLocal$0 , name___MIRCode_loadLocal$0
dq  __MIRCode_loadParamN$0 , name___MIRCode_loadParamN$0
dq  __MIRCode_loadGlobal$0 , name___MIRCode_loadGlobal$0
dq  __MIRCode_loadRetVal$0 , name___MIRCode_loadRetVal$0
dq  __MIRCode_loadFromIndex$0 , name___MIRCode_loadFromIndex$0
dq  __MIRCode_loadFromKey$0 , name___MIRCode_loadFromKey$0
dq  __MIRCode_allocateLocalId$0 , name___MIRCode_allocateLocalId$0
dq  __MIRCode_storeLocal$0 , name___MIRCode_storeLocal$0
dq  __MIRCode_storeParamN$0 , name___MIRCode_storeParamN$0
dq  __MIRCode_storeGlobal$0 , name___MIRCode_storeGlobal$0
dq  __MIRCode_storeRetVal$0 , name___MIRCode_storeRetVal$0
dq  __MIRCode_storeAtIndex$0 , name___MIRCode_storeAtIndex$0
dq  __MIRCode_storeAtKey$0 , name___MIRCode_storeAtKey$0
dq  __MIRCode_moveBack$0 , name___MIRCode_moveBack$0
dq  __MIRCode_drop$0 , name___MIRCode_drop$0
dq  __MIRCode_dropN$0 , name___MIRCode_dropN$0
dq  __MIRCode_dup$0 , name___MIRCode_dup$0
dq  __MIRCode_over$0 , name___MIRCode_over$0
dq  __MIRCode_loadArgc$0 , name___MIRCode_loadArgc$0
dq  __MIRCode_loadArgv$0 , name___MIRCode_loadArgv$0
dq  __MIRCode_createObject$0 , name___MIRCode_createObject$0
dq  __MIRCode__jmpInternal$0 , name___MIRCode__jmpInternal$0
dq  __MIRCode_jmp$0 , name___MIRCode_jmp$0
dq  __MIRCode_jmpIfTrue$0 , name___MIRCode_jmpIfTrue$0
dq  __MIRCode_jmpIfFalse$0 , name___MIRCode_jmpIfFalse$0
dq  __MIRCode_ret$0 , name___MIRCode_ret$0
dq  __MIRCode_innerRet$0 , name___MIRCode_innerRet$0
dq  __MIRCode_call$0 , name___MIRCode_call$0
dq  __MIRCode_vcall$0 , name___MIRCode_vcall$0
dq  __MIRCode_callPrint$0 , name___MIRCode_callPrint$0
dq  __MIRCode_initFrame$0 , name___MIRCode_initFrame$0
dq  __MIRCode_createLabel$0 , name___MIRCode_createLabel$0
dq  __MIRCode_emitLabel$0 , name___MIRCode_emitLabel$0
dq  __MIRCode_createAndEmitLabel$0 , name___MIRCode_createAndEmitLabel$0
dq  __MIRCode_createMethod$0 , name___MIRCode_createMethod$0
dq  __MIRCode_createClass$0 , name___MIRCode_createClass$0
dq  __MIRCode_getClassProtoById$0 , name___MIRCode_getClassProtoById$0
dq  __MIRCode_retValGuard$0 , name___MIRCode_retValGuard$0
dq  __MIRCode_forEachIndexes$0 , name___MIRCode_forEachIndexes$0
dq  __MIRCode_forEachKeys$0 , name___MIRCode_forEachKeys$0
dq  __MIRCode_syscall$0 , name___MIRCode_syscall$0
dq  __AppMold_constructor$0 , name___AppMold_constructor$0
dq  __AppMold_clearLogContext$0 , name___AppMold_clearLogContext$0
dq  __AppMold_setLogContext$0 , name___AppMold_setLogContext$0
dq  __AppMold_logDebug$0 , name___AppMold_logDebug$0
dq  __AppMold_logError$0 , name___AppMold_logError$0
dq  __AppMold_getMir1Code$0 , name___AppMold_getMir1Code$0
dq  __AppMold_getSymbolTable$0 , name___AppMold_getSymbolTable$0
dq  __AppMold_getAstSymbolsCollector$0 , name___AppMold_getAstSymbolsCollector$0
dq  __AppMold_getAstOptimizerConstantFolding$0 , name___AppMold_getAstOptimizerConstantFolding$0
dq  __AppMold_getAstPreprocessor$0 , name___AppMold_getAstPreprocessor$0
dq  __AppMold_getAstEvaluator$0 , name___AppMold_getAstEvaluator$0
dq  __AppMold_getAstOptimizerCSE$0 , name___AppMold_getAstOptimizerCSE$0
dq  __AppMold_getAstOptimizerDeadCodeRemove$0 , name___AppMold_getAstOptimizerDeadCodeRemove$0
dq  __AppMold_getAstOptimizerVCall$0 , name___AppMold_getAstOptimizerVCall$0
dq  __AppMold_getAstOptimizerIf$0 , name___AppMold_getAstOptimizerIf$0
dq  __AppMold_getAstOptimizerInline$0 , name___AppMold_getAstOptimizerInline$0
dq  __AppMold_getAstModuleResolver$0 , name___AppMold_getAstModuleResolver$0
dq  __AppMold_getAstTypeCast$0 , name___AppMold_getAstTypeCast$0
dq  __ASTPrinterText__printNode_twoArgsOp$0 , name___ASTPrinterText__printNode_twoArgsOp$0
dq  __ASTPrinterText__printNode_codeBlock$0 , name___ASTPrinterText__printNode_codeBlock$0
dq  __ASTPrinterText__printNode_paramsList$0 , name___ASTPrinterText__printNode_paramsList$0
dq  __ASTPrinterText__printNode$0 , name___ASTPrinterText__printNode$0
dq  __ASTPrinterText_printNode$0 , name___ASTPrinterText_printNode$0
dq  __ASTPrinterHtml__printSymbolTable$0 , name___ASTPrinterHtml__printSymbolTable$0
dq  __ASTPrinterHtml__printNode$0 , name___ASTPrinterHtml__printNode$0
dq  __ASTPrinterHtml_printNode$0 , name___ASTPrinterHtml_printNode$0
dq  __ASTTranslator_constructor$0 , name___ASTTranslator_constructor$0
dq  __ASTTranslator__debug$0 , name___ASTTranslator__debug$0
dq  __ASTTranslator__error$0 , name___ASTTranslator__error$0
dq  __ASTTranslator__loadArgsVector$0 , name___ASTTranslator__loadArgsVector$0
dq  __ASTTranslator__loadArgsCount$0 , name___ASTTranslator__loadArgsCount$0
dq  __ASTTranslator__syscall$0 , name___ASTTranslator__syscall$0
dq  __ASTTranslator__loadArray$0 , name___ASTTranslator__loadArray$0
dq  __ASTTranslator__loadMap$0 , name___ASTTranslator__loadMap$0
dq  __ASTTranslator__loadNull$0 , name___ASTTranslator__loadNull$0
dq  __ASTTranslator__loadImm$0 , name___ASTTranslator__loadImm$0
dq  __ASTTranslator__loadImmAsVariant$0 , name___ASTTranslator__loadImmAsVariant$0
dq  __ASTTranslator__loadVariable$0 , name___ASTTranslator__loadVariable$0
dq  __ASTTranslator__call$0 , name___ASTTranslator__call$0
dq  __ASTTranslator__invokeMethod$0 , name___ASTTranslator__invokeMethod$0
dq  __ASTTranslator__callPrint$0 , name___ASTTranslator__callPrint$0
dq  __ASTTranslator__neg$0 , name___ASTTranslator__neg$0
dq  __ASTTranslator__add$0 , name___ASTTranslator__add$0
dq  __ASTTranslator__stringJoin$0 , name___ASTTranslator__stringJoin$0
dq  __ASTTranslator__sub$0 , name___ASTTranslator__sub$0
dq  __ASTTranslator__mul$0 , name___ASTTranslator__mul$0
dq  __ASTTranslator__div$0 , name___ASTTranslator__div$0
dq  __ASTTranslator__idiv$0 , name___ASTTranslator__idiv$0
dq  __ASTTranslator__compareEQ$0 , name___ASTTranslator__compareEQ$0
dq  __ASTTranslator__compareNEQ$0 , name___ASTTranslator__compareNEQ$0
dq  __ASTTranslator__compareLT$0 , name___ASTTranslator__compareLT$0
dq  __ASTTranslator__compareLE$0 , name___ASTTranslator__compareLE$0
dq  __ASTTranslator__compareGT$0 , name___ASTTranslator__compareGT$0
dq  __ASTTranslator__compareGE$0 , name___ASTTranslator__compareGE$0
dq  __ASTTranslator__boolAnd$0 , name___ASTTranslator__boolAnd$0
dq  __ASTTranslator__boolOr$0 , name___ASTTranslator__boolOr$0
dq  __ASTTranslator__loadFromIndex$0 , name___ASTTranslator__loadFromIndex$0
dq  __ASTTranslator__loadFromKey$0 , name___ASTTranslator__loadFromKey$0
dq  __ASTTranslator__storeAtIndex$0 , name___ASTTranslator__storeAtIndex$0
dq  __ASTTranslator__storeAtKey$0 , name___ASTTranslator__storeAtKey$0
dq  __ASTTranslator__storeAtIndexAndDrop$0 , name___ASTTranslator__storeAtIndexAndDrop$0
dq  __ASTTranslator__storeAtKeyAndDrop$0 , name___ASTTranslator__storeAtKeyAndDrop$0
dq  __ASTTranslator__createObject$0 , name___ASTTranslator__createObject$0
dq  __ASTTranslator__convert$0 , name___ASTTranslator__convert$0
dq  __ASTTranslator__emitFunctionBody$0 , name___ASTTranslator__emitFunctionBody$0
dq  __ASTTranslator__dropRetVal$0 , name___ASTTranslator__dropRetVal$0
dq  __ASTTranslator__declareFunction$0 , name___ASTTranslator__declareFunction$0
dq  __ASTTranslator__declareClass$0 , name___ASTTranslator__declareClass$0
dq  __ASTTranslator__declareVariable$0 , name___ASTTranslator__declareVariable$0
dq  __ASTTranslator__assign$0 , name___ASTTranslator__assign$0
dq  __ASTTranslator__evaluateNodeLazyBoolAnd$0 , name___ASTTranslator__evaluateNodeLazyBoolAnd$0
dq  __ASTTranslator__evaluateNodeLazyBoolOr$0 , name___ASTTranslator__evaluateNodeLazyBoolOr$0
dq  __ASTTranslator__executeNodeFor$0 , name___ASTTranslator__executeNodeFor$0
dq  __ASTTranslator__executeNodeWhile$0 , name___ASTTranslator__executeNodeWhile$0
dq  __ASTTranslator__executeNodeIf$0 , name___ASTTranslator__executeNodeIf$0
dq  __ASTTranslator__executeNodeSwitch$0 , name___ASTTranslator__executeNodeSwitch$0
dq  __ASTTranslator__declareExternalFunction$0 , name___ASTTranslator__declareExternalFunction$0
dq  __ASTTranslator__getTempVar$0 , name___ASTTranslator__getTempVar$0
dq  __ASTTranslator__releaseTempVar$0 , name___ASTTranslator__releaseTempVar$0
dq  __ASTTranslator__enterScope$0 , name___ASTTranslator__enterScope$0
dq  __ASTTranslator__leaveScope$0 , name___ASTTranslator__leaveScope$0
dq  __ASTTranslator__verifyNumberOfParameters$0 , name___ASTTranslator__verifyNumberOfParameters$0
dq  __ASTTranslator__emitFunction$0 , name___ASTTranslator__emitFunction$0
dq  __ASTTranslator__emitGlobals$0 , name___ASTTranslator__emitGlobals$0
dq  __ASTTranslator__callSuper$0 , name___ASTTranslator__callSuper$0
dq  __ASTTranslator__getClassProto$0 , name___ASTTranslator__getClassProto$0
dq  __ASTTranslator__isset$0 , name___ASTTranslator__isset$0
dq  __ASTTranslator__importGlobal$0 , name___ASTTranslator__importGlobal$0
dq  __ASTTranslator__declareVariableIfNotSet$0 , name___ASTTranslator__declareVariableIfNotSet$0
dq  __ASTTranslator__declareAndAssign$0 , name___ASTTranslator__declareAndAssign$0
dq  __ASTTranslator__evaluateNode$0 , name___ASTTranslator__evaluateNode$0
dq  __ASTTranslator__evaluateNodeCall$0 , name___ASTTranslator__evaluateNodeCall$0
dq  __ASTTranslator__evaluateNodeInvokeMethod$0 , name___ASTTranslator__evaluateNodeInvokeMethod$0
dq  __ASTTranslator__executeNode$0 , name___ASTTranslator__executeNode$0
dq  __ASTTranslator_run$0 , name___ASTTranslator_run$0
dq  __ASTTranslatorMIR0_constructor$0 , name___ASTTranslatorMIR0_constructor$0
dq  __ASTTranslatorMIR0__loadArgsVector$0 , name___ASTTranslatorMIR0__loadArgsVector$0
dq  __ASTTranslatorMIR0__loadArgsCount$0 , name___ASTTranslatorMIR0__loadArgsCount$0
dq  __ASTTranslatorMIR0__neg$0 , name___ASTTranslatorMIR0__neg$0
dq  __ASTTranslatorMIR0__add$0 , name___ASTTranslatorMIR0__add$0
dq  __ASTTranslatorMIR0__stringJoin$0 , name___ASTTranslatorMIR0__stringJoin$0
dq  __ASTTranslatorMIR0__sub$0 , name___ASTTranslatorMIR0__sub$0
dq  __ASTTranslatorMIR0__mul$0 , name___ASTTranslatorMIR0__mul$0
dq  __ASTTranslatorMIR0__div$0 , name___ASTTranslatorMIR0__div$0
dq  __ASTTranslatorMIR0__idiv$0 , name___ASTTranslatorMIR0__idiv$0
dq  __ASTTranslatorMIR0__loadArray$0 , name___ASTTranslatorMIR0__loadArray$0
dq  __ASTTranslatorMIR0__loadMap$0 , name___ASTTranslatorMIR0__loadMap$0
dq  __ASTTranslatorMIR0__loadNull$0 , name___ASTTranslatorMIR0__loadNull$0
dq  __ASTTranslatorMIR0__loadImm$0 , name___ASTTranslatorMIR0__loadImm$0
dq  __ASTTranslatorMIR0__loadImmAsVariant$0 , name___ASTTranslatorMIR0__loadImmAsVariant$0
dq  __ASTTranslatorMIR0__convert$0 , name___ASTTranslatorMIR0__convert$0
dq  __ASTTranslatorMIR0__compareEQ$0 , name___ASTTranslatorMIR0__compareEQ$0
dq  __ASTTranslatorMIR0__compareNEQ$0 , name___ASTTranslatorMIR0__compareNEQ$0
dq  __ASTTranslatorMIR0__compareLT$0 , name___ASTTranslatorMIR0__compareLT$0
dq  __ASTTranslatorMIR0__compareLE$0 , name___ASTTranslatorMIR0__compareLE$0
dq  __ASTTranslatorMIR0__compareGT$0 , name___ASTTranslatorMIR0__compareGT$0
dq  __ASTTranslatorMIR0__compareGE$0 , name___ASTTranslatorMIR0__compareGE$0
dq  __ASTTranslatorMIR0__loadVariable$0 , name___ASTTranslatorMIR0__loadVariable$0
dq  __ASTTranslatorMIR0__assign$0 , name___ASTTranslatorMIR0__assign$0
dq  __ASTTranslatorMIR0__syscall$0 , name___ASTTranslatorMIR0__syscall$0
dq  __ASTTranslatorMIR0__call$0 , name___ASTTranslatorMIR0__call$0
dq  __ASTTranslatorMIR0__callPrint$0 , name___ASTTranslatorMIR0__callPrint$0
dq  __ASTTranslatorMIR0__loadFromIndex$0 , name___ASTTranslatorMIR0__loadFromIndex$0
dq  __ASTTranslatorMIR0__loadFromKey$0 , name___ASTTranslatorMIR0__loadFromKey$0
dq  __ASTTranslatorMIR0__storeAtIndex$0 , name___ASTTranslatorMIR0__storeAtIndex$0
dq  __ASTTranslatorMIR0__storeAtKey$0 , name___ASTTranslatorMIR0__storeAtKey$0
dq  __ASTTranslatorMIR0__storeAtIndexAndDrop$0 , name___ASTTranslatorMIR0__storeAtIndexAndDrop$0
dq  __ASTTranslatorMIR0__storeAtKeyAndDrop$0 , name___ASTTranslatorMIR0__storeAtKeyAndDrop$0
dq  __ASTTranslatorMIR0__createObject$0 , name___ASTTranslatorMIR0__createObject$0
dq  __ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$0 , name___ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$0
dq  __ASTTranslatorMIR0__evaluateNodeLazyBoolOr$0 , name___ASTTranslatorMIR0__evaluateNodeLazyBoolOr$0
dq  __ASTTranslatorMIR0__invokeMethod$0 , name___ASTTranslatorMIR0__invokeMethod$0
dq  __ASTTranslatorMIR0__executeNodeFor$0 , name___ASTTranslatorMIR0__executeNodeFor$0
dq  __ASTTranslatorMIR0__executeNodeForEach$0 , name___ASTTranslatorMIR0__executeNodeForEach$0
dq  __ASTTranslatorMIR0__executeNodeWhile$0 , name___ASTTranslatorMIR0__executeNodeWhile$0
dq  __ASTTranslatorMIR0__executeNodeIf$0 , name___ASTTranslatorMIR0__executeNodeIf$0
dq  __ASTTranslatorMIR0__declareFunction$0 , name___ASTTranslatorMIR0__declareFunction$0
dq  __ASTTranslatorMIR0__declareClass$0 , name___ASTTranslatorMIR0__declareClass$0
dq  __ASTTranslatorMIR0__emitFunctionBody$0 , name___ASTTranslatorMIR0__emitFunctionBody$0
dq  __ASTTranslatorMIR0__dropRetVal$0 , name___ASTTranslatorMIR0__dropRetVal$0
dq  __ASTTranslatorMIR0_run$0 , name___ASTTranslatorMIR0_run$0
dq  __Stack_constructor$0 , name___Stack_constructor$0
dq  __Stack_getItems$0 , name___Stack_getItems$0
dq  __Stack_push$0 , name___Stack_push$0
dq  __Stack_pop$0 , name___Stack_pop$0
dq  __Stack_over$0 , name___Stack_over$0
dq  __Stack_dup$0 , name___Stack_dup$0
dq  __Stack_eat$0 , name___Stack_eat$0
dq  __Stack_eatN$0 , name___Stack_eatN$0
dq  __Stack_setByAbsoluteIdx$0 , name___Stack_setByAbsoluteIdx$0
dq  __Stack_getByAbsoluteIdx$0 , name___Stack_getByAbsoluteIdx$0
dq  __Stack_peek$0 , name___Stack_peek$0
dq  __Stack_peekN$0 , name___Stack_peekN$0
dq  __ASTTranslatorMIR1_constructor$0 , name___ASTTranslatorMIR1_constructor$0
dq  __ASTTranslatorMIR1__emitOneItem$0 , name___ASTTranslatorMIR1__emitOneItem$0
dq  __ASTTranslatorMIR1_emitZeroArgsOpcode$0 , name___ASTTranslatorMIR1_emitZeroArgsOpcode$0
dq  __ASTTranslatorMIR1_emitTargetOnlyOpcode$0 , name___ASTTranslatorMIR1_emitTargetOnlyOpcode$0
dq  __ASTTranslatorMIR1_emitOneArgOpcode$0 , name___ASTTranslatorMIR1_emitOneArgOpcode$0
dq  __ASTTranslatorMIR1_emitTwoArgsOpcode$0 , name___ASTTranslatorMIR1_emitTwoArgsOpcode$0
dq  __ASTTranslatorMIR1_emitComment$0 , name___ASTTranslatorMIR1_emitComment$0
dq  __ASTTranslatorMIR1_emitLabel$0 , name___ASTTranslatorMIR1_emitLabel$0
dq  __ASTTranslatorMIR1_emitJmp$0 , name___ASTTranslatorMIR1_emitJmp$0
dq  __ASTTranslatorMIR1_emitJmpByTable$0 , name___ASTTranslatorMIR1_emitJmpByTable$0
dq  __ASTTranslatorMIR1_emitMoveVariantOpcode$0 , name___ASTTranslatorMIR1_emitMoveVariantOpcode$0
dq  __ASTTranslatorMIR1_popForRead$0 , name___ASTTranslatorMIR1_popForRead$0
dq  __ASTTranslatorMIR1_popForWrite$0 , name___ASTTranslatorMIR1_popForWrite$0
dq  __ASTTranslatorMIR1_push$0 , name___ASTTranslatorMIR1_push$0
dq  __ASTTranslatorMIR1_popOneArgAndEmitOpcode$0 , name___ASTTranslatorMIR1_popOneArgAndEmitOpcode$0
dq  __ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0 , name___ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0
dq  __ASTTranslatorMIR1_popParametersBeforeCall$0 , name___ASTTranslatorMIR1_popParametersBeforeCall$0
dq  __ASTTranslatorMIR1_emitProcBegin$0 , name___ASTTranslatorMIR1_emitProcBegin$0
dq  __ASTTranslatorMIR1_emitInitFrame$0 , name___ASTTranslatorMIR1_emitInitFrame$0
dq  __ASTTranslatorMIR1_emitProcEnd$0 , name___ASTTranslatorMIR1_emitProcEnd$0
dq  __ASTTranslatorMIR1_emitRet$0 , name___ASTTranslatorMIR1_emitRet$0
dq  __ASTTranslatorMIR1_emitMoveBackVariant$0 , name___ASTTranslatorMIR1_emitMoveBackVariant$0
dq  __ASTTranslatorMIR1__loadArgsVector$0 , name___ASTTranslatorMIR1__loadArgsVector$0
dq  __ASTTranslatorMIR1__loadArgsCount$0 , name___ASTTranslatorMIR1__loadArgsCount$0
dq  __ASTTranslatorMIR1__neg$0 , name___ASTTranslatorMIR1__neg$0
dq  __ASTTranslatorMIR1__add$0 , name___ASTTranslatorMIR1__add$0
dq  __ASTTranslatorMIR1__stringJoin$0 , name___ASTTranslatorMIR1__stringJoin$0
dq  __ASTTranslatorMIR1__sub$0 , name___ASTTranslatorMIR1__sub$0
dq  __ASTTranslatorMIR1__mul$0 , name___ASTTranslatorMIR1__mul$0
dq  __ASTTranslatorMIR1__div$0 , name___ASTTranslatorMIR1__div$0
dq  __ASTTranslatorMIR1__idiv$0 , name___ASTTranslatorMIR1__idiv$0
dq  __ASTTranslatorMIR1__loadArray$0 , name___ASTTranslatorMIR1__loadArray$0
dq  __ASTTranslatorMIR1__loadMap$0 , name___ASTTranslatorMIR1__loadMap$0
dq  __ASTTranslatorMIR1__loadNull$0 , name___ASTTranslatorMIR1__loadNull$0
dq  __ASTTranslatorMIR1__loadImm$0 , name___ASTTranslatorMIR1__loadImm$0
dq  __ASTTranslatorMIR1__loadImmAsVariant$0 , name___ASTTranslatorMIR1__loadImmAsVariant$0
dq  __ASTTranslatorMIR1__convert$0 , name___ASTTranslatorMIR1__convert$0
dq  __ASTTranslatorMIR1__compareEQ$0 , name___ASTTranslatorMIR1__compareEQ$0
dq  __ASTTranslatorMIR1__compareNEQ$0 , name___ASTTranslatorMIR1__compareNEQ$0
dq  __ASTTranslatorMIR1__compareLT$0 , name___ASTTranslatorMIR1__compareLT$0
dq  __ASTTranslatorMIR1__compareLE$0 , name___ASTTranslatorMIR1__compareLE$0
dq  __ASTTranslatorMIR1__compareGT$0 , name___ASTTranslatorMIR1__compareGT$0
dq  __ASTTranslatorMIR1__compareGE$0 , name___ASTTranslatorMIR1__compareGE$0
dq  __ASTTranslatorMIR1__loadVariable$0 , name___ASTTranslatorMIR1__loadVariable$0
dq  __ASTTranslatorMIR1__assign$0 , name___ASTTranslatorMIR1__assign$0
dq  __ASTTranslatorMIR1__call$0 , name___ASTTranslatorMIR1__call$0
dq  __ASTTranslatorMIR1__syscall$0 , name___ASTTranslatorMIR1__syscall$0
dq  __ASTTranslatorMIR1__callPrint$0 , name___ASTTranslatorMIR1__callPrint$0
dq  __ASTTranslatorMIR1__loadFromIndex$0 , name___ASTTranslatorMIR1__loadFromIndex$0
dq  __ASTTranslatorMIR1__loadFromKey$0 , name___ASTTranslatorMIR1__loadFromKey$0
dq  __ASTTranslatorMIR1__storeAtIndex$0 , name___ASTTranslatorMIR1__storeAtIndex$0
dq  __ASTTranslatorMIR1__storeAtKey$0 , name___ASTTranslatorMIR1__storeAtKey$0
dq  __ASTTranslatorMIR1__storeAtIndexAndDrop$0 , name___ASTTranslatorMIR1__storeAtIndexAndDrop$0
dq  __ASTTranslatorMIR1__storeAtKeyAndDrop$0 , name___ASTTranslatorMIR1__storeAtKeyAndDrop$0
dq  __ASTTranslatorMIR1__createObject$0 , name___ASTTranslatorMIR1__createObject$0
dq  __ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$0 , name___ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$0
dq  __ASTTranslatorMIR1__evaluateNodeLazyBoolOr$0 , name___ASTTranslatorMIR1__evaluateNodeLazyBoolOr$0
dq  __ASTTranslatorMIR1__invokeMethod$0 , name___ASTTranslatorMIR1__invokeMethod$0
dq  __ASTTranslatorMIR1__executeNodeFor$0 , name___ASTTranslatorMIR1__executeNodeFor$0
dq  __ASTTranslatorMIR1__executeNodeForEach$0 , name___ASTTranslatorMIR1__executeNodeForEach$0
dq  __ASTTranslatorMIR1__executeNodeWhile$0 , name___ASTTranslatorMIR1__executeNodeWhile$0
dq  __ASTTranslatorMIR1__executeNodeIf$0 , name___ASTTranslatorMIR1__executeNodeIf$0
dq  __ASTTranslatorMIR1__executeNodeSwitch$0 , name___ASTTranslatorMIR1__executeNodeSwitch$0
dq  __ASTTranslatorMIR1__declareFunction$0 , name___ASTTranslatorMIR1__declareFunction$0
dq  __ASTTranslatorMIR1__declareClass$0 , name___ASTTranslatorMIR1__declareClass$0
dq  __ASTTranslatorMIR1__emitFunctionBody$0 , name___ASTTranslatorMIR1__emitFunctionBody$0
dq  __ASTTranslatorMIR1__dropRetVal$0 , name___ASTTranslatorMIR1__dropRetVal$0
dq  __ASTTranslatorMIR1_run$0 , name___ASTTranslatorMIR1_run$0
dq  __ASTTranslatorMIR1_connectTo$0 , name___ASTTranslatorMIR1_connectTo$0
dq  __PipeAbstract_constructor$0 , name___PipeAbstract_constructor$0
dq  __PipeAbstract__emitOneItem$0 , name___PipeAbstract__emitOneItem$0
dq  __PipeAbstract__replaceLastItem$0 , name___PipeAbstract__replaceLastItem$0
dq  __PipeAbstract_connectTo$0 , name___PipeAbstract_connectTo$0
dq  __PipeAbstract_processOneItem$0 , name___PipeAbstract_processOneItem$0
dq  __PipeAbstract_processArrayOfItems$0 , name___PipeAbstract_processArrayOfItems$0
dq  __PipeAbstract_flush$0 , name___PipeAbstract_flush$0
dq  __MIRQuadCollector_constructor$0 , name___MIRQuadCollector_constructor$0
dq  __MIRQuadCollector__pad$0 , name___MIRQuadCollector__pad$0
dq  __MIRQuadCollector_processOneItem$0 , name___MIRQuadCollector_processOneItem$0
dq  __MIRQuadCollector_getQuads$0 , name___MIRQuadCollector_getQuads$0
dq  __MIRQuadCollector__printSymbolInfoRow$0 , name___MIRQuadCollector__printSymbolInfoRow$0
dq  __MIRQuadCollector__dumpFrameInfo$0 , name___MIRQuadCollector__dumpFrameInfo$0
dq  __MIRQuadCollector_printQuads$0 , name___MIRQuadCollector_printQuads$0
dq  __CodeGeneratorX64_constructor$0 , name___CodeGeneratorX64_constructor$0
dq  __CodeGeneratorX64_lea$0 , name___CodeGeneratorX64_lea$0
dq  __CodeGeneratorX64_push$0 , name___CodeGeneratorX64_push$0
dq  __CodeGeneratorX64_pop$0 , name___CodeGeneratorX64_pop$0
dq  __CodeGeneratorX64_mov$0 , name___CodeGeneratorX64_mov$0
dq  __CodeGeneratorX64_call$0 , name___CodeGeneratorX64_call$0
dq  __CodeGeneratorX64_call1$0 , name___CodeGeneratorX64_call1$0
dq  __CodeGeneratorX64_call2$0 , name___CodeGeneratorX64_call2$0
dq  __CodeGeneratorX64_call3$0 , name___CodeGeneratorX64_call3$0
dq  __CodeGeneratorX64_call3AndDestroy$0 , name___CodeGeneratorX64_call3AndDestroy$0
dq  __CodeGeneratorX64_variantMove$0 , name___CodeGeneratorX64_variantMove$0
dq  __CodeGeneratorX64_variantDestroy$0 , name___CodeGeneratorX64_variantDestroy$0
dq  __CodeGeneratorX64_pushParametersBeforeCall$0 , name___CodeGeneratorX64_pushParametersBeforeCall$0
dq  __CodeGeneratorX64__hash$0 , name___CodeGeneratorX64__hash$0
dq  __CodeGeneratorX64_emitConstant$0 , name___CodeGeneratorX64_emitConstant$0
dq  __CodeGeneratorX64_emitStringBufferHead$0 , name___CodeGeneratorX64_emitStringBufferHead$0
dq  __CodeGeneratorX64_emitStringBufferContent$0 , name___CodeGeneratorX64_emitStringBufferContent$0
dq  __CodeGeneratorX64_emitArrayBufferHead$0 , name___CodeGeneratorX64_emitArrayBufferHead$0
dq  __CodeGeneratorX64_emitArrayBufferContent$0 , name___CodeGeneratorX64_emitArrayBufferContent$0
dq  __CodeGeneratorX64__cmp_cc_int64$0 , name___CodeGeneratorX64__cmp_cc_int64$0
dq  __CodeGeneratorX64__cmp_cc_int32$0 , name___CodeGeneratorX64__cmp_cc_int32$0
dq  __CodeGeneratorX64__cmp_cc_float64$0 , name___CodeGeneratorX64__cmp_cc_float64$0
dq  __CodeGeneratorX64__jmp_if_cc_int64$0 , name___CodeGeneratorX64__jmp_if_cc_int64$0
dq  __CodeGeneratorX64__jmp_if_cc_int32$0 , name___CodeGeneratorX64__jmp_if_cc_int32$0
dq  __CodeGeneratorX64__jmp_if_cc_variant$0 , name___CodeGeneratorX64__jmp_if_cc_variant$0
dq  __CodeGeneratorX64__getSymbolType$0 , name___CodeGeneratorX64__getSymbolType$0
dq  __CodeGeneratorX64_run$0 , name___CodeGeneratorX64_run$0
dq  __MIRQuadOptimizer_constructor$0 , name___MIRQuadOptimizer_constructor$0
dq  __MIRQuadOptimizer__decreaseReadAndWriteHits$0 , name___MIRQuadOptimizer__decreaseReadAndWriteHits$0
dq  __MIRQuadOptimizer_processOneItem$0 , name___MIRQuadOptimizer_processOneItem$0
dq  __VMachineStackObject_constructor$0 , name___VMachineStackObject_constructor$0
dq  __VMachineStack_constructor$0 , name___VMachineStack_constructor$0
dq  __VMachineStack_loadCode$0 , name___VMachineStack_loadCode$0
dq  __VMachineStack__call$0 , name___VMachineStack__call$0
dq  __VMachineStack_run$0 , name___VMachineStack_run$0
dq  __VMachineStack_dumpCode$0 , name___VMachineStack_dumpCode$0
dq  BadUsageError , name_BadUsageError
dq  start , name_start
dq endOfCodeSection, name_endOfCodeSection
SymbolTableEnd:
dq 0, 0

SymbolTableNames:
include 'SymbolTableCommonNames.asm'
name___AST_constructor$0 db '__AST_constructor$0', 0
name___AST__printTreeInternal$0 db '__AST__printTreeInternal$0', 0
name___AST_printTree$0 db '__AST_printTree$0', 0
name___Parser_constructor$0 db '__Parser_constructor$0', 0
name___Parser__handleError$0 db '__Parser__handleError$0', 0
name___Parser__parseInternal$0 db '__Parser__parseInternal$0', 0
name___Parser_parseFile$0 db '__Parser_parseFile$0', 0
name___Parser_parseText$0 db '__Parser_parseText$0', 0
name_AST_GetNextId db 'AST_GetNextId', 0
name_AST_CreateNodeInteger db 'AST_CreateNodeInteger', 0
name_AST_CreateNodeString db 'AST_CreateNodeString', 0
name_AST_GetOpcodeAsText db 'AST_GetOpcodeAsText', 0
name_AST_GetOpcodeAsShortText db 'AST_GetOpcodeAsShortText', 0
name_AST_InvertBoolean db 'AST_InvertBoolean', 0
name_AST_IsVar db 'AST_IsVar', 0
name_AST_IsImm db 'AST_IsImm', 0
name_AST_IsPrimitiveImm db 'AST_IsPrimitiveImm', 0
name_AST_IsImmWithValue db 'AST_IsImmWithValue', 0
name_AST_IsEmpty db 'AST_IsEmpty', 0
name_AST_IsImmOrVar db 'AST_IsImmOrVar', 0
name_AST_HasSideEffects db 'AST_HasSideEffects', 0
name_AST_GetHashInternal db 'AST_GetHashInternal', 0
name_AST_PrefetchHash db 'AST_PrefetchHash', 0
name_AST_GetHash db 'AST_GetHash', 0
name_AST_GetHashForCodeComparison db 'AST_GetHashForCodeComparison', 0
name_AST_IsDataNode db 'AST_IsDataNode', 0
name_AST_ConvertDataTypeToText db 'AST_ConvertDataTypeToText', 0
name_AST_ConvertDataTypeToMIR db 'AST_ConvertDataTypeToMIR', 0
name_AST_GetDataType db 'AST_GetDataType', 0
name_AST_TypeCast db 'AST_TypeCast', 0
name_AST_GetTopNodeInBlock db 'AST_GetTopNodeInBlock', 0
name_AST_GetParentBlock db 'AST_GetParentBlock', 0
name_AST_IsOkAsBox db 'AST_IsOkAsBox', 0
name_AST_CloneNode db 'AST_CloneNode', 0
name_SymbolTable_GetNextId db 'SymbolTable_GetNextId', 0
name___SymbolTable_constructor$0 db '__SymbolTable_constructor$0', 0
name___SymbolTable__debug$0 db '__SymbolTable__debug$0', 0
name___SymbolTable__error$0 db '__SymbolTable__error$0', 0
name___SymbolTable__errorTypeMismatch$0 db '__SymbolTable__errorTypeMismatch$0', 0
name___SymbolTable__errorIfUsedAsNumber$0 db '__SymbolTable__errorIfUsedAsNumber$0', 0
name___SymbolTable_getDeep$0 db '__SymbolTable_getDeep$0', 0
name___SymbolTable_exportSymbols$0 db '__SymbolTable_exportSymbols$0', 0
name___SymbolTable_insert$0 db '__SymbolTable_insert$0', 0
name___SymbolTable_remove$0 db '__SymbolTable_remove$0', 0
name___SymbolTable_importExternalVariable$0 db '__SymbolTable_importExternalVariable$0', 0
name___SymbolTable_insertGlobal$0 db '__SymbolTable_insertGlobal$0', 0
name___SymbolTable__lookupInternal$0 db '__SymbolTable__lookupInternal$0', 0
name___SymbolTable_lookup$0 db '__SymbolTable_lookup$0', 0
name___SymbolTable_lookupForRead$0 db '__SymbolTable_lookupForRead$0', 0
name___SymbolTable_lookupForCall$0 db '__SymbolTable_lookupForCall$0', 0
name___SymbolTable_lookupForWrite$0 db '__SymbolTable_lookupForWrite$0', 0
name___SymbolTable_lookupForReadAndWrite$0 db '__SymbolTable_lookupForReadAndWrite$0', 0
name___SymbolTable_lookupForWriteOrInsert$0 db '__SymbolTable_lookupForWriteOrInsert$0', 0
name___SymbolTable_lookupGlobal$0 db '__SymbolTable_lookupGlobal$0', 0
name___SymbolTable_decreaseReadHits$0 db '__SymbolTable_decreaseReadHits$0', 0
name___SymbolTable_decreaseWriteHits$0 db '__SymbolTable_decreaseWriteHits$0', 0
name___SymbolTable_isset$0 db '__SymbolTable_isset$0', 0
name___SymbolTable_useAsArray$0 db '__SymbolTable_useAsArray$0', 0
name___SymbolTable_useAsArrayOrString$0 db '__SymbolTable_useAsArrayOrString$0', 0
name___SymbolTable_useAsMap$0 db '__SymbolTable_useAsMap$0', 0
name___SymbolTable_useAsIndex$0 db '__SymbolTable_useAsIndex$0', 0
name___SymbolTable_useAsInteger$0 db '__SymbolTable_useAsInteger$0', 0
name___SymbolTable_useAsFloat$0 db '__SymbolTable_useAsFloat$0', 0
name___SymbolTable_useAsString$0 db '__SymbolTable_useAsString$0', 0
name___SymbolTable_useAsKey$0 db '__SymbolTable_useAsKey$0', 0
name___SymbolTable_useAsObject$0 db '__SymbolTable_useAsObject$0', 0
name___SymbolTable_useAsMapOrObject$0 db '__SymbolTable_useAsMapOrObject$0', 0
name___SymbolTable_useAsTypeofArg$0 db '__SymbolTable_useAsTypeofArg$0', 0
name___SymbolTable_useAsNumber$0 db '__SymbolTable_useAsNumber$0', 0
name___SymbolTable_enterScope$0 db '__SymbolTable_enterScope$0', 0
name___SymbolTable_enterScopeForLoop$0 db '__SymbolTable_enterScopeForLoop$0', 0
name___SymbolTable_enterScopeForProcedure$0 db '__SymbolTable_enterScopeForProcedure$0', 0
name___SymbolTable_leaveScope$0 db '__SymbolTable_leaveScope$0', 0
name___SymbolTable_insertFunction$0 db '__SymbolTable_insertFunction$0', 0
name___SymbolTable_lookupFunction$0 db '__SymbolTable_lookupFunction$0', 0
name___SymbolTable_getCurrentFunctionName$0 db '__SymbolTable_getCurrentFunctionName$0', 0
name___SymbolTable_insertClass$0 db '__SymbolTable_insertClass$0', 0
name___SymbolTable_lookupClass$0 db '__SymbolTable_lookupClass$0', 0
name___SymbolTable_insertLocal$0 db '__SymbolTable_insertLocal$0', 0
name___SymbolTable_importGlobal$0 db '__SymbolTable_importGlobal$0', 0
name___SymbolTable_insertParam$0 db '__SymbolTable_insertParam$0', 0
name___SymbolTable_insertRetVal$0 db '__SymbolTable_insertRetVal$0', 0
name___SymbolTable_insertConst$0 db '__SymbolTable_insertConst$0', 0
name___SymbolTable_insertLiteral$0 db '__SymbolTable_insertLiteral$0', 0
name___SymbolTable_createConstFromValue$0 db '__SymbolTable_createConstFromValue$0', 0
name___SymbolTable_assignValue$0 db '__SymbolTable_assignValue$0', 0
name___SymbolTable_assignNode$0 db '__SymbolTable_assignNode$0', 0
name___SymbolTable_assignType$0 db '__SymbolTable_assignType$0', 0
name___SymbolTable_freezeType$0 db '__SymbolTable_freezeType$0', 0
name___SymbolTable_assignTypeAndFreeze$0 db '__SymbolTable_assignTypeAndFreeze$0', 0
name___SymbolTable_assignMirType$0 db '__SymbolTable_assignMirType$0', 0
name___SymbolTable_removeUnusedSymbols$0 db '__SymbolTable_removeUnusedSymbols$0', 0
name___SymbolTable_createLabel$0 db '__SymbolTable_createLabel$0', 0
name___SymbolTable_insertJmpTable$0 db '__SymbolTable_insertJmpTable$0', 0
name___SymbolTable_getTempVar$0 db '__SymbolTable_getTempVar$0', 0
name___SymbolTable_getTempVarForWrite$0 db '__SymbolTable_getTempVarForWrite$0', 0
name___SymbolTable_getTempVarForReadAndWrite$0 db '__SymbolTable_getTempVarForReadAndWrite$0', 0
name___SymbolTable_releaseTempVar$0 db '__SymbolTable_releaseTempVar$0', 0
name___ASTModuleResolver_constructor$0 db '__ASTModuleResolver_constructor$0', 0
name___ASTModuleResolver_resolveImports$0 db '__ASTModuleResolver_resolveImports$0', 0
name___ASTSymbolsCollector_constructor$0 db '__ASTSymbolsCollector_constructor$0', 0
name___ASTSymbolsCollector__debug$0 db '__ASTSymbolsCollector__debug$0', 0
name___ASTSymbolsCollector__collectSymbolsFromLeftNode$0 db '__ASTSymbolsCollector__collectSymbolsFromLeftNode$0', 0
name___ASTSymbolsCollector__collectSymbolsFromRightNode$0 db '__ASTSymbolsCollector__collectSymbolsFromRightNode$0', 0
name___ASTSymbolsCollector__updateVariableSymbolInfo$0 db '__ASTSymbolsCollector__updateVariableSymbolInfo$0', 0
name___ASTSymbolsCollector__collectSymbols$0 db '__ASTSymbolsCollector__collectSymbols$0', 0
name___ASTSymbolsCollector_buildSymbolTable$0 db '__ASTSymbolsCollector_buildSymbolTable$0', 0
name___ASTEvaluator_constructor$0 db '__ASTEvaluator_constructor$0', 0
name___ASTEvaluator__debug$0 db '__ASTEvaluator__debug$0', 0
name___ASTEvaluator__assignValue$0 db '__ASTEvaluator__assignValue$0', 0
name___ASTEvaluator__getValue$0 db '__ASTEvaluator__getValue$0', 0
name___ASTEvaluator__mergeValues$0 db '__ASTEvaluator__mergeValues$0', 0
name___ASTEvaluator__processConditionalNode$0 db '__ASTEvaluator__processConditionalNode$0', 0
name___ASTEvaluator__processTwoAlternativeNodes$0 db '__ASTEvaluator__processTwoAlternativeNodes$0', 0
name___ASTEvaluator__getArrayOfValueNodes$0 db '__ASTEvaluator__getArrayOfValueNodes$0', 0
name___ASTEvaluator__processNode$0 db '__ASTEvaluator__processNode$0', 0
name___ASTEvaluator_processNode$0 db '__ASTEvaluator_processNode$0', 0
name___ASTPreprocessor_constructor$0 db '__ASTPreprocessor_constructor$0', 0
name___ASTPreprocessor__debug$0 db '__ASTPreprocessor__debug$0', 0
name___ASTPreprocessor__processNode$0 db '__ASTPreprocessor__processNode$0', 0
name___ASTPreprocessor_processNode$0 db '__ASTPreprocessor_processNode$0', 0
name___ASTOptimizerConstantFolding_constructor$0 db '__ASTOptimizerConstantFolding_constructor$0', 0
name___ASTOptimizerConstantFolding__debug$0 db '__ASTOptimizerConstantFolding__debug$0', 0
name___ASTOptimizerConstantFolding__setToImm$0 db '__ASTOptimizerConstantFolding__setToImm$0', 0
name___ASTOptimizerConstantFolding__processNodeArray$0 db '__ASTOptimizerConstantFolding__processNodeArray$0', 0
name___ASTOptimizerConstantFolding__processNodeMap$0 db '__ASTOptimizerConstantFolding__processNodeMap$0', 0
name___ASTOptimizerConstantFolding_processNode$0 db '__ASTOptimizerConstantFolding_processNode$0', 0
name___ASTOptimizerConstantFolding_processNodeUntilNotChanged$0 db '__ASTOptimizerConstantFolding_processNodeUntilNotChanged$0', 0
name___ASTOptimizerCSE_constructor$0 db '__ASTOptimizerCSE_constructor$0', 0
name___ASTOptimizerCSE__getNextId$0 db '__ASTOptimizerCSE__getNextId$0', 0
name___ASTOptimizerCSE__createNodeVariable$0 db '__ASTOptimizerCSE__createNodeVariable$0', 0
name___ASTOptimizerCSE__debug$0 db '__ASTOptimizerCSE__debug$0', 0
name___ASTOptimizerCSE__processInnerNode$0 db '__ASTOptimizerCSE__processInnerNode$0', 0
name___ASTOptimizerCSE__processNode$0 db '__ASTOptimizerCSE__processNode$0', 0
name___ASTOptimizerCSE_processNode$0 db '__ASTOptimizerCSE_processNode$0', 0
name___ASTOptimizerDeadCodeRemove_constructor$0 db '__ASTOptimizerDeadCodeRemove_constructor$0', 0
name___ASTOptimizerDeadCodeRemove__debug$0 db '__ASTOptimizerDeadCodeRemove__debug$0', 0
name___ASTOptimizerDeadCodeRemove__removeNode$0 db '__ASTOptimizerDeadCodeRemove__removeNode$0', 0
name___ASTOptimizerDeadCodeRemove__moveNode$0 db '__ASTOptimizerDeadCodeRemove__moveNode$0', 0
name___ASTOptimizerDeadCodeRemove__processChildNodes$0 db '__ASTOptimizerDeadCodeRemove__processChildNodes$0', 0
name___ASTOptimizerDeadCodeRemove__processNode$0 db '__ASTOptimizerDeadCodeRemove__processNode$0', 0
name___ASTOptimizerDeadCodeRemove_processNode$0 db '__ASTOptimizerDeadCodeRemove_processNode$0', 0
name___ASTOptimizerVCall_constructor$0 db '__ASTOptimizerVCall_constructor$0', 0
name___ASTOptimizerVCall__debug$0 db '__ASTOptimizerVCall__debug$0', 0
name___ASTOptimizerVCall__processNode$0 db '__ASTOptimizerVCall__processNode$0', 0
name___ASTOptimizerVCall_processNode$0 db '__ASTOptimizerVCall_processNode$0', 0
name___ASTOptimizerIf_constructor$0 db '__ASTOptimizerIf_constructor$0', 0
name___ASTOptimizerIf__debug$0 db '__ASTOptimizerIf__debug$0', 0
name___ASTOptimizerIf__processNode$0 db '__ASTOptimizerIf__processNode$0', 0
name___ASTOptimizerIf_processNode$0 db '__ASTOptimizerIf_processNode$0', 0
name___ASTOptimizerInline_constructor$0 db '__ASTOptimizerInline_constructor$0', 0
name___ASTOptimizerInline__debug$0 db '__ASTOptimizerInline__debug$0', 0
name___ASTOptimizerInline__resolveParamsForInline$0 db '__ASTOptimizerInline__resolveParamsForInline$0', 0
name___ASTOptimizerInline__injectParamInit$0 db '__ASTOptimizerInline__injectParamInit$0', 0
name___ASTOptimizerInline__injectFunctionBody$0 db '__ASTOptimizerInline__injectFunctionBody$0', 0
name___ASTOptimizerInline__processNode_injectInlineFunctions$0 db '__ASTOptimizerInline__processNode_injectInlineFunctions$0', 0
name___ASTOptimizerInline__processNode$0 db '__ASTOptimizerInline__processNode$0', 0
name___ASTOptimizerInline_processNode$0 db '__ASTOptimizerInline_processNode$0', 0
name___ASTTypeCast_constructor$0 db '__ASTTypeCast_constructor$0', 0
name___ASTTypeCast__debug$0 db '__ASTTypeCast__debug$0', 0
name___ASTTypeCast__processNode$0 db '__ASTTypeCast__processNode$0', 0
name___ASTTypeCast_processNode$0 db '__ASTTypeCast_processNode$0', 0
name___MIRCode_constructor$0 db '__MIRCode_constructor$0', 0
name___MIRCode_beginProc$0 db '__MIRCode_beginProc$0', 0
name___MIRCode_endProc$0 db '__MIRCode_endProc$0', 0
name___MIRCode_resolveLabel$0 db '__MIRCode_resolveLabel$0', 0
name___MIRCode__resolveJmps$0 db '__MIRCode__resolveJmps$0', 0
name___MIRCode_comment$0 db '__MIRCode_comment$0', 0
name___MIRCode_push0$0 db '__MIRCode_push0$0', 0
name___MIRCode_push1$0 db '__MIRCode_push1$0', 0
name___MIRCode_push2$0 db '__MIRCode_push2$0', 0
name___MIRCode_push3$0 db '__MIRCode_push3$0', 0
name___MIRCode_nop$0 db '__MIRCode_nop$0', 0
name___MIRCode_neg$0 db '__MIRCode_neg$0', 0
name___MIRCode_add$0 db '__MIRCode_add$0', 0
name___MIRCode_sub$0 db '__MIRCode_sub$0', 0
name___MIRCode_mul$0 db '__MIRCode_mul$0', 0
name___MIRCode_div$0 db '__MIRCode_div$0', 0
name___MIRCode_idiv$0 db '__MIRCode_idiv$0', 0
name___MIRCode_stringJoin$0 db '__MIRCode_stringJoin$0', 0
name___MIRCode_loadNull$0 db '__MIRCode_loadNull$0', 0
name___MIRCode_loadArray$0 db '__MIRCode_loadArray$0', 0
name___MIRCode_loadMap$0 db '__MIRCode_loadMap$0', 0
name___MIRCode_loadImm$0 db '__MIRCode_loadImm$0', 0
name___MIRCode_cmpEQ$0 db '__MIRCode_cmpEQ$0', 0
name___MIRCode_cmpNEQ$0 db '__MIRCode_cmpNEQ$0', 0
name___MIRCode_cmpGT$0 db '__MIRCode_cmpGT$0', 0
name___MIRCode_cmpGE$0 db '__MIRCode_cmpGE$0', 0
name___MIRCode_cmpLT$0 db '__MIRCode_cmpLT$0', 0
name___MIRCode_cmpLE$0 db '__MIRCode_cmpLE$0', 0
name___MIRCode_loadLocal$0 db '__MIRCode_loadLocal$0', 0
name___MIRCode_loadParamN$0 db '__MIRCode_loadParamN$0', 0
name___MIRCode_loadGlobal$0 db '__MIRCode_loadGlobal$0', 0
name___MIRCode_loadRetVal$0 db '__MIRCode_loadRetVal$0', 0
name___MIRCode_loadFromIndex$0 db '__MIRCode_loadFromIndex$0', 0
name___MIRCode_loadFromKey$0 db '__MIRCode_loadFromKey$0', 0
name___MIRCode_allocateLocalId$0 db '__MIRCode_allocateLocalId$0', 0
name___MIRCode_storeLocal$0 db '__MIRCode_storeLocal$0', 0
name___MIRCode_storeParamN$0 db '__MIRCode_storeParamN$0', 0
name___MIRCode_storeGlobal$0 db '__MIRCode_storeGlobal$0', 0
name___MIRCode_storeRetVal$0 db '__MIRCode_storeRetVal$0', 0
name___MIRCode_storeAtIndex$0 db '__MIRCode_storeAtIndex$0', 0
name___MIRCode_storeAtKey$0 db '__MIRCode_storeAtKey$0', 0
name___MIRCode_moveBack$0 db '__MIRCode_moveBack$0', 0
name___MIRCode_drop$0 db '__MIRCode_drop$0', 0
name___MIRCode_dropN$0 db '__MIRCode_dropN$0', 0
name___MIRCode_dup$0 db '__MIRCode_dup$0', 0
name___MIRCode_over$0 db '__MIRCode_over$0', 0
name___MIRCode_loadArgc$0 db '__MIRCode_loadArgc$0', 0
name___MIRCode_loadArgv$0 db '__MIRCode_loadArgv$0', 0
name___MIRCode_createObject$0 db '__MIRCode_createObject$0', 0
name___MIRCode__jmpInternal$0 db '__MIRCode__jmpInternal$0', 0
name___MIRCode_jmp$0 db '__MIRCode_jmp$0', 0
name___MIRCode_jmpIfTrue$0 db '__MIRCode_jmpIfTrue$0', 0
name___MIRCode_jmpIfFalse$0 db '__MIRCode_jmpIfFalse$0', 0
name___MIRCode_ret$0 db '__MIRCode_ret$0', 0
name___MIRCode_innerRet$0 db '__MIRCode_innerRet$0', 0
name___MIRCode_call$0 db '__MIRCode_call$0', 0
name___MIRCode_vcall$0 db '__MIRCode_vcall$0', 0
name___MIRCode_callPrint$0 db '__MIRCode_callPrint$0', 0
name___MIRCode_initFrame$0 db '__MIRCode_initFrame$0', 0
name___MIRCode_createLabel$0 db '__MIRCode_createLabel$0', 0
name___MIRCode_emitLabel$0 db '__MIRCode_emitLabel$0', 0
name___MIRCode_createAndEmitLabel$0 db '__MIRCode_createAndEmitLabel$0', 0
name___MIRCode_createMethod$0 db '__MIRCode_createMethod$0', 0
name___MIRCode_createClass$0 db '__MIRCode_createClass$0', 0
name___MIRCode_getClassProtoById$0 db '__MIRCode_getClassProtoById$0', 0
name___MIRCode_retValGuard$0 db '__MIRCode_retValGuard$0', 0
name___MIRCode_forEachIndexes$0 db '__MIRCode_forEachIndexes$0', 0
name___MIRCode_forEachKeys$0 db '__MIRCode_forEachKeys$0', 0
name___MIRCode_syscall$0 db '__MIRCode_syscall$0', 0
name___AppMold_constructor$0 db '__AppMold_constructor$0', 0
name___AppMold_clearLogContext$0 db '__AppMold_clearLogContext$0', 0
name___AppMold_setLogContext$0 db '__AppMold_setLogContext$0', 0
name___AppMold_logDebug$0 db '__AppMold_logDebug$0', 0
name___AppMold_logError$0 db '__AppMold_logError$0', 0
name___AppMold_getMir1Code$0 db '__AppMold_getMir1Code$0', 0
name___AppMold_getSymbolTable$0 db '__AppMold_getSymbolTable$0', 0
name___AppMold_getAstSymbolsCollector$0 db '__AppMold_getAstSymbolsCollector$0', 0
name___AppMold_getAstOptimizerConstantFolding$0 db '__AppMold_getAstOptimizerConstantFolding$0', 0
name___AppMold_getAstPreprocessor$0 db '__AppMold_getAstPreprocessor$0', 0
name___AppMold_getAstEvaluator$0 db '__AppMold_getAstEvaluator$0', 0
name___AppMold_getAstOptimizerCSE$0 db '__AppMold_getAstOptimizerCSE$0', 0
name___AppMold_getAstOptimizerDeadCodeRemove$0 db '__AppMold_getAstOptimizerDeadCodeRemove$0', 0
name___AppMold_getAstOptimizerVCall$0 db '__AppMold_getAstOptimizerVCall$0', 0
name___AppMold_getAstOptimizerIf$0 db '__AppMold_getAstOptimizerIf$0', 0
name___AppMold_getAstOptimizerInline$0 db '__AppMold_getAstOptimizerInline$0', 0
name___AppMold_getAstModuleResolver$0 db '__AppMold_getAstModuleResolver$0', 0
name___AppMold_getAstTypeCast$0 db '__AppMold_getAstTypeCast$0', 0
name___ASTPrinterText__printNode_twoArgsOp$0 db '__ASTPrinterText__printNode_twoArgsOp$0', 0
name___ASTPrinterText__printNode_codeBlock$0 db '__ASTPrinterText__printNode_codeBlock$0', 0
name___ASTPrinterText__printNode_paramsList$0 db '__ASTPrinterText__printNode_paramsList$0', 0
name___ASTPrinterText__printNode$0 db '__ASTPrinterText__printNode$0', 0
name___ASTPrinterText_printNode$0 db '__ASTPrinterText_printNode$0', 0
name___ASTPrinterHtml__printSymbolTable$0 db '__ASTPrinterHtml__printSymbolTable$0', 0
name___ASTPrinterHtml__printNode$0 db '__ASTPrinterHtml__printNode$0', 0
name___ASTPrinterHtml_printNode$0 db '__ASTPrinterHtml_printNode$0', 0
name___ASTTranslator_constructor$0 db '__ASTTranslator_constructor$0', 0
name___ASTTranslator__debug$0 db '__ASTTranslator__debug$0', 0
name___ASTTranslator__error$0 db '__ASTTranslator__error$0', 0
name___ASTTranslator__loadArgsVector$0 db '__ASTTranslator__loadArgsVector$0', 0
name___ASTTranslator__loadArgsCount$0 db '__ASTTranslator__loadArgsCount$0', 0
name___ASTTranslator__syscall$0 db '__ASTTranslator__syscall$0', 0
name___ASTTranslator__loadArray$0 db '__ASTTranslator__loadArray$0', 0
name___ASTTranslator__loadMap$0 db '__ASTTranslator__loadMap$0', 0
name___ASTTranslator__loadNull$0 db '__ASTTranslator__loadNull$0', 0
name___ASTTranslator__loadImm$0 db '__ASTTranslator__loadImm$0', 0
name___ASTTranslator__loadImmAsVariant$0 db '__ASTTranslator__loadImmAsVariant$0', 0
name___ASTTranslator__loadVariable$0 db '__ASTTranslator__loadVariable$0', 0
name___ASTTranslator__call$0 db '__ASTTranslator__call$0', 0
name___ASTTranslator__invokeMethod$0 db '__ASTTranslator__invokeMethod$0', 0
name___ASTTranslator__callPrint$0 db '__ASTTranslator__callPrint$0', 0
name___ASTTranslator__neg$0 db '__ASTTranslator__neg$0', 0
name___ASTTranslator__add$0 db '__ASTTranslator__add$0', 0
name___ASTTranslator__stringJoin$0 db '__ASTTranslator__stringJoin$0', 0
name___ASTTranslator__sub$0 db '__ASTTranslator__sub$0', 0
name___ASTTranslator__mul$0 db '__ASTTranslator__mul$0', 0
name___ASTTranslator__div$0 db '__ASTTranslator__div$0', 0
name___ASTTranslator__idiv$0 db '__ASTTranslator__idiv$0', 0
name___ASTTranslator__compareEQ$0 db '__ASTTranslator__compareEQ$0', 0
name___ASTTranslator__compareNEQ$0 db '__ASTTranslator__compareNEQ$0', 0
name___ASTTranslator__compareLT$0 db '__ASTTranslator__compareLT$0', 0
name___ASTTranslator__compareLE$0 db '__ASTTranslator__compareLE$0', 0
name___ASTTranslator__compareGT$0 db '__ASTTranslator__compareGT$0', 0
name___ASTTranslator__compareGE$0 db '__ASTTranslator__compareGE$0', 0
name___ASTTranslator__boolAnd$0 db '__ASTTranslator__boolAnd$0', 0
name___ASTTranslator__boolOr$0 db '__ASTTranslator__boolOr$0', 0
name___ASTTranslator__loadFromIndex$0 db '__ASTTranslator__loadFromIndex$0', 0
name___ASTTranslator__loadFromKey$0 db '__ASTTranslator__loadFromKey$0', 0
name___ASTTranslator__storeAtIndex$0 db '__ASTTranslator__storeAtIndex$0', 0
name___ASTTranslator__storeAtKey$0 db '__ASTTranslator__storeAtKey$0', 0
name___ASTTranslator__storeAtIndexAndDrop$0 db '__ASTTranslator__storeAtIndexAndDrop$0', 0
name___ASTTranslator__storeAtKeyAndDrop$0 db '__ASTTranslator__storeAtKeyAndDrop$0', 0
name___ASTTranslator__createObject$0 db '__ASTTranslator__createObject$0', 0
name___ASTTranslator__convert$0 db '__ASTTranslator__convert$0', 0
name___ASTTranslator__emitFunctionBody$0 db '__ASTTranslator__emitFunctionBody$0', 0
name___ASTTranslator__dropRetVal$0 db '__ASTTranslator__dropRetVal$0', 0
name___ASTTranslator__declareFunction$0 db '__ASTTranslator__declareFunction$0', 0
name___ASTTranslator__declareClass$0 db '__ASTTranslator__declareClass$0', 0
name___ASTTranslator__declareVariable$0 db '__ASTTranslator__declareVariable$0', 0
name___ASTTranslator__assign$0 db '__ASTTranslator__assign$0', 0
name___ASTTranslator__evaluateNodeLazyBoolAnd$0 db '__ASTTranslator__evaluateNodeLazyBoolAnd$0', 0
name___ASTTranslator__evaluateNodeLazyBoolOr$0 db '__ASTTranslator__evaluateNodeLazyBoolOr$0', 0
name___ASTTranslator__executeNodeFor$0 db '__ASTTranslator__executeNodeFor$0', 0
name___ASTTranslator__executeNodeWhile$0 db '__ASTTranslator__executeNodeWhile$0', 0
name___ASTTranslator__executeNodeIf$0 db '__ASTTranslator__executeNodeIf$0', 0
name___ASTTranslator__executeNodeSwitch$0 db '__ASTTranslator__executeNodeSwitch$0', 0
name___ASTTranslator__declareExternalFunction$0 db '__ASTTranslator__declareExternalFunction$0', 0
name___ASTTranslator__getTempVar$0 db '__ASTTranslator__getTempVar$0', 0
name___ASTTranslator__releaseTempVar$0 db '__ASTTranslator__releaseTempVar$0', 0
name___ASTTranslator__enterScope$0 db '__ASTTranslator__enterScope$0', 0
name___ASTTranslator__leaveScope$0 db '__ASTTranslator__leaveScope$0', 0
name___ASTTranslator__verifyNumberOfParameters$0 db '__ASTTranslator__verifyNumberOfParameters$0', 0
name___ASTTranslator__emitFunction$0 db '__ASTTranslator__emitFunction$0', 0
name___ASTTranslator__emitGlobals$0 db '__ASTTranslator__emitGlobals$0', 0
name___ASTTranslator__callSuper$0 db '__ASTTranslator__callSuper$0', 0
name___ASTTranslator__getClassProto$0 db '__ASTTranslator__getClassProto$0', 0
name___ASTTranslator__isset$0 db '__ASTTranslator__isset$0', 0
name___ASTTranslator__importGlobal$0 db '__ASTTranslator__importGlobal$0', 0
name___ASTTranslator__declareVariableIfNotSet$0 db '__ASTTranslator__declareVariableIfNotSet$0', 0
name___ASTTranslator__declareAndAssign$0 db '__ASTTranslator__declareAndAssign$0', 0
name___ASTTranslator__evaluateNode$0 db '__ASTTranslator__evaluateNode$0', 0
name___ASTTranslator__evaluateNodeCall$0 db '__ASTTranslator__evaluateNodeCall$0', 0
name___ASTTranslator__evaluateNodeInvokeMethod$0 db '__ASTTranslator__evaluateNodeInvokeMethod$0', 0
name___ASTTranslator__executeNode$0 db '__ASTTranslator__executeNode$0', 0
name___ASTTranslator_run$0 db '__ASTTranslator_run$0', 0
name___ASTTranslatorMIR0_constructor$0 db '__ASTTranslatorMIR0_constructor$0', 0
name___ASTTranslatorMIR0__loadArgsVector$0 db '__ASTTranslatorMIR0__loadArgsVector$0', 0
name___ASTTranslatorMIR0__loadArgsCount$0 db '__ASTTranslatorMIR0__loadArgsCount$0', 0
name___ASTTranslatorMIR0__neg$0 db '__ASTTranslatorMIR0__neg$0', 0
name___ASTTranslatorMIR0__add$0 db '__ASTTranslatorMIR0__add$0', 0
name___ASTTranslatorMIR0__stringJoin$0 db '__ASTTranslatorMIR0__stringJoin$0', 0
name___ASTTranslatorMIR0__sub$0 db '__ASTTranslatorMIR0__sub$0', 0
name___ASTTranslatorMIR0__mul$0 db '__ASTTranslatorMIR0__mul$0', 0
name___ASTTranslatorMIR0__div$0 db '__ASTTranslatorMIR0__div$0', 0
name___ASTTranslatorMIR0__idiv$0 db '__ASTTranslatorMIR0__idiv$0', 0
name___ASTTranslatorMIR0__loadArray$0 db '__ASTTranslatorMIR0__loadArray$0', 0
name___ASTTranslatorMIR0__loadMap$0 db '__ASTTranslatorMIR0__loadMap$0', 0
name___ASTTranslatorMIR0__loadNull$0 db '__ASTTranslatorMIR0__loadNull$0', 0
name___ASTTranslatorMIR0__loadImm$0 db '__ASTTranslatorMIR0__loadImm$0', 0
name___ASTTranslatorMIR0__loadImmAsVariant$0 db '__ASTTranslatorMIR0__loadImmAsVariant$0', 0
name___ASTTranslatorMIR0__convert$0 db '__ASTTranslatorMIR0__convert$0', 0
name___ASTTranslatorMIR0__compareEQ$0 db '__ASTTranslatorMIR0__compareEQ$0', 0
name___ASTTranslatorMIR0__compareNEQ$0 db '__ASTTranslatorMIR0__compareNEQ$0', 0
name___ASTTranslatorMIR0__compareLT$0 db '__ASTTranslatorMIR0__compareLT$0', 0
name___ASTTranslatorMIR0__compareLE$0 db '__ASTTranslatorMIR0__compareLE$0', 0
name___ASTTranslatorMIR0__compareGT$0 db '__ASTTranslatorMIR0__compareGT$0', 0
name___ASTTranslatorMIR0__compareGE$0 db '__ASTTranslatorMIR0__compareGE$0', 0
name___ASTTranslatorMIR0__loadVariable$0 db '__ASTTranslatorMIR0__loadVariable$0', 0
name___ASTTranslatorMIR0__assign$0 db '__ASTTranslatorMIR0__assign$0', 0
name___ASTTranslatorMIR0__syscall$0 db '__ASTTranslatorMIR0__syscall$0', 0
name___ASTTranslatorMIR0__call$0 db '__ASTTranslatorMIR0__call$0', 0
name___ASTTranslatorMIR0__callPrint$0 db '__ASTTranslatorMIR0__callPrint$0', 0
name___ASTTranslatorMIR0__loadFromIndex$0 db '__ASTTranslatorMIR0__loadFromIndex$0', 0
name___ASTTranslatorMIR0__loadFromKey$0 db '__ASTTranslatorMIR0__loadFromKey$0', 0
name___ASTTranslatorMIR0__storeAtIndex$0 db '__ASTTranslatorMIR0__storeAtIndex$0', 0
name___ASTTranslatorMIR0__storeAtKey$0 db '__ASTTranslatorMIR0__storeAtKey$0', 0
name___ASTTranslatorMIR0__storeAtIndexAndDrop$0 db '__ASTTranslatorMIR0__storeAtIndexAndDrop$0', 0
name___ASTTranslatorMIR0__storeAtKeyAndDrop$0 db '__ASTTranslatorMIR0__storeAtKeyAndDrop$0', 0
name___ASTTranslatorMIR0__createObject$0 db '__ASTTranslatorMIR0__createObject$0', 0
name___ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$0 db '__ASTTranslatorMIR0__evaluateNodeLazyBoolAnd$0', 0
name___ASTTranslatorMIR0__evaluateNodeLazyBoolOr$0 db '__ASTTranslatorMIR0__evaluateNodeLazyBoolOr$0', 0
name___ASTTranslatorMIR0__invokeMethod$0 db '__ASTTranslatorMIR0__invokeMethod$0', 0
name___ASTTranslatorMIR0__executeNodeFor$0 db '__ASTTranslatorMIR0__executeNodeFor$0', 0
name___ASTTranslatorMIR0__executeNodeForEach$0 db '__ASTTranslatorMIR0__executeNodeForEach$0', 0
name___ASTTranslatorMIR0__executeNodeWhile$0 db '__ASTTranslatorMIR0__executeNodeWhile$0', 0
name___ASTTranslatorMIR0__executeNodeIf$0 db '__ASTTranslatorMIR0__executeNodeIf$0', 0
name___ASTTranslatorMIR0__declareFunction$0 db '__ASTTranslatorMIR0__declareFunction$0', 0
name___ASTTranslatorMIR0__declareClass$0 db '__ASTTranslatorMIR0__declareClass$0', 0
name___ASTTranslatorMIR0__emitFunctionBody$0 db '__ASTTranslatorMIR0__emitFunctionBody$0', 0
name___ASTTranslatorMIR0__dropRetVal$0 db '__ASTTranslatorMIR0__dropRetVal$0', 0
name___ASTTranslatorMIR0_run$0 db '__ASTTranslatorMIR0_run$0', 0
name___Stack_constructor$0 db '__Stack_constructor$0', 0
name___Stack_getItems$0 db '__Stack_getItems$0', 0
name___Stack_push$0 db '__Stack_push$0', 0
name___Stack_pop$0 db '__Stack_pop$0', 0
name___Stack_over$0 db '__Stack_over$0', 0
name___Stack_dup$0 db '__Stack_dup$0', 0
name___Stack_eat$0 db '__Stack_eat$0', 0
name___Stack_eatN$0 db '__Stack_eatN$0', 0
name___Stack_setByAbsoluteIdx$0 db '__Stack_setByAbsoluteIdx$0', 0
name___Stack_getByAbsoluteIdx$0 db '__Stack_getByAbsoluteIdx$0', 0
name___Stack_peek$0 db '__Stack_peek$0', 0
name___Stack_peekN$0 db '__Stack_peekN$0', 0
name___ASTTranslatorMIR1_constructor$0 db '__ASTTranslatorMIR1_constructor$0', 0
name___ASTTranslatorMIR1__emitOneItem$0 db '__ASTTranslatorMIR1__emitOneItem$0', 0
name___ASTTranslatorMIR1_emitZeroArgsOpcode$0 db '__ASTTranslatorMIR1_emitZeroArgsOpcode$0', 0
name___ASTTranslatorMIR1_emitTargetOnlyOpcode$0 db '__ASTTranslatorMIR1_emitTargetOnlyOpcode$0', 0
name___ASTTranslatorMIR1_emitOneArgOpcode$0 db '__ASTTranslatorMIR1_emitOneArgOpcode$0', 0
name___ASTTranslatorMIR1_emitTwoArgsOpcode$0 db '__ASTTranslatorMIR1_emitTwoArgsOpcode$0', 0
name___ASTTranslatorMIR1_emitComment$0 db '__ASTTranslatorMIR1_emitComment$0', 0
name___ASTTranslatorMIR1_emitLabel$0 db '__ASTTranslatorMIR1_emitLabel$0', 0
name___ASTTranslatorMIR1_emitJmp$0 db '__ASTTranslatorMIR1_emitJmp$0', 0
name___ASTTranslatorMIR1_emitJmpByTable$0 db '__ASTTranslatorMIR1_emitJmpByTable$0', 0
name___ASTTranslatorMIR1_emitMoveVariantOpcode$0 db '__ASTTranslatorMIR1_emitMoveVariantOpcode$0', 0
name___ASTTranslatorMIR1_popForRead$0 db '__ASTTranslatorMIR1_popForRead$0', 0
name___ASTTranslatorMIR1_popForWrite$0 db '__ASTTranslatorMIR1_popForWrite$0', 0
name___ASTTranslatorMIR1_push$0 db '__ASTTranslatorMIR1_push$0', 0
name___ASTTranslatorMIR1_popOneArgAndEmitOpcode$0 db '__ASTTranslatorMIR1_popOneArgAndEmitOpcode$0', 0
name___ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0 db '__ASTTranslatorMIR1_popTwoArgsAndEmitOpcode$0', 0
name___ASTTranslatorMIR1_popParametersBeforeCall$0 db '__ASTTranslatorMIR1_popParametersBeforeCall$0', 0
name___ASTTranslatorMIR1_emitProcBegin$0 db '__ASTTranslatorMIR1_emitProcBegin$0', 0
name___ASTTranslatorMIR1_emitInitFrame$0 db '__ASTTranslatorMIR1_emitInitFrame$0', 0
name___ASTTranslatorMIR1_emitProcEnd$0 db '__ASTTranslatorMIR1_emitProcEnd$0', 0
name___ASTTranslatorMIR1_emitRet$0 db '__ASTTranslatorMIR1_emitRet$0', 0
name___ASTTranslatorMIR1_emitMoveBackVariant$0 db '__ASTTranslatorMIR1_emitMoveBackVariant$0', 0
name___ASTTranslatorMIR1__loadArgsVector$0 db '__ASTTranslatorMIR1__loadArgsVector$0', 0
name___ASTTranslatorMIR1__loadArgsCount$0 db '__ASTTranslatorMIR1__loadArgsCount$0', 0
name___ASTTranslatorMIR1__neg$0 db '__ASTTranslatorMIR1__neg$0', 0
name___ASTTranslatorMIR1__add$0 db '__ASTTranslatorMIR1__add$0', 0
name___ASTTranslatorMIR1__stringJoin$0 db '__ASTTranslatorMIR1__stringJoin$0', 0
name___ASTTranslatorMIR1__sub$0 db '__ASTTranslatorMIR1__sub$0', 0
name___ASTTranslatorMIR1__mul$0 db '__ASTTranslatorMIR1__mul$0', 0
name___ASTTranslatorMIR1__div$0 db '__ASTTranslatorMIR1__div$0', 0
name___ASTTranslatorMIR1__idiv$0 db '__ASTTranslatorMIR1__idiv$0', 0
name___ASTTranslatorMIR1__loadArray$0 db '__ASTTranslatorMIR1__loadArray$0', 0
name___ASTTranslatorMIR1__loadMap$0 db '__ASTTranslatorMIR1__loadMap$0', 0
name___ASTTranslatorMIR1__loadNull$0 db '__ASTTranslatorMIR1__loadNull$0', 0
name___ASTTranslatorMIR1__loadImm$0 db '__ASTTranslatorMIR1__loadImm$0', 0
name___ASTTranslatorMIR1__loadImmAsVariant$0 db '__ASTTranslatorMIR1__loadImmAsVariant$0', 0
name___ASTTranslatorMIR1__convert$0 db '__ASTTranslatorMIR1__convert$0', 0
name___ASTTranslatorMIR1__compareEQ$0 db '__ASTTranslatorMIR1__compareEQ$0', 0
name___ASTTranslatorMIR1__compareNEQ$0 db '__ASTTranslatorMIR1__compareNEQ$0', 0
name___ASTTranslatorMIR1__compareLT$0 db '__ASTTranslatorMIR1__compareLT$0', 0
name___ASTTranslatorMIR1__compareLE$0 db '__ASTTranslatorMIR1__compareLE$0', 0
name___ASTTranslatorMIR1__compareGT$0 db '__ASTTranslatorMIR1__compareGT$0', 0
name___ASTTranslatorMIR1__compareGE$0 db '__ASTTranslatorMIR1__compareGE$0', 0
name___ASTTranslatorMIR1__loadVariable$0 db '__ASTTranslatorMIR1__loadVariable$0', 0
name___ASTTranslatorMIR1__assign$0 db '__ASTTranslatorMIR1__assign$0', 0
name___ASTTranslatorMIR1__call$0 db '__ASTTranslatorMIR1__call$0', 0
name___ASTTranslatorMIR1__syscall$0 db '__ASTTranslatorMIR1__syscall$0', 0
name___ASTTranslatorMIR1__callPrint$0 db '__ASTTranslatorMIR1__callPrint$0', 0
name___ASTTranslatorMIR1__loadFromIndex$0 db '__ASTTranslatorMIR1__loadFromIndex$0', 0
name___ASTTranslatorMIR1__loadFromKey$0 db '__ASTTranslatorMIR1__loadFromKey$0', 0
name___ASTTranslatorMIR1__storeAtIndex$0 db '__ASTTranslatorMIR1__storeAtIndex$0', 0
name___ASTTranslatorMIR1__storeAtKey$0 db '__ASTTranslatorMIR1__storeAtKey$0', 0
name___ASTTranslatorMIR1__storeAtIndexAndDrop$0 db '__ASTTranslatorMIR1__storeAtIndexAndDrop$0', 0
name___ASTTranslatorMIR1__storeAtKeyAndDrop$0 db '__ASTTranslatorMIR1__storeAtKeyAndDrop$0', 0
name___ASTTranslatorMIR1__createObject$0 db '__ASTTranslatorMIR1__createObject$0', 0
name___ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$0 db '__ASTTranslatorMIR1__evaluateNodeLazyBoolAnd$0', 0
name___ASTTranslatorMIR1__evaluateNodeLazyBoolOr$0 db '__ASTTranslatorMIR1__evaluateNodeLazyBoolOr$0', 0
name___ASTTranslatorMIR1__invokeMethod$0 db '__ASTTranslatorMIR1__invokeMethod$0', 0
name___ASTTranslatorMIR1__executeNodeFor$0 db '__ASTTranslatorMIR1__executeNodeFor$0', 0
name___ASTTranslatorMIR1__executeNodeForEach$0 db '__ASTTranslatorMIR1__executeNodeForEach$0', 0
name___ASTTranslatorMIR1__executeNodeWhile$0 db '__ASTTranslatorMIR1__executeNodeWhile$0', 0
name___ASTTranslatorMIR1__executeNodeIf$0 db '__ASTTranslatorMIR1__executeNodeIf$0', 0
name___ASTTranslatorMIR1__executeNodeSwitch$0 db '__ASTTranslatorMIR1__executeNodeSwitch$0', 0
name___ASTTranslatorMIR1__declareFunction$0 db '__ASTTranslatorMIR1__declareFunction$0', 0
name___ASTTranslatorMIR1__declareClass$0 db '__ASTTranslatorMIR1__declareClass$0', 0
name___ASTTranslatorMIR1__emitFunctionBody$0 db '__ASTTranslatorMIR1__emitFunctionBody$0', 0
name___ASTTranslatorMIR1__dropRetVal$0 db '__ASTTranslatorMIR1__dropRetVal$0', 0
name___ASTTranslatorMIR1_run$0 db '__ASTTranslatorMIR1_run$0', 0
name___ASTTranslatorMIR1_connectTo$0 db '__ASTTranslatorMIR1_connectTo$0', 0
name___PipeAbstract_constructor$0 db '__PipeAbstract_constructor$0', 0
name___PipeAbstract__emitOneItem$0 db '__PipeAbstract__emitOneItem$0', 0
name___PipeAbstract__replaceLastItem$0 db '__PipeAbstract__replaceLastItem$0', 0
name___PipeAbstract_connectTo$0 db '__PipeAbstract_connectTo$0', 0
name___PipeAbstract_processOneItem$0 db '__PipeAbstract_processOneItem$0', 0
name___PipeAbstract_processArrayOfItems$0 db '__PipeAbstract_processArrayOfItems$0', 0
name___PipeAbstract_flush$0 db '__PipeAbstract_flush$0', 0
name___MIRQuadCollector_constructor$0 db '__MIRQuadCollector_constructor$0', 0
name___MIRQuadCollector__pad$0 db '__MIRQuadCollector__pad$0', 0
name___MIRQuadCollector_processOneItem$0 db '__MIRQuadCollector_processOneItem$0', 0
name___MIRQuadCollector_getQuads$0 db '__MIRQuadCollector_getQuads$0', 0
name___MIRQuadCollector__printSymbolInfoRow$0 db '__MIRQuadCollector__printSymbolInfoRow$0', 0
name___MIRQuadCollector__dumpFrameInfo$0 db '__MIRQuadCollector__dumpFrameInfo$0', 0
name___MIRQuadCollector_printQuads$0 db '__MIRQuadCollector_printQuads$0', 0
name___CodeGeneratorX64_constructor$0 db '__CodeGeneratorX64_constructor$0', 0
name___CodeGeneratorX64_lea$0 db '__CodeGeneratorX64_lea$0', 0
name___CodeGeneratorX64_push$0 db '__CodeGeneratorX64_push$0', 0
name___CodeGeneratorX64_pop$0 db '__CodeGeneratorX64_pop$0', 0
name___CodeGeneratorX64_mov$0 db '__CodeGeneratorX64_mov$0', 0
name___CodeGeneratorX64_call$0 db '__CodeGeneratorX64_call$0', 0
name___CodeGeneratorX64_call1$0 db '__CodeGeneratorX64_call1$0', 0
name___CodeGeneratorX64_call2$0 db '__CodeGeneratorX64_call2$0', 0
name___CodeGeneratorX64_call3$0 db '__CodeGeneratorX64_call3$0', 0
name___CodeGeneratorX64_call3AndDestroy$0 db '__CodeGeneratorX64_call3AndDestroy$0', 0
name___CodeGeneratorX64_variantMove$0 db '__CodeGeneratorX64_variantMove$0', 0
name___CodeGeneratorX64_variantDestroy$0 db '__CodeGeneratorX64_variantDestroy$0', 0
name___CodeGeneratorX64_pushParametersBeforeCall$0 db '__CodeGeneratorX64_pushParametersBeforeCall$0', 0
name___CodeGeneratorX64__hash$0 db '__CodeGeneratorX64__hash$0', 0
name___CodeGeneratorX64_emitConstant$0 db '__CodeGeneratorX64_emitConstant$0', 0
name___CodeGeneratorX64_emitStringBufferHead$0 db '__CodeGeneratorX64_emitStringBufferHead$0', 0
name___CodeGeneratorX64_emitStringBufferContent$0 db '__CodeGeneratorX64_emitStringBufferContent$0', 0
name___CodeGeneratorX64_emitArrayBufferHead$0 db '__CodeGeneratorX64_emitArrayBufferHead$0', 0
name___CodeGeneratorX64_emitArrayBufferContent$0 db '__CodeGeneratorX64_emitArrayBufferContent$0', 0
name___CodeGeneratorX64__cmp_cc_int64$0 db '__CodeGeneratorX64__cmp_cc_int64$0', 0
name___CodeGeneratorX64__cmp_cc_int32$0 db '__CodeGeneratorX64__cmp_cc_int32$0', 0
name___CodeGeneratorX64__cmp_cc_float64$0 db '__CodeGeneratorX64__cmp_cc_float64$0', 0
name___CodeGeneratorX64__jmp_if_cc_int64$0 db '__CodeGeneratorX64__jmp_if_cc_int64$0', 0
name___CodeGeneratorX64__jmp_if_cc_int32$0 db '__CodeGeneratorX64__jmp_if_cc_int32$0', 0
name___CodeGeneratorX64__jmp_if_cc_variant$0 db '__CodeGeneratorX64__jmp_if_cc_variant$0', 0
name___CodeGeneratorX64__getSymbolType$0 db '__CodeGeneratorX64__getSymbolType$0', 0
name___CodeGeneratorX64_run$0 db '__CodeGeneratorX64_run$0', 0
name___MIRQuadOptimizer_constructor$0 db '__MIRQuadOptimizer_constructor$0', 0
name___MIRQuadOptimizer__decreaseReadAndWriteHits$0 db '__MIRQuadOptimizer__decreaseReadAndWriteHits$0', 0
name___MIRQuadOptimizer_processOneItem$0 db '__MIRQuadOptimizer_processOneItem$0', 0
name___VMachineStackObject_constructor$0 db '__VMachineStackObject_constructor$0', 0
name___VMachineStack_constructor$0 db '__VMachineStack_constructor$0', 0
name___VMachineStack_loadCode$0 db '__VMachineStack_loadCode$0', 0
name___VMachineStack__call$0 db '__VMachineStack__call$0', 0
name___VMachineStack_run$0 db '__VMachineStack_run$0', 0
name___VMachineStack_dumpCode$0 db '__VMachineStack_dumpCode$0', 0
name_BadUsageError db 'BadUsageError', 0
name_start db 'start', 0
name_endOfCodeSection db 'out of code section', 0
