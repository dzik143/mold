TEST "Empty map"
x = {}
print 'typeof(x):', typeof(x)
print 'x:', x
print "x{'key1'} =", x{'key1'}
print "x{'key2'} =", x{'key2'}
print "x{'key3'} =", x{'key3'}

EXPECTED_OUTPUT:
typeof(x): map
x: {}
x{'key1'} = undefined
x{'key2'} = undefined
x{'key3'} = undefined
-------------------------------------------------------------------------------

TEST "Mixed types in one map"
x = {'key1': 'value1', 'key2': 2, 'key3': 3.14}
print 'typeof(x):', typeof(x)
print 'x:', x
print "x{'key1'} =", x{'key1'}
print "x{'key2'} =", x{'key2'}
print "x{'key3'} =", x{'key3'}

EXPECTED_OUTPUT:
typeof(x): map
x: {'key1': 'value1', 'key2': 2, 'key3': 3.140000}
x{'key1'} = value1
x{'key2'} = 2
x{'key3'} = 3.140000
-------------------------------------------------------------------------------

TEST "Set elements at runtime"

# Start from empty array.
x = {}
print 'init      :', x

# Modify elements.
x{'one'} = 1
x{'two'} = 'two'
x{'pi'}  = 3.14
print 'modified1 :', x

# Modify elements once again.
x{'one'} = 'one'
x{'two'} = 2
x{'pi'}  = 'pi'
print 'modified2 :', x

EXPECTED_OUTPUT:
init      : {}
modified1 : {'one': 1, 'two': 'two', 'pi': 3.140000}
modified2 : {'one': 'one', 'two': 2, 'pi': 'pi'}
-------------------------------------------------------------------------------

TEST "Nested maps"
x = {'key1': {'key2': {'key3': 'value'}}}

# Print values stored in whole tree.
print 'values'
print '======'
print "x                         :", x
print "x{'key1'}                 :", x{'key1'}
print "x{'key1'}{'key2'}         :", x{'key1'}{'key2'}
print "x{'key1'}{'key2'}{'key3'} :", x{'key1'}{'key2'}{'key3'}

# Print types stored in whole tree.
print 'types'
print '======'
print "typeof(x)                         :", typeof(x)
print "typeof(x{'key1'})                 :", typeof(x{'key1'})
print "typeof(x{'key1'}{'key2'})         :", typeof(x{'key1'}{'key2'})
print "typeof(x{'key1'}{'key2'}{'key3'}) :", typeof(x{'key1'}{'key2'}{'key3'})

# Try to modify inner element.
x{'key1'}{'key2'}{'key3'} = 'new-value'
print 'modify'
print '======'
print 'value after modify:', x{'key1'}{'key2'}{'key3'}

EXPECTED_OUTPUT:
values
======
x                         : {'key1': {'key2': {'key3': 'value'}}}
x{'key1'}                 : {'key2': {'key3': 'value'}}
x{'key1'}{'key2'}         : {'key3': 'value'}
x{'key1'}{'key2'}{'key3'} : value
types
======
typeof(x)                         : map
typeof(x{'key1'})                 : map
typeof(x{'key1'}{'key2'})         : map
typeof(x{'key1'}{'key2'}{'key3'}) : string
modify
======
value after modify: new-value
-------------------------------------------------------------------------------

TEST "Bug: Repeated one key for different values"

M = {}

for i in 0 .. 10
  M{str(i)} = i
endfor

print M

EXPECTED_OUTPUT:
{'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}
-------------------------------------------------------------------------------

TEST "Map resize #1"
x = {}
N = 1024*16

# Insert values.
for idx in 0 .. N
 x{str(idx)} = idx
endfor

# Verify values.
acc = 0
for idx in 0 .. N
  acc = acc + x{str(idx)}
endfor
print acc

EXPECTED_OUTPUT:
134209536
-------------------------------------------------------------------------------

TEST "Map resize #2 (insert in reverse order)"
x = {}
N = 1024*16

# Insert values.
idx = N
while idx >= 0
  x{str(idx)} = idx
  idx         = idx - 1
endwhile

# Verify values.
# TODO: Use idx.
acc = 0
for jdx in 0 .. N
  acc = acc + x{str(jdx)}
endfor
print acc

EXPECTED_OUTPUT:
134209536
-------------------------------------------------------------------------------

TEST "Keys order #1"

x = {}

for idx in 0 .. 32
  x{str(idx)} = idx
endfor

print x

EXPECTED_OUTPUT:
{'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, '11': 11, '12': 12, '13': 13, '14': 14, '15': 15, '16': 16, '17': 17, '18': 18, '19': 19, '20': 20, '21': 21, '22': 22, '23': 23, '24': 24, '25': 25, '26': 26, '27': 27, '28': 28, '29': 29, '30': 30, '31': 31}
-------------------------------------------------------------------------------

TEST "Keys order #2 (reverse)"

x = {}
N = 32

idx = N - 1
while idx >= 0
  x{str(idx)} = idx
  idx         = idx - 1
endwhile

print x
EXPECTED_OUTPUT:
{'31': 31, '30': 30, '29': 29, '28': 28, '27': 27, '26': 26, '25': 25, '24': 24, '23': 23, '22': 22, '21': 21, '20': 20, '19': 19, '18': 18, '17': 17, '16': 16, '15': 15, '14': 14, '13': 13, '12': 12, '11': 11, '10': 10, '9': 9, '8': 8, '7': 7, '6': 6, '5': 5, '4': 4, '3': 3, '2': 2, '1': 1, '0': 0}
-------------------------------------------------------------------------------

TEST "Empty string used as key"
x = {}
x{''} = 1234
print x
print x{''}

EXPECTED_OUTPUT:
{'': 1234}
1234
-------------------------------------------------------------------------------

TEST "Update map inside function call #1"

function updateBox(box)
  box.value = 4321
endfunction

box  = {'value': 1234}
value = box.value
print 'value before:', value

updateBox(box)
value = box.value
print 'value after:', value

EXPECTED_OUTPUT:
value before: 1234
value after: 4321
-------------------------------------------------------------------------------

TEST "Update map inside function call #2 (nested)"

function updateBox(box)
  box.inner[0] = 4321
endfunction

box  = {'inner': [1234]}
value = box.inner[0]
print 'value before:', value

updateBox(box)

value = box.inner[0]
print 'value after:', value

EXPECTED_OUTPUT:
value before: 1234
value after: 4321
-------------------------------------------------------------------------------

TEST "Multiline map"
x = {
  'column': -1,
  'line': -1
}
print x

EXPECTED_OUTPUT:
{'column': -1, 'line': -1}
-------------------------------------------------------------------------------

TEST "Store and load various types one map"

class Foo
endclass

class Bar
endclass

# Start from empty array.
x = {}

var1_integer = 1234
var1_float   = 5.67
var1_boolean = false
var1_map     = {'key1': 'value1'}
var1_array   = [81, 82, 83, 84, 85]
var1_object  = new Foo()

var2_integer = 4321
var2_float   = 7.65
var2_boolean = true
var2_map     = {'key2': 'value2'}
var2_array   = [85, 84, 83, 82, 81]
var2_object  = new Bar()

print 'Initial state'
print '============='
print 'var1_integer:', var1_integer
print 'var1_float  :', var1_float
print 'var1_boolean:', var1_boolean
print 'var1_map    :', var1_map
print 'var1_array  :', var1_array
print 'var1_object :', var1_object
print ''
print 'var2_integer:', var2_integer
print 'var2_float  :', var2_float
print 'var2_boolean:', var2_boolean
print 'var2_map    :', var2_map
print 'var2_array  :', var2_array
print 'var2_object :', var2_object
print ''
print 'map         :', x
print 'len(map)    :', len(x)
print ''

# Store values in empty array.
x{'integer'} = var1_integer
x{'float'}   = var1_float
x{'boolean'} = var1_boolean
x{'map'}     = var1_map
x{'array'}   = var1_array
x{'object'}  = var1_object

print 'After store'
print '==========='
print 'var1_integer:', var1_integer
print 'var1_float  :', var1_float
print 'var1_boolean:', var1_boolean
print 'var1_map    :', var1_map
print 'var1_array  :', var1_array
print 'var1_object :', var1_object
print ''
print 'var2_integer:', var2_integer
print 'var2_float  :', var2_float
print 'var2_boolean:', var2_boolean
print 'var2_map    :', var2_map
print 'var2_array  :', var2_array
print 'var2_object :', var2_object
print ''
print 'map         :', x
print 'len(map)    :', len(x)
print ''

# Read fields back.
var2_integer = x{'integer'}
var2_float   = x{'float'}
var2_boolean = x{'boolean'}
var2_map     = x{'map'}
var2_array   = x{'array'}
var2_object  = x{'object'}

print 'After load'
print '=========='
print 'var1_integer:', var1_integer
print 'var1_float  :', var1_float
print 'var1_boolean:', var1_boolean
print 'var1_map    :', var1_map
print 'var1_array  :', var1_array
print 'var1_object :', var1_object
print ''
print 'var2_integer:', var2_integer
print 'var2_float  :', var2_float
print 'var2_boolean:', var2_boolean
print 'var2_map    :', var2_map
print 'var2_array  :', var2_array
print 'var2_object :', var2_object
print ''
print 'map         :', x
print 'len(map)    :', len(x)

EXPECTED_OUTPUT:
Initial state
=============
var1_integer: 1234
var1_float  : 5.670000
var1_boolean: false
var1_map    : {'key1': 'value1'}
var1_array  : [81, 82, 83, 84, 85]
var1_object : [object]

var2_integer: 4321
var2_float  : 7.650000
var2_boolean: true
var2_map    : {'key2': 'value2'}
var2_array  : [85, 84, 83, 82, 81]
var2_object : [object]

map         : {}
len(map)    : 0

After store
===========
var1_integer: 1234
var1_float  : 5.670000
var1_boolean: false
var1_map    : {'key1': 'value1'}
var1_array  : [81, 82, 83, 84, 85]
var1_object : [object]

var2_integer: 4321
var2_float  : 7.650000
var2_boolean: true
var2_map    : {'key2': 'value2'}
var2_array  : [85, 84, 83, 82, 81]
var2_object : [object]

map         : {'integer': 1234, 'float': 5.670000, 'boolean': false, 'map': {'key1': 'value1'}, 'array': [81, 82, 83, 84, 85], 'object': [object]}
len(map)    : 6

After load
==========
var1_integer: 1234
var1_float  : 5.670000
var1_boolean: false
var1_map    : {'key1': 'value1'}
var1_array  : [81, 82, 83, 84, 85]
var1_object : [object]

var2_integer: 1234
var2_float  : 5.670000
var2_boolean: false
var2_map    : {'key1': 'value1'}
var2_array  : [81, 82, 83, 84, 85]
var2_object : [object]

map         : {'integer': 1234, 'float': 5.670000, 'boolean': false, 'map': {'key1': 'value1'}, 'array': [81, 82, 83, 84, 85], 'object': [object]}
len(map)    : 6
-------------------------------------------------------------------------------

TEST "Store and load mixed types in one map #2"

ast = {
  'children': [1,2,3]
}

proto = {
  'name': 'start',
  'children': ast.children
}

print 'len(ast)   =', len(ast)
print 'len(proto) =', len(proto)
print 'ast        =', ast
print 'proto      =', proto

EXPECTED_OUTPUT:
len(ast)   = 1
len(proto) = 2
ast        = {'children': [1, 2, 3]}
proto      = {'name': 'start', 'children': [1, 2, 3]}
-------------------------------------------------------------------------------

TEST "Hash colission (mod=16, DJB2) #1"

x = {}
x{'codeObj'} = null
x{'stack'}   = 1234

print x{'codeObj'}
print x{'stack'}

EXPECTED_OUTPUT:
undefined
1234
-------------------------------------------------------------------------------

TEST "Hash colission (mod=16, DJB2) #2"

function foo(name)
  newEntry = {
    'name': name,
    'kind': 1234
  }
  print newEntry
endfunction

foo('012345678901234567890123456789012345678901234567890123456789')

EXPECTED_OUTPUT:
{'name': '012345678901234567890123456789012345678901234567890123456789', 'kind': 1234}
-------------------------------------------------------------------------------

TEST "Overwrite value after hash colission (mod=16, DJB2)"

x = {}
x{'p1'} = 1
x{'unresolvedJmps'} = 1111
x{'unresolvedJmps'} = 9999

print x

EXPECTED_OUTPUT:
{'p1': 1, 'unresolvedJmps': 9999}
-------------------------------------------------------------------------------

TEST "One character keys"

x = {}

# Insert by one-character keys (store first time).
for idx in ord('A') .. ord('z') + 1
  x{asc(idx)} = idx + 100
endfor

print 'x after store #1:', x

# Overwrite by one-character keys (store second time).
for idx in ord('A') .. ord('z') + 1
  x{asc(idx)} = idx + 200
endfor

# Print whole map.
print 'x after store #2:', x

# Load by one-character keys.
print ''
print 'Load values one-by-one:'

for idx in ord('A') .. ord('z') + 1
  print x{asc(idx)}
endfor

# Load by imm string.
print ''
print 'Load values by imm keys:'
print x{'A'}
print x{'z'}

EXPECTED_OUTPUT:
x after store #1: {'A': 165, 'B': 166, 'C': 167, 'D': 168, 'E': 169, 'F': 170, 'G': 171, 'H': 172, 'I': 173, 'J': 174, 'K': 175, 'L': 176, 'M': 177, 'N': 178, 'O': 179, 'P': 180, 'Q': 181, 'R': 182, 'S': 183, 'T': 184, 'U': 185, 'V': 186, 'W': 187, 'X': 188, 'Y': 189, 'Z': 190, '[': 191, '\': 192, ']': 193, '^': 194, '_': 195, '`': 196, 'a': 197, 'b': 198, 'c': 199, 'd': 200, 'e': 201, 'f': 202, 'g': 203, 'h': 204, 'i': 205, 'j': 206, 'k': 207, 'l': 208, 'm': 209, 'n': 210, 'o': 211, 'p': 212, 'q': 213, 'r': 214, 's': 215, 't': 216, 'u': 217, 'v': 218, 'w': 219, 'x': 220, 'y': 221, 'z': 222}
x after store #2: {'A': 265, 'B': 266, 'C': 267, 'D': 268, 'E': 269, 'F': 270, 'G': 271, 'H': 272, 'I': 273, 'J': 274, 'K': 275, 'L': 276, 'M': 277, 'N': 278, 'O': 279, 'P': 280, 'Q': 281, 'R': 282, 'S': 283, 'T': 284, 'U': 285, 'V': 286, 'W': 287, 'X': 288, 'Y': 289, 'Z': 290, '[': 291, '\': 292, ']': 293, '^': 294, '_': 295, '`': 296, 'a': 297, 'b': 298, 'c': 299, 'd': 300, 'e': 301, 'f': 302, 'g': 303, 'h': 304, 'i': 305, 'j': 306, 'k': 307, 'l': 308, 'm': 309, 'n': 310, 'o': 311, 'p': 312, 'q': 313, 'r': 314, 's': 315, 't': 316, 'u': 317, 'v': 318, 'w': 319, 'x': 320, 'y': 321, 'z': 322}

Load values one-by-one:
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322

Load values by imm keys:
265
322
-------------------------------------------------------------------------------

TEST "Mixed types in one array #2"

x = {}

# Load big 64-bit number to set upper 32-bit.
x{'value'} = 123456789123456789
if x{'value'} is 123456789123456789
  print 'value is 123456789123456789'
endif

# Boolean: true.
x{'value'} = true
if x{'value'} is true
  print 'value is true'
endif

# Boolean: false.
x{'value'} = false
if x{'value'} is false
  print 'value is false'
endif

# Float.
x{'value'} = 3.14
if x{'value'} is 3.14
  print 'value is 3.14'
endif

# Small integer (non 64-bit).
x{'value'} = 1234
if x{'value'} is 1234
  print 'value is 1234'
endif

EXPECTED_OUTPUT:
value is 123456789123456789
value is true
value is false
value is 3.14
value is 1234
-------------------------------------------------------------------------------
