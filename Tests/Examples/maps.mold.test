TEST "Empty map"
x = {}
print 'typeof(x):', typeof(x)
print 'x:', x
print "x{'key1'} =", x{'key1'}
print "x{'key2'} =", x{'key2'}
print "x{'key3'} =", x{'key3'}

EXPECTED_OUTPUT:
typeof(x): map
x: {}
x{'key1'} = undefined
x{'key2'} = undefined
x{'key3'} = undefined
-------------------------------------------------------------------------------

TEST "Mixed types in one map"
x = {'key1': 'value1', 'key2': 2, 'key3': 3.14}
print 'typeof(x):', typeof(x)
print 'x:', x
print "x{'key1'} =", x{'key1'}
print "x{'key2'} =", x{'key2'}
print "x{'key3'} =", x{'key3'}

EXPECTED_OUTPUT:
typeof(x): map
x: {'key1': 'value1', 'key2': 2, 'key3': 3.140000}
x{'key1'} = value1
x{'key2'} = 2
x{'key3'} = 3.140000
-------------------------------------------------------------------------------

TEST "Set elements at runtime"

# Start from empty array.
x = {}
print 'init      :', x

# Modify elements.
x{'one'} = 1
x{'two'} = 'two'
x{'pi'}  = 3.14
print 'modified1 :', x

# Modify elements once again.
x{'one'} = 'one'
x{'two'} = 2
x{'pi'}  = 'pi'
print 'modified2 :', x

EXPECTED_OUTPUT:
init      : {}
modified1 : {'one': 1, 'two': 'two', 'pi': 3.140000}
modified2 : {'one': 'one', 'two': 2, 'pi': 'pi'}
-------------------------------------------------------------------------------

TEST "Nested maps"
x = {'key1': {'key2': {'key3': 'value'}}}

# Print values stored in whole tree.
print 'values'
print '======'
print "x                         :", x
print "x{'key1'}                 :", x{'key1'}
print "x{'key1'}{'key2'}         :", x{'key1'}{'key2'}
print "x{'key1'}{'key2'}{'key3'} :", x{'key1'}{'key2'}{'key3'}

# Print types stored in whole tree.
print 'types'
print '======'
print "typeof(x)                         :", typeof(x)
print "typeof(x{'key1'})                 :", typeof(x{'key1'})
print "typeof(x{'key1'}{'key2'})         :", typeof(x{'key1'}{'key2'})
print "typeof(x{'key1'}{'key2'}{'key3'}) :", typeof(x{'key1'}{'key2'}{'key3'})

# Try to modify inner element.
x{'key1'}{'key2'}{'key3'} = 'new-value'
print 'modify'
print '======'
print 'value after modify:', x{'key1'}{'key2'}{'key3'}

EXPECTED_OUTPUT:
values
======
x                         : {'key1': {'key2': {'key3': 'value'}}}
x{'key1'}                 : {'key2': {'key3': 'value'}}
x{'key1'}{'key2'}         : {'key3': 'value'}
x{'key1'}{'key2'}{'key3'} : value
types
======
typeof(x)                         : map
typeof(x{'key1'})                 : map
typeof(x{'key1'}{'key2'})         : map
typeof(x{'key1'}{'key2'}{'key3'}) : string
modify
======
value after modify: new-value
-------------------------------------------------------------------------------

TEST "Bug: Repeated one key for different values"

M = {}

for i in 0 .. 10
  M{str(i)} = i
endfor

print M

EXPECTED_OUTPUT:
{'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}
-------------------------------------------------------------------------------

TEST "Map resize #1"
x = {}
N = 1024*16

# Insert values.
for idx in 0 .. N
 x{str(idx)} = idx
endfor

# Verify values.
acc = 0
for idx in 0 .. N
  acc = acc + x{str(idx)}
endfor
print acc

EXPECTED_OUTPUT:
134209536
-------------------------------------------------------------------------------

TEST "Map resize #2 (insert in reverse order)"
x = {}
N = 1024*16

# Insert values.
idx = N
while idx >= 0
  x{str(idx)} = idx
  idx         = idx - 1
endwhile

# Verify values.
# TODO: Use idx.
acc = 0
for jdx in 0 .. N
  acc = acc + x{str(jdx)}
endfor
print acc

EXPECTED_OUTPUT:
134209536
-------------------------------------------------------------------------------

TEST "Keys order #1"

x = {}

for idx in 0 .. 32
  x{str(idx)} = idx
endfor

print x

EXPECTED_OUTPUT:
{'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, '11': 11, '12': 12, '13': 13, '14': 14, '15': 15, '16': 16, '17': 17, '18': 18, '19': 19, '20': 20, '21': 21, '22': 22, '23': 23, '24': 24, '25': 25, '26': 26, '27': 27, '28': 28, '29': 29, '30': 30, '31': 31}
-------------------------------------------------------------------------------

TEST "Keys order #2 (reverse)"

x = {}
N = 32

idx = N - 1
while idx >= 0
  x{str(idx)} = idx
  idx         = idx - 1
endwhile

print x
EXPECTED_OUTPUT:
{'31': 31, '30': 30, '29': 29, '28': 28, '27': 27, '26': 26, '25': 25, '24': 24, '23': 23, '22': 22, '21': 21, '20': 20, '19': 19, '18': 18, '17': 17, '16': 16, '15': 15, '14': 14, '13': 13, '12': 12, '11': 11, '10': 10, '9': 9, '8': 8, '7': 7, '6': 6, '5': 5, '4': 4, '3': 3, '2': 2, '1': 1, '0': 0}
-------------------------------------------------------------------------------

TEST "Empty string used as key"
x = {}
x{''} = 1234
print x
print x{''}

EXPECTED_OUTPUT:
{'': 1234}
1234
-------------------------------------------------------------------------------

TEST "Update map inside function call #1"

function updateBox(box)
  box.value = 4321
endfunction

box  = {'value': 1234}
value = box.value
print 'value before:', value

updateBox(box)
value = box.value
print 'value after:', value

EXPECTED_OUTPUT:
value before: 1234
value after: 4321
-------------------------------------------------------------------------------

TEST "Update map inside function call #2 (nested)"

function updateBox(box)
  box.inner[0] = 4321
endfunction

box  = {'inner': [1234]}
value = box.inner[0]
print 'value before:', value

updateBox(box)

value = box.inner[0]
print 'value after:', value

EXPECTED_OUTPUT:
value before: 1234
value after: 4321
-------------------------------------------------------------------------------
