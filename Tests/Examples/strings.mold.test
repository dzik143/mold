TEST "Empty string"
x = ''
print 'empty string is here ->', x, '<-'
print 'typeof empty string is:', typeof(x)

EXPECTED_OUTPUT:
empty string is here ->  <-
typeof empty string is: string
-------------------------------------------------------------------------------

TEST "Concatenation #1"
x  = "Hello"
y  = " "
z  = "Mold!"
rv = x ~ y ~ z

print rv
print 'typeof(x) is', typeof(x)
print 'typeof(y) is', typeof(y)
print 'typeof(z) is', typeof(z)
print 'typeof(rv) is', typeof(rv)

EXPECTED_OUTPUT:
Hello Mold!
typeof(x) is string
typeof(y) is string
typeof(z) is string
typeof(rv) is string
-------------------------------------------------------------------------------

TEST "Concatenation #2"
x   = ''
y   = 'abc'
z   = '123456'
xy  = x ~ y
xz  = x ~ z
xyz = x ~ y ~ z

print 'x         = [', x, ']'
print 'y         = [', y, ']'
print 'z         = [', z, ']'
print 'x ~ y     = [', xy, ']'
print 'x ~ z     = [', xz, ']'
print 'x ~ y ~ z = [', xyz, ']'

print ''
print 'len(x)         =', len(x)
print 'len(y)         =', len(y)
print 'len(z)         =', len(z)
print 'len(x ~ y)     =', len(xy)
print 'len(x ~ z)     =', len(xz)
print 'len(x ~ y ~ z) =', len(xyz)

EXPECTED_OUTPUT:
x         = [  ]
y         = [ abc ]
z         = [ 123456 ]
x ~ y     = [ abc ]
x ~ z     = [ 123456 ]
x ~ y ~ z = [ abc123456 ]

len(x)         = 0
len(y)         = 3
len(z)         = 6
len(x ~ y)     = 3
len(x ~ z)     = 6
len(x ~ y ~ z) = 9
-------------------------------------------------------------------------------

TEST "Concatenation #3"
acc = 'a'
print '(1) [', acc, ']', len(acc)

acc = acc ~ 'x'
print '(2) [', acc, ']', len(acc)

acc = acc ~ 'ZyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyZ'
print '(3) [', acc, ']', len(acc)

EXPECTED_OUTPUT:
(1) [ a ] 1
(2) [ ax ] 2
(3) [ axZyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyZ ] 78
-------------------------------------------------------------------------------

TEST "Concatenation #4"
acc = ''
for idx in 0 .. 100000
  acc = acc ~ 'x'
endfor

print 'len(acc)    =', len(acc)
print 'acc[0]      =', acc[0]
print 'acc[1]      =', acc[1]
print 'acc[1000]   =', acc[1000]
print 'acc[99999]  =', acc[99999]
print 'acc[100000] =', acc[100000]

EXPECTED_OUTPUT:
len(acc)    = 100000
acc[0]      = x
acc[1]      = x
acc[1000]   = x
acc[99999]  = x
acc[100000] = undefined
-------------------------------------------------------------------------------

TEST "Concatenation #5: x = x ~ y"

x = 'abc'
y = 'def'
x = x ~ y
print x

EXPECTED_OUTPUT:
abcdef
-------------------------------------------------------------------------------

TEST "Concatenation #6: y = x ~ y"

x = 'abc'
y = 'def'
y = x ~ y
print y

EXPECTED_OUTPUT:
abcdef
-------------------------------------------------------------------------------

TEST "Concatenation #7: x = x ~ x"

x = 'abc'
x = x ~ x
print x

EXPECTED_OUTPUT:
abcabc
-------------------------------------------------------------------------------

TEST "Concatenation #8: x = x ~ x ~ x ~ x ~ x ~ x"

x = 'abc|'
x = x ~ x ~ x ~ x ~ x ~ x
print x

EXPECTED_OUTPUT:
abc|abc|abc|abc|abc|abc|
-------------------------------------------------------------------------------

TEST "Embedded single quata withing double quoatas"
print "'"

EXPECTED_OUTPUT:
'
-------------------------------------------------------------------------------

TEST "Embedded double quata withing single quoatas"
print '"'

EXPECTED_OUTPUT:
"
-------------------------------------------------------------------------------

TEST "Character access str[idx]: many-char string"
x = 'Hello Mold!'

for idx in 0 .. len(x)
  print idx, '[', x[idx], ']'
endfor

EXPECTED_OUTPUT:
0 [ H ]
1 [ e ]
2 [ l ]
3 [ l ]
4 [ o ]
5 [   ]
6 [ M ]
7 [ o ]
8 [ l ]
9 [ d ]
10 [ ! ]
-------------------------------------------------------------------------------

TEST "Character access: one-char string"

x = 'abcd'
x = x[0][0][0][0][0]
print x

EXPECTED_OUTPUT:
a
-------------------------------------------------------------------------------

TEST "Character access: empty string"

x = ''
x = x[0]
print x

EXPECTED_OUTPUT:
undefined
-------------------------------------------------------------------------------

TEST "Compare run-time built strings #1"

text1 = 'a'  ~ 'bc'
text2 = 'ab' ~ 'c'

if text1 is text2
  print text1, 'is equal to', text2
endif

EXPECTED_OUTPUT:
abc is equal to abc
-------------------------------------------------------------------------------

TEST "Compare run-time built strings #2"

text1 = 'a'  ~ 'bc'
text2 = 'ab' ~ 'cd'

if text1 isnt text2
  print text1, 'is NOT equal to', text2
endif

EXPECTED_OUTPUT:
abc is NOT equal to abcd
-------------------------------------------------------------------------------

TEST "Build long string char-by-char"

buf = ''
for srcIdx in 0 .. 1024
  buf = buf ~ 'x'
endfor

print len(buf), '[', buf ,']'

EXPECTED_OUTPUT:
1024 [ xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ]
-------------------------------------------------------------------------------

TEST "Compare string char-by-char"

src = ''
dst = ''

# Build source string.
for idx in 0 .. 1024
  src = src ~ str(idx)
endfor

# Copy source string char-by-char.
for idx in 0 .. len(src)
  dst = dst ~ src[idx]
endfor

# Compare strings char-by-char.
for idx in 0 .. len(src)
  if src[idx] isnt dst[idx]
    die('FAIL!')
  endif
endfor

print 'OK!'

# Show source and dest
print 'len(src):', len(src)
print 'len(dst):', len(dst)
print 'src:', src
print 'dst:', dst

EXPECTED_OUTPUT:
OK!
len(src): 2986
len(dst): 2986
src: 0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823824825826827828829830831832833834835836837838839840841842843844845846847848849850851852853854855856857858859860861862863864865866867868869870871872873874875876877878879880881882883884885886887888889890891892893894895896897898899900901902903904905906907908909910911912913914915916917918919920921922923924925926927928929930931932933934935936937938939940941942943944945946947948949950951952953954955956957958959960961962963964965966967968969970971972973974975976977978979980981982983984985986987988989990991992993994995996997998999100010011002100310041005100610071008100910101011101210131014101510161017101810191020102110221023
dst: 0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823824825826827828829830831832833834835836837838839840841842843844845846847848849850851852853854855856857858859860861862863864865866867868869870871872873874875876877878879880881882883884885886887888889890891892893894895896897898899900901902903904905906907908909910911912913914915916917918919920921922923924925926927928929930931932933934935936937938939940941942943944945946947948949950951952953954955956957958959960961962963964965966967968969970971972973974975976977978979980981982983984985986987988989990991992993994995996997998999100010011002100310041005100610071008100910101011101210131014101510161017101810191020102110221023
-------------------------------------------------------------------------------

TEST "Bug: Shared peek char buffer"

text = 'abcdefghijklmnoprstuvwxyz'

x = text[0]
y = text[1]
z = text[2]

print x, y, z

EXPECTED_OUTPUT:
a b c
-------------------------------------------------------------------------------

TEST "Bug: Crash on out of range peek #1"

text = 'abcdefghijklmnoprstuvwxyz'
print text[100000]

EXPECTED_OUTPUT:
undefined
-------------------------------------------------------------------------------

TEST "Bug: Crash on out of range peek #2"

text = 'abc'
print 'x[0]          =', text[0]
print 'x[1]          =', text[1]
print 'x[2]          =', text[2]
print 'x[3]          =', text[3]
print 'x[4]          =', text[4]
print 'x[1000]       =', text[1000]
print 'x[1000000]    =', text[1000000]
print 'x[2147483647] =', text[2147483647]

EXPECTED_OUTPUT:
x[0]          = a
x[1]          = b
x[2]          = c
x[3]          = undefined
x[4]          = undefined
x[1000]       = undefined
x[1000000]    = undefined
x[2147483647] = undefined
-------------------------------------------------------------------------------

TEST "Bug: Not increased refCnt after passing string throught str()"

source = 'x'
x      = '' ~ str(source[0])

print 'x      = [', x, ']'
print 'len(x) =', len(x)

EXPECTED_OUTPUT:
x      = [ x ]
len(x) = 1
-------------------------------------------------------------------------------

TEST "Bug: Concatenation chain: x ~ y ~ z"

x = 'XxxxxxxxxxxxxxxxxxxxxxxxxxxX>>> ' ~ 'o' ~ ' <<<YyyyyyyyyyyyyyyyyyyyyyyyyyyY'

print 'x      =', x
print 'len(x) =', len(x)

EXPECTED_OUTPUT:
x      = XxxxxxxxxxxxxxxxxxxxxxxxxxxX>>> o <<<YyyyyyyyyyyyyyyyyyyyyyyyyyyY
len(x) = 65
-------------------------------------------------------------------------------

TEST "Use call param while concatenating"
function final(x)
  print x ~ ':final'
endfunction

function bar(x)
  newX = x ~ ':bar'
  final(newX)
endfunction

function foo(x)
  newX = x ~ ':foo'
  bar(newX)
  bar(newX)
endfunction

foo('init')

EXPECTED_OUTPUT:
init:foo:bar:final
init:foo:bar:final
-------------------------------------------------------------------------------
TEST "Overlapped source and destination string: x = y ~ x"

x = 'b'
x = 'a' ~ x
print x

EXPECTED_OUTPUT:
ab
-------------------------------------------------------------------------------

TEST "Store one character at array index'
x = 'text'
y = [x[0]]
print x
print y

EXPECTED_OUTPUT:
text
['t']
-------------------------------------------------------------------------------

TEST "Bug: unset string flags in str(bool)"

function foo(x)
  for indexes k values v in x
    print k, v, 'true  is', str(true)
    print k, v, 'false is', str(false)
  endfor
endfunction

foo([10,20,30,40])

EXPECTED_OUTPUT:
0 10 true  is true
0 10 false is false
1 20 true  is true
1 20 false is false
2 30 true  is true
2 30 false is false
3 40 true  is true
3 40 false is false
-------------------------------------------------------------------------------

TEST "Load from negative character index (should fail) #1"
x = 'this is some text'
print x[-1000]

EXPECTED_ERROR:
runtime error: negative array index
-------------------------------------------------------------------------------

TEST "Load from negative character index (should fail) #2"

function foo(x, i)
  print 'foo(', i, ')', x[i]
endfunction

x = 'Hello, Mold!'

foo(x, 0)
foo(x, 1)
foo(x, 10)
foo(x, -1)
foo(x, 0)

EXPECTED_OUTPUT:
foo( 0 ) H
foo( 1 ) e
foo( 10 ) d
EXPECTED_ERROR:
runtime error: negative array index
-------------------------------------------------------------------------------

TEST "Bug: Undefined beheavior on out-of-range ord(x[i]) string"

x   = 'text'
buf = '' ~ x[0]

print 'len(buf)    =', len(buf)
print 'ord(buf[0]) =', ord(buf[0])
print 'ord(buf[1]) =', ord(buf[1])
print 'ord(buf[2]) =', ord(buf[2])
print 'ord(buf[3]) =', ord(buf[3])

EXPECTED_OUTPUT:
len(buf)    = 1
ord(buf[0]) = 116
ord(buf[1]) = 0
ord(buf[2]) = 0
ord(buf[3]) = 0
-------------------------------------------------------------------------------

TEST "Bug: Crash while joining one-character string"

function foo(dst, oldValue)
  value = oldValue
  if len(value) is 1
    newValue = '' ~ value
    value    = newValue
  endif

  dst.value = value
endfunction

dst = {}
foo(dst, '0')

print dst

EXPECTED_OUTPUT:
{'value': '0'}
-------------------------------------------------------------------------------

TEST "Join with one-character"

poolLeft  = 'llllll'
poolRight = 'rrrrrr'

l = poolLeft[3]
r = poolRight[4]

left  = 'left-'
right = '-right'

print 'One character ~ one character:'
print '=============================='

print '(1) ~ (1) =', l ~ l
print '(1) ~ (1) =', l ~ r
print '(1) ~ (1) =', r ~ r

print ''
print 'One character ~ many characters:'
print '================================'

print '(1) ~ (n) =', l    ~ right
print '(1) ~ (n) =', r    ~ right

print ''
print 'Many characters ~ one character:'
print '================================'

print '(n) ~ (1) =', left ~ l
print '(n) ~ (1) =', left ~ r

print ''
print 'Many characters ~ many characters:'
print '=================================='

print '(n) ~ (n) =', left ~ right

EXPECTED_OUTPUT:
One character ~ one character:
==============================
(1) ~ (1) = ll
(1) ~ (1) = lr
(1) ~ (1) = rr

One character ~ many characters:
================================
(1) ~ (n) = l-right
(1) ~ (n) = r-right

Many characters ~ one character:
================================
(n) ~ (1) = left-l
(n) ~ (1) = left-r

Many characters ~ many characters:
==================================
(n) ~ (n) = left--right
-------------------------------------------------------------------------------

TEST "Use one-character strings as map key"

text = 'abcd'
x    = {}

x{text[0]} = 10
x{text[1]} = 20
x{text[2]} = 30
x{text[3]} = 40

print x

print x{text[0]}
print x{text[1]}
print x{text[2]}
print x{text[3]}

EXPECTED_OUTPUT:
{'a': 10, 'b': 20, 'c': 30, 'd': 40}
10
20
30
40
-------------------------------------------------------------------------------

TEST "Print formatted string"

x = 1
y = 'two'
z = true

print ``
print `Just text without any placeholder.`
print `${x}`
print `${x}${x}${x}`
print `x = ${x}`
print `(x,y,z) = (${x},${y},${z})`
print `I can still render '$' sign.`
print `prefix_${y}`

EXPECTED_OUTPUT:

Just text without any placeholder.
1
111
x = 1
(x,y,z) = (1,two,true)
I can still render '$' sign.
prefix_two
-------------------------------------------------------------------------------

TEST "Format string into variable"

function renderMessage(x, y, z) -> rv
  rv = `Hello from renderMessage(${x}, ${y}, ${z})!`
endfunction

print renderMessage(1, 'abc', true)
print renderMessage(2, 'xyz', false)

EXPECTED_OUTPUT:
Hello from renderMessage(1, abc, true)!
Hello from renderMessage(2, xyz, false)!
-------------------------------------------------------------------------------

TEST "Unterminated ${...} placeholder"

x = 1234
print `x = ${x{`

EXPECTED_ERROR:
./temp/source.mold:3:17: error: unterminated ${...} placeholder
-------------------------------------------------------------------------------

TEST "Unterminated string format"

print `Hello Mold

EXPECTED_ERROR:
./temp/source.mold:4:1: error: unterminated string
-------------------------------------------------------------------------------

TEST "Undeclared variable inside string format"
x = 1234
print `${y}`

EXPECTED_ERROR:
./temp/source.mold:2:13: error: 'y' was not declared in this scope
-------------------------------------------------------------------------------
