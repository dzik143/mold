TEST "Simple and/or"
print 'true and true gives' , true and true
print 'true and false gives', true and false
print 'false and true gives', false and true
print 'false and false gives', false and false

print 'true or true gives' , true or true
print 'true or false gives', true or false
print 'false or true gives', false or true
print 'false or false gives', false or false

EXPECTED_OUTPUT:
true and true gives true
true and false gives false
false and true gives false
false and false gives false
true or true gives true
true or false gives true
false or true gives true
false or false gives false
--------------------------------------------------------------------------------

TEST "Simple if (integer)"
x = 10

if x is 0
  print x, 'is 0: true'
else
  print x, 'is 0: false'
endif

if x isnt 0
  print x, 'isnt 0: true'
else
  print x, 'isnt 0: false'
endif

if x is 10
  print x, 'is 10: true'
else
  print x, 'is 10: false'
endif

if x < 0
  print x, '< 0: true'
else
  print x, '< 0: false'
endif

if x > 0
  print x, '> 0: true'
else
  print x, '> 0: false'
endif

if x <= 0
  print x, '<= 0: true'
else
  print x, '<= 0: false'
endif

if x >= 0
  print x, '>= 0: true'
else
  print x, '>= 0: false'
endif

if x <= 10
  print x, '<= 10: true'
else
  print x, '<= 10: false'
endif

if x >= 10
  print x, '>= 10: true'
else
  print x, '>= 10: false'
endif

EXPECTED_OUTPUT:
10 is 0: false
10 isnt 0: true
10 is 10: true
10 < 0: false
10 > 0: true
10 <= 0: false
10 >= 0: true
10 <= 10: true
10 >= 10: true
-------------------------------------------------------------------------------

TEST "Simple if (float)"
x = 3.4

if x is 1.2
  print x, 'is 1.2: true'
else
  print x, 'is 1.2: false'
endif

if x isnt 1.2
  print x, 'isnt 1.2: true'
else
  print x, 'isnt 1.2: false'
endif

if x is 3.4
  print x, 'is 3.4: true'
else
  print x, 'is 3.4: false'
endif

if x < 1.2
  print x, '< 1.2: true'
else
  print x, '< 1.2: false'
endif

if x > 1.2
  print x, '> 1.2: true'
else
  print x, '> 1.2: false'
endif

if x <= 1.2
  print x, '<= 1.2: true'
else
  print x, '<= 1.2: false'
endif

if x >= 1.2
  print x, '>= 1.2: true'
else
  print x, '>= 1.2: false'
endif

if x <= 3.4
  print x, '<= 3.4: true'
else
  print x, '<= 3.4: false'
endif

if x >= 3.4
  print x, '>= 3.4: true'
else
  print x, '>= 3.4: false'
endif

EXPECTED_OUTPUT:
3.400000 is 1.2: false
3.400000 isnt 1.2: true
3.400000 is 3.4: true
3.400000 < 1.2: false
3.400000 > 1.2: true
3.400000 <= 1.2: false
3.400000 >= 1.2: true
3.400000 <= 3.4: true
3.400000 >= 3.4: true
-------------------------------------------------------------------------------

TEST "If with multiple conditions"

function checkInRange(x, xMin, xMax)
  if (x >= xMin) and (x <= xMax)
    print 'Number', x, 'is in range <', xMin, ',', xMax, '>'
  else
    print 'Number', x, 'is NOT in range <', xMin, ',', xMax, '>'
  endif

endfunction

function checkOutOfRange(x, xMin, xMax)
  if (x < xMin) or (x > xMax)
    print 'Number', x, 'is out of range <', xMin, ',', xMax, '>'
  else
    print 'Number', x, 'is NOT out of range <', xMin, ',', xMax, '>'
  endif
endfunction

# Test X and Y condition
print 'X and Y test'
print '============'
checkInRange(1,   1, 10)
checkInRange(-10, 1, 10)
checkInRange(11,  1, 10)

# Test X or Y condition
print 'X or Y test'
print '==========='
checkOutOfRange(1,   1, 10)
checkOutOfRange(-10, 1, 10)
checkOutOfRange(11,  1, 10)


EXPECTED_OUTPUT:
X and Y test
============
Number 1 is in range < 1 , 10 >
Number -10 is NOT in range < 1 , 10 >
Number 11 is NOT in range < 1 , 10 >
X or Y test
===========
Number 1 is NOT out of range < 1 , 10 >
Number -10 is out of range < 1 , 10 >
Number 11 is out of range < 1 , 10 >
-------------------------------------------------------------------------------

TEST "Long and/or chains"

if true or true or true or true or true or true or true
  print 'true or true or true or ... is true'
else
  print 'true or true or true or ... is false'
endif

if false or false or false or false or false or false
  print 'false or false or false or ... is true'
else
  print 'false or false or false or ... is false'
endif

if false and true and true and true and true and true
  print 'false and true and true and ... is true'
else
  print 'false and true and true and ... is false'
endif

if true and true and true and true and true and false
  print 'true and true ... and false is true'
else
  print 'true and true ... and false is false'
endif

x = 3
if (x is 1) or (x is 2) or (x is 3) or (x is 4)
  print 'x is 1 or 2 or 3 or 4 is true'
else
  print 'x is 1 or 2 or 3 or 4 false'
endif

if (x is 1) and (x is 2) and (x is 3) and (x is 4)
  print 'x is 1 and 2 and 3 and 4 is true'
else
  print 'x is 1 and 2 and 3 and 4 is false'
endif

EXPECTED_OUTPUT:
true or true or true or ... is true
false or false or false or ... is false
false and true and true and ... is false
true and true ... and false is false
x is 1 or 2 or 3 or 4 is true
x is 1 and 2 and 3 and 4 is false
-------------------------------------------------------------------------------
TEST "IF-ELIF-ELIF-ELIF-...ELSE-ENDIF chain"

function foo(x)
  if x is 1
    print 'x is 1'
  elif x is 2
    print 'x is 2'
  elif x is 3
    print 'x is 3'
  elif x is 4
    print 'x is 4'
  elif x is 5
    print 'x is 5'
  else
    print 'x is something else'
  endif
endfunction

foo(1)
foo(2)
foo(3)
foo(4)
foo(5)
foo(6)

EXPECTED_OUTPUT:
x is 1
x is 2
x is 3
x is 4
x is 5
x is something else
-------------------------------------------------------------------------------

TEST "Bug: treat undefined as true #1"

function foo() -> rv
  x  = []
  rv = x[0] # rv is undefined
endfunction

if foo() is undefined
  print 'foo() is neither true nor false'
elif foo() is true
  print 'foo() is true'
elif foo() is false
  print 'foo() is false'
endif

# These comparison should generate runtime error now.
#if foo() isnt true
#  print 'foo() isnt true'
#endif

#if foo() isnt false
#  print 'foo() isnt false'
#endif

EXPECTED_OUTPUT:
foo() is neither true nor false
-------------------------------------------------------------------------------

TEST "Bug: treat undefined as true #2"

function foo() -> rv
  x  = []
  rv = x[0] # rv is undefined
endfunction

if foo() is true
  print 'foo() is true'
elif foo() is false
  print 'foo() is false'
endif

# TODO: Review it. Should be:
# - runtime error: not comparable
# or
# - runtime error: boolean expected

EXPECTED_ERROR:
runtime error: not comparable
-------------------------------------------------------------------------------

TEST "Bug: signed integer GE"

targetId = -1

if targetId >= 0
  print 'Label already emited'
else
  print 'Label not emited yet'
endif

EXPECTED_OUTPUT:
Label not emited yet
-------------------------------------------------------------------------------

TEST "Bug: if (<string> isnt <string>) and (<string> isnt <string>)"
rvType   = 'undefined'
procName = 'start'

if (rvType isnt 'undefined') and (procName isnt 'constructor')
  print 'There is return value defined'
else
  print 'There is NO return value defined'
endif

EXPECTED_OUTPUT:
There is NO return value defined
-------------------------------------------------------------------------------

TEST "Bug: Broken IF node after dead code elimination"

function foo(x)
  if x is 1
  elif x is 2
  endif
endfunction

foo(4)
print 'OK!'

EXPECTED_OUTPUT:
OK!
-------------------------------------------------------------------------------
TEST "Merge variable type from if branches"

function foo(x)
  if x <= 4
    limitedX = x
  else
    limitedX = 4
  endif

  print 'foo(', x, ') =', limitedX
endfunction

foo(0)
foo(1)
foo(2)
foo(3)
foo(4)
foo(5)
foo(6)
foo(7)
foo(8)

EXPECTED_OUTPUT:
foo( 0 ) = 0
foo( 1 ) = 1
foo( 2 ) = 2
foo( 3 ) = 3
foo( 4 ) = 4
foo( 5 ) = 4
foo( 6 ) = 4
foo( 7 ) = 4
foo( 8 ) = 4
-------------------------------------------------------------------------------

TEST "Bug: Incorectly mask variant by machine bool32 (OBSOLETE)"

/*
function foo(x)
  if x is true
    print 'foo(): true'
  else
    print 'foo(): false'
  endif

  x = true
endfunction

foo(true)
foo(false)

EXPECTEDDDD_OOOOUTPUT:
foo(): true
foo(): false
*/

print 'OK'

EXPECTED_OUTPUT:
OK
-------------------------------------------------------------------------------

TEST "Switch like if chain #1"

function foo(x)
  if x is 1
    print x, 'is 1'
  elif x is 2
    print x, 'is 2'

  elif (x > 2) and (x < 10)
    print x, 'in (2, 10)'
  else
    print 'default'
  endif
endfunction

foo(0)
foo(1)
foo(2)
foo(3)
foo(9)
foo(10)
foo(123)

EXPECTED_OUTPUT:
default
1 is 1
2 is 2
3 in (2, 10)
9 in (2, 10)
default
default
-------------------------------------------------------------------------------

TEST "Multiline if #1"

function foo(x)
  if ((x is 1) or
      (x is 2) or
      (x is 3))
    print x, 'is in {1, 2, 3}'
  else
    print x, 'is NOT in {1, 2, 3}'
  endif
endfunction

foo(0)
foo(1)
foo(2)
foo(3)
foo(4)

EXPECTED_OUTPUT:
0 is NOT in {1, 2, 3}
1 is in {1, 2, 3}
2 is in {1, 2, 3}
3 is in {1, 2, 3}
4 is NOT in {1, 2, 3}
-------------------------------------------------------------------------------

TEST "Multiline if #2"

function foo(x)
  if ((x is 1) or
      (x is 2) or (x is 3))
    print x, 'is in {1, 2, 3}'
  else
    print x, 'is NOT in {1, 2, 3}'
  endif
endfunction

foo(0)
foo(1)
foo(2)
foo(3)
foo(4)

EXPECTED_OUTPUT:
0 is NOT in {1, 2, 3}
1 is in {1, 2, 3}
2 is in {1, 2, 3}
3 is in {1, 2, 3}
4 is NOT in {1, 2, 3}
-------------------------------------------------------------------------------

TEST "Multiline if #3"

function foo(x)
  if ((x is 1) or (x is 2) or
      (x is 3))
    print x, 'is in {1, 2, 3}'
  else
    print x, 'is NOT in {1, 2, 3}'
  endif
endfunction

foo(0)
foo(1)
foo(2)
foo(3)
foo(4)

EXPECTED_OUTPUT:
0 is NOT in {1, 2, 3}
1 is in {1, 2, 3}
2 is in {1, 2, 3}
3 is in {1, 2, 3}
4 is NOT in {1, 2, 3}
-------------------------------------------------------------------------------

TEST "Bug: Variant param incorectly reduced to primitive"

function foo(x)
  if typeof(x) is 'integer'
    if x < 256
      print x, 'is integer below 256'
    else
      print x, 'is integer above or equal to 256'
    endif
  else
    print x, 'is NOT integer'
  endif
endfunction

foo(10)
foo(1000)
foo(3.14)
foo('text')
foo(true)
foo([])
foo({})

EXPECTED_OUTPUT:
10 is integer below 256
1000 is integer above or equal to 256
3.140000 is NOT integer
text is NOT integer
true is NOT integer
[] is NOT integer
{} is NOT integer
-------------------------------------------------------------------------------
