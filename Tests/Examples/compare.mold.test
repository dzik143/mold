TEST "Compare - integer"

x = 1
y = 5

# compare x with x
print 'x op x'
print x, 'is  ' , x, '=', x is   x
print x, 'isnt' , x, '=', x isnt x
print x, '<   ' , x, '=', x <    x
print x, '>   ' , x, '=', x >    x
print x, '<=  ' , x, '=', x <=   x
print x, '>=  ' , x, '=', x >=   x

# compare x with y
print ''
print 'x op y'
print x, 'is  ' , y, '=', x is   y
print x, 'isnt' , y, '=', x isnt y
print x, '<   ' , y, '=', x <    y
print x, '>   ' , y, '=', x >    y
print x, '<=  ' , y, '=', x <=   y
print x, '>=  ' , y, '=', x >=   y

# compare y with x
print ''
print 'y op x'
print y, 'is  ' , x, '=', y is   x
print y, 'isnt' , x, '=', y isnt x
print y, '<   ' , x, '=', y <    x
print y, '>   ' , x, '=', y >    x
print y, '<=  ' , x, '=', y <=   x
print y, '>=  ' , x, '=', y >=   x

# compare y with y
print ''
print 'y op y'
print y, 'is  ' , y, '=', y is   y
print y, 'isnt' , y, '=', y isnt y
print y, '<   ' , y, '=', y <    y
print y, '>   ' , y, '=', y >    y
print y, '<=  ' , y, '=', y <=   y
print y, '>=  ' , y, '=', y >=   y

EXPECTED_OUTPUT:
x op x
1 is   1 = true
1 isnt 1 = false
1 <    1 = false
1 >    1 = false
1 <=   1 = true
1 >=   1 = true

x op y
1 is   5 = false
1 isnt 5 = true
1 <    5 = true
1 >    5 = false
1 <=   5 = true
1 >=   5 = false

y op x
5 is   1 = false
5 isnt 1 = true
5 <    1 = false
5 >    1 = true
5 <=   1 = false
5 >=   1 = true

y op y
5 is   5 = true
5 isnt 5 = false
5 <    5 = false
5 >    5 = false
5 <=   5 = true
5 >=   5 = true
-------------------------------------------------------------------------------

TEST "Compare - float'

x = 1.0
y = 2.3

# compare x with x
print 'x op x'
print x, 'is  ' , x, '=', x is   x
print x, 'isnt' , x, '=', x isnt x
print x, '<   ' , x, '=', x <    x
print x, '>   ' , x, '=', x >    x
print x, '<=  ' , x, '=', x <=   x
print x, '>=  ' , x, '=', x >=   x

# compare x with y
print ''
print 'x op y'
print x, 'is  ' , y, '=', x is   y
print x, 'isnt' , y, '=', x isnt y
print x, '<   ' , y, '=', x <    y
print x, '>   ' , y, '=', x >    y
print x, '<=  ' , y, '=', x <=   y
print x, '>=  ' , y, '=', x >=   y

# compare y with x
print ''
print 'y op x'
print y, 'is  ' , x, '=', y is   x
print y, 'isnt' , x, '=', y isnt x
print y, '<   ' , x, '=', y <    x
print y, '>   ' , x, '=', y >    x
print y, '<=  ' , x, '=', y <=   x
print y, '>=  ' , x, '=', y >=   x

# compare y with y
print ''
print 'y op y'
print y, 'is  ' , y, '=', y is   y
print y, 'isnt' , y, '=', y isnt y
print y, '<   ' , y, '=', y <    y
print y, '>   ' , y, '=', y >    y
print y, '<=  ' , y, '=', y <=   y
print y, '>=  ' , y, '=', y >=   y

EXPECTED_OUTPUT:
x op x
1.000000 is   1.000000 = true
1.000000 isnt 1.000000 = false
1.000000 <    1.000000 = false
1.000000 >    1.000000 = false
1.000000 <=   1.000000 = true
1.000000 >=   1.000000 = true

x op y
1.000000 is   2.300000 = false
1.000000 isnt 2.300000 = true
1.000000 <    2.300000 = true
1.000000 >    2.300000 = false
1.000000 <=   2.300000 = true
1.000000 >=   2.300000 = false

y op x
2.300000 is   1.000000 = false
2.300000 isnt 1.000000 = true
2.300000 <    1.000000 = false
2.300000 >    1.000000 = true
2.300000 <=   1.000000 = false
2.300000 >=   1.000000 = true

y op y
2.300000 is   2.300000 = true
2.300000 isnt 2.300000 = false
2.300000 <    2.300000 = false
2.300000 >    2.300000 = false
2.300000 <=   2.300000 = true
2.300000 >=   2.300000 = true
-------------------------------------------------------------------------------

TEST "Compare - string (one character)'

x = 'a'
y = 'z'

# compare x with x
print 'x op x'
print x, 'is  ' , x, '=', x is   x
print x, 'isnt' , x, '=', x isnt x

# compare x with y
print ''
print 'x op y'
print x, 'is  ' , y, '=', x is   y
print x, 'isnt' , y, '=', x isnt y

# compare y with x
print ''
print 'y op x'
print y, 'is  ' , x, '=', y is   x
print y, 'isnt' , x, '=', y isnt x

# compare y with y
print ''
print 'y op y'
print y, 'is  ' , y, '=', y is   y
print y, 'isnt' , y, '=', y isnt y

EXPECTED_OUTPUT:
x op x
a is   a = true
a isnt a = false

x op y
a is   z = false
a isnt z = true

y op x
z is   a = false
z isnt a = true

y op y
z is   z = true
z isnt z = false
-------------------------------------------------------------------------------

TEST "Compare - string (equal length)"

x = 'abcd'
y = 'abce'

# compare x with x
print 'x op x'
print x, 'is  ' , x, '=', x is   x
print x, 'isnt' , x, '=', x isnt x

# compare x with y
print ''
print 'x op y'
print x, 'is  ' , y, '=', x is   y
print x, 'isnt' , y, '=', x isnt y

# compare y with x
print ''
print 'y op x'
print y, 'is  ' , x, '=', y is   x
print y, 'isnt' , x, '=', y isnt x

# compare y with y
print ''
print 'y op y'
print y, 'is  ' , y, '=', y is   y
print y, 'isnt' , y, '=', y isnt y

EXPECTED_OUTPUT:
x op x
abcd is   abcd = true
abcd isnt abcd = false

x op y
abcd is   abce = false
abcd isnt abce = true

y op x
abce is   abcd = false
abce isnt abcd = true

y op y
abce is   abce = true
abce isnt abce = false
-------------------------------------------------------------------------------

TEST "Compare - string (different length)"

x = 'abc'
y = 'abca'

# compare x with x
print 'x op x'
print x, 'is  ' , x, '=', x is   x
print x, 'isnt' , x, '=', x isnt x

# compare x with y
print ''
print 'x op y'
print x, 'is  ' , y, '=', x is   y
print x, 'isnt' , y, '=', x isnt y

# compare y with x
print ''
print 'y op x'
print y, 'is  ' , x, '=', y is   x
print y, 'isnt' , x, '=', y isnt x

# compare y with y
print ''
print 'y op y'
print y, 'is  ' , y, '=', y is   y
print y, 'isnt' , y, '=', y isnt y

EXPECTED_OUTPUT:
x op x
abc is   abc = true
abc isnt abc = false

x op y
abc is   abca = false
abc isnt abca = true

y op x
abca is   abc = false
abca isnt abc = true

y op y
abca is   abca = true
abca isnt abca = false
-------------------------------------------------------------------------------

TEST "Compare - boolean'

x = true
y = false

# compare x with x
print 'x op x'
print x, 'is  ' , x, '=', x is   x
print x, 'isnt' , x, '=', x isnt x

# compare x with y
print ''
print 'x op y'
print x, 'is  ' , y, '=', x is   y
print x, 'isnt' , y, '=', x isnt y

# compare y with x
print ''
print 'y op x'
print y, 'is  ' , x, '=', y is   x
print y, 'isnt' , x, '=', y isnt x

# compare y with y
print ''
print 'y op y'
print y, 'is  ' , y, '=', y is   y
print y, 'isnt' , y, '=', y isnt y

EXPECTED_OUTPUT:
x op x
true is   true = true
true isnt true = false

x op y
true is   false = false
true isnt false = true

y op x
false is   true = false
false isnt true = true

y op y
false is   false = true
false isnt false = false
-------------------------------------------------------------------------------

TEST "Compare - arrays (weak compare only)"

x = []
y = [1,2,3]

# compare x with x
print 'x op x'
print x, 'is  ' , x, '=', x is   x
print x, 'isnt' , x, '=', x isnt x

# compare x with y
print ''
print 'x op y'
print x, 'is  ' , y, '=', x is   y
print x, 'isnt' , y, '=', x isnt y

# compare y with x
print ''
print 'y op x'
print y, 'is  ' , x, '=', y is   x
print y, 'isnt' , x, '=', y isnt x

# compare y with y
print ''
print 'y op y'
print y, 'is  ' , y, '=', y is   y
print y, 'isnt' , y, '=', y isnt y

EXPECTED_OUTPUT:
x op x
[] is   [] = true
[] isnt [] = false

x op y
[] is   [1, 2, 3] = false
[] isnt [1, 2, 3] = true

y op x
[1, 2, 3] is   [] = false
[1, 2, 3] isnt [] = true

y op y
[1, 2, 3] is   [1, 2, 3] = true
[1, 2, 3] isnt [1, 2, 3] = false
-------------------------------------------------------------------------------

TEST "Compare - maps (weak compare only)"

x = {}
y = {'x': 1, 'y': 2, 'z': 3}

# compare x with x
print 'x op x'
print x, 'is  ' , x, '=', x is   x
print x, 'isnt' , x, '=', x isnt x

# compare x with y
print ''
print 'x op y'
print x, 'is  ' , y, '=', x is   y
print x, 'isnt' , y, '=', x isnt y

# compare y with x
print ''
print 'y op x'
print y, 'is  ' , x, '=', y is   x
print y, 'isnt' , x, '=', y isnt x

# compare y with y
print ''
print 'y op y'
print y, 'is  ' , y, '=', y is   y
print y, 'isnt' , y, '=', y isnt y

EXPECTED_OUTPUT:
x op x
{} is   {} = true
{} isnt {} = false

x op y
{} is   {'x': 1, 'y': 2, 'z': 3} = false
{} isnt {'x': 1, 'y': 2, 'z': 3} = true

y op x
{'x': 1, 'y': 2, 'z': 3} is   {} = false
{'x': 1, 'y': 2, 'z': 3} isnt {} = true

y op y
{'x': 1, 'y': 2, 'z': 3} is   {'x': 1, 'y': 2, 'z': 3} = true
{'x': 1, 'y': 2, 'z': 3} isnt {'x': 1, 'y': 2, 'z': 3} = false
-------------------------------------------------------------------------------

TEST "Compare array items"

const A = [-4, 1, 8]

print 'A[0] o 2'
print '========'
print A[0], '<'    , 2, 'gives', A[0] < 2
print A[0], '>'    , 2, 'gives', A[0] > 2
print A[0], '<='   , 2, 'gives', A[0] <= 2
print A[0], '>='   , 2, 'gives', A[0] >= 2
print A[0], 'is'   , 2, 'gives', A[0] is 2
print A[0], 'isnt' , 2, 'gives', A[0] isnt 2

print ''
print 'A[0] o -4'
print '=========='
print A[0], '<'    , -4, 'gives', A[0] < -4
print A[0], '>'    , -4, 'gives', A[0] > -4
print A[0], '<='   , -4, 'gives', A[0] <= -4
print A[0], '>='   , -4, 'gives', A[0] >= -4
print A[0], 'is'   , -4, 'gives', A[0] is -4
print A[0], 'isnt' , -4, 'gives', A[0] isnt -4

print ''
print '2 o A[0]'
print '========'
print 2, '<'    , A[0], 'gives', 2 < A[0]
print 2, '>'    , A[0], 'gives', 2 > A[0]
print 2, '<='   , A[0], 'gives', 2 <= A[0]
print 2, '>='   , A[0], 'gives', 2 >= A[0]
print 2, 'is'   , A[0], 'gives', 2 is A[0]
print 2, 'isnt' , A[0], 'gives', 2 isnt A[0]

print ''
print '-4 o A[0]'
print '========='
print -4, '<'    , A[0], 'gives', -4 < A[0]
print -4, '>'    , A[0], 'gives', -4 > A[0]
print -4, '<='   , A[0], 'gives', -4 <= A[0]
print -4, '>='   , A[0], 'gives', -4 >= A[0]
print -4, 'is'   , A[0], 'gives', -4 is A[0]
print -4, 'isnt' , A[0], 'gives', -4 isnt A[0]

print ''
print 'A[0] o A[2]'
print '==========='
print A[0], '<'    , A[2], 'gives', A[0] < A[2]
print A[0], '>'    , A[2], 'gives', A[0] > A[2]
print A[0], '<='   , A[2], 'gives', A[0] <= A[2]
print A[0], '>='   , A[2], 'gives', A[0] >= A[2]
print A[0], 'is'   , A[2], 'gives', A[0] is A[2]
print A[0], 'isnt' , A[2], 'gives', A[0] isnt A[2]

EXPECTED_OUTPUT:
A[0] o 2
========
-4 < 2 gives true
-4 > 2 gives false
-4 <= 2 gives true
-4 >= 2 gives false
-4 is 2 gives false
-4 isnt 2 gives true

A[0] o -4
==========
-4 < -4 gives false
-4 > -4 gives false
-4 <= -4 gives true
-4 >= -4 gives true
-4 is -4 gives true
-4 isnt -4 gives false

2 o A[0]
========
2 < -4 gives false
2 > -4 gives true
2 <= -4 gives false
2 >= -4 gives true
2 is -4 gives false
2 isnt -4 gives true

-4 o A[0]
=========
-4 < -4 gives false
-4 > -4 gives false
-4 <= -4 gives true
-4 >= -4 gives true
-4 is -4 gives true
-4 isnt -4 gives false

A[0] o A[2]
===========
-4 < 8 gives true
-4 > 8 gives false
-4 <= 8 gives true
-4 >= 8 gives false
-4 is 8 gives false
-4 isnt 8 gives true
-------------------------------------------------------------------------------

TEST "Compare dynamic type"

function foo(x)
  if x is string
    if x is 'abcd'
      print 'x is abcd'
    endif

  elif x is integer
    if x is 1234
      print 'x is 1234'
    endif
  endif
endfunction

foo('xyz')
foo('abcd')
foo(1234)
foo(999)
foo(true)
foo(3.14)

EXPECTED_OUTPUT:
x is abcd
x is 1234
-------------------------------------------------------------------------------

TEST "Type mismatch: integer is float"

x = 1
y = 3.14
print x is y

EXPECTED_ERROR:
./temp/source.mold:4:13: error: attemp to assign float to integer
-------------------------------------------------------------------------------

TEST "Type mismatch: integer < float"

x = 1
y = 3.14
print x < y

EXPECTED_ERROR:
./temp/source.mold:4:12: error: attemp to assign float to integer
-------------------------------------------------------------------------------

TEST "Type mismatch: integer > float"

x = 1
y = 3.14
print x > y

EXPECTED_ERROR:
./temp/source.mold:4:12: error: attemp to assign float to integer
-------------------------------------------------------------------------------

TEST "Type mismatch: integer isnt string"

x = 1
y = 'text'
print x isnt y

EXPECTED_ERROR:
./temp/source.mold:4:15: error: attemp to assign string to integer
-------------------------------------------------------------------------------

TEST "Type mismatch: array is map"

x = []
y = {}
print x is y

EXPECTED_ERROR:
./temp/source.mold:4:13: error: attemp to assign map to array
-------------------------------------------------------------------------------
