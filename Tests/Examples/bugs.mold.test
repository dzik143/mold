TEST "Bug: Conditional method call inside for loop"

class Base
  method foo(x)
    print x, '!!! foo !!!'
  endmethod

  method bar(x)
    print x, 'bar'
  endmethod
endclass

base = new Base()

for idx in 0 .. 5
  print idx, 'begin'

  if (idx is 3)
    base.foo(idx)
  else
    base.bar(idx)
  endif

  print idx, 'end'
endfor

EXPECTED_OUTPUT:
0 begin
0 bar
0 end
1 begin
1 bar
1 end
2 begin
2 bar
2 end
3 begin
3 !!! foo !!!
3 end
4 begin
4 bar
4 end
-------------------------------------------------------------------------------
TEST "Bug: Not verified parameters push before die() call"

for idx in 0 .. 10
  print idx

  if idx is 99999
    die('error: unresolved call at address', idx)
  endif
endfor

EXPECTED_ERROR:
./temp/source.mold:6:50: error: built-in die function requires exactly 1 parameter(s), but 2 were passed
-------------------------------------------------------------------------------

TEST "Bug: Not cleaned retval after die() call"

for idx in 0 .. 10
  print idx

  if false
    die('error message')
  endif
endfor

EXPECTED_OUTPUT:
0
1
2
3
4
5
6
7
8
9
-------------------------------------------------------------------------------

TEST "Bug: Unset register while calling calloc in str() (TEMPORARY DISABLED!!!)"

print 'before loop'
for idx in 0 .. 1024
#  str(idx)
endfor
print 'after loop'

EXPECTED_OUTPUT:
before loop
after loop
-------------------------------------------------------------------------------
TEST "Bug: Crash on hash conflict"

x = {}
x{'SYMBOL_KIND_VAR_RETVAL'} = 1
print x{'SYMBOL_KIND_CLASS'}

EXPECTED_OUTPUT:
undefined
-------------------------------------------------------------------------------
TEST "Bug: Destroyed [rv], if used in params list: rv = foo(rv)"

function storeValue(box, idx, value)
  box[idx] = value
endfunction

function foo() -> rv
  rv = []
  for idx in 0 .. 10
    storeValue(rv, idx, idx)
  endfor
endfunction

print foo()

EXPECTED_OUTPUT:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
-------------------------------------------------------------------------------
TEST "Bug: Fake declaration brings to uninitialized variable"

function foo()
  if false
    x = 1
  endif
  print str(x)
endfunction

foo()
foo()

EXPECTED_ERROR:
./temp/source.mold:6:14: error: 'x' was not declared in this scope
-------------------------------------------------------------------------------
TEST "Bug: Undefined source ptr in add/x64 code"

x = []

for i in 0 .. 1024
  x[i] = i
endfor

for i in 0 .. 1024
  if x[i] isnt i
    die('error!')
  endif
endfor

print 'ok'

EXPECTED_OUTPUT:
ok
-------------------------------------------------------------------------------

TEST "Bug: Concatenation with str(len(x)) result"

x = 'AaaaaaaaaaaaaaaaaaaaaaaaaaaA'
y = 'XxxxxxxxxxxxxxxxxxxxxxxxxxxX>>> ' ~ str(len(x)) ~ ' <<<YyyyyyyyyyyyyyyyyyyyyyyyyyyY'
print y

EXPECTED_OUTPUT:
XxxxxxxxxxxxxxxxxxxxxxxxxxxX>>> 28 <<<YyyyyyyyyyyyyyyyyyyyyyyyyyyY
-------------------------------------------------------------------------------

TEST "Bug: Crash while releasing old array item"

x    = []
x[0] = {}
x[0] = 1234

y      = {}
y{'a'} = {}
y{'a'} = 5678

print 'x =', x
print 'y =', y

EXPECTED_OUTPUT:
x = [1234]
y = {'a': 5678}
-------------------------------------------------------------------------------
TEST "Bug: Destroy function params (OBSOLETE)"

#function foo(node)
#  node = node.next
#endfunction
#
#node = {'abcd': 1234}
#foo(node)
#print node
#
#EXPECTEDDDD_OOOOOUTPUT:
#{'abcd': 1234}
print 'obsolete'

EXPECTED_OUTPUT:
obsolete
-------------------------------------------------------------------------------
TEST "Bug: CSE fail #1 (insert __cse var in wrong scope)"

box = {}
buf = []

box{'len'} = 8
bufCnt     = box{'len'}

for idx in 0 .. bufCnt
  buf[idx] = box{'len'}
endfor

print buf

EXPECTED_OUTPUT:
[8, 8, 8, 8, 8, 8, 8, 8]
-------------------------------------------------------------------------------
TEST "Bug: AST cycle after dead code elimination"

class Parser
  method parse()
    _stack = []
    _idx_  = 0

    this.stackIdx = 1

    if false

    elif _idx_ is 0
      this.ret = _stack[this.stackIdx - 1]

    elif _idx_ is 1
      this.ret = _stack[this.stackIdx - 1]

    elif _idx_ is 2

    elif _idx_ is 3
      this.ret = _stack[this.stackIdx - 1]

    elif _idx_ is 4
    endif

    print 'OK!'
  endmethod
endclass

parser = new Parser()
parser.parse()

EXPECTED_OUTPUT:
OK!
-------------------------------------------------------------------------------

TEST "Bug: Treat unused variable as variant (and crash during destroy)
x = 1234
print 'OK!'

EXPECTED_OUTPUT:
OK!
-------------------------------------------------------------------------------

TEST "Bug: Broken code after CSE within different blocks"

x     = [{'value': 1234}]
obj   = {'idx': 0}
value = -1

for idx in 0 .. 10
  if typeof(x[obj.idx]) isnt 'undefined'
    if value is -1
      value = x[obj.idx].value
    endif
  endif
  obj.idx = obj.idx + 1
endfor

print obj
print value

EXPECTED_OUTPUT:
{'idx': 10}
1234
-------------------------------------------------------------------------------

TEST "Bug: Fake useless assign alert (dead code remove)"

function bar(name, idx)
  print 'bar(', name, idx, ')'
endfunction

function foo(opcode)
  paramIdx = 0

  if opcode is 1234
    bar('first', 0)
    paramIdx = paramIdx + 1
  endif

  for idx in 0 .. 10
    bar('next', paramIdx)
    paramIdx = paramIdx + 1
  endfor
endfunction

foo(1234)

EXPECTED_OUTPUT:
bar( first 0 )
bar( next 1 )
bar( next 2 )
bar( next 3 )
bar( next 4 )
bar( next 5 )
bar( next 6 )
bar( next 7 )
bar( next 8 )
bar( next 9 )
bar( next 10 )
-------------------------------------------------------------------------------

TEST "Bug: Overlapped parent field in interpreter (SKIPPED!)"
/*
class Test
  method foo(x)
    if x is 1
      parent = 1111
    else
      parent = 9999
    endif

    this.parent =

    print 'foo(', x, ') : this.parent =', this.parent
  endmethod
endclass

obj = new Test()

obj.foo(0)
obj.foo(1)
obj.foo(2)

EXPECTED ---- OUTPUT:
foo( 0 ) : this.parent = 9999
foo( 1 ) : this.parent = 1111
foo( 2 ) : this.parent = 9999
*/

EXPECTED_OUTPUT:
-------------------------------------------------------------------------------

TEST "Bug: Out of range while printing explicit variant type in translator (SKIPPED!)"
/*
x = []

# TODO: Handle if true case with -O1.
if false
  state = 0
endif

state = x[0]*/
print 'TODO'
# ./temp/source.mold:5:12: error: attempted to use 'state' as integer; it was used as variant before
EXPECTED_OUTPUT:
TODO
-------------------------------------------------------------------------------

TEST "Bug: Crash on unambiguous call parameter type"
function foo(x) -> rv
  rv = 2 * x
  x[0] = 1
endfunction

print foo(2)

EXPECTED_ERROR:
./temp/source.mold:3:6: error: attemp to assign array to integer
-------------------------------------------------------------------------------

TEST "Bug: incorrect type reduce to machine integer #1"

function foo(data, i)
  # keyId should be variant, because we don't know
  # types stored in data array.
  keyId = data[i]

  if keyId is defined
    # keyId should not be reduced to int32 here.
    data[keyId] = 1
  endif

  print 'keyId is', typeof(keyId)
endfunction

data = [null]

foo(data, 0)

EXPECTED_OUTPUT:
keyId is undefined
-------------------------------------------------------------------------------

TEST "Bug: incorrect type reduce to machine integer #2"

function foo(data, i)
  # We're going to use keyId as integer index, but
  # we got undefined variant at runtime.
  # Should fail on variant -> int conversion.
  # types stored in data array.
  keyId = data[i]

  # Use keyId as integer index.
  data[keyId] = 1234
endfunction

data = [null]
foo(data, 0)

# TODO: Handle code line at runtime.

EXPECTED_ERROR:
runtime error: integer expected
-------------------------------------------------------------------------------

TEST "Bug: Incorrect switch to variant arithmetic"

x   = {'0': 20}
idx = 0
acc = 10

acc = acc + x{str(idx)}

print acc

EXPECTED_OUTPUT:
30
-------------------------------------------------------------------------------

TEST "Bug: Broken stack after strings join"

function foo(x)
  children = [1, 2, 3]

  print 'prefix:' ~ x

  for values item in children
    params = []
    params[0] = 1234
    print params
  endfor
endfunction

foo('abcd')

EXPECTED_OUTPUT:
prefix:abcd
[1234]
[1234]
[1234]
-------------------------------------------------------------------------------

TEST "Bug: Broken shadow space before malloc"

class Base
  method foo(x)
    print 'Base::foo(', x, ')'
  endmethod
endclass

vars = []
obj  = new Base()

function bar(ip)
  global vars
  global obj

  const g_program = [[0]]

  code    = g_program
  codeCnt = len(g_program)

  item   = [1]
  opcode = 0

  print 'bar(' ~ ' ... ' ~ ')'

  obj.foo(item[0] + 1)

  if opcode is 0
    newArray = []
    vars[2]    = newArray
    vars[2][0] = 1234

    print 'vars[2] =', vars[2]
  endif
endfunction

box = []
bar(0)

EXPECTED_OUTPUT:
bar( ... )
Base::foo( 2 )
vars[2] = [1234]
-------------------------------------------------------------------------------

TEST "Bug: Broken sign extend while printing return value"

function foo(box) -> rv
  value = box.value
  rv    = -1

  print '(1) rv =', rv

  if rv isnt integer
    print '(2) rv isnt integer'
  endif

  if value < 3000
    print '(3) rv =', rv
    rv = value
    print '(4) rv =', rv
  endif

  print '(5) rv =', rv

  if rv isnt integer
    print '(6) rv isnt integer'
  endif
endfunction

box = {
  'value': 1234
}

print '(7) rv =', foo(box)

EXPECTED_OUTPUT:
(1) rv = -1
(3) rv = -1
(4) rv = 1234
(5) rv = 1234
(7) rv = 1234
-------------------------------------------------------------------------------

TEST "Bug: Invalid signed comparison in optimized jmp table for idx < minValue"

function foo(idx)
  if idx is 5
    print 'idx is 5'
  elif idx is 6
    print 'idx is 6'
  elif idx is 7
    print 'idx is 7'
  elif idx is 8
    print 'idx is 8'
  elif idx is 9
    print 'idx is 9'
  else
    print 'idx is something else'
  endif
endfunction

# Pass idx below minimal value.
# Should pass to default branch (otherwise).
foo(4)

EXPECTED_OUTPUT:
idx is something else
-------------------------------------------------------------------------------

TEST "Bug: Not destroyed variant when loading null into reused tmp var"

x = [1234]

tmp = x[0] + 1
print tmp

x[1] = null

print x

EXPECTED_OUTPUT:
1235
[1234, undefined]
-------------------------------------------------------------------------------

TEST "Bug: Removed MIR1 tmp, when both x and tmp are used."

a = [1234]

tmp = a[0] # BUG: Both x,tmp are used.
x   = tmp  # BUG: tmp should not be removed without rename.

print tmp, x

EXPECTED_OUTPUT:
1234 1234
-------------------------------------------------------------------------------
