TEST "Bug: Conditional method call inside for loop"

class Base
  method foo(x)
    print x, '!!! foo !!!'
  endmethod

  method bar(x)
    print x, 'bar'
  endmethod
endclass

base = new Base()

for idx in 0 .. 5
  print idx, 'begin'

  if (idx is 3)
    base.foo(idx)
  else
    base.bar(idx)
  endif

  print idx, 'end'
endfor

EXPECTED_OUTPUT:
0 begin
0 bar
0 end
1 begin
1 bar
1 end
2 begin
2 bar
2 end
3 begin
3 !!! foo !!!
3 end
4 begin
4 bar
4 end
-------------------------------------------------------------------------------
TEST "Bug: Not verified parameters push before die() call"

for idx in 0 .. 10
  print idx

  if idx is 99999
    die('error: unresolved call at address', idx)
  endif
endfor

EXPECTED_ERROR:
./temp/source.mold:6:50: error: built-in die function requires exactly 1 parameter(s), but 2 were passed
-------------------------------------------------------------------------------

TEST "Bug: Not cleaned retval after die() call"

for idx in 0 .. 10
  print idx

  if false
    die('error message')
  endif
endfor

EXPECTED_OUTPUT:
0
1
2
3
4
5
6
7
8
9
-------------------------------------------------------------------------------

TEST "Bug: Unset register while calling calloc in str()"

print 'before loop'
for idx in 0 .. 1024
  str(idx)
endfor
print 'after loop'

EXPECTED_OUTPUT:
before loop
after loop
-------------------------------------------------------------------------------
TEST "Bug: Crash on hash conflict"

x = {}
x['SYMBOL_KIND_VAR_RETVAL'] = 1
print x['SYMBOL_KIND_CLASS']

EXPECTED_OUTPUT:
undefined
-------------------------------------------------------------------------------
TEST "Bug: Destroyed [rv], if used in params list: rv = foo(rv)"

function storeValue(box, idx, value)
  box[idx] = value
endfunction

function foo() -> rv
  rv = []
  for idx in 0 .. 10
    storeValue(rv, idx, idx)
  endfor
endfunction

print foo()

EXPECTED_OUTPUT:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
-------------------------------------------------------------------------------
TEST "Bug: Fake declaration brings to uninitialized variable (SKIPPED!)"
/*
function foo()
  if false
    x = 1
  endif
  print str(x)
endfunction

foo()
foo()
*/

print 'undefined'
print 'undefined'
EXPECTED_OUTPUT:
undefined
undefined
-------------------------------------------------------------------------------
TEST "Bug: Undefined source ptr in add/x64 code"

x = []

for i in 0 .. 1024
  x[i] = i
endfor

for i in 0 .. 1024
  if x[i] isnt i
    die('error!')
  endif
endfor

print 'ok'

EXPECTED_OUTPUT:
ok
-------------------------------------------------------------------------------

TEST "Bug: Concatenation with str(len(x)) result"

x = 'AaaaaaaaaaaaaaaaaaaaaaaaaaaA'
y = 'XxxxxxxxxxxxxxxxxxxxxxxxxxxX>>> ' + str(len(x)) + ' <<<YyyyyyyyyyyyyyyyyyyyyyyyyyyY'
print y

EXPECTED_OUTPUT:
XxxxxxxxxxxxxxxxxxxxxxxxxxxX>>> 28 <<<YyyyyyyyyyyyyyyyyyyyyyyyyyyY
-------------------------------------------------------------------------------

TEST "Bug: Crash while releasing old array item"

x    = []
x[0] = {}
x[0] = 1234

y      = {}
y['a'] = {}
y['a'] = 5678

print 'x =', x
print 'y =', y

EXPECTED_OUTPUT:
x = [1234]
y = {'a': 5678}
-------------------------------------------------------------------------------
TEST "Bug: Destroy function params"

function foo(node)
  node = node.next
endfunction

node = {'abcd': 1234}
foo(node)
print node

EXPECTED_OUTPUT:
{'abcd': 1234}
-------------------------------------------------------------------------------
TEST "Bug: CSE fail #1 (insert __cse var in wrong scope)"

box = {}
buf = []

box['len'] = 8
bufCnt     = box['len']

for idx in 0 .. bufCnt
  buf[idx] = box['len']
endfor

print buf

EXPECTED_OUTPUT:
[8, 8, 8, 8, 8, 8, 8, 8]
-------------------------------------------------------------------------------
TEST "Bug: AST cycle after dead code elimination"

class Parser
  method parse()
    _stack = []
    _idx_  = 0

    this.stackIdx = 1

    if false

    elif _idx_ is 0
      this.ret = _stack[this.stackIdx - 1]

    elif _idx_ is 1
      this.ret = _stack[this.stackIdx - 1]

    elif _idx_ is 2

    elif _idx_ is 3
      this.ret = _stack[this.stackIdx - 1]

    elif _idx_ is 4
    endif

    print 'OK!'
  endmethod
endclass

parser = new Parser()
parser.parse()

EXPECTED_OUTPUT:
OK!
-------------------------------------------------------------------------------

TEST "Bug: Treat unused variable as variant (and crash during destroy)
x = 1234
print 'OK!'

EXPECTED_OUTPUT:
OK!
-------------------------------------------------------------------------------

TEST "Bug: Broken code after CSE within different blocks"

x     = [{'value': 1234}]
obj   = {'idx': 0}
value = -1

for idx in 0 .. 10
  if typeof(x[obj.idx]) isnt 'undefined'
    if value is -1
      value = x[obj.idx].value
    endif
  endif
  obj.idx = obj.idx + 1
endfor

print obj
print value

EXPECTED_OUTPUT:
{'idx': 10}
1234
-------------------------------------------------------------------------------

TEST "Bug: Fake useless assign alert (dead code remove)"

function bar(name, idx)
  print 'bar(', name, idx, ')'
endfunction

function foo(opcode)
  paramIdx = 0

  if opcode is 1234
    bar('first', 0)
    paramIdx = paramIdx + 1
  endif

  for idx in 0 .. 10
    bar('next', paramIdx)
    paramIdx = paramIdx + 1
  endfor
endfunction

foo(1234)

EXPECTED_OUTPUT:
bar( first 0 )
bar( next 1 )
bar( next 2 )
bar( next 3 )
bar( next 4 )
bar( next 5 )
bar( next 6 )
bar( next 7 )
bar( next 8 )
bar( next 9 )
bar( next 10 )
-------------------------------------------------------------------------------
