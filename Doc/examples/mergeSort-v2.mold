# https://en.wikipedia.org/wiki/Merge_sort
function mergeSort(m) -> rv
  if len(m) <= 1
    # Base case. A list of zero or one elements is sorted, by definition.
    # Just return the same array as is.
    rv = m

  else
    # Recursive case. First, divide the list into equal-sized sublists
    # consisting of the first half and second half of the list.
    left  = subarray(m, 0, n)
    right = subarray(m, n, -1)

    # Recursively sort both sublists.
    left  = mergeSort(left)
    right = mergeSort(right)

    # Then merge the now-sorted sublists.
    rv = merge(left, right)
  endif
endfunction

# In this example, the merge function merges the left and right sublists.
function merge(left, right) -> rv
  rv = []

  while left, right arent empty
    if left[0] <= right[0]
      append to rv values left[0]
      delete from left indexes 0

    else
      append to rv values right[0]
      delete from right indexes 0
    endif
  endwhile

  # Either left or right may have elements left; consume them.
  # (Only one of the following loops will actually be entered.)
  append to rv values ...left, ...right
endfunction
